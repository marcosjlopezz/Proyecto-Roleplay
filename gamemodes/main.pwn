#pragma option -d2
//#pragma warning disable 239

#include <a_samp>

#undef MAX_PLAYERS
#define MAX_PLAYERS 100

AntiAmx()
{
    new a[][] = {"Unarmed (Fist)", "Brass K"};
    #pragma unused a
}

#define IP_DB   "localhost"
#define USER_DB "root"
#define NAME_DB "server_db"
#define PASS_DB ""

#include <crashdetect>
#include <YSI-Includes\YSI\y_inline>
#include <YSI-Includes\YSI\y_va>
#include <YSI-Includes\YSI\y_stringhash>
#include <YSI-Includes\YSI\y_timers>
#include <YSI-Includes\YSI\y_vehicledata>
#include <a_mysql>
#include <a_mysql_yinline>
#include <streamer>
#include <sscanf2>
#include <Pawn.CMD>
#include <Pawn.Regex>
#include <Pawn.RakNet>
#include <interpolate_weather>
#include <mapandreas>
#define PP_SYNTAX_FOR_LIST
#include <PawnPlus>
#include <YSF>
#include <progress2>
#include <BustAim>
#include <eSelection>

#define SERVER_VERSION			"1.0"

#define SERVER_NAME				"Gamemode Roleplay"
#define SERVER_SHORT_NAME		"Gamemode"

#define SERVER_GAMEMODE			"Roleplay en Español"
#define SERVER_LANGUAGE			"Español - Spanish"
#define SERVER_WEBSITE			"www.sa-mp.mp"
#define SERVER_HOSTNAME 		"(ESP) "SERVER_NAME" |" //no pongan nada aca ya que el sv tiene sistema de hostname random

#define SERVER_COIN				"Gemas"

#define MAX_BAD_LOGIN_ATTEMPS 	3
#define REP_MULTIPLIER 			5
#define TIME_FOR_REP 			25 * 60000
#define REP_FOR_PAYDAY 			3
#define LOGIN_TIME 				180000

#define PRIMARY_COLOR 			"3CB9EB"
#define PRIMARY_COLOR2 			0x3CB9EBFF

#define PLAYER_ACTION_COLOR		0x00FBFFFF
#define	PLAYER_ENVIROMENT_COLOR 0xFF00FFFF

#define SILVER_COLOR 			"D1D1D1"
#define SILVER_COLOR2 			0xD1D1D1D1

#define RED_COLOR 				"EB0000"
#define RED_COLOR2 				0xEB0000FF

#define GREEN_COLOR 			"00FF87"
#define GREEN_COLOR2 			0x00FF87FF

#define BLUE_COLOR 				"00AFCD"
#define BLUE_COLOR2 			0x00AFCDFF

#define YELLOW_COLOR			"FFEB00"
#define YELLOW_COLOR2			0xFFEB00FF

#define ORANGE_COLOR			"FFB900"
#define ORANGE_COLOR2			0xFFB900FF

#define POLICE_COLOR 			"009BFF"
#define POLICE_COLOR2 			0x009BFFFF
#define POLICE_PLAYER_COLOR 	0x009BFF00

#define PLAYER_MECHANIC_COLOR	0x50505000

#define COLOR_FADE1 			0xE6E6E6E6
#define COLOR_FADE2 			0xC8C8C8C8
#define COLOR_FADE3 			0xAAAAAAAA
#define COLOR_FADE4 			0x8C8C8C8C
#define COLOR_FADE5 			0x6E6E6E6E
#define PLAYER_COLOR			0xCCCCCC00
#define SPECIAL_ACTION_PISSING 	68

#define MAX_NU_VEHICLES			2
#define MAX_NU_PROPERTIES		1 
#define MAX_NU_WORKS			1
#define MAX_NU_TOYS				1
#define MAX_NU_VOBJECTS			2

#define MAX_SU_VEHICLES  		4
#define MAX_SU_PROPERTIES 		3
#define MAX_SU_WORKS			3
#define MAX_SU_TOYS				5
#define MAX_SU_VOBJECTS			10

#define VIP_COINS_PRICE 		10
#define VIP_WORK_EXTRA_PAY 		1500
#define CHANGE_NAME_COINS_PRICE 10

#define GLOBAL_CHAT_PRICE		1
#define DEFAULT_ATM_MODELID		19324

#define HidePlayerDialog(%1)	ShowPlayerDialog(%1, -1, 0, " ", " ", " ", " ")
#define callbackp:%0(%1) 		forward %0(%1); public %0(%1)

#define Loop(%0,%1,%2)			for(new %0 = %2; %0 < %1; %0++)
#define LoopEx(%0,%1,%2)		for(new %0 = %2; %0 != %1; %0++)

#define IsPlayerLoggedIn(%0)		PlayerTemp[%0][pt_USER_LOGGED]
#define IsPlayerRegistered(%0)		PlayerTemp[%0][pt_USER_EXIST]

#define	pTemp(%0)[%1]				PlayerTemp[%0][%1]

#define GetPlayerWork(%0,%1)		PLAYER_WORKS[%0][%1][pwork_SET]
#define	GetPlayerWorkLevel(%0,%1)	PLAYER_WORKS[%0][%1][pwork_LEVEL]

#define	GetVehicleWork(%0)			WORK_VEHICLES[%0][work_vehicle_WORK]
#define IsValidWorkVehicle(%0)		WORK_VEHICLES[%0][work_vehicle_VALID]

#define gVehicle(%0)[%1]			GLOBAL_VEHICLES[%0][%1]

#define Query_Data					handle_db,QUERY_BUFFER,sizeof(QUERY_BUFFER)
#define Query_Data_Inline			handle_db,QUERY_BUFFER

#define	get_rows					cache_get_row_count
#define	reg_name					cache_get_value_name
#define	reg_int						cache_get_value_int
#define	reg_float					cache_get_value_float

new Notice_Textdraw_Format[] =
{
	"\
		-~n~\
	"
};

stock
	bool:server_loaded,
	MySQL:handle_db,
	rcon_pass,
	QUERY_BUFFER[6144],
	Float:New_User_Pos[4] = {-1422.548339, -288.349975, 14.148437, 135.0},
	Mechanic_Areas[1],
	Lumberjack_Area,
	Farmer_Area,
	Farmer_Vehicles_Area,
	Jail_Areas[4]
;

new //Sistema economia
	TRUCK_BONUS_PRICE = 15000
;

new RandomTipsMessages[][] =
{
	"Si tienes hambre puedes pedir un repartidor de comida",
	"Los mecanicos pueden hacer domicilios, /llamar mecanico",
	"Si no tienes un trailer para Trailero, lo puedes rentar",
	"Hay cajeros y puestos de comida en todos los trabajos"
};

new HostNames[][] =
{
	"Faccion Mecanicos",
	"Traficante",
	"Trailero",
	"Encargos de Piezas",
	"Optimized",
	"Policia",
	"Sistema Taser"
};

#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

main() {}

#define NEARS_PLAYERS_DISTANCE 4.0

enum 
{
	NEAR_PLAYERS_INV_GENERAL,
	NEAR_PLAYERS_POCKET_GIVE,
	NEAR_PLAYERS_POCKET_SELL,
	NEAR_PLAYERS_WEAPON_GIVE,
	NEAR_PLAYERS_WEAPON_SELL
};

forward CloseServer();
forward OnPlayerEnterInterior(playerid, index);
forward OnPlayerExitInterior(playerid, index);

enum
{
	CHEAT_WEAPON,
	CHEAT_AMMO,
	CHEAT_CAR_MOD,
	CHEAT_VEHICLE_SPEED_HACK,
	CHEAT_POS,
	CHEAT_TEXT_SPAMMER,
	CHEAT_COMMAND_SPAMMER,
	CHEAT_DEATH_SPAMMER,
	CHEAT_STATE_SPAMMER,
	CHEAT_VEHICLE_ENTER_SPAMMER,
	CHEAT_JETPACK,
	CHEAT_PLAYER_SPEED,
	CHEAT_PLAYER_HEALTH,
	CHEAT_PLAYER_ARMOUR,
	CHEAT_VEHICLE_HEALTH,
	CHEAT_PLAYER_VEHICLE_WORK, //Entra a un vehiculo que no es de su trabajo
	CHEAT_PLAYER_VEHICLE_DOORS,
	CHEAT_VEHICLE_NOFUEL,
	CHEAT_SPECTATE,
	CHEAT_UNDETECTED_WEAPON,
	CHEAT_DRIVE_BY,
	CHEAT_UNOCCUPIED_VEHICLE_TP,
	CHEAT_HIGH_POS,
	CHEAT_CAR_JACKING,
	CHEAT_FAKE_TRAILER_SYNC,
	CHEAT_DESTROY_VEHICLE,
	CHEAT_CBUG,
	CHEAT_AFKPOS,
	CHEAT_AIMBOT
}

enum e_ac_Info
{
	ac_Name[24],
	bool:ac_Enabled,
	bool:ac_Kick, // 1 = kickea, 0 = avisa a admins
	ac_Detections, //enviar aviso cuando llege a este num en los seg de abajo
	ac_Interval,
}
new ac_Info[][e_ac_Info] = /* Valores por defecto si no se carga de AC.txt */
{
	{"armas",					true, true,		1, 0},
	{"municion",				true, true,		1, 0},
	{"mod car",					true, true,		1, 0},
	{"vehicle speed",			true, true,		1, 0},
	{"pos",						true, false,	3, 10},
	{"text spammer",			true, true,		10, 5},
	{"command spammer",			true, true,		5, 5},
	{"death spammer",			true, false,	1, 0},
	{"state change spammer",	true, false,	1, 0},
	{"vehicle enter spammer",	true, false,	1, 0},
	{"jetpack",					true, true,		1, 0},
	{"player speed",			true, true,		1, 0},
	{"player health",			true, true,		1, 0},
	{"player armour",			true, true,		1, 0},
	{"vehicle health",			true, true,		1, 0},
	{"pwork != vwork",			true, true,		1, 0},
	{"enter closed vehicle",	true, false,	1, 0},
	{"vehicle nofuel cs",		true, false,	50, 10},
	{"player spectate",			true, false,	1, 0},
	{"pweapon != sweapon",		true, false,	1, 0},
	{"drive by",				true, false,	1, 0},
	{"unoccupied veh tp",		true, true,		1, 0},
	{"high pos",				true, true,		1, 0},
	{"car jacking",				true, true,		1, 0},
	{"fake trailer sync",		true, true,		1, 0},
	{"destroy vehicle",			true, false,	1, 0},
	{"cbug",					true, false,	1, 0},
	{"afk pos",					true, true,		1, 0},
	{"aimbot",					true, false,	1, 0}
};

enum e_PLAYER_AC_INFO
{
	p_ac_info_DETECTIONS,
	p_ac_info_LAST_DETECTION,
	p_ac_info_IMMUNITY, //gettime + seconds
}
new PLAYER_AC_INFO[MAX_PLAYERS][sizeof(ac_Info)][e_PLAYER_AC_INFO];

enum
{
	TYPE_LEGAL,
	TYPE_ILLEGAL,
}

enum
{
	DIALOG_REGISTER,
	DIALOG_REGISTER_EMAIL,
	DIALOG_GENDER,
	DIALOG_PASSWORD,
	DIALOG_INFO,
	DIALOG_CLOTHES,
	DIALOG_FOOD_PIZZA,
	DIALOG_FOOD_CLUCKIN,
	DIALOG_FOOD_BURGER,
	DIALOG_PLAYER_TOYS,
	DIALOG_PLAYER_TOY_MENU,
	DIALOG_PLAYER_TOY_EDIT_NAME,
	DIALOG_PLAYER_TOY_CONFIRMDELETE,
	DIALOG_PLAYER_TOY_EDIT_BONE,
	DIALOG_PLAYER_TOY_SELECT_BONE,
	DIALOG_PLAYER_TOY_COLOR_1,
	DIALOG_PLAYER_TOY_COLOR_2,
	DIALOG_PLAYER_TOY_DELETE_ALL,
	DIALOG_BANK,
	DIALOG_BANK_WITHDRAW,
	DIALOG_BANK_DEPOSIT,
	DIALOG_BANK_TRANSFER,
	DIALOG_BANK_TRANSFER_SEND,
	DIALOG_BANK_TRANSACTIONS,
	DIALOG_CREATE_BANK_ACCOUNT,
	DIALOG_247_LIST,
	DIALOG_PLAYER_POCKET,
	DIALOG_PLAYER_POCKET_OPTIONS,
	DIALOG_PLAYER_POCKET_DELETE_ALL,
	DIALOG_PHONE,
	DIALOG_PHONE_BOOK,
	DIALOG_PHONE_BOOK_ADD_NUMBER,
	DIALOG_PHONE_BOOK_ADD_NAME,
	DIALOG_PHONE_BOOK_OPTIONS,
	DIALOG_PHONE_BOOK_CHANGE_NAME,
	DIALOG_PHONE_BOOK_CONFIRM_DELET,
	DIALOG_PHONE_BOOK_DELETE_ALL,
	DIALOG_PHONE_CALL_NUMBER,
	DIALOG_PHONE_SMS_NUMBER,
	DIALOG_PHONE_SMS_MESSAGE,
	DIALOG_PHONE_BOOK_SEND_MESSAGE,
	DIALOG_PHONE_SENT_MESSAGES,
	DIALOG_PHONE_RECEIVED_MESSAGES,
	DIALOG_CONFIRM_BUY_PROPERTY,
	DIALOG_PLAYER_GPS,
	DIALOG_PLAYER_GPS_PLAYER,
	DIALOG_PLAYER_GPS_PLAYER_ADD,
	DIALOG_PLAYER_GPS_PLAYER_OPTION,
	DIALOG_PLAYER_GPS_CHANGE_NAME,
	DIALOG_PLAYER_GPS_CONFIRM_DELET,
	DIALOG_PLAYER_GPS_SITES,
	DIALOG_PLAYER_GPS_WORKS,
	DIALOG_PLAYER_GPS_DELETE_ALL,
	DIALOG_PLAYER_GPS_SITE_0,
	DIALOG_PLAYER_GPS_SITE_1,
	DIALOG_PLAYER_GPS_SITE_2,
	DIALOG_PLAYER_GPS_SITE_3,
	DIALOG_PLAYER_GPS_SITE_4,
	DIALOG_PLAYER_GPS_SITE_5,
	DIALOG_PLAYER_GPS_SITE_6,
	DIALOG_PLAYER_GPS_SITE_7,
	DIALOG_PLAYER_GPS_SITE_8,
	DIALOG_PLAYER_GPS_PROPERTIES,
	DIALOG_PLAYER_GPS_VEHICLES,
	DIALOG_PROPERTY_OPTIONS,
	DIALOG_PROPERTY_NAME,
	DIALOG_PROPERTY_BANK_SELL,
	DIALOG_PLAYER_MP3,
	DIALOG_BUY_VEHICLE,
	DIALOG_NOTARY,
	DIALOG_NOTARY_SELECT_PROPERTY,
	DIALOG_PROPERTY_SELL_PRICE,
	DIALOG_PROPERTY_SELL_TO_PLAYER,
	DIALOG_SELL_CONFIRM_PROPERTY,
	DIALOG_NOTARY_SELECT_VEHICLE,
	DIALOG_VEHICLE_BANK_SELL,
	DIALOG_VEHICLE_SELL_PRICE,
	DIALOG_VEHICLE_SELL_TO_PLAYER,
	DIALOG_SELL_CONFIRM_VEHICLE,
	DIALOG_SELECT_TRUCK_TYPE,
	DIALOG_TUNING_MENU_PART,
	DIALOG_TUNING_MENU_COMPONENT,
	DIALOG_MECHANIC_MENU,
	DIALOG_MECHANIC_REPAIR_PRICE,
	DIALOG_MECHANIC_COLOR_PRICE,
	DIALOG_MECHANIC_TUNING_PRICE,
	DIALOG_MECHANIC_PAINTJOB_PRICE,
	DIALOG_MECHANIC_REM_COM_PRICE,
	DIALOG_MECHANIC_ACCEPT,
	DIALOG_MECHANIC_SELECT_COL_SLOT,
	DIALOG_MECHANIC_SELECT_COLOR,
	DIALOG_MECHANIC_REMOVE_COMPONEN,
	DIALOG_TUNING_PAINTJOB,
	DIALOG_MECHANIC_LIST,
	DIALOG_MECHANIC_MODIFY,
	DIALOG_SELL_KIT,
	DIALOG_SEED_LIST,
	DIALOG_SEED_BUY,
	DIALOG_PLANT_PLANTS,
	DIALOG_PLAYER_WEAPONS,
	DIALOG_PLAYER_WEAPONS_OPTIONS,
	DIALOG_PLAYER_WEAPONS_DELETE_A,
	DIALOG_PLAYER_WEAPONS_DELETE,
	DIALOG_ANIMS,
	DIALOG_TRICKS_FOOD,
	DIALOG_TRICKS_MEDICINE,
	DIALOG_TRICKS_CANNABIS,
	DIALOG_TRICKS_CRACK,
	DIALOG_TRICKS_SU,
	DIALOG_TRICKS_WEAPON,
	DIALOG_VEHICLE_BOOT,
	DIALOG_VEHICLE_BOOT_DELETE_ALL,
	DIALOG_VEHICLE_BOOT_OPTIONS,
	DIALOG_VEHICLE_BOOT_DELETE,
	DIALOG_SELECT_POLICE_SKIN,
	DIALOG_POLICE_RADIOS,
	DIALOG_POLICE_LIST,
	DIALOG_POLICE_MODIFY,
	DIALOG_POLICE_EQUIPTMENT,
	DIALOG_POLICE_ARMOUR,
	DIALOG_POLICE_WEAPONS,
	DIALOG_HELP,
	DIALOG_HELP_GENERAL,
	DIALOG_HELP_INFO,
	DIALOG_HELP_CHARACTER,
	DIALOG_HELP_PROPERTIES,
	DIALOG_HELP_REPORT,
	DIALOG_HELP_VEHICLES,
	DIALOG_HELP_WORKS,
	DIALOG_HELP_CREWS,
	DIALOG_HELP_VIP,
	DIALOG_ADMIN_LIST,
	DIALOG_ADMIN_MODIFY,
	DIALOG_CHANGE_PASSWORD,
	DIALOG_CHANGE_PASSWORD_PASS,
	DIALOG_ANTI_CHEAT,
	DIALOG_ANTI_CHEAT_MODIFY,
	DIALOG_ANTI_CHEAT_MODIFY_DETECT,
	DIALOG_SHOP_ARTICLE_MODIFY,
	DIALOG_SHOP_ARTICLE_REMOVE,
	DIALOG_SHOP_ADD,
	DIALOG_SHOP_ADD_TEXT,
	DIALOG_SHOP_ADD_PRICE,
	DIALOG_CRANE_SELECT_VEHICLE,
	DIALOG_CREATE_CREW,
	DIALOG_CREATE_CREW_NAME,
	DIALOG_CREATE_CREW_COLOR,
	DIALOG_CREATE_CREW_CONFIRM,
	DIALOG_CREW_MENU,
	DIALOG_CREW_MEMBER_LIST,
	DIALOG_CREW_CHANGE_NAME,
	DIALOG_CREW_MEMBER_LIST_DELETE,
	DIALOG_CREW_CAST_MEMBER_CONFIRM,
	DIALOG_CREW_INVITE_RANK,
	DIALOG_CREW_INVITE_ACCEPT,
	DIALOG_CREW_RANKS,
	DIALOG_CREW_RANK_MODIFY,
	DIALOG_CREW_RANK_MODIFY_NAME,
	DIALOG_CREW_RANK_MODIFY_PERMISS,
	DIALOG_CREW_RANK_DELETE,
	DIALOG_CREW_RANK_DELETE_CONFIRM,
	DIALOG_CREW_RANK_CREATE,
	DIALOG_CREW_MODIFY_COLOR,
	DIALOG_CREW_DELETE,
	DIALOG_CREW_LEAVE,
	DIALOG_CREW_MODIFY_MEMBERS,
	DIALOG_CREW_MODIFY_MEMBER,
	DIALOG_CREW_PROPERTY_CONFIRM,
	DIALOG_CREW_LEAVE_TERRITORY,
	DIALOG_CREW_LEAVE_PROPERTY,
	DIALOG_POLICE_PENALTY,
	DIALOG_VIP_BUY,
	DIALOG_VIP,
	DIALOG_VOBJECT_MENU,
	DIALOG_VOBJECT_OBJECTS,
	DIALOG_VOBJECT_OBJECT,
	DIALOG_VOBJECT_OBJECT_CNAME,
	DIALOG_VOBJECT_OBJECT_COLORS,
	DIALOG_VOBJECT_OBJECT_COLOR,
	DIALOG_VOBJECT_OBJECT_COLOR_HEX,
	DIALOG_VOBJECT_OBJECT_CDELETE,
	DIALOG_VOBJECT_DELETE_ALL,
	DIALOG_PLAYER_CONFIG,
	DIALOG_WORKS_TELEPORTS,
	DIALOG_POLICE_BYC,
	DIALOG_POLICE_BYC_LAST_ALL,
	DIALOG_POLICE_BYC_NAME_FIND,
	DIALOG_POLICE_DELETE_BYC,
	DIALOG_POLICE_BYC_LAST_PLAYER,
	DIALOG_CHANGE_NAME,
	DIALOG_CHANGE_NAME_NAME,
	DIALOG_CHANGE_EMAIL,
	DIALOG_CHANGE_EMAIL_EMAIL,
	DIALOG_PROPERTY_CLOSET,
	DIALOG_PROPERTY_CLOSET_DLT_ALL,
	DIALOG_PROPERTY_CLOSET_OPTIONS,
	DIALOG_PROPERTY_CLOSET_DELETE,
	DIALOG_INV_ACTIONS,
	DIALOG_NEARS_PLAYERS,
	DIALOG_NEARS_PLAYERS_PRICE,
	DIALOG_NEARS_PLAYERS_AMOUNT,
	DIALOG_PLANE_OPTIONS,
	DIALOG_PLANE_SELECT_COLOR,
	DIALOG_BOAT_OPTIONS,
	DIALOG_BOAT_SELECT_COLOR,
	DIALOG_GRAFFITI_OPTIONS,
	DIALOG_GRAFFITI_EDIT,
	DIALOG_GRAFFITI_TEXT_OPTIONS,
	DIALOG_GRAFFITI_ETEXT_TEXT,
	DIALOG_GRAFFITI_ETEXT_FONT,
	DIALOG_GRAFFITI_ETEXT_SIZE,
	DIALOG_GRAFFITI_ETEXT_COLOR,
	DIALOG_CONFIRM_HOTDOG,
	DIALOG_KEYS_SELECT_PLAYER,
	DIALOG_KEYS_SELECT_VEHICLE,
	DIALOG_GARAGE_SELECT_INTERIOR,
	DIALOG_SELL_VEHICLES_CREATOR,
	DIALOG_SV_COLOUR_0,
	DIALOG_SV_COLOUR_1,
	DIALOG_SV_MODELID,
	DIALOG_SV_PRICE,
	DIALOG_SV_SELECT_PRICE, //coins o dinero
	DIALOG_SV_SET_LEVEL,
	DIALOG_SV_SHOP,
	DIALOG_BLACK_MARKET,
	DIALOG_BLACK_MARKET_ARTICLES,
	DIALOG_BLACK_MARKET_WEAPON,
	DIALOG_BLACK_MARKET_AMMO
}

enum
{
	MENU_VOBJECTS_SHOP
}

enum
{
	ROLEPLAY_STATE_NORMAL,
	ROLEPLAY_STATE_HOSPITAL,
	ROLEPLAY_STATE_INTERIOR,
	ROLEPLAY_STATE_OWN_PROPERTY,
	ROLEPLAY_STATE_GUEST_PROPERTY,
	ROLEPLAY_STATE_OWN_GARAGE,
	ROLEPLAY_STATE_GUEST_GARAGE,
	ROLEPLAY_STATE_ARRESTED,
	ROLEPLAY_STATE_JAIL,
	ROLEPLAY_STATE_CRACK,
}

enum
{
	GAME_STATE_NONE,
	GAME_STATE_CONNECTED,
	GAME_STATE_DEAD,
	GAME_STATE_NORMAL,
}

#define MAX_TIMERS_PER_PLAYER 22

#define TOTAL_TUNING_PARTS	14
#define MAX_TUNING_PARTS_COMPONENTS	20
enum PLAYER_TUNING_MENU_Info
{
	tuning_menu_NAME[24],
	tuning_menu_ID,
	tuning_menu_PIECES,
}
new PLAYER_TUNING_MENU[MAX_PLAYERS][MAX_TUNING_PARTS_COMPONENTS][PLAYER_TUNING_MENU_Info];

/* GLOBAL_VEHICLES */
#define MAX_VEHICLE_COMPONENTS	14
#define MIN_VEHICLE_HEALTH		350.0
forward Float:GetDistanceBetweenPoints3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2);
forward Float:GetVehicleSpeed(vehicleid);
forward Float:GetVehicleAirSpeed(vehicleid);
forward Float:frandom(Float:max, Float:min, dp);
forward Float:CompressRotation(Float:rotation);

new VEHICLE_COLORS[256] =
{
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF,
	0x177517FF, 0x210606FF, 0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF,
	0xB7B7B7FF, 0x464C8DFF, 0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF,
	0x1E1D13FF, 0x1E1306FF, 0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF,
	0x992E1EFF, 0x2C1E08FF, 0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF,
	0x481A0EFF, 0x7A7399FF, 0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF,
	0x7B3E7EFF, 0x3C1737FF, 0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF,
	0x163012FF, 0x16301BFF, 0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF,
	0x2B3C99FF, 0x3A3A0BFF, 0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF,
	0x2C5089FF, 0x15426CFF, 0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF,
	0x995C52FF, 0x99581EFF, 0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF,
	0x96821DFF, 0x197F19FF, 0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF,
	0x8A653AFF, 0x732617FF, 0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF,
	0x561A28FF, 0x4E0E27FF, 0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};

new Float:FUMIGATOR_CHECKPOINTS[][] =
{
	{-1308.387573, -2168.723632, 22.671110},
	{-1307.323974, -2024.588623, 43.277305},
	{-1377.214965, -1801.599121, 65.306808},
	{-1567.830932, -1792.607299, 75.021827},
	{-1827.273315, -1838.340209, 91.367256},
	{-2028.804809, -1925.853393, 96.918655},
	{-2059.277832, -2109.719482, 68.355422},
	{-2022.684570, -2289.475097, 61.323108},
	{-1947.646972, -2468.936279, 48.919281},
	{-1651.936279, -2738.057373, 72.155830},
	{-1482.577392, -2778.567871, 71.213356},
	{-1339.633544, -2822.785400, 68.011917},
	{-1154.241455, -2703.070068, 42.500530},
	{-1259.402343, -2415.022216, 30.288431},
	{-1296.651489, -2098.415283, 24.366895}
};

enum
{
	VEHICLE_TYPE_NONE,
	VEHICLE_TYPE_TEST,
	VEHICLE_TYPE_SELL,
	VEHICLE_TYPE_SELL_INGAME,
	VEHICLE_TYPE_PERSONAL,
	VEHICLE_TYPE_WORK,
	VEHICLE_TYPE_HOTDOG_INGAME,
	VEHICLE_TYPE_HOTDOG
}

enum
{
	VEHICLE_STATE_NORMAL,
	VEHICLE_STATE_DAMAGED,
}

enum Global_Vehicles_Info
{
	bool:gb_vehicle_VALID,
	bool:gb_vehicle_OCCUPIED,
	gb_vehicle_TYPE,
	gb_vehicle_MODELID,
	gb_vehicle_NUMBER_PLATE[32],
	Float:gb_vehicle_POS[4],
	Float:gb_vehicle_SPAWN_X,
	Float:gb_vehicle_SPAWN_Y,
	Float:gb_vehicle_SPAWN_Z,
	Float:gb_vehicle_SPAWN_ANGLE,
	Float:gb_vehicle_HEALTH,
	gb_vehicle_DAMAGE_PANELS,
	gb_vehicle_DAMAGE_DOORS,
	gb_vehicle_DAMAGE_LIGHTS,
	gb_vehicle_DAMAGE_TIRES,
	gb_vehicle_COLOR_1,
	gb_vehicle_COLOR_2,
	gb_vehicle_PAINTJOB,
	Float:gb_vehicle_GAS,
	Float:gb_vehicle_MAX_GAS,
	gb_vehicle_COMPONENTS[MAX_VEHICLE_COMPONENTS],
	gb_vehicle_STATE,
	gb_vehicle_INTERIOR,
	gb_vehicle_WORLD,
	gb_vehicle_PARAMS_ENGINE,
	gb_vehicle_PARAMS_LIGHTS,
	gb_vehicle_PARAMS_ALARM,
	gb_vehicle_PARAMS_DOORS,
	gb_vehicle_PARAMS_BONNET,
	gb_vehicle_PARAMS_BOOT,
	gb_vehicle_PARAMS_OBJECTIVE,
	gb_vehicle_DRIVER,
	gb_vehicle_LAST_DRIVER,
	gb_vehicle_LAST_CLOSED_TIME,
	gb_vehicle_LAST_REPAIR_TIME,
	bool:gb_vehicle_SPAWNED,
	gb_vehicle_TP_IMMUNITY,
	gb_vehicle_VIP,
	gb_vehicle_ATTACHED_TO,
	Text3D:gb_vehicle_LABEL,
	gb_vehicle_OBJECTID
}
new GLOBAL_VEHICLES[MAX_VEHICLES][Global_Vehicles_Info];

enum Player_Vehicles_Info
{
	bool:player_vehicle_VALID,
	player_vehicle_ID,
	player_vehicle_OWNER_ID,
	bool:player_vehicle_ACCESSIBLE,
	player_vehicle_CLAMP,
	player_vehicle_PRICE
};
new PLAYER_VEHICLES[MAX_VEHICLES][Player_Vehicles_Info];

enum hotdog_vehicles_info
{
	bool:hotdog_vehicle_VALID,

	hotdog_vehicle_ID,
	hotdog_vehicle_LABEL_COLOUR[16],
	Text3D:hotdog_vehicle_LABEL,
	Float:hotdog_vehicle_pos_X,
	Float:hotdog_vehicle_pos_Y,
	Float:hotdog_vehicle_pos_Z,
	Float:hotdog_vehicle_pos_A
}
new HOTDOG_VEHICLES[MAX_VEHICLES][hotdog_vehicles_info];

#define MAX_VEHICLE_OBJECTS_INDEXS	5
enum
{
	VOBJECT_TYPE_OBJECT
}
enum e_VEHICLE_OBJECTS
{
	bool:vobject_VALID,
	vobject_TYPE,
	vobject_NAME[32],
	vobject_ID,
	vobject_OBJECT_ID,
	vobject_MODELID,
	Float:vobject_OFFSET[3],
	Float:vobject_ROT[3],
	vobject_ATTACHED,
	vobject_COLORS[MAX_VEHICLE_OBJECTS_INDEXS]
}
new VEHICLE_OBJECTS[MAX_VEHICLES][MAX_SU_VOBJECTS][e_VEHICLE_OBJECTS];

new male_medic_skins[] = {274, 275, 276};

enum
{
	WORK_TYPE_NONE,
	WORK_TYPE_NORMAL,
	WORK_TYPE_FAMILY,
}
enum _:E_WORKS
{
	WORK_NONE = 0,
	WORK_TAXI = 1,
	WORK_TRUCK = 2,
	WORK_MECHANIC = 3,
	WORK_FUMIGATOR = 4,
	WORK_TRASH = 5,
	WORK_LUMBERJACK = 6,
	WORK_FARMER = 7,
	WORK_POLICE = 8,
	WORK_PIZZA = 9,
	WORK_MEDIC = 10,
	WORK_TRAILER = 11,
	WORK_TRAFFICKER = 12
};
enum work_info_info
{
	work_info_TYPE,
	work_info_LEVEL,
	work_info_NAME[24],
	bool:work_info_NEED_DUTY,
	work_info_EXTRA_PAY,
	work_info_EXTRA_PAY_EXP,
	work_info_EXTRA_PAY_LIMIT
}
new work_info[][work_info_info] =
{
    {WORK_TYPE_NONE, 0, "Ninguno", false, 0, 0, 0},
	{WORK_TYPE_NORMAL, 1, "Uber", false, 0, 0, 0},
	{WORK_TYPE_NORMAL, 1, "Camionero", false, 0, 0, 0},
	{WORK_TYPE_FAMILY, 8, "Mecánico", true, 0, 0, 0},
	{WORK_TYPE_NORMAL, 2, "Fumigador", false, 0, 0, 0},
	{WORK_TYPE_NORMAL, 1, "Basurero", true, 0, 0, 0},
	{WORK_TYPE_NORMAL, 1, "Leñador", false, 0, 0, 0},
	{WORK_TYPE_NORMAL, 2, "Agricultor", false, 0, 0, 0},
	{WORK_TYPE_FAMILY, 8, "Policía", true, 3000, 1, 0},
	{WORK_TYPE_NORMAL, 1, "Pizzero", true, 0, 0, 0},
	{WORK_TYPE_NORMAL, 2, "Médico", true, 0, 0, 0},
	{WORK_TYPE_NORMAL, 1, "Trailero", false, 1500, 25, 7300},
	{WORK_TYPE_NORMAL, 7, "Traficante", false, 0, 0, 0}
};
forward OnPlayerObtainWork(playerid, work);

enum enum_PLAYER_WORKS
{
	pwork_SET,
	pwork_LEVEL
};
new PLAYER_WORKS[MAX_PLAYERS][sizeof(work_info)][enum_PLAYER_WORKS];

new Float:MedicalBuyKitsCoords[][3] = { {-2031.387207, -115.191055, 1035.171875} };

/* Tuning Object System */

enum e_Tuning_Shop_Objects
{
	tuning_object_MODELID,
	tuning_object_NAME[24],
	tuning_object_PRICE,
}
new Tuning_Shop_Objects[][e_Tuning_Shop_Objects] =
{
	{1000, "spl_b_mar_m", 3000},
    {1001, "spl_b_bab_m", 3000},
    {1002, "spl_b_bar_m", 3000},
    {1003, "spl_b_mab_m", 3000},
    {1004, "bnt_b_sc_m", 9000},
    {1005, "bnt_b_sc_l", 3000},
    {1007, "wg_l_b_ssk", 2000},
    {1018, "exh_b_ts", 3500},
    {1019, "exh_b_t", 3500},
    {1021, "exh_b_m", 3500},
    {1024, "lgt_b_sspt", 2000},
    {1029, "exh_c_s", 3000},
    {1043, "exh_lr_br2", 3500},
    {1044, "exh_lr_br1", 3000},
    {1047, "wg_l_a_f", 2500},
    {1048, "wg_l_c_f", 2500},
    {1049, "spl_a_f_r", 3000},
    {1050, "spl_c_f_r", 3000},
    {1056, "wg_l_a_st", 2500},
    {1090, "wg_l_a_u", 2500},
    {19078, "TheParrot1", 8000},
    {19917, "CutsceneEngine1", 10500},
    {19893, "LaptopSAMP1", 6000},
    {2768, "CJ_CB_BURG", 1000},
    {19838, "CoffeeCup1", 1000},
    {11736, "MedicCase1", 3000},
    {1247, "bribe", 8000},
    {19147, "PinSpotLight5", 5000},
    {19148, "PinSpotLight6", 5000},
    {19149, "PinSpotLight7", 5000},
    {19151, "PinSpotLight9", 5000},
    {19153, "PinSpotLight11", 5000},
    {19580, "Pizza1", 1000},
    {2690, "CJ_FIRE_EXT", 5000},
    {19308, "taxi01", 3000},
    {1550, "CJ_MONEY_BAG", 4000},
    {19306, "kmb_goflag2", 5000},
    {19307, "kmb_goflag3", 5000},
    {18647, "RedNeonTube1", 6000},
    {18648, "BlueNeonTube1", 6000},
    {18649, "GreenNeonTube1", 6000},
    {18650, "YellowNeonTube1", 6000},
    {18651, "PinkNeonTube1", 6000},
    {18652, "WhiteNeonTube1", 6000},
    {18749, "SAMPLogoSmall", 5000},
    {19054, "XmasBox1", 3000},
    {19133, "ArrowType4", 5000},
    {19471, "forsale02", 3000},
    {19878, "Skateboard1", 2000},
    {19314, "bullhorns01", 5000},
    {2404, "CJ_SURF_BOARD", 3000},
    {2405, "CJ_SURF_BOARD2", 3000},
    {2406, "CJ_SURF_BOARD3", 3000},
    {19317, "bassguitar01", 2000},
    {19318, "flyingv01", 2000},
    {2232, "MED_SPEAKER_4", 3000},
    {1840, "speaker_2", 2000},
    {2229, "SWANK_SPEAKER", 4000},
	{1025, "wheel_or1", 2500},
	{1073, "wheel_sr6", 2500},
	{1074, "wheel_sr3", 2500},
	{1075, "wheel_sr2", 2500},
	{1076, "wheel_lr4", 2500},
	{1077, "wheel_lr1", 2500},
	{1078, "wheel_lr3", 2500},
	{1079, "wheel_sr1", 2500},
	{1080, "wheel_sr5", 2500},
	{1081, "wheel_sr4", 2500},
	{1082, "wheel_gn1", 2500},
	{1083, "wheel_lr2", 2500},
	{1084, "wheel_lr5", 2500},
	{1085, "wheel_gn2", 2500},
	{1096, "wheel_gn3", 2500},
	{1097, "wheel_gn4", 2500},
	{1098, "wheel_gn5", 2500},
	{19894, "laptop", 4500},
	{19873, "toiletpaperroll1", 200},
	{19874, "soapbar1", 200},
	{19624, "case1", 600},
	{19621, "obj1", 1500},
	{19620, "police", 10500}
};

//ZONAS
enum
{
	AREA_TYPE_NONE,
	AREA_TYPE_GANGZONE,
	AREA_TYPE_MECHANIC,
	AREA_TYPE_WATERVEH_STATION
};

#define MAX_TERRITORIES	100
enum enum_TERRITORIES
{
	bool:territory_VALID,
	territory_ID,
	territory_NAME[32],
	bool:territory_OCCUPIED,
	territory_CREW_ID,
	territory_CREW_INDEX,
	territory_COLOR,
	Float:territory_MIN_X,
	Float:territory_MIN_Y,
	Float:territory_MIN_Z,
	Float:territory_MAX_X,
	Float:territory_MAX_Y,
	Float:territory_MAX_Z,
	
	territory_AREA,
	territory_GANG_ZONE,
	
	bool:territory_WAR,
	territory_ATTACKER_CREW_INDEX,
	territory_WAR_TIME_LEFT,
	Text:territory_TEXTDRAW,
	territory_TIMER,
	territory_LAST_ATTACK
}
new TERRITORIES[MAX_TERRITORIES][enum_TERRITORIES];
forward OnTerritoriesLoaded();

// Crews
#define MAX_CREWS		50
#define MAX_CREW_RANKS	10
#define MAX_CREW_MEMBERS 80

enum enum_CREW_INFO
{
	bool:crew_VALID,
	crew_ID,
	crew_NAME[32],
	crew_COLOR,
	
	bool:crew_FIGHTING,
	crew_LAST_ATTACK,
	crew_LAST_ROBBERY,
	
	crew_MEMBERS,
	crew_ONLINE_MEMBERS,
}
new CREW_INFO[MAX_CREWS][enum_CREW_INFO];
forward OnCrewDeleted(crewId);
forward OnCrewCaptureTerritory(crewId, crewIndex, territoryId, territoryIndex);
forward OnCrewLeftTerritory(crewId, crewIndex, territoryId, territoryIndex);


new RandomColors[] =
{
	0xFFFFFFFF,
	0x000000FF,
    0x99CC00FF,
    0xFF9900FF,
	0x6699CCFF,
	0x0099FFFF,
	0xCCCC99FF,
	
	0xFF8C13FF,	0xC715FFFF,	0x20B2AAFF,	0xDC143CFF,	0x6495EDFF,	0xf0e68cFF,	0x778899FF,	0xFF1493FF,	0xF4A460FF,
	0xEE82EEFF,	0xFFD720FF,	0x8b4513FF,	0x4949A0FF,	0x148b8bFF,	0x14ff7fFF,	0x556b2fFF,	0x0FD9FAFF,	0x10DC29FF,
	0x534081FF,	0x0495CDFF,	0xEF6CE8FF,	0xBD34DAFF,	0x247C1BFF,	0x0C8E5DFF,	0x635B03FF,	0xCB7ED3FF,	0x65ADEBFF,
	0x5C1ACCFF,	0xF2F853FF,	0x11F891FF,	0x7B39AAFF,	0x53EB10FF,	0x54137DFF,	0x275222FF,	0xF09F5BFF,	0x3D0A4FFF,
	0x22F767FF,	0xD63034FF,	0x9A6980FF,	0xDFB935FF,	0x3793FAFF,	0x90239DFF,	0xE9AB2FFF,	0xAF2FF3FF,	0x057F94FF,
	0xB98519FF,	0x388EEAFF,	0x028151FF,	0xA55043FF,	0x0DE018FF,	0x93AB1CFF,	0x95BAF0FF,	0x369976FF,	0x18F71FFF,
	0x4B8987FF,	0x491B9EFF,	0x829DC7FF,	0xBCE635FF,	0xCEA6DFFF,	0x20D4ADFF,	0x2D74FDFF,	0x3C1C0DFF,	0x12D6D4FF,
	0x48C000FF,	0x2A51E2FF,	0xE3AC12FF,	0xFC42A8FF,	0x2FC827FF,	0x1A30BFFF,	0xB740C2FF,	0x42ACF5FF,	0x2FD9DEFF,
	0xFAFB71FF,	0x05D1CDFF,	0xC471BDFF,	0x94436EFF,	0xC1F7ECFF,	0xCE79EEFF,	0xBD1EF2FF,	0x93B7E4FF,	0x3214AAFF,
	0x184D3BFF,	0xAE4B99FF,	0x7E49D7FF,	0x4C436EFF,	0xFA24CCFF,	0xCE76BEFF,	0xA04E0AFF,	0x9F945CFF,	0xDCDE3DFF,
	0x10C9C5FF,	0x70524DFF,	0x0BE472FF,	0x8A2CD7FF,	0x6152C2FF,	0xCF72A9FF,	0xE59338FF,	0xEEDC2DFF,	0xD8C762FF,
	0xD8C762FF,	0xFF8C13FF,	0xC715FFFF,	0x20B2AAFF,	0xDC143CFF,	0x6495EDFF,	0xf0e68cFF,	0x778899FF,	0xFF1493FF,
	0xF4A460FF,	0xEE82EEFF,	0xFFD720FF,	0x8b4513FF,	0x4949A0FF,	0x148b8bFF,	0x14ff7fFF,	0x556b2fFF,	0x0FD9FAFF,
	0x10DC29FF,	0x534081FF,	0x0495CDFF,	0xEF6CE8FF,	0xBD34DAFF,	0x247C1BFF,	0x0C8E5DFF,	0x635B03FF,	0xCB7ED3FF,
	0x65ADEBFF,	0x5C1ACCFF,	0xF2F853FF,	0x11F891FF,	0x7B39AAFF,	0x53EB10FF,	0x54137DFF,	0x275222FF,	0xF09F5BFF,
	0x3D0A4FFF,	0x22F767FF,	0xD63034FF,	0x9A6980FF,	0xDFB935FF,	0x3793FAFF,	0x90239DFF,	0xE9AB2FFF,	0xAF2FF3FF,
	0x057F94FF,	0xB98519FF,	0x388EEAFF,	0x028151FF,	0xA55043FF,	0x0DE018FF,	0x93AB1CFF,	0x95BAF0FF,	0x369976FF,
	0x18F71FFF,	0x4B8987FF,	0x491B9EFF,	0x829DC7FF,	0xBCE635FF,	0xCEA6DFFF,	0x20D4ADFF,	0x2D74FDFF,	0x3C1C0DFF,
	0x12D6D4FF,	0x48C000FF,	0x2A51E2FF,	0xE3AC12FF,	0xFC42A8FF,	0x2FC827FF,	0x1A30BFFF,	0xB740C2FF,	0x42ACF5FF,
	0x2FD9DEFF,	0xFAFB71FF,	0x05D1CDFF,	0xC471BDFF,	0x94436EFF,	0xC1F7ECFF,	0xCE79EEFF,	0xBD1EF2FF,	0x93B7E4FF,
	0x3214AAFF,	0x184D3BFF,	0xAE4B99FF,	0x7E49D7FF,	0x4C436EFF,	0xFA24CCFF,	0xCE76BEFF,	0xA04E0AFF,	0x9F945CFF,
	0xDCDE3DFF,	0x10C9C5FF,	0x70524DFF,	0x0BE472FF,	0x8A2CD7FF,	0x6152C2FF,	0xCF72A9FF,	0xE59338FF,	0xEEDC2DFF,
	0xD8C762FF,	0xD8C762FF
};

//permisos
enum
{
	CREW_RANK_CHANGE_NAME,
	CREW_RANK_INVITE,
	CREW_RANK_CAST_MEMBERS,
	CREW_RANK_MODIFY_MEMBERS,
	CREW_RANK_MODIFY_RANKS,
	CREW_RANK_ADD_PROPERTIES,
	CREW_RANK_DELETE_PROPERTIES,
	CREW_RANK_CHANGE_COLOR,
	CREW_RANK_LEAVE_TERRITORY,
	CREW_RANK_DELETE,
	CREW_RANK_GRAFFITI,
	
	CREW_RANK_SIZE, // dejar siempre el ultimo
}

new CREW_RANKS_PERMISSIONS[][] =
{
	"cambiar nombre de la banda",	//0
	"invitar jugadores",			//1
	"echar miembros",				//2
	"cambiar rangos de miembros",	//3
	"crear rangos o modificarlos",	//4
	"poner propiedades de banda",	//5
	"liberar propiedades de banda",	//6
	"cambiar color de la banda",	//7
	"abandonar territorios",		//8
	"eliminar banda",				//9
	"crear y eliminar graffitis"	//10
};

enum enum_CREW_RANK_INFO
{
	bool:crew_rank_VALID,
	crew_rank_ID,
	crew_rank_NAME[32],
	crew_rank_PERMISSION[CREW_RANK_SIZE],
}
new CREW_RANK_INFO[MAX_CREWS][MAX_CREW_RANKS][enum_CREW_RANK_INFO];

enum obtain_work_coords_info
{
	bool:obtain_work_AVAILABLE,
	bool:obtain_work_LABELS,
	Float:obtain_work_X,
	Float:obtain_work_Y,
	Float:obtain_work_Z,
	obtain_work_INTERIOR,
	bool:obtain_work_MAP_ICON,
	obtain_work_MAP_ICON_ID,
	Float:obtain_work_MAP_ICON_X,
	Float:obtain_work_MAP_ICON_Y,
	Float:obtain_work_MAP_ICON_Z,
}
new Float:obtain_work_coords[][obtain_work_coords_info] =
{
	{false, false, 0.0, 0.0, 0.0, 0,	false, 0, 0.0, 0.0, 0.0},
	{true, true, 1490.285766, 1305.699340, 1093.296386, 3,	true, 61, 1752.603881, -1894.155883, 13.557376}, //Uber ls
	{true, true, 1111.7664, 1929.2620, 10.8203, 0, true, 61, 1111.7664, 1929.2620, 10.8203}, //caminero
	{true, true, -583.4289, -524.4357, 25.5615, 0, true, 27, -583.4289, -524.4357, 25.5615}, //mecanico
	{true, true, -1342.295898, -2195.076660, 23.591030, 0, true, 61, -1342.295898, -2195.076660, 23.591030}, //Fumigador
	{true, true, -1884.997314, -1636.733642, 21.750000, 0, true, 61, -1884.997314, -1636.733642, 21.750000}, //Basurero
	{true, true, -532.029846, -97.514228, 63.296875, 0, true, 61, -532.029846, -97.514228, 63.296875}, //leñador
	{true, true, -1061.3529, -1205.4424, 129.7565, 0, true, 61, -1061.3529, -1205.4424, 129.7565}, //agricultor
	{true, true, -510.972015, 324.242736, 2004.585937, 20,	false, 0, 1480.966918, -1772.065673, 18.795755}, // policía
	{true, true, 377.902313, -119.416114, 1001.492187, 5, false, 0, 2105.485107, -1806.400878, 13.554687},
	{true, true, -2033.237304, -117.411125, 1035.171875, 3,	false, 0, 0.0, 0.0, 0.0}, //medico
	{true, true, 1040.164428, 1304.031738, 10.820312, 0, true, 51, 1040.164428, 1304.031738, 10.820312}, //Trailero
	{true, true, 1684.795898, 1080.381347, 10.820312, 0, true, 51, 1684.795898, 1080.381347, 10.820312} //traficante
};

enum Work_Vehicles_Info
{
	bool:work_vehicle_VALID,
	work_vehicle_WORK,
	work_vehicle_EXP,
	bool:work_vehicle_NEED_DUTY,
}
new WORK_VEHICLES[MAX_VEHICLES][Work_Vehicles_Info];

forward OnSanAndreasVehicleLoad(vehicleid);
forward OnSanAndreasVehiclesLoad();

enum San_Andreas_Vehicles_Info
{
	san_andreas_vehicle_TYPE,
	san_andreas_vehicle_TYPE_IN,
	san_andreas_vehicle_TYPE_IN_EXP,
	san_andreas_vehicle_MODELID,
	Float:san_andreas_vehicle_SPAWN_X,
	Float:san_andreas_vehicle_SPAWN_Y,
	Float:san_andreas_vehicle_SPAWN_Z,
	Float:san_andreas_vehicle_SPAWN_ANGLE,
	san_andreas_vehicle_COLOR_1,
	san_andreas_vehicle_COLOR_2,
	san_andreas_vehicle_vip,
	san_andreas_vehicle_WORLD,
}
new San_Andreas_Vehicles[][San_Andreas_Vehicles_Info] =
{
	//uber ls
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1792.5676, -1868.2953, 13.2887, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1807.7679, -1868.5153, 13.2887, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1805.2649, -1901.7776, 13.1195, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1805.2053, -1932.5355, 13.0518, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1775.7917, -1932.4465, 13.0518, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1783.2333, -1932.4965, 13.0518, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1798.8303, -1932.5427, 13.0518, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1791.2925, -1932.4644, 13.0518, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1775.7085, -1916.0463, 13.2772, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1805.3810, -1917.4658, 13.1195, 0.0000, 1, 1, 0, 0},
	
	// uber sf
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, -1986.7380, 106.9412, 27.2298, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, -1986.7380, 114.9412, 27.2298, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, -1986.7380, 125.9412, 27.2298, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, -1986.7380, 138.4412, 27.2298, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, -1986.7380, 145.4412, 27.2298, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, -1986.7380, 155.9412, 27.2298, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, -1986.7380, 171.4412, 27.2298, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, -1986.7380, 178.4412, 27.2298, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, -1986.7380, 185.4412, 27.2298, 0.0000, 1, 1, 0, 0},
	
	// uber lv
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1687.2935, 1297.4829, 10.5616, 180.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1695.2935, 1297.4829, 10.5616, 180.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1695.7935, 1305.9829, 10.5616, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1691.7935, 1305.9829, 10.5616, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1688.2935, 1305.9829, 10.5616, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1681.7935, 1305.9829, 10.5616, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1688.3271, 1287.1450, 10.5616, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1693.8271, 1287.1450, 10.5616, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1699.3271, 1287.1450, 10.5616, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1703.3271, 1287.1450, 10.5616, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1706.8271, 1287.1450, 10.5616, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1711.8271, 1287.1450, 10.5616, 0.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1709.3271, 1316.1450, 10.5616, 180.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1703.3271, 1316.1450, 10.5616, 180.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1698.3271, 1316.1450, 10.5616, 180.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1694.8271, 1316.1450, 10.5616, 180.0000, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 507, 1691.3271, 1316.1450, 10.5616, 180.0000, 1, 1, 0, 0},
	
	//Mecanico
    /*{VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 435, -593.628479, -509.450103, 26.150663, 268.244506, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 435, -594.127868, -515.032897, 26.178855, 267.488250, 15, 0, 0, 0},*/
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 554, -570.745544, -479.512817, 25.630865, 179.563400, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 554, -566.322937, -479.570465, 25.629480, 179.321823, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 554, -562.091308, -479.464691, 25.626842, 181.756011, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 554, -558.272644, -479.393859, 25.630529, 179.804641, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 554, -554.557800, -479.412719, 25.629812, 181.255966, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 3, 482, -550.742431, -479.437866, 25.665205, 182.526275, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 3, 482, -547.030212, -479.410522, 25.663978, 179.295349, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 3, 482, -543.373474, -479.501495, 25.665437, 178.915191, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 3, 482, -540.066772, -479.619354, 25.663196, 179.012649, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 3, 482, -537.119140, -479.658264, 25.666337, 179.949981, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 3, 482, -534.052307, -479.711608, 25.696105, 178.263076, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 2, 525, -528.713806, -479.261230, 25.428882, 178.162506, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 2, 525, -525.059204, -479.330932, 25.426813, 178.254455, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 2, 525, -521.427001, -479.401824, 25.424770, 178.094451, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 2, 525, -517.801391, -479.455200, 25.417909, 177.066329, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 2, 525, -514.105102, -479.594573, 25.421045, 178.278076, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 2, 525, -510.059936, -479.658111, 25.427608, 179.121383, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 3, 482, -506.989044, -480.323791, 25.663543, 179.955749, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 3, 482, -503.867156, -480.342163, 25.663442, 180.544158, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 3, 482, -500.214965, -480.384887, 25.662370, 179.205535, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 554, -495.944091, -480.359161, 25.628408, 180.743545, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 554, -490.046020, -480.366516, 25.627531, 179.629867, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 554, -486.837005, -480.354736, 25.628976, 180.207015, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 3, 482, -482.981933, -480.419036, 25.662805, 180.721511, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 515, -478.107177, -478.292846, 26.564744, 180.908798, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 515, -473.529296, -478.341461, 26.567178, 177.168716, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 530, -576.737487, -524.182678, 25.342363, 270.875152, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 530, -576.780944, -528.703735, 25.343324, 268.163452, 15, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_MECHANIC, 1, 530, -576.879272, -533.494201, 25.343389, 269.204803, 15, 0, 0, 0},

	//Fumigador
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 512, -1349.9589, -2185.4946, 23.5282, 250.3750, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 512, -1346.2903, -2172.7837, 23.5282, 258.3622, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 512, -1363.1548, -2182.3293, 23.5282, 250.3750, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 512, -1358.7863, -2169.9529, 23.5282, 258.3622, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 512, -1374.2833, -2178.7600, 23.5282, 250.3750, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 512, -1370.8667, -2167.2510, 23.5282, 261.9992, 1, 1, 0},
	
	//Basurero
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1702.3322, 22.5969, 270.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1707.8322, 22.5969, 270.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1914.0554, -1713.8322, 22.5969, 270.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1719.8322, 22.5969, 270.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1726.3322, 22.5969, 270.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1732.8322, 22.5969, 270.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1901.7543, -1702.9012, 22.5969, 180.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1896.7543, -1702.9012, 22.5969, 180.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1892.2543, -1702.9012, 22.5969, 180.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1879.0313, -1739.9550, 22.5969, 33.7282,  26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1884.2616, -1743.0443, 22.5969, 33.7282,  26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1889.2466, -1746.0833, 22.5969, 33.7282,  26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1894.2480, -1748.9353, 22.5969, 33.7282,  26, 26, 0, 0},
	
	//policía ls
	
	//policía sf
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1588.1722, 749.2943, -5.5779, 0.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1592.2081, 749.1027, -5.5779, 0.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1596.2935, 749.4324, -5.5779, 0.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1600.3527, 749.0949, -5.5779, 0.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1604.2867, 749.3167, -5.5779, 0.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.0361, 742.6935, -5.5779, 90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1574.9946, 738.4707, -5.5779, 90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.1072, 735.0409, -5.5779, 90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.0322, 730.9659, -5.5779, 90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.1212, 722.3821, -5.5779, 90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.0864, 718.5404, -5.5779, 90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, -1574.7537, 714.1426, -5.1303, 90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, -1574.6227, 710.4202, -5.1303, 90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, -1574.6934, 706.5904, -5.1303, 90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1599.5576, 693.3072, -5.5779, 180.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1608.8636, 693.0085, -5.5779, 180.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1612.5468, 692.6500, -5.5779, 180.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 411, -1639.4524, 662.1886, -5.5417, -90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 415, -1639.3489, 666.1519, -5.5417, -90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 413, -1639.1108, 669.9014, -5.2635, -90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 601, -1638.7815, 678.3526, -5.4683, -90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 601, -1638.8115, 682.3326, -5.4683, -90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 427, -1628.3209, 691.4453, -5.0293, 180.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 427, -1624.6458, 691.1703, -5.0293, 180.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 427, -1621.0149, 691.4860, -5.0293, 180.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 426, -1639.1274, 658.2158, -5.5682, -90.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, -1617.3679, 731.1095, -5.6017, 0.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, -1615.6661, 731.2083, -5.6017, 0.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, -1613.6464, 731.1612, -5.6017, 0.0000, 0, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, -1611.4475, 731.4107, -5.6017, 0.0000, 0, 1, 0, 0},
	
	//policía lvpd

	//pizzero
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2339, -1813.4716, 12.9325, 90.0000, 3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1814.9722, 12.9325, 90.0000, 3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1816.4722, 12.9325, 90.0000, 3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1817.9722, 12.9325, 90.0000, 3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1819.4722, 12.9325, 90.0000, 3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1820.9722, 12.9325, 90.0000, 3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2098.2712, -1812.8209, 12.9325, 0.0000,  3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2096.7712, -1812.8209, 12.9325, 0.0000,  3, 6, 0, 0},
	
	//ambulancias
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2036.2555, -1429.4966, 17.0571, 180.00, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2036.4742, -1439.7246, 17.0571, 180.00, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2016.8370, -1411.2896, 17.0571, 90.000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2017.1022, -1416.2045, 17.0571, 90.000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1180.2153, -1308.2330, 13.8244, -90.00, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1180.4480, -1338.4403, 13.8244, -90.00, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1226.9530, 302.3792, 19.7678, 66.10860, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2202.2329, -2294.7314, 30.7048, 320.0, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2544.5457, 610.1262, 14.4484, 90.0000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2544.9500, 604.4023, 14.4484, 90.0000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2545.0088, 598.3672, 14.4484, 90.0000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2544.8770, 593.1545, 14.4484, 90.0000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2545.2927, 587.3546, 14.4484, 90.0000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -330.0057, 1062.9534, 19.7507, -90.000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -1508.8683, 2526.5510, 55.9118, 0.0000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -1504.4027, 2526.4734, 55.9118, 0.0000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1617.1790, 1841.2314, 10.6855, 0.00000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1612.3330, 1841.6625, 10.6855, 0.00000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1607.3164, 1841.8850, 10.6855, 0.00000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1602.5084, 1841.9370, 10.6855, 0.00000, 1, 3, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1597.7699, 1841.7919, 10.6855, 0.00000, 1, 3, 0, 0},

	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 455, 1125.295532, 1848.561767, 11.170994, 356.524108, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 455, 1120.675659, 1848.837280, 11.215435, 356.903198, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 455, 1116.510986, 1849.048950, 11.252659, 358.021148, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 455, 1111.613037, 1849.280517, 11.256976, 357.583221, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 455, 1106.463256, 1849.401733, 11.256985, 357.658569, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 25, 414, 1101.179931, 1850.566162, 10.914123, 358.317504, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 25, 414, 1096.305908, 1850.760253, 10.914101, 359.123748, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 25, 414, 1091.919555, 1850.747070, 10.914857, 0.424284, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 25, 414, 1087.061523, 1850.776855, 10.914050, 0.439240, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 455, 1082.512573, 1849.431030, 11.256791, 1.163063, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 455, 1077.330200, 1849.225708, 11.256966, 1.905775, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 455, 1072.250732, 1849.054321, 11.253940, 0.829097, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 499, 1068.459350, 1850.618164, 10.812266, 2.595452, 20, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 499, 1064.274780, 1850.585205, 10.812257, 2.565380, 20, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 499, 1060.643676, 1850.611083, 10.810280, 1.504357, 20, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 499, 1056.802001, 1850.482055, 10.811959, 2.276927, 20, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 499, 1053.038574, 1850.414916, 10.811965, 358.234283, 20, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 25, 414, 1049.103027, 1850.039184, 10.914049, 359.634674, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 455, 1052.843872, 1891.250854, 11.256964, 0.153868, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 455, 1060.443847, 1891.358520, 11.256558, 359.653289, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 25, 414, 1067.719848, 1891.908691, 10.914055, 0.234902, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 25, 414, 1076.437377, 1891.564697, 10.912814, 0.156895, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 499, 1082.791748, 1892.258056, 10.808579, 0.000000, 20, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 499, 1091.280395, 1892.232177, 10.810005, 358.276397, 20, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 455, 1133.082275, 1896.660400, 11.258659, 269.968505, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 455, 1133.085449, 1904.083862, 11.256946, 269.872131, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 499, 1133.282104, 1911.419677, 10.810163, 270.067352, 20, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 25, 414, 1133.016845, 1920.067504, 10.914581, 270.014129, 20, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 499, 1132.500610, 1926.378173, 10.810675, 270.330322, 20, 16, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 25, 414, 1132.135009, 1934.797973, 10.914006, 269.963806, 20, 16, 0, 0},

    {VEHICLE_TYPE_WORK, WORK_FARMER, 200, 531, -1025.381469, -1182.230712, 129.183151, 182.526535, -1, -1, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_FARMER, 200, 531, -1029.139892, -1182.237915, 129.182571, 178.409194, -1, -1, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_FARMER, 200, 531, -1032.394287, -1181.892089, 129.181793, 180.614532, -1, -1, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_FARMER, 200, 531, -1035.591918, -1181.881591, 129.183975, 181.177795, -1, -1, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_FARMER, 200, 531, -1036.066894, -1177.052368, 129.182495, 94.813774, -1, -1, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_FARMER, 200, 531, -1066.818969, -1160.139282, 129.183364, 270.158081, -1, -1, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_FARMER, 200, 531, -1099.218139, -1096.219970, 129.185684, 356.170135, -1, -1, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_FARMER, 200, 531, -1070.890502, -1292.693603, 129.156738, 268.310791, -1, -1, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_FARMER, 200, 531, -1073.268432, -1203.114379, 129.185211, 178.929061, -1, -1, 0, 0},

	{VEHICLE_TYPE_WORK, WORK_TRAILER, 0, 515, 1091.157836, 1354.953369, 11.836768, 182.419296, 1, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_TRAILER, 0, 403, 1082.908447, 1354.652832, 11.427300, 180.284973, 1, 0, 0, 0},
    {VEHICLE_TYPE_WORK, WORK_TRAILER, 0, 514, 1053.790405, 1356.245605, 11.408803, 177.432281, 1, 0, 0, 0},

	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 400, 1680.906372, 1039.615844, 10.932977, 0.684427, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 401, 1677.784301, 1039.722412, 10.623252, 359.618988, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 402, 1674.398437, 1039.997192, 10.605416, 0.882584, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 404, 1671.403198, 1039.937255, 10.554384, 359.278350, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 405, 1668.031494, 1039.551879, 10.695141, 0.097917, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 410, 1664.893188, 1039.257446, 10.511648, 1.433878, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 412, 1661.465942, 1039.331176, 10.687177, 359.663299, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 413, 1658.400146, 1039.557495, 10.860938, 1.652059, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 414, 1655.117919, 1039.608886, 10.893483, 359.467987, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 418, 1652.340942, 1039.743164, 10.826661, 1.840155, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 419, 1680.936767, 1028.031982, 10.483080, 178.992248, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 421, 1677.783447, 1028.588378, 10.702812, 180.244705, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 422, 1674.950683, 1028.460327, 10.810156, 175.567901, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 423, 1671.461547, 1028.897216, 10.877115, 179.592437, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 426, 1668.122192, 1028.496704, 10.563342, 179.406845, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 429, 1665.096801, 1028.768798, 10.448451, 179.038543, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 434, 1661.722167, 1028.699096, 10.785967, 181.228973, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 436, 1658.597167, 1028.348144, 10.587173, 179.359375, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 439, 1655.265747, 1028.523193, 10.716515, 179.278060, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 440, 1652.276123, 1028.554687, 10.912425, 181.926620, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 442, 1681.005493, 999.891418, 10.648756, 1.610510, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 445, 1677.780761, 999.390136, 10.695319, 359.248657, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 448, 1674.234252, 998.281188, 10.419968, 359.144592, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 477, 1655.308593, 988.381896, 10.573537, 180.734008, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 455, 1668.150878, 1000.691101, 11.257035, 0.848344, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 456, 1664.859130, 999.967834, 10.994862, 358.383270, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 457, 1661.815917, 998.066467, 10.447124, 0.833452, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 458, 1658.484008, 999.475219, 10.693936, 0.284985, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 459, 1655.223388, 999.086791, 10.865874, 359.287170, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 461, 1651.429199, 999.244750, 10.397207, 359.280883, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 462, 1681.415527, 989.398071, 10.486117, 180.734100, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 463, 1677.921020, 988.793334, 10.359287, 179.960418, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 466, 1674.457153, 988.254028, 10.562385, 179.042327, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 467, 1671.428833, 988.207519, 10.560748, 179.948043, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 468, 1668.522094, 988.777954, 10.486152, 179.250198, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 471, 1665.190551, 988.688720, 10.301012, 179.668655, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 474, 1661.745117, 988.780944, 10.582712, 181.045867, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 475, 1658.483764, 988.685119, 10.624942, 179.867919, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAFFICKER, 0, 478, 1671.396362, 999.907348, 10.814680, 0.810895, -1, -1, 0, 0}
};

enum San_Andreas_Barriers_Info
{
	barrier_VEHICLE_TYPE,
	barrier_VEHICLE_TYPE_IN,
	barrier_VEHICLE_TYPE_IN2,
	Float:barrier_X,
	Float:barrier_Y,
	Float:barrier_Z,
	Float:barrier_ROTATION,
	barrier_INTERIOR,
	barrier_WORLD,
	barrier_OBJECT_ID,
	barrier_TIMER,
	bool:barrier_CLOSING,
	Float:barrier_DISTANCE,
	barrier_PRICE,
	Float:barrier_PLAYER_X,
	Float:barrier_PLAYER_Y,
	Float:barrier_PLAYER_Z
}
new San_Andreas_Barriers[][San_Andreas_Barriers_Info] = // usar VEHICLE_TYPE_NONE para que puedan pasar todos
{
	{VEHICLE_TYPE_NONE, WORK_NONE, WORK_NONE, 1811.32373, -1886.26331, 12.36843, 90.00000, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,		0.0, 0.0, 0.0}, // barrera uber ls
	{VEHICLE_TYPE_NONE, WORK_NONE, WORK_NONE, 1717.0457, 1308.0387, 9.7157, 90.0, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,				0.0, 0.0, 0.0}, // barrera uber lv
	{VEHICLE_TYPE_NONE, WORK_NONE, WORK_NONE, -82.1645, -1123.0260, 0.0373, 67.1102, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,				0.0, 0.0, 0.0}, // grua
	{VEHICLE_TYPE_WORK, WORK_POLICE, WORK_NONE, 2238.19897, 2450.41797, 9.80680, -90.0, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,			0.0, 0.0, 0.0}, // barrera policía LV
	{VEHICLE_TYPE_WORK, WORK_POLICE, WORK_NONE, -1572.20313, 658.83588, 6.07810, -90.0, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,			0.0, 0.0, 0.0}, // barrera policía SF 1
	{VEHICLE_TYPE_WORK, WORK_POLICE, WORK_NONE, -1701.42969, 687.59381, 23.88280, 90.0, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,			0.0, 0.0, 0.0} // barrera policía SF 2
};

#define MAX_BOOT_SLOTS	20

enum VEHICLE_INFO_enum
{
	bool:vehicle_info_NORMAL_SPEEDO,
	vehicle_info_NAME[24],
	Float:vehicle_info_MAX_GAS, // Por defecto
	Float:vehicle_info_MAX_VEL,
	vehicle_info_BOOT_SLOTS,
	vehicle_info_SEATS,
	bool:vehicle_info_ENGINE,
	bool:vehicle_info_DRIVER_DOOR,
	bool:vehicle_info_PASSENGER_DOOR
}
new VEHICLE_INFO[][VEHICLE_INFO_enum] =
{
	{true, "Landstalker", 80.0, 159.00, 10, 4, true, true, true},
	{true, "Bravura", 45.0, 148.00, 6, 2, true, true, true},
	{true, "Buffalo", 50.0, 188.00, 6, 2, true, true, true},
	{true, "Linerunner", 150.0, 110.00, 0, 2, true, true, true},
	{true, "Perrenial", 50.0, 134.00, 10, 4, true, true, true},
	{true, "Sentinel", 45.0, 165.00, 0, 4, true, true, true},
	{true, "Dumper", 20.0, 111.00, 0, 1, true, true, true},
	{true, "Firetruck", 120.0, 149.00, 0, 2, true, true, true},
	{true, "Trashmaster", 80.0, 101.00, 0, 2, true, true, true},
	{true, "Stretch", 80.0, 159.00, 12, 4, true, true, true},
	{true, "Manana", 40.0, 131.00, 4, 2, true, true, true},
	{true, "Infernus", 80.0, 223.00, 6, 2, true, true, true},
	{true, "Voodoo", 45.0, 170.00, 4, 2, true, true, true},
	{true, "Pony", 60.0, 111.00, 12, 4, true, true, true},
	{true, "Mule", 60.0, 106.00, 0, 2, true, true, true},
	{true, "Cheetah", 65.0, 194.00, 4, 2, true, true, true},
	{true, "Ambulance", 120.0, 155.00, 0, 4, true, true, true},
	{false, "Leviathan", 400.0, 1.00, MAX_BOOT_SLOTS, 2, true, true, true}, 
	{true, "Moonbeam", 60.0, 116.00, 12, 4, true, true, true},
	{true, "Esperanto", 40.0, 150.00, 5, 2, true, true, true},
	{true, "Taxi", 60.0, 146.00, 8, 4, true, true, true}, 
	{true, "Washington", 50.0, 155.00, 6, 4, true, true, true},
	{true, "Bobcat", 70.0, 141.00, 8, 2, true, true, true},
	{true, "MrWhoopee", 60.0, 99.00, 0, 2, true, true, true},
	{true, "BFInjection", 30.0, 136.00, 4, 2, true, true, false},
	{false, "Hunter", 425.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true}, 
	{true, "Premier", 70.0, 175.00, 6, 4, true, true, true},
	{true, "Enforcer", 120.0, 167.00, 0, 4, true, true, true}, 
	{true, "Securicar", 80.0, 158.00, 12, 4, true, true, true}, 
	{true, "Banshee", 65.0, 203.00, 4, 2, true, true, true},
	{false, "Predator", 1.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{true, "Bus", 180.0, 131.00, 20, 500, true, true, true},
	{true, "Rhino", 200.0, 95.00, 0, 1, true, true, true}, 
	{true, "Barracks", 150.0, 111.00, 0, 2, true, true, true},
	{true, "Hotknife", 50.0, 168.00, 4, 2, true, true, true}, 
	{false, "Trailer1", 1.0, 1.00, 0, 0, false, false, false}, 
	{true, "Previon", 40.0, 150.00, 6, 2, true, true, true},
	{true, "Coach", 150.0, 159.00, 20, 500, true, true, true},
	{true, "Cabbie", 80.0, 144.00, 6, 4, true, true, true}, 
	{true, "Stallion", 60.0, 170.00, 6, 2, true, true, true},
	{true, "Rumpo", 60.0, 137.00, 12, 4, true, true, true},
	{false, "RCBandit", 1.0, 1.00, 0, 1, true, true, true}, 
	{true, "Romero", 60.0, 140.00, 0, 2, true, true, true},
	{true, "Packer", 150.0, 127.00, 0, 2, true, true, true},
	{true, "Monster", 80.0, 111.00, 20, 2, true, true, true},
	{true, "Admiral", 65.0, 165.00, 4, 4, true, true, true},
	{false, "Squalo", 1.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{false, "Seasparrow", 120.0, 1.00, MAX_BOOT_SLOTS, 2, true, true, true}, 
	{true, "Pizzaboy", 20.0, 116.00, 0, 1, true, true, true}, 
	{false, "Tram", 1.0, 1.00, 0, 0, false, false, false}, 
	{false, "Trailer2", 1.0, 1.00, 0, 0, false, false, false}, 
	{true, "Turismo", 80.0, 195.00, 6, 2, true, true, true},
	{false, "Speeder", 1.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{false, "Reefer", 1.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{false, "Tropic", 1.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{true, "Flatbed", 120.0, 159.00, 0, 2, true, true, true}, 
	{true, "Yankee", 50.0, 107.00, 0, 2, true, true, true}, 
	{true, "Caddy", 10.0, 96.00, 0, 2, true, true, false}, 
	{true, "Solair", 80.0, 158.00, 8, 4, true, true, true},
	{true, "BerkleyRCVan", 60.0, 137.00, 0, 2, true, true, true}, 
	{false, "Skimmer", 250.0, 1.00, MAX_BOOT_SLOTS, 2, true, true, true},
	{true, "PCJ-600", 45.0, 167.00, 0, 2, true, true, false},
	{true, "Faggio", 20.0, 107.00, 0, 2, true, true, false},
	{true, "Freeway", 60.0, 142.00, 0, 2, true, true, false},
	{false, "RCBaron", 1.0, 1.00, 0, 1, true, true, true}, 
	{false, "RCRaider", 1.0, 1.00, 0, 1, true, true, true}, 
	{true, "Glendale", 50.0, 148.00, 6, 4, true, true, true},
	{true, "Oceanic", 50.0, 141.00, 6, 4, true, true, true},
	{true, "Sanchez", 40.0, 143.00, 0, 2, true, true, false},
	{false, "Sparrow", 140.0, 1.00, MAX_BOOT_SLOTS, 2, true, true, true}, 
	{true, "Patriot", 120.0, 158.00, 8, 4, true, true, true},
	{true, "Quad", 25.0, 111.00, 0, 2, true, true, false},
	{false, "Coastguard", 1.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true}, 
	{false, "Dinghy", 1.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{true, "Hermes", 80.0, 150.00, 6, 2, true, true, true},
	{true, "Sabre", 45.0, 174.00, 6, 2, true, true, true},
	{false, "Rustler", 250.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{true, "ZR-350", 60.0, 188.00, 4, 2, true, true, true},
	{true, "Walton", 50.0, 118.00, 6, 2, true, true, true},
	{true, "Regina", 80.0, 141.00, 10, 4, true, true, true},
	{true, "Comet", 45.0, 186.00, 4, 2, true, true, true},
	{false, "BMX", 1.0, 1.00, 0, 1, false, true, true},
	{true, "Burrito", 60.0, 158.00, 12, 4, true, true, true},
	{true, "Camper", 50.0, 124.00, 10, 3, true, true, true},
	{false, "Marquis", 1.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{true, "Baggage", 20.0, 100.00, 0, 1, true, true, true}, 
	{true, "Dozer", 25.0, 65.00, 0, 1, true, true, true}, 
	{false, "Maverick", 1000.0, 1.00, MAX_BOOT_SLOTS, 4, true, true, true}, 
	{false, "NewsChopper", 200.0, 1.00, MAX_BOOT_SLOTS, 2, true, true, true}, 
	{true, "Rancher", 90.0, 140.00, 10, 2, true, true, true},
	{true, "FBIRancher", 90.0, 158.00, 12, 4, true, true, true}, 
	{true, "Virgo", 45.0, 150.00, 4, 2, true, true, true},
	{true, "Greenwood", 45.0, 141.00, 4, 4, true, true, true},
	{false, "Jetmax", 1.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{true, "Hotring", 80.0, 216.00, 0, 2, true, true, true},
	{true, "Sandking", 60.0, 178.00, 10, 2, true, true, true},
	{true, "Blista Compact", 60.0, 164.00, 4, 2, true, true, true},
	{false, "Police Maverick", 1000.0, 1.00, MAX_BOOT_SLOTS, 4, true, true, true},
	{true, "Boxville", 60.0, 109.00, 12, 4, true, true, true},
	{true, "Benson", 70.0, 124.00, 12, 2, true, true, true},
	{true, "Mesa", 60.0, 141.00, 2, 2, true, true, true},
	{false, "RCGoblin", 1.0, 1.00, 0, 1, true, true, true}, 
	{true, "HotringRacer A", 80.0, 216.00, 0, 2, true, true, true},
	{true, "HotringRacer B", 80.0, 216.00, 0, 2, true, true, true},
	{true, "BloodringBanger", 40.0, 174.00, 0, 2, true, true, true},
	{true, "Rancher", 80.0, 140.00, 10, 2, true, true, true},
	{true, "SuperGT", 60.0, 180.00, 4, 2, true, true, true},
	{true, "Elegant", 65.0, 167.00, 6, 4, true, true, true},
	{true, "Journey", 90.0, 108.00, 12, 2, true, true, true},
	{false, "Bike", 1.0, 1.00, 0, 1, false, true, true}, 
	{false, "MountainBike", 1.0, 1.00, 0, 1, false, true, true}, 
	{false, "Beagle", 300.0, 1.00, MAX_BOOT_SLOTS, 2, true, true, true}, 
	{false, "Cropdust", 150.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true}, 
	{false, "Stunt", 150.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true}, 
	{true, "Tanker", 130.0, 121.00, 0, 2, true, true, true},
	{true, "Roadtrain", 150.0, 143.00, 0, 2, true, true, true},
	{true, "Nebula", 60.0, 158.00, 4, 4, true, true, true},
	{true, "Majestic", 45.0, 158.00, 4, 2, true, true, true},
	{true, "Buccaneer", 50.0, 165.00, 4, 2, true, true, true},
	{false, "Shamal", 3000.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{false, "Hydra", 3000.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{true, "FCR-900", 50.0, 169.00, 0, 2, true, true, false},
	{true, "NRG-500", 40.0, 190.00, 0, 2, true, true, false},
	{true, "HPV1000", 60.0, 168.00, 0, 2, true, true, false},
	{true, "CementTruck", 30.0, 131.00, 0, 2, true, true, true},
	{true, "TowTruck", 60.0, 162.00, 4, 2, true, true, true},
	{true, "Fortune", 40.0, 159.00, 4, 2, true, true, true},
	{true, "Cadrona", 45.0, 150.00, 4, 2, true, true, true},
	{true, "FBITruck", 80.0, 178.00, 12, 2, true, true, true},
	{true, "Willard", 55.0, 150.00, 6, 4, true, true, true},
	{true, "Forklift", 10.0, 61.00, 0, 1, true, true, true},
	{true, "Tractor", 30.0, 71.00, 0, 1, true, true, true},
	{true, "Combine", 20.0, 111.00, 0, 1, true, true, true},
	{true, "Feltzer", 50.0, 168.00, 6, 2, true, true, true},
	{true, "Remington", 60.0, 170.00, 4, 2, true, true, true},
	{true, "Slamvan", 60.0, 159.00, 4, 2, true, true, true},
	{true, "Blade", 62.0, 174.00, 6, 2, true, true, true},
	{false, "Freight", 1.0, 1.00, 0, 500, true, true, true},
	{false, "Streak", 1.0, 1.00, 0, 500, true, true, true},
	{true, "Vortex", 20.0, 100.00, 0, 1, true, true, true},
	{true, "Vincent", 40.0, 150.00, 6, 4, true, true, true},
	{true, "Bullet", 60.0, 204.00, 4, 2, true, true, true},
	{true, "Clover", 45.0, 165.00, 4, 2, true, true, true},
	{true, "Sadler", 60.0, 152.00, 6, 2, true, true, true},
	{true, "FiretruckLA", 120.0, 149.00, 0, 2, true, true, true},
	{true, "Hustler", 80.0, 148.00, 12, 2, true, true, true},
	{true, "Intruder", 60.0, 150.00, 6, 4, true, true, true},
	{true, "Primo", 55.0, 144.00, 4, 4, true, true, true},
	{false, "Cargobob", 400.0, 1.00, MAX_BOOT_SLOTS, 2, true, true, true},
	{true, "Tampa", 60.0, 154.00, 4, 2, true, true, true},
	{true, "Sunrise", 60.0, 146.00, 6, 4, true, true, true},
	{true, "Merit", 55.0, 158.00, 6, 4, true, true, true},
	{true, "Utility", 60.0, 122.00, 6, 2, true, true, true},
	{false, "Nevada", 15000.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{true, "Yosemite", 60.0, 145.00, 8, 2, true, true, true},
	{true, "Windsor", 45.0, 159.00, 4, 2, true, true, true},
	{true, "MonsterA", 45.0, 111.00, 20, 2, true, true, true},
	{true, "MonsterB", 60.0, 111.00, 20, 2, true, true, true},
	{true, "Uranus", 80.0, 157.00, 4, 2, true, true, true},
	{true, "Jester", 60.0, 179.00, 4, 2, true, true, true},
	{true, "Sultan", 60.0, 170.00, 6, 4, true, true, true},
	{true, "Stratum", 60.0, 155.00, 8, 4, true, true, true},
	{true, "Elegy", 60.0, 179.00, 6, 2, true, true, true},
	{false, "Raindance", 400.0, 1.00,  MAX_BOOT_SLOTS, 2, true, true, true},
	{false, "RC Tiger", 1.0, 1.00, 500, 1, true, true, true},
	{true, "Flash", 60.0, 166.00, 8, 2, true, true, true},
	{true, "Tahoma", 40.0, 161.00, 6, 4, true, true, true},
	{true, "Savanna", 50.0, 174.00, 6, 4, true, true, true},
	{true, "Bandito", 30.0, 147.00, 0, 1, true, true, true},
	{false, "FreightFlat", 1.0, 1.00, 0, 0, false, false, false},
	{false, "StreakCarriage", 1.0, 1.00, 0, 0, false, false, false},
	{true, "Kart", 10.0, 94.00, 0, 1, true, true, true},
	{true, "Mower", 15.0, 61.00, 0, 1, true, true, true},
	{true, "Duneride", 80.0, 111.00, 20, 2, true, true, true},
	{true, "Sweeper", 20.0, 61.00, 2, 1, true, true, true},
	{true, "Broadway", 45.0, 159.00, 4, 2, true, true, true},
	{true, "Tornado", 40.0, 159.00, 4, 2, true, true, true},
	{false, "AT-400", 25000.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{true, "DFT-30", 80.0, 131.00, 4, 2, true, true, true},
	{true, "Huntley", 80.0, 159.00, 8, 4, true, true, true},
	{true, "Stafford", 60.0, 154.00, 6, 4, true, true, true},
	{true, "BF-400", 35.0, 168.00, 0, 2, true, true, false},
	{true, "Newsvan", 60.0, 137.00, 10, 4, false, false, false},
	{true, "Tug", 15.0, 86.00, 0, 1, true, true, true},
	{false, "Trailer 3", 1.0, 1.00, 0, 0, true, true, true},
	{true, "Emperor", 60.0, 154.00, 6, 4, true, true, true},
	{true, "Wayfarer", 50.0, 158.00, 0, 2, true, true, false},
	{true, "Euros", 50.0, 166.00, 4, 2, true, true, true},
	{true, "Hotdog", 60.0, 109.00, 12, 2, true, true, true},
	{true, "Club", 65.0, 164.00, 6, 2, true, true, true},
	{false, "FreightCarriage", 1.0, 1.00, 0, 0, false, false, false},
	{false, "Trailer3", 1.0, 1.00, 0, 0, false, false, false},
	{false, "Andromada", 30000.0, 1.00, MAX_BOOT_SLOTS, 500, true, true, true},
	{false, "Dodo", 250.0, 1.00, MAX_BOOT_SLOTS, 2, true, true, true},
	{false, "RCCam", 1.0, 1.00, 500, 2, true, true, true},
	{false, "Launch", 1.0, 1.00, MAX_BOOT_SLOTS, 1, true, true, true},
	{true, "LSPD", 60.0, 177.00, 8, 4, true, true, true},
	{true, "SFPD", 60.0, 177.00, 8, 4, true, true, true},
	{true, "LVPD", 60.0, 177.00, 8, 4, true, true, true},
	{true, "PoliceRanger", 90.0, 159.00, 12, 2, true, true, true},
	{true, "Picador", 40.0, 152.00, 6, 2, true, true, true},
	{true, "S.W.A.T.Van", 30.0, 111.00, 0, 2, true, true, true},
	{true, "Alpha", 60.0, 170.00, 4, 2, true, true, true},
	{true, "Phoenix", 60.0, 172.00, 4, 2, true, true, true},
	{true, "Glendale", 30.0, 148.00, 6, 4, true, true, true},
	{true, "Sadler", 40.0, 152.00, 6, 2, true, true, true},
	{false, "LuggageTrailerA", 1.0, 1.00, 0, 0, true, true, true},
	{false, "LuggageTrailerB", 1.0, 1.00, 0, 0, true, true, true},
	{false, "StairTrailer", 1.0, 1.00, 0, 0, true, true, true},
	{true, "Boxville", 90.0, 108.00, 15, 4, true, true, true},
	{false, "FarmPlow", 1.0, 1.00, 0, 0, true, true, true},
	{false, "UtilityTrailer", 1.0, 1.00, 0, 0, true, true, true}
};

enum
{
	BOOT_TYPE_WEAPON,
	BOOT_TYPE_MEDICINES,
	BOOT_TYPE_CANNABIS,
	BOOT_TYPE_CRACK
};
enum enum_VEHICLE_BOOT
{
	bool:vehicle_boot_VALID,
	vehicle_boot_OBJECT_ID,
	vehicle_boot_TYPE,
	vehicle_boot_INT,
	vehicle_boot_INT_EXTRA,
}
new VEHICLE_BOOT[MAX_VEHICLES][MAX_BOOT_SLOTS][enum_VEHICLE_BOOT];

// AGRICULTOR
enum
{
	PLANT_TYPE_MEDICINE, 	// VIDA
	PLANT_TYPE_CANNABIS,	// YOKSETIOXD
	PLANT_TYPE_CRACK,		//CHALECO
}

enum seed_info_enum
{
	seed_info_TYPE,
	seed_info_PLANT_TYPE,
	seed_info_EXP,
	seed_info_NAME[24],
	seed_info_PRICE,
}
new seed_info[][seed_info_enum] =
{
	{TYPE_LEGAL, PLANT_TYPE_MEDICINE, 0, "Medicina", 50},
	{TYPE_ILLEGAL, PLANT_TYPE_CANNABIS, 100, "Marihuana", 150},
	{TYPE_ILLEGAL, PLANT_TYPE_CRACK, 200, "Coca", 300}
};

enum plant_info_enum
{
	plant_info_SEEDS,
	plant_info_NAME[24],
}
new plant_info[][plant_info_enum] =
{
	{2, "Medicamento"},
	{4, "Marihuana"},
	{10, "Crack"}
};


#define MAX_PLANTS	500
enum PLANTS_ENUM
{
	bool:plant_VALID,
	bool:plant_GROWING,
	bool:plant_INVISIBLE,
	Float:plant_GROWING_PROGRESS,
	plant_TYPE,
	plant_PLANTED_BY_ACCOUNT_ID,
	plant_PLANTED_BY_NAME[24],
	plant_OBJECT_ID,
	Text3D:plant_LABEL_ID,
	plant_EXPIRE_TIME,
	plant_TIMER,
	plant_IMMUNITY,
}
new PLANTS[MAX_PLANTS][PLANTS_ENUM];

enum
{
	OBJECT_TYPE_NONE,
	OBJECT_TYPE_PLANT,
	OBJECT_TYPE_POLICE,
	OBJECT_TYPE_GRAFFITI,
	OBJECT_TYPE_TEST,
	OBJECT_TYPE_ATM
}

/* SYSTEM - GPS */
enum 
{
	CHECKPOINT_TYPE_NONE,
	CHECKPOINT_TYPE_GPS,
	CHECKPOINT_TYPE_UNLOAD_TRUCK,
	CHECKPOINT_TYPE_FINISH_TRUCK,
	CHECKPOINT_TYPE_FUMIGATOR,
	CHECKPOINT_TYPE_TRASH,
	CHECKPOINT_TYPE_FINISH_TRASH,
	CHECKPOINT_TYPE_LUMBERJACK,
	CHECKPOINT_TYPE_PIZZA_DEL,
	CHECKPOINT_TYPE_PIZZA_FINISH,
	CHECKPOINT_TYPE_TRAFFICKER,
	CHECKPOINT_TYPE_END_TRAFFICKER,
	CHECKPOINT_TYPE_TRAILER,
	CHECKPOINT_TYPE_FINISH_TRAILER,
	CHECKPOINT_TYPE_MECHANIC,
	CHECKPOINT_TYPE_FINISH_MECHANIC
}

#define MAX_PLAYER_GPS_SAVES	10
#define MAX_LISTITEMS			35
enum Player_GPS_Enum
{
	player_gps_VALID,
	player_gps_ID,
	player_gps_NAME[24],
	Float:player_gps_X,
	Float:player_gps_Y,
	Float:player_gps_Z,
	player_gps_WORLD,
	player_gps_INTERIOR,
}
new PLAYER_GPS[MAX_PLAYERS][MAX_PLAYER_GPS_SAVES][Player_GPS_Enum];


/* SYSTEM - PHONE */
enum
{
	CALL_GAME_STATE_NONE,
	CALL_STATE_WAITING_RESPONSE,
	CALL_STATE_INCOMING_CALL,
	CALL_STATE_ESTABLISHED,
}

enum
{
	PHONE_STATE_ON,
	PHONE_STATE_OFF,
}

#define MAX_PHONE_CONTACTS	20
enum Phone_Book_Enum
{
	phone_book_contact_VALID,
	
	phone_book_contact_ID,
	phone_book_contact_NAME[24],
	phone_book_contact_PHONE_NUMBER,
}
new PLAYER_PHONE_BOOK[MAX_PLAYERS][MAX_PHONE_CONTACTS][Phone_Book_Enum]; //PB = PhoneBook

enum
{
	SEX_MALE,
	SEX_FEMALE,
}

enum e_ZONEINFO
{
	z_Name[45],
    Float:z_MinX,
    Float:z_MinY,
    Float:z_MinZ,
    Float:z_MaxX,
    Float:z_MaxY,
    Float:z_MaxZ,
}
new g_Zones[][e_ZONEINFO] =
{
	{"Caligula's Palace",            2087.30,  1543.20,   900.00,  2437.30,  1703.20,   1200.90},
	{"The Four Dragons Casino",      1817.30,   863.20,   900.00,  2027.30,  1083.20,   1200.90},
	{"The Big Ear",                -410.00,  1403.30,    -3.00,  -137.90,  1681.20,   200.00},
	{"Aldea Malvada",               -1372.10,  2498.50,     0.00, -1277.50,  2615.30,   200.00},
	{"Angel Pine",                  -2324.90, -2584.20,    -6.10, -1964.20, -2212.10,   200.00},
	{"Arco del Oeste",               -901.10,  2221.80,     0.00,  -592.00,  2571.90,   200.00},
	{"Avispa Country Club",         -2646.40,  -355.40,     0.00, -2270.00,  -222.50,   200.00},
	{"Avispa Country Club",         -2831.80,  -430.20,    -6.10, -2646.40,  -222.50,   200.00},
	{"Avispa Country Club",         -2361.50,  -417.10,     0.00, -2270.00,  -355.40,   200.00},
	{"Avispa Country Club",         -2667.80,  -302.10,   -28.80, -2646.40,  -262.30,    71.10},
	{"Avispa Country Club",         -2470.00,  -355.40,     0.00, -2270.00,  -318.40,    46.10},
	{"Avispa Country Club",         -2550.00,  -355.40,     0.00, -2470.00,  -318.40,    39.70},
	{"Back o Beyond",               -1166.90, -2641.10,     0.00,  -321.70, -1856.00,   200.00},
	{"Battery Point",               -2741.00,  1268.40,    -4.50, -2533.00,  1490.40,   200.00},
	{"Bayside",                     -2741.00,  2175.10,     0.00, -2353.10,  2722.70,   200.00},
	{"Bayside Marina",              -2353.10,  2275.70,     0.00, -2153.10,  2475.70,   200.00},
	{"Beacon Hill",                  -399.60, -1075.50,    -1.40,  -319.00,  -977.50,   198.50},
	{"Blackfield",                    964.30,  1203.20,   -89.00,  1197.30,  1403.20,   110.90},
	{"Blackfield",                    964.30,  1403.20,   -89.00,  1197.30,  1726.20,   110.90},
	{"Blackfield Chapel",            1375.60,   596.30,   -89.00,  1558.00,   823.20,   110.90},
	{"Blackfield Chapel",            1325.60,   596.30,   -89.00,  1375.60,   795.00,   110.90},
	{"Blackfield Intersection",      1197.30,  1044.60,   -89.00,  1277.00,  1163.30,   110.90},
	{"Blackfield Intersection",      1166.50,   795.00,   -89.00,  1375.60,  1044.60,   110.90},
	{"Blackfield Intersection",      1277.00,  1044.60,   -89.00,  1315.30,  1087.60,   110.90},
	{"Blackfield Intersection",      1375.60,   823.20,   -89.00,  1457.30,   919.40,   110.90},
	{"Blueberry",                     104.50,  -220.10,     2.30,   349.60,   152.20,   200.00},
	{"Blueberry",                      19.60,  -404.10,     3.80,   349.60,  -220.10,   200.00},
	{"Blueberry Acres",              -319.60,  -220.10,     0.00,   104.50,   293.30,   200.00},
	{"Caligula's Palace",            2087.30,  1543.20,   -89.00,  2437.30,  1703.20,   110.90},
	{"Caligula's Palace",            2137.40,  1703.20,   -89.00,  2437.30,  1783.20,   110.90},
	{"Calton Heights",              -2274.10,   744.10,    -6.10, -1982.30,  1358.90,   200.00},
	{"Chinatown",                   -2274.10,   578.30,    -7.60, -2078.60,   744.10,   200.00},
	{"City Hall",                   -2867.80,   277.40,    -9.10, -2593.40,   458.40,   200.00},
	{"Come-A-Lot",                   2087.30,   943.20,   -89.00,  2623.10,  1203.20,   110.90},
	{"Commerce",                     1323.90, -1842.20,   -89.00,  1701.90, -1722.20,   110.90},
	{"Commerce",                     1323.90, -1722.20,   -89.00,  1440.90, -1577.50,   110.90},
	{"Commerce",                     1370.80, -1577.50,   -89.00,  1463.90, -1384.90,   110.90},
	{"Commerce",                     1463.90, -1577.50,   -89.00,  1667.90, -1430.80,   110.90},
	{"Commerce",                     1583.50, -1722.20,   -89.00,  1758.90, -1577.50,   110.90},
	{"Commerce",                     1667.90, -1577.50,   -89.00,  1812.60, -1430.80,   110.90},
	{"Conference Center",            1046.10, -1804.20,   -89.00,  1323.90, -1722.20,   110.90},
	{"Conference Center",            1073.20, -1842.20,   -89.00,  1323.90, -1804.20,   110.90},
	{"Cranberry Station",           -2007.80,    56.30,     0.00, -1922.00,   224.70,   100.00},
	{"Creek",                        2749.90,  1937.20,   -89.00,  2921.60,  2669.70,   110.90},
	{"Dillimore",                     580.70,  -674.80,    -9.50,   861.00,  -404.70,   200.00},
	{"Doherty",                     -2270.00,  -324.10,    -0.00, -1794.90,  -222.50,   200.00},
	{"Doherty",                     -2173.00,  -222.50,    -0.00, -1794.90,   265.20,   200.00},
	{"Downtown",                    -1982.30,   744.10,    -6.10, -1871.70,  1274.20,   200.00},
	{"Downtown",                    -1871.70,  1176.40,    -4.50, -1620.30,  1274.20,   200.00},
	{"Downtown",                    -1700.00,   744.20,    -6.10, -1580.00,  1176.50,   200.00},
	{"Downtown",                    -1580.00,   744.20,    -6.10, -1499.80,  1025.90,   200.00},
	{"Downtown",                    -2078.60,   578.30,    -7.60, -1499.80,   744.20,   200.00},
	{"Downtown",                    -1993.20,   265.20,    -9.10, -1794.90,   578.30,   200.00},
	{"Downtown Los Santos",          1463.90, -1430.80,   -89.00,  1724.70, -1290.80,   110.90},
	{"Downtown Los Santos",          1724.70, -1430.80,   -89.00,  1812.60, -1250.90,   110.90},
	{"Downtown Los Santos",          1463.90, -1290.80,   -89.00,  1724.70, -1150.80,   110.90},
	{"Downtown Los Santos",          1370.80, -1384.90,   -89.00,  1463.90, -1170.80,   110.90},
	{"Downtown Los Santos",          1724.70, -1250.90,   -89.00,  1812.60, -1150.80,   110.90},
	{"Downtown Los Santos",          1370.80, -1170.80,   -89.00,  1463.90, -1130.80,   110.90},
	{"Downtown Los Santos",          1378.30, -1130.80,   -89.00,  1463.90, -1026.30,   110.90},
	{"Downtown Los Santos",          1391.00, -1026.30,   -89.00,  1463.90,  -926.90,   110.90},
	{"Downtown Los Santos",          1507.50, -1385.20,   110.90,  1582.50, -1325.30,   335.90},
	{"East Beach",                   2632.80, -1852.80,   -89.00,  2959.30, -1668.10,   110.90},
	{"East Beach",                   2632.80, -1668.10,   -89.00,  2747.70, -1393.40,   110.90},
	{"East Beach",                   2747.70, -1668.10,   -89.00,  2959.30, -1498.60,   110.90},
	{"East Beach",                   2747.70, -1498.60,   -89.00,  2959.30, -1120.00,   110.90},
	{"East Los Santos",              2421.00, -1628.50,   -89.00,  2632.80, -1454.30,   110.90},
	{"East Los Santos",              2222.50, -1628.50,   -89.00,  2421.00, -1494.00,   110.90},
	{"East Los Santos",              2266.20, -1494.00,   -89.00,  2381.60, -1372.00,   110.90},
	{"East Los Santos",              2381.60, -1494.00,   -89.00,  2421.00, -1454.30,   110.90},
	{"East Los Santos",              2281.40, -1372.00,   -89.00,  2381.60, -1135.00,   110.90},
	{"East Los Santos",              2381.60, -1454.30,   -89.00,  2462.10, -1135.00,   110.90},
	{"East Los Santos",              2462.10, -1454.30,   -89.00,  2581.70, -1135.00,   110.90},
	{"Easter Basin",                -1794.90,   249.90,    -9.10, -1242.90,   578.30,   200.00},
	{"Easter Basin",                -1794.90,   -50.00,    -0.00, -1499.80,   249.90,   200.00},
	{"Easter Bay Airport",          -1499.80,   -50.00,    -0.00, -1242.90,   249.90,   200.00},
	{"Easter Bay Airport",          -1794.90,  -730.10,    -3.00, -1213.90,   -50.00,   200.00},
	{"Easter Bay Airport",          -1213.90,  -730.10,     0.00, -1132.80,   -50.00,   200.00},
	{"Easter Bay Airport",          -1242.90,   -50.00,     0.00, -1213.90,   578.30,   200.00},
	{"Easter Bay Airport",          -1213.90,   -50.00,    -4.50,  -947.90,   578.30,   200.00},
	{"Easter Bay Airport",          -1315.40,  -405.30,    15.40, -1264.40,  -209.50,    25.40},
	{"Easter Bay Airport",          -1354.30,  -287.30,    15.40, -1315.40,  -209.50,    25.40},
	{"Easter Bay Airport",          -1490.30,  -209.50,    15.40, -1264.40,  -148.30,    25.40},
	{"Easter Bay Chemicals",        -1132.80,  -768.00,     0.00,  -956.40,  -578.10,   200.00},
	{"Easter Bay Chemicals",        -1132.80,  -787.30,     0.00,  -956.40,  -768.00,   200.00},
	{"El Castillo del Diablo",       -464.50,  2217.60,     0.00,  -208.50,  2580.30,   200.00},
	{"El Castillo del Diablo",       -208.50,  2123.00,    -7.60,   114.00,  2337.10,   200.00},
	{"El Castillo del Diablo",       -208.50,  2337.10,     0.00,     8.40,  2487.10,   200.00},
	{"El Corona",                    1812.60, -2179.20,   -89.00,  1970.60, -1852.80,   110.90},
	{"El Corona",                    1692.60, -2179.20,   -89.00,  1812.60, -1842.20,   110.90},
	{"El Quebrados",                -1645.20,  2498.50,     0.00, -1372.10,  2777.80,   200.00},
	{"Esplanade East",              -1620.30,  1176.50,    -4.50, -1580.00,  1274.20,   200.00},
	{"Esplanade East",              -1580.00,  1025.90,    -6.10, -1499.80,  1274.20,   200.00},
	{"Esplanade East",              -1499.80,   578.30,   -79.60, -1339.80,  1274.20,    20.30},
	{"Esplanade North",             -2533.00,  1358.90,    -4.50, -1996.60,  1501.20,   200.00},
	{"Esplanade North",             -1996.60,  1358.90,    -4.50, -1524.20,  1592.50,   200.00},
	{"Esplanade North",             -1982.30,  1274.20,    -4.50, -1524.20,  1358.90,   200.00},
	{"Fallen Tree",                  -792.20,  -698.50,    -5.30,  -452.40,  -380.00,   200.00},
	{"Fallow Bridge",                 434.30,   366.50,     0.00,   603.00,   555.60,   200.00},
	{"Fern Ridge",                    508.10,  -139.20,     0.00,  1306.60,   119.50,   200.00},
	{"Financial",                   -1871.70,   744.10,    -6.10, -1701.30,  1176.40,   300.00},
	{"Fisher's Lagoon",              1916.90,  -233.30,  -100.00,  2131.70,    13.80,   200.00},
	{"Flint Intersection",           -187.70, -1596.70,   -89.00,    17.00, -1276.60,   110.90},
	{"Flint Range",                  -594.10, -1648.50,     0.00,  -187.70, -1276.60,   200.00},
	{"Fort Carson",                  -376.20,   826.30,    -3.00,   123.70,  1220.40,   200.00},
	{"Foster Valley",               -2270.00,  -430.20,    -0.00, -2178.60,  -324.10,   200.00},
	{"Foster Valley",               -2178.60,  -599.80,    -0.00, -1794.90,  -324.10,   200.00},
	{"Foster Valley",               -2178.60, -1115.50,     0.00, -1794.90,  -599.80,   200.00},
	{"Foster Valley",               -2178.60, -1250.90,     0.00, -1794.90, -1115.50,   200.00},
	{"Frederick Bridge",             2759.20,   296.50,     0.00,  2774.20,   594.70,   200.00},
	{"Gant Bridge",                 -2741.40,  1659.60,    -6.10, -2616.40,  2175.10,   200.00},
	{"Gant Bridge",                 -2741.00,  1490.40,    -6.10, -2616.40,  1659.60,   200.00},
	{"Ganton",                       2222.50, -1852.80,   -89.00,  2632.80, -1722.30,   110.90},
	{"Ganton",                       2222.50, -1722.30,   -89.00,  2632.80, -1628.50,   110.90},
	{"Garcia",                      -2411.20,  -222.50,    -0.00, -2173.00,   265.20,   200.00},
	{"Garcia",                      -2395.10,  -222.50,    -5.30, -2354.00,  -204.70,   200.00},
	{"Garver Bridge",               -1339.80,   828.10,   -89.00, -1213.90,  1057.00,   110.90},
	{"Garver Bridge",               -1213.90,   950.00,   -89.00, -1087.90,  1178.90,   110.90},
	{"Garver Bridge",               -1499.80,   696.40,  -179.60, -1339.80,   925.30,    20.30},
	{"Glen Park",                    1812.60, -1449.60,   -89.00,  1996.90, -1350.70,   110.90},
	{"Glen Park",                    1812.60, -1100.80,   -89.00,  1994.30,  -973.30,   110.90},
	{"Glen Park",                    1812.60, -1350.70,   -89.00,  2056.80, -1100.80,   110.90},
	{"Green Palms",                   176.50,  1305.40,    -3.00,   338.60,  1520.70,   200.00},
	{"Greenglass College",            964.30,  1044.60,   -89.00,  1197.30,  1203.20,   110.90},
	{"Greenglass College",            964.30,   930.80,   -89.00,  1166.50,  1044.60,   110.90},
	{"Hampton Barns",                 603.00,   264.30,     0.00,   761.90,   366.50,   200.00},
	{"Hankypanky Point",             2576.90,    62.10,     0.00,  2759.20,   385.50,   200.00},
	{"Harry Gold Parkway",           1777.30,   863.20,   -89.00,  1817.30,  2342.80,   110.90},
	{"Hashbury",                    -2593.40,  -222.50,    -0.00, -2411.20,    54.70,   200.00},
	{"Hilltop Farm",                  967.30,  -450.30,    -3.00,  1176.70,  -217.90,   200.00},
	{"Hunter Quarry",                 337.20,   710.80,  -115.20,   860.50,  1031.70,   203.70},
	{"Idlewood",                     1812.60, -1852.80,   -89.00,  1971.60, -1742.30,   110.90},
	{"Idlewood",                     1812.60, -1742.30,   -89.00,  1951.60, -1602.30,   110.90},
	{"Idlewood",                     1951.60, -1742.30,   -89.00,  2124.60, -1602.30,   110.90},
	{"Idlewood",                     1812.60, -1602.30,   -89.00,  2124.60, -1449.60,   110.90},
	{"Idlewood",                     2124.60, -1742.30,   -89.00,  2222.50, -1494.00,   110.90},
	{"Idlewood",                     1971.60, -1852.80,   -89.00,  2222.50, -1742.30,   110.90},
	{"Jefferson",                    1996.90, -1449.60,   -89.00,  2056.80, -1350.70,   110.90},
	{"Jefferson",                    2124.60, -1494.00,   -89.00,  2266.20, -1449.60,   110.90},
	{"Jefferson",                    2056.80, -1372.00,   -89.00,  2281.40, -1210.70,   110.90},
	{"Jefferson",                    2056.80, -1210.70,   -89.00,  2185.30, -1126.30,   110.90},
	{"Jefferson",                    2185.30, -1210.70,   -89.00,  2281.40, -1154.50,   110.90},
	{"Jefferson",                    2056.80, -1449.60,   -89.00,  2266.20, -1372.00,   110.90},
	{"Julius Thruway East",          2623.10,   943.20,   -89.00,  2749.90,  1055.90,   110.90},
	{"Julius Thruway East",          2685.10,  1055.90,   -89.00,  2749.90,  2626.50,   110.90},
	{"Julius Thruway East",          2536.40,  2442.50,   -89.00,  2685.10,  2542.50,   110.90},
	{"Julius Thruway East",          2625.10,  2202.70,   -89.00,  2685.10,  2442.50,   110.90},
	{"Julius Thruway North",         2498.20,  2542.50,   -89.00,  2685.10,  2626.50,   110.90},
	{"Julius Thruway North",         2237.40,  2542.50,   -89.00,  2498.20,  2663.10,   110.90},
	{"Julius Thruway North",         2121.40,  2508.20,   -89.00,  2237.40,  2663.10,   110.90},
	{"Julius Thruway North",         1938.80,  2508.20,   -89.00,  2121.40,  2624.20,   110.90},
	{"Julius Thruway North",         1534.50,  2433.20,   -89.00,  1848.40,  2583.20,   110.90},
	{"Julius Thruway North",         1848.40,  2478.40,   -89.00,  1938.80,  2553.40,   110.90},
	{"Julius Thruway North",         1704.50,  2342.80,   -89.00,  1848.40,  2433.20,   110.90},
	{"Julius Thruway North",         1377.30,  2433.20,   -89.00,  1534.50,  2507.20,   110.90},
	{"Julius Thruway South",         1457.30,   823.20,   -89.00,  2377.30,   863.20,   110.90},
	{"Julius Thruway South",         2377.30,   788.80,   -89.00,  2537.30,   897.90,   110.90},
	{"Julius Thruway West",          1197.30,  1163.30,   -89.00,  1236.60,  2243.20,   110.90},
	{"Julius Thruway West",          1236.60,  2142.80,   -89.00,  1297.40,  2243.20,   110.90},
	{"Juniper Hill",                -2533.00,   578.30,    -7.60, -2274.10,   968.30,   200.00},
	{"Juniper Hollow",              -2533.00,   968.30,    -6.10, -2274.10,  1358.90,   200.00},
	{"K.A.C.C. Military Fuels",      2498.20,  2626.50,   -89.00,  2749.90,  2861.50,   110.90},
	{"Kincaid Bridge",              -1339.80,   599.20,   -89.00, -1213.90,   828.10,   110.90},
	{"Kincaid Bridge",              -1213.90,   721.10,   -89.00, -1087.90,   950.00,   110.90},
	{"Kincaid Bridge",              -1087.90,   855.30,   -89.00,  -961.90,   986.20,   110.90},
	{"King's",                      -2329.30,   458.40,    -7.60, -1993.20,   578.30,   200.00},
	{"King's",                      -2411.20,   265.20,    -9.10, -1993.20,   373.50,   200.00},
	{"King's",                      -2253.50,   373.50,    -9.10, -1993.20,   458.40,   200.00},
	{"LVA Freight Depot",            1457.30,   863.20,   -89.00,  1777.40,  1143.20,   110.90},
	{"LVA Freight Depot",            1375.60,   919.40,   -89.00,  1457.30,  1203.20,   110.90},
	{"LVA Freight Depot",            1277.00,  1087.60,   -89.00,  1375.60,  1203.20,   110.90},
	{"LVA Freight Depot",            1315.30,  1044.60,   -89.00,  1375.60,  1087.60,   110.90},
	{"LVA Freight Depot",            1236.60,  1163.40,   -89.00,  1277.00,  1203.20,   110.90},
	{"Las Barrancas",                -926.10,  1398.70,    -3.00,  -719.20,  1634.60,   200.00},
	{"Las Brujas",                   -365.10,  2123.00,    -3.00,  -208.50,  2217.60,   200.00},
	{"Las Colinas",                  1994.30, -1100.80,   -89.00,  2056.80,  -920.80,   110.90},
	{"Las Colinas",                  2056.80, -1126.30,   -89.00,  2126.80,  -920.80,   110.90},
	{"Las Colinas",                  2185.30, -1154.50,   -89.00,  2281.40,  -934.40,   110.90},
	{"Las Colinas",                  2126.80, -1126.30,   -89.00,  2185.30,  -934.40,   110.90},
	{"Las Colinas",                  2747.70, -1120.00,   -89.00,  2959.30,  -945.00,   110.90},
	{"Las Colinas",                  2632.70, -1135.00,   -89.00,  2747.70,  -945.00,   110.90},
	{"Las Colinas",                  2281.40, -1135.00,   -89.00,  2632.70,  -945.00,   110.90},
	{"Las Payasadas",                -354.30,  2580.30,     2.00,  -133.60,  2816.80,   200.00},
	{"Las Venturas Airport",         1236.60,  1203.20,   -89.00,  1457.30,  1883.10,   110.90},
	{"Las Venturas Airport",         1457.30,  1203.20,   -89.00,  1777.30,  1883.10,   110.90},
	{"Las Venturas Airport",         1457.30,  1143.20,   -89.00,  1777.40,  1203.20,   110.90},
	{"Las Venturas Airport",         1515.80,  1586.40,   -12.50,  1729.90,  1714.50,    87.50},
	{"Last Dime Motel",              1823.00,   596.30,   -89.00,  1997.20,   823.20,   110.90},
	{"Leafy Hollow",                -1166.90, -1856.00,     0.00,  -815.60, -1602.00,   200.00},
	{"Lil' Probe Inn",                -90.20,  1286.80,    -3.00,   153.80,  1554.10,   200.00},
	{"Linden Side",                  2749.90,   943.20,   -89.00,  2923.30,  1198.90,   110.90},
	{"Linden Station",               2749.90,  1198.90,   -89.00,  2923.30,  1548.90,   110.90},
	{"Linden Station",               2811.20,  1229.50,   -39.50,  2861.20,  1407.50,    60.40},
	{"Little Mexico",                1701.90, -1842.20,   -89.00,  1812.60, -1722.20,   110.90},
	{"Little Mexico",                1758.90, -1722.20,   -89.00,  1812.60, -1577.50,   110.90},
	{"Los Flores",                   2581.70, -1454.30,   -89.00,  2632.80, -1393.40,   110.90},
	{"Los Flores",                   2581.70, -1393.40,   -89.00,  2747.70, -1135.00,   110.90},
	{"Los Santos International",     1249.60, -2394.30,   -89.00,  1852.00, -2179.20,   110.90},
	{"Los Santos International",     1852.00, -2394.30,   -89.00,  2089.00, -2179.20,   110.90},
	{"Los Santos International",     1382.70, -2730.80,   -89.00,  2201.80, -2394.30,   110.90},
	{"Los Santos International",     1974.60, -2394.30,   -39.00,  2089.00, -2256.50,    60.90},
	{"Los Santos International",     1400.90, -2669.20,   -39.00,  2189.80, -2597.20,    60.90},
	{"Los Santos International",     2051.60, -2597.20,   -39.00,  2152.40, -2394.30,    60.90},
	{"Marina",                        647.70, -1804.20,   -89.00,   851.40, -1577.50,   110.90},
	{"Marina",                        647.70, -1577.50,   -89.00,   807.90, -1416.20,   110.90},
	{"Marina",                        807.90, -1577.50,   -89.00,   926.90, -1416.20,   110.90},
	{"Market",                        787.40, -1416.20,   -89.00,  1072.60, -1310.20,   110.90},
	{"Market",                        952.60, -1310.20,   -89.00,  1072.60, -1130.80,   110.90},
	{"Market",                       1072.60, -1416.20,   -89.00,  1370.80, -1130.80,   110.90},
	{"Market",                        926.90, -1577.50,   -89.00,  1370.80, -1416.20,   110.90},
	{"Market Station",                787.40, -1410.90,   -34.10,   866.00, -1310.20,    65.80},
	{"Martin Bridge",                -222.10,   293.30,     0.00,  -122.10,   476.40,   200.00},
	{"Missionary Hill",             -2994.40,  -811.20,     0.00, -2178.60,  -430.20,   200.00},
	{"Montgomery",                   1119.50,   119.50,    -3.00,  1451.40,   493.30,   200.00},
	{"Montgomery",                   1451.40,   347.40,    -6.10,  1582.40,   420.80,   200.00},
	{"Montgomery Intersection",      1546.60,   208.10,     0.00,  1745.80,   347.40,   200.00},
	{"Montgomery Intersection",      1582.40,   347.40,     0.00,  1664.60,   401.70,   200.00},
	{"Mulholland",                   1414.00,  -768.00,   -89.00,  1667.60,  -452.40,   110.90},
	{"Mulholland",                   1281.10,  -452.40,   -89.00,  1641.10,  -290.90,   110.90},
	{"Mulholland",                   1269.10,  -768.00,   -89.00,  1414.00,  -452.40,   110.90},
	{"Mulholland",                   1357.00,  -926.90,   -89.00,  1463.90,  -768.00,   110.90},
	{"Mulholland",                   1318.10,  -910.10,   -89.00,  1357.00,  -768.00,   110.90},
	{"Mulholland",                   1169.10,  -910.10,   -89.00,  1318.10,  -768.00,   110.90},
	{"Mulholland",                    768.60,  -954.60,   -89.00,   952.60,  -860.60,   110.90},
	{"Mulholland",                    687.80,  -860.60,   -89.00,   911.80,  -768.00,   110.90},
	{"Mulholland",                    737.50,  -768.00,   -89.00,  1142.20,  -674.80,   110.90},
	{"Mulholland",                   1096.40,  -910.10,   -89.00,  1169.10,  -768.00,   110.90},
	{"Mulholland",                    952.60,  -937.10,   -89.00,  1096.40,  -860.60,   110.90},
	{"Mulholland",                    911.80,  -860.60,   -89.00,  1096.40,  -768.00,   110.90},
	{"Mulholland",                    861.00,  -674.80,   -89.00,  1156.50,  -600.80,   110.90},
	{"Mulholland Intersection",      1463.90, -1150.80,   -89.00,  1812.60,  -768.00,   110.90},
	{"North Rock",                   2285.30,  -768.00,     0.00,  2770.50,  -269.70,   200.00},
	{"Ocean Docks",                  2373.70, -2697.00,   -89.00,  2809.20, -2330.40,   110.90},
	{"Ocean Docks",                  2201.80, -2418.30,   -89.00,  2324.00, -2095.00,   110.90},
	{"Ocean Docks",                  2324.00, -2302.30,   -89.00,  2703.50, -2145.10,   110.90},
	{"Ocean Docks",                  2089.00, -2394.30,   -89.00,  2201.80, -2235.80,   110.90},
	{"Ocean Docks",                  2201.80, -2730.80,   -89.00,  2324.00, -2418.30,   110.90},
	{"Ocean Docks",                  2703.50, -2302.30,   -89.00,  2959.30, -2126.90,   110.90},
	{"Ocean Docks",                  2324.00, -2145.10,   -89.00,  2703.50, -2059.20,   110.90},
	{"Ocean Flats",                 -2994.40,   277.40,    -9.10, -2867.80,   458.40,   200.00},
	{"Ocean Flats",                 -2994.40,  -222.50,    -0.00, -2593.40,   277.40,   200.00},
	{"Ocean Flats",                 -2994.40,  -430.20,    -0.00, -2831.80,  -222.50,   200.00},
	{"Octane Springs",                338.60,  1228.50,     0.00,   664.30,  1655.00,   200.00},
	{"Old Venturas Strip",           2162.30,  2012.10,   -89.00,  2685.10,  2202.70,   110.90},
	{"Palisades",                   -2994.40,   458.40,    -6.10, -2741.00,  1339.60,   200.00},
	{"Palomino Creek",               2160.20,  -149.00,     0.00,  2576.90,   228.30,   200.00},
	{"Paradiso",                    -2741.00,   793.40,    -6.10, -2533.00,  1268.40,   200.00},
	{"Pershing Square",              1440.90, -1722.20,   -89.00,  1583.50, -1577.50,   110.90},
	{"Pilgrim",                      2437.30,  1383.20,   -89.00,  2624.40,  1783.20,   110.90},
	{"Pilgrim",                      2624.40,  1383.20,   -89.00,  2685.10,  1783.20,   110.90},
	{"Pilson Intersection",          1098.30,  2243.20,   -89.00,  1377.30,  2507.20,   110.90},
	{"Pirates in Men's Pants",       1817.30,  1469.20,   -89.00,  2027.40,  1703.20,   110.90},
	{"Playa del Seville",            2703.50, -2126.90,   -89.00,  2959.30, -1852.80,   110.90},
	{"Prickle Pine",                 1534.50,  2583.20,   -89.00,  1848.40,  2863.20,   110.90},
	{"Prickle Pine",                 1117.40,  2507.20,   -89.00,  1534.50,  2723.20,   110.90},
	{"Prickle Pine",                 1848.40,  2553.40,   -89.00,  1938.80,  2863.20,   110.90},
	{"Prickle Pine",                 1938.80,  2624.20,   -89.00,  2121.40,  2861.50,   110.90},
	{"Queens",                      -2533.00,   458.40,     0.00, -2329.30,   578.30,   200.00},
	{"Queens",                      -2593.40,    54.70,     0.00, -2411.20,   458.40,   200.00},
	{"Queens",                      -2411.20,   373.50,     0.00, -2253.50,   458.40,   200.00},
	{"Randolph Industrial Estate",   1558.00,   596.30,   -89.00,  1823.00,   823.20,   110.90},
	{"Redsands East",                1817.30,  2011.80,   -89.00,  2106.70,  2202.70,   110.90},
	{"Redsands East",                1817.30,  2202.70,   -89.00,  2011.90,  2342.80,   110.90},
	{"Redsands East",                1848.40,  2342.80,   -89.00,  2011.90,  2478.40,   110.90},
	{"Redsands West",                1236.60,  1883.10,   -89.00,  1777.30,  2142.80,   110.90},
	{"Redsands West",                1297.40,  2142.80,   -89.00,  1777.30,  2243.20,   110.90},
	{"Redsands West",                1377.30,  2243.20,   -89.00,  1704.50,  2433.20,   110.90},
	{"Redsands West",                1704.50,  2243.20,   -89.00,  1777.30,  2342.80,   110.90},
	{"Regular Tom",                  -405.70,  1712.80,    -3.00,  -276.70,  1892.70,   200.00},
	{"Richman",                       647.50, -1118.20,   -89.00,   787.40,  -954.60,   110.90},
	{"Richman",                       647.50,  -954.60,   -89.00,   768.60,  -860.60,   110.90},
	{"Richman",                       225.10, -1369.60,   -89.00,   334.50, -1292.00,   110.90},
	{"Richman",                       225.10, -1292.00,   -89.00,   466.20, -1235.00,   110.90},
	{"Richman",                        72.60, -1404.90,   -89.00,   225.10, -1235.00,   110.90},
	{"Richman",                        72.60, -1235.00,   -89.00,   321.30, -1008.10,   110.90},
	{"Richman",                       321.30, -1235.00,   -89.00,   647.50, -1044.00,   110.90},
	{"Richman",                       321.30, -1044.00,   -89.00,   647.50,  -860.60,   110.90},
	{"Richman",                       321.30,  -860.60,   -89.00,   687.80,  -768.00,   110.90},
	{"Richman",                       321.30,  -768.00,   -89.00,   700.70,  -674.80,   110.90},
	{"Robada Intersection",         -1119.00,  1178.90,   -89.00,  -862.00,  1351.40,   110.90},
	{"Roca Escalante",               2237.40,  2202.70,   -89.00,  2536.40,  2542.50,   110.90},
	{"Roca Escalante",               2536.40,  2202.70,   -89.00,  2625.10,  2442.50,   110.90},
	{"Rockshore East",               2537.30,   676.50,   -89.00,  2902.30,   943.20,   110.90},
	{"Rockshore West",               1997.20,   596.30,   -89.00,  2377.30,   823.20,   110.90},
	{"Rockshore West",               2377.30,   596.30,   -89.00,  2537.30,   788.80,   110.90},
	{"Rodeo",                          72.60, -1684.60,   -89.00,   225.10, -1544.10,   110.90},
	{"Rodeo",                          72.60, -1544.10,   -89.00,   225.10, -1404.90,   110.90},
	{"Rodeo",                         225.10, -1684.60,   -89.00,   312.80, -1501.90,   110.90},
	{"Rodeo",                         225.10, -1501.90,   -89.00,   334.50, -1369.60,   110.90},
	{"Rodeo",                         334.50, -1501.90,   -89.00,   422.60, -1406.00,   110.90},
	{"Rodeo",                         312.80, -1684.60,   -89.00,   422.60, -1501.90,   110.90},
	{"Rodeo",                         422.60, -1684.60,   -89.00,   558.00, -1570.20,   110.90},
	{"Rodeo",                         558.00, -1684.60,   -89.00,   647.50, -1384.90,   110.90},
	{"Rodeo",                         466.20, -1570.20,   -89.00,   558.00, -1385.00,   110.90},
	{"Rodeo",                         422.60, -1570.20,   -89.00,   466.20, -1406.00,   110.90},
	{"Rodeo",                         466.20, -1385.00,   -89.00,   647.50, -1235.00,   110.90},
	{"Rodeo",                         334.50, -1406.00,   -89.00,   466.20, -1292.00,   110.90},
	{"Royal Casino",                 2087.30,  1383.20,   -89.00,  2437.30,  1543.20,   110.90},
	{"San Andreas Sound",            2450.30,   385.50,  -100.00,  2759.20,   562.30,   200.00},
	{"Santa Flora",                 -2741.00,   458.40,    -7.60, -2533.00,   793.40,   200.00},
	{"Santa Maria Beach",             342.60, -2173.20,   -89.00,   647.70, -1684.60,   110.90},
	{"Santa Maria Beach",              72.60, -2173.20,   -89.00,   342.60, -1684.60,   110.90},
	{"Shady Cabin",                 -1632.80, -2263.40,    -3.00, -1601.30, -2231.70,   200.00},
	{"Shady Creeks",                -1820.60, -2643.60,    -8.00, -1226.70, -1771.60,   200.00},
	{"Shady Creeks",                -2030.10, -2174.80,    -6.10, -1820.60, -1771.60,   200.00},
	{"Sobell Rail Yards",            2749.90,  1548.90,   -89.00,  2923.30,  1937.20,   110.90},
	{"Spinybed",                     2121.40,  2663.10,   -89.00,  2498.20,  2861.50,   110.90},
	{"Starfish Casino",              2437.30,  1783.20,   -89.00,  2685.10,  2012.10,   110.90},
	{"Starfish Casino",              2437.30,  1858.10,   -39.00,  2495.00,  1970.80,    60.90},
	{"Starfish Casino",              2162.30,  1883.20,   -89.00,  2437.30,  2012.10,   110.90},
	{"Temple",                       1252.30, -1130.80,   -89.00,  1378.30, -1026.30,   110.90},
	{"Temple",                       1252.30, -1026.30,   -89.00,  1391.00,  -926.90,   110.90},
	{"Temple",                       1252.30,  -926.90,   -89.00,  1357.00,  -910.10,   110.90},
	{"Temple",                        952.60, -1130.80,   -89.00,  1096.40,  -937.10,   110.90},
	{"Temple",                       1096.40, -1130.80,   -89.00,  1252.30, -1026.30,   110.90},
	{"Temple",                       1096.40, -1026.30,   -89.00,  1252.30,  -910.10,   110.90},
	{"The Camel's Toe",              2087.30,  1203.20,   -89.00,  2640.40,  1383.20,   110.90},
	{"The Clown's Pocket",           2162.30,  1783.20,   -89.00,  2437.30,  1883.20,   110.90},
	{"The Emerald Isle",             2011.90,  2202.70,   -89.00,  2237.40,  2508.20,   110.90},
	{"The Farm",                    -1209.60, -1317.10,   114.90,  -908.10,  -787.30,   251.90},
	{"The Four Dragons Casino",      1817.30,   863.20,   -89.00,  2027.30,  1083.20,   110.90},
	{"The High Roller",              1817.30,  1283.20,   -89.00,  2027.30,  1469.20,   110.90},
	{"The Mako Span",                1664.60,   401.70,     0.00,  1785.10,   567.20,   200.00},
	{"The Panopticon",               -947.90,  -304.30,    -1.10,  -319.60,   327.00,   200.00},
	{"The Pink Swan",                1817.30,  1083.20,   -89.00,  2027.30,  1283.20,   110.90},
	{"The Sherman Dam",              -968.70,  1929.40,    -3.00,  -481.10,  2155.20,   200.00},
	{"The Strip",                    2027.40,   863.20,   -89.00,  2087.30,  1703.20,   110.90},
	{"The Strip",                    2106.70,  1863.20,   -89.00,  2162.30,  2202.70,   110.90},
	{"The Strip",                    2027.40,  1783.20,   -89.00,  2162.30,  1863.20,   110.90},
	{"The Strip",                    2027.40,  1703.20,   -89.00,  2137.40,  1783.20,   110.90},
	{"The Visage",                   1817.30,  1863.20,   -89.00,  2106.70,  2011.80,   110.90},
	{"The Visage",                   1817.30,  1703.20,   -89.00,  2027.40,  1863.20,   110.90},
	{"Unity Station",                1692.60, -1971.80,   -20.40,  1812.60, -1932.80,    79.50},
	{"Valle Ocultado",               -936.60,  2611.40,     2.00,  -715.90,  2847.90,   200.00},
	{"Verdant Bluffs",                930.20, -2488.40,   -89.00,  1249.60, -2006.70,   110.90},
	{"Verdant Bluffs",               1073.20, -2006.70,   -89.00,  1249.60, -1842.20,   110.90},
	{"Verdant Bluffs",               1249.60, -2179.20,   -89.00,  1692.60, -1842.20,   110.90},
	{"Verdant Meadows",                37.00,  2337.10,    -3.00,   435.90,  2677.90,   200.00},
	{"Verona Beach",                  647.70, -2173.20,   -89.00,   930.20, -1804.20,   110.90},
	{"Verona Beach",                  930.20, -2006.70,   -89.00,  1073.20, -1804.20,   110.90},
	{"Verona Beach",                  851.40, -1804.20,   -89.00,  1046.10, -1577.50,   110.90},
	{"Verona Beach",                 1161.50, -1722.20,   -89.00,  1323.90, -1577.50,   110.90},
	{"Verona Beach",                 1046.10, -1722.20,   -89.00,  1161.50, -1577.50,   110.90},
	{"Vinewood",                      787.40, -1310.20,   -89.00,   952.60, -1130.80,   110.90},
	{"Vinewood",                      787.40, -1130.80,   -89.00,   952.60,  -954.60,   110.90},
	{"Vinewood",                      647.50, -1227.20,   -89.00,   787.40, -1118.20,   110.90},
	{"Vinewood",                      647.70, -1416.20,   -89.00,   787.40, -1227.20,   110.90},
	{"Whitewood Estates",             883.30,  1726.20,   -89.00,  1098.30,  2507.20,   110.90},
	{"Whitewood Estates",            1098.30,  1726.20,   -89.00,  1197.30,  2243.20,   110.90},
	{"Willowfield",                  1970.60, -2179.20,   -89.00,  2089.00, -1852.80,   110.90},
	{"Willowfield",                  2089.00, -2235.80,   -89.00,  2201.80, -1989.90,   110.90},
	{"Willowfield",                  2089.00, -1989.90,   -89.00,  2324.00, -1852.80,   110.90},
	{"Willowfield",                  2201.80, -2095.00,   -89.00,  2324.00, -1989.90,   110.90},
	{"Willowfield",                  2541.70, -1941.40,   -89.00,  2703.50, -1852.80,   110.90},
	{"Willowfield",                  2324.00, -2059.20,   -89.00,  2541.70, -1852.80,   110.90},
	{"Willowfield",                  2541.70, -2059.20,   -89.00,  2703.50, -1941.40,   110.90},
	{"Yellow Bell Station",          1377.40,  2600.40,   -21.90,  1492.40,  2687.30,    78.00}
};

new g_Cities[][e_ZONEINFO] =
{
	// Main Zones
	{"Los Santos",                     44.60, -2892.90,  -242.90,  2997.00,  -768.00,   900.00},
	{"Las Venturas",                  869.40,   596.30,  -242.90,  2997.00,  2993.80,   900.00},
	{"Bone County",                  -480.50,   596.30,  -242.90,   869.40,  2993.80,   900.00},
	{"Tierra Robada",               -2997.40,  1659.60,  -242.90,  -480.50,  2993.80,   900.00},
	{"Tierra Robada",               -1213.90,   596.30,  -242.90,  -480.50,  1659.60,   900.00},
	{"San Fierro",                  -2997.40, -1115.50,  -242.90, -1213.90,  1659.60,   900.00},
	{"Red County",                  -1213.90,  -768.00,  -242.90,  2997.00,   596.30,   900.00},
	{"Flint County",                -1213.90, -2892.90,  -242.90,    44.60,  -768.00,   900.00},
	{"Whetstone",                   -2997.40, -2892.90,  -242.90, -1213.90, -1115.50,   900.00}
};

enum enum_SAFE_ZONES
{
	safe_zone_AREA_ID,
	Float:safe_zone_MIN_X,
	Float:safe_zone_MIN_Y,
	Float:safe_zone_MAX_X,
	Float:safe_zone_MAX_Y,
	safe_zone_INTERIOR,
	safe_zone_WORLD,
}
new SAFE_ZONES[][enum_SAFE_ZONES] =
{
	{INVALID_STREAMER_ID, 1996.91,	-1449.67,	2056.86,	-1350.719, 0, 0},
	{INVALID_STREAMER_ID, 1323.9,	-1842.27,	1701.9,	-1722.26, 0, 0},
	{INVALID_STREAMER_ID, 1440.9,	-1722.26,	1583.5,	-1577.589, 0, 0},
	{INVALID_STREAMER_ID, 1249.619,	-2394.33,	1852.0,	-2179.25, 0, 0},
	{INVALID_STREAMER_ID, 1382.729,	-2730.879,	2201.82,	-2394.33, 0, 0},
	{INVALID_STREAMER_ID, -2078.669,	578.395,	-1499.89,	744.267, 0, 0},
	{INVALID_STREAMER_ID, -2741.07,	458.411,	-2533.04,	793.411, 0, 0},
	{INVALID_STREAMER_ID, -1794.92,	-730.117,	-1213.91,	-50.096, 0, 0},
	{INVALID_STREAMER_ID, -792.254,	-698.554,	-452.403,	-380.042, 0, 0},
	{INVALID_STREAMER_ID, -594.19,	-1648.55,	-187.699,	-1276.599, 0, 0},
	{INVALID_STREAMER_ID, 2237.399,	2202.76,	2536.429,	2542.55, 0, 0},
	{INVALID_STREAMER_ID, 1236.63,	1203.28,	1457.369,	1883.109, 0, 0},
	{INVALID_STREAMER_ID, 1457.369,	1203.28,	1777.39,	1883.109, 0, 0},
	{INVALID_STREAMER_ID, -91.585,	1655.05,	421.234,	2123.01, 0, 0},
	{INVALID_STREAMER_ID, -613.953796, -209.777252, -381.961181, -6.355076, 0, 0},
	{INVALID_STREAMER_ID, -115.255050, -1211.812377, -54.539089, -1179.635253, 0, 0}
};

/* Mecanicos */
new MECHANIC_RANKS[][] =
{
    /* 0 */ "Civil",
	/* 1 */ "Asistente",
	/* 2 */ "Mecanico",
	/* 3 */ "Mecanico Experimentado",
	/* 4 */ "Mecanico Especial",
	/* 5 */	"Mecanico Superior",
	/* 6 */ "Jefe de Mecanicos",
	/* 7 */ "Gerente"
};

/* Rangos policías */
enum enum_POLICE_WEAPONS_PACK
{
	police_weapon_RANK,
	police_weapon_PACK_NAME[24],
	police_weapon_weaponid1,
	police_weapon_weaponid2,
	police_weapon_weaponid3,
	police_weapon_weaponid4,
	police_weapon_weaponid5
}
new POLICE_WEAPONS[][enum_POLICE_WEAPONS_PACK] =
{
	{1, "Armamento Patrullaje", 3, 24, 0, 0, 0},
	{2, "Armamento Avanzado", 3, 24, 31, 0, 0},
	{3, "Armamento Especial", 24, 31, 25, 29, 0},
	{7, "Armamento Superior", 24, 31, 33, 25, 29},
	{14, "Armamento Tactico", 24, 31, 27, 34, 0}
};

enum enum_POLICE_SKINS
{
	police_skin_TYPE,
	police_skin_SKIN,
	police_skin_RANK,
}
new POLICE_SKINS[][enum_POLICE_SKINS] =
{
    {SEX_MALE, 71, 1},
	{SEX_MALE, 280, 2},
	{SEX_MALE, 266, 3},
	{SEX_MALE, 267, 4},
	{SEX_MALE, 284, 5},
	{SEX_MALE, 282, 6},
	{SEX_MALE, 303, 7},
	{SEX_MALE, 304, 8},
	{SEX_MALE, 281, 10},
	{SEX_MALE, 265, 11},
	{SEX_MALE, 310, 16},
	{SEX_MALE, 305, 17},
	{SEX_MALE, 311, 18},
	{SEX_MALE, 288, 19},
	{SEX_MALE, 283, 21},
	{SEX_MALE, 61, 23},

	{SEX_FEMALE, 307, 1},
	{SEX_FEMALE, 306, 2},
	{SEX_FEMALE, 309, 11}
};

new POLICE_RANKS[][] =
{
    /* 0 */ "Civil",
	/* 1 */ "Cadete",
	/* 2 */ "Oficial",
	/* 3 */ "Cabo I",
	/* 4 */ "Cabo",
	/* 5 */ "Sargento",
	/* 6 */ "Sargento Mayor",
	/* 7 */ "Sub Inspector",
	/* 8 */ "Inspector",
	/* 9 */ "Inspector General",
	/* 10 */ "Sub Teniente",
	/* 11 */ "Teniente",
	/* 12 */ "Teniente Mayor",
	/* 13 */ "Teniente General",
	/* 14 */ "Sub General",
	/* 15 */ "General",
	/* 16 */ "Mayor",
	/* 17 */ "Mayor General",
	/* 18 */ "Sub Capitan",
	/* 19 */ "Capitan",
	/* 20 */ "Capitan General",
	/* 21 */ "Comisario Interno",
	/* 22 */ "Comisario",
	/* 23 */ "Comisario General"
};

#define MAX_POLICE_OBJECTS	300
enum enum_POLICE_OBJECTS
{
	bool:police_object_VALID,
	police_object_USER[24],
	police_object_OBJECT_ID,
}
new POLICE_OBJECTS[MAX_POLICE_OBJECTS][enum_POLICE_OBJECTS];

enum enum_POLICE_GARAGE_DOORS
{
	police_gdoor_MODELID,
	Float:police_gdoor_CLOSED_X,
	Float:police_gdoor_CLOSED_Y,
	Float:police_gdoor_CLOSED_Z,
	Float:police_gdoor_CLOSED_RX,
	Float:police_gdoor_CLOSED_RY,
	Float:police_gdoor_CLOSED_RZ,
	Float:police_gdoor_OPENED_X,
	Float:police_gdoor_OPENED_Y,
	Float:police_gdoor_OPENED_Z,
	Float:police_gdoor_OPENED_RX,
	Float:police_gdoor_OPENED_RY,
	Float:police_gdoor_OPENED_RZ,
	Float:police_gdoor_MOVE_SPEED,
	bool:police_gdoor_CLOSING,
	police_gdoor_OBJECT_ID,
	police_gdoor_TIMER,
}
new POLICE_GARAGE_DOORS[][enum_POLICE_GARAGE_DOORS] =
{
	{3055, 1588.48853, -1637.85852, 14.57500, 0.0, 0.0, 0.0, 1588.48853, -1637.85852, 16.45880, 90.0, 0.0, 0.0, 1.3, false, INVALID_STREAMER_ID, -1},
	{3055, 2294.04102, 2498.81396, 4.47113,   0.00000, 0.00000, 90.00000, 2294.0410, 2498.8140, 9.0059, 0.0, 0.0, 90.0, 1.6, false, INVALID_STREAMER_ID, -1},
	{3055, 2335.13086, 2443.66895, 6.97370,   0.00000, 0.00000, 60.00000, 2335.1309, 2443.6689, 11.6876, 0.0, 0.0, 60.0, 1.6, false, INVALID_STREAMER_ID, -1},
	{10184, -1631.69556, 688.56641, 8.70960,   0.00000, 0.00000, 90.00000, -1631.6956, 688.5664, 13.2064, 0.0, 0.0, 90.0, 1.6, false, INVALID_STREAMER_ID, -1},
	{975, 1543.613037, -1628.645385, 14.062812, 0.0, 0.0, -90.000099, 1543.613037, -1634.704956, 14.062812, 0.00, 0.0, -90.000099, 2.8, false, INVALID_STREAMER_ID, -1} //LS
};

enum enum_POLICE_DOORS
{
	police_door_MODELID,
	Float:police_door_X,
	Float:police_door_Y,
	Float:police_door_Z,
	Float:police_door_RZ,
	police_door_INTERIOR,
	police_door_WORLD,
	bool:police_door_CLOSED,
	police_door_OBJECT_ID,
	police_door_TIMER,
}
new POLICE_DOORS[][enum_POLICE_DOORS] =
{
	{1495, 1582.6055, -1638.0713, 12.3384, 0.0, 0, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, 245.62910, 72.53300, 1002.54999, 0.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, 250.65849, 62.58540, 1002.54999, 90.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, 226.16409, 71.01760, 1003.95050, 90.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1497, 222.14630, 70.52970, 1003.95050, -90.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, -1619.70764, 688.41058, 6.17220, 180.00000, 0, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1495, 239.58211, 116.84430, 1002.20319, 90.00000, 10, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1495, 253.19209, 108.35700, 1002.20319, 90.00000, 10, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1497, 266.59210, 112.56570, 1003.60992, 180.0, 10, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1495, 228.27240, 150.46510, 1002.01813, 90.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1495, 228.27240, 160.45010, 1002.01813, 90.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1495, 232.21030, 169.83350, 1002.01813, 180.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1495, 2294.03516, 2492.91528, 2.26740, 90.0, 0, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1497, 221.95570, 181.21680, 1002.02142, 0.0, 3, 0, true, INVALID_STREAMER_ID, -1}//lvpd
};

/* SYSTEM - PROPERTIES */
forward OnDefaultPFurChanged(index);
#define MAX_PROPERTIES	2000
enum Property_Info_Enum
{
	property_VALID,
	property_ID,
	Float:property_EXT_X,
	Float:property_EXT_Y,
	Float:property_EXT_Z,
	Float:property_EXT_ANGLE,
	property_EXT_INTERIOR,
	property_EXT_FREEZE,
	property_ID_INTERIOR,
	
	bool:property_SOLD,
	bool:property_CREW,
	property_OWNER_ID,
	property_CREW_ID,
	property_NAME[24],
	property_PRICE,
	property_LEVEL,
	property_EXTRA,
	property_VIP_LEVEL,
	
	Text3D:property_EXT_LABEL_ID,
	Text3D:property_INT_LABEL_ID,
	property_EXT_PICKUP_ID,
	property_INT_PICKUP_ID,

	bool:property_POLICE_FORCING,
	bool:property_POLICE_FORCED,
	property_POLICE_FORCE_TIMER,

	property_GARAGE_ID //pa saber q la propiedad tiene garage
}
new PROPERTY_INFO[MAX_PROPERTIES][Property_Info_Enum];


/* PROPERTY CONSTRUCTOR */
#define PROPERTY_EMPTY_INTERIOR_Z_OFFSET 20.0
new TOTAL_PROPERTIES_LOADED;
enum PROPERTY_INTERIOR_ENUM
{
	property_creator_LEVEL,
	property_creator_PRICE,
	Float:property_INT_X,
	Float:property_INT_Y,
	Float:property_INT_Z,
	Float:property_INT_ANGLE,
	property_INT_INTERIOR,
	bool:property_INT_FREEZE,
	bool:property_EMPTY_INTERIOR
}
new PROPERTY_INTERIORS[][PROPERTY_INTERIOR_ENUM] =
{
	{6, 180000, 140.249008, 1366.197509, 1083.859375, 0.0, 5, false, true},
	{6, 160000, 2324.530029, -1149.540039, 1050.710083, 0.0, 12, false, true},
	{6, 270000, 225.679992, 1021.450012, 1084.017700, 0.0, 7, false, true},
	{6, 190000, 234.190002, 1063.729980, 1084.212280, 0.0, 6, false, true},
	{6, 120000, 226.300003, 1114.239990, 1080.992919, 270.0, 5, false, true},
	{6, 180000, 2317.889892, -1026.760009, 1050.217773, 0.0, 9, false, true},
	{6, 120000, 2495.979980, -1692.079956, 1014.742187, 180.0, 3, false, true},
	{6, 90000,  2196.626464, -1204.321411, 1049.023437, 90.0, 6, false, true},
	{6, 105000, 2270.143554, -1210.490600, 1047.562500, 90.0, 10, false, true},
	{4, 90000,  2365.199951, -1135.595825, 1050.882568, 0.0, 8, false, true},
	{3, 75000,  2237.590087, -1081.640014, 1049.023437, 0.0, 2, false, true},
	{4, 65000,  2468.840087, -1698.239990, 1013.507812, 90.0, 2, false, false},
	{3, 45000,  2282.928955, -1140.004516, 1050.898437, 0.0, 11, false, true},
	{4, 50000,  2308.775878, -1212.731689, 1049.023437, 0.0, 6, false, true},
	{6, 135000, 2233.681396, -1114.973510, 1050.882812, 0.0, 5, false, true},
	{6, 230000, 2218.162597, -1076.148315, 1050.484375, 90.0, 1, false, true},
	{6, 220000, 266.654327, 304.961791, 999.148437, 270.0, 2, false, true},
	{6, 30000,  243.720001, 304.910003, 999.148437, 270.0, 1, false, true},
	{6, 65000,  2259.440673, -1135.905883, 1050.640258, 270.0, 10, false, true},
	{12, 3000000, 1260.910034, -785.320068, 1091.906250, 280.0, 5, false, false}
};

enum PROPERTY_CLOSET_POS_ENUM
{
	Float:property_closet_X,
	Float:property_closet_Y,
	Float:property_closet_Z
}
new PROPERTY_CLOSET_POS[][PROPERTY_CLOSET_POS_ENUM] = //de momento posicion de la puerte se cambiara porxiamn
{
	{145.103408, 1384.249877, 1088.367187},
	{2337.974609, -1141.684082, 1054.304687},
	{243.130554, 1046.244384, 1084.000000},
	{235.600509, 1079.485351, 1087.812622},
	{239.347656, 1116.808593, 1084.992187},
	{2326.974365, -1015.419189, 1054.711059},
	{2492.362060, -1708.568969, 1018.336791},
	{2198.682128, -1219.331787, 1049.023437},
	{2258.639892, -1220.260253, 1049.023437},
	{2363.767333, -1127.419433, 1050.882568},
	{2235.885986, -1073.944335, 1049.023437},
	{2450.338867, -1706.199340, 1013.507812},
	{2286.247314, -1137.693359, 1050.898437},
	{2319.417480, -1212.880981, 1049.023437},
	{2231.736328, -1112.198730, 1050.882812},
	{2215.857910, -1074.698974, 1050.484375},
	{270.320709, 303.413482, 999.155761},
	{248.817687, 303.795257, 999.148437},
	{2263.338378, -1132.665161, 1050.632812},
	{1271.444091, -822.371704, 1089.937500}
};

#define MAX_CLOSET_SLOTS	10
enum
{
	CLOSET_TYPE_WEAPON,
	CLOSET_TYPE_MEDICINES,
	CLOSET_TYPE_CANNABIS,
	CLOSET_TYPE_CRACK
};
enum enum_PROPERTY_CLOSET
{
	bool:property_closet_VALID,
	property_closet_OBJECT_ID,
	property_closet_TYPE,
	property_closet_INT,
	property_closet_INT_EXTRA
};
new PROPERTY_CLOSET[MAX_PROPERTIES][MAX_CLOSET_SLOTS][enum_PROPERTY_CLOSET];

enum PLAYER_PROPERTY_CONSTRUCTOR_ENU
{
	bool:player_property_creator_ENABLED,
	player_property_creator_INTERIO,
	Float:player_property_creator_EXT_X,
	Float:player_property_creator_EXT_Y,
	Float:player_property_creator_EXT_Z,
	Float:player_property_creator_EXT_ANG,
	player_property_creator_EXT_INT,
}
new PLAYER_PROPERTY_CONSTRUCTOR[MAX_PLAYERS][PLAYER_PROPERTY_CONSTRUCTOR_ENU];

//Taxis
enum TAXI_METER_VEHICLE_Info
{
	bool:veh_taxi_meter_ENABLED,
	veh_taxi_meter_PRICE,
	veh_taxi_meter_PAYMENT,
	Float:veh_taxi_meter_OLD_X,
	Float:veh_taxi_meter_OLD_Y,
	Float:veh_taxi_meter_OLD_Z,
	Float:veh_taxi_meter_DISTANCE,
	veh_taxi_meter_TIMER,
}
new TAXI_METER_VEHICLE[MAX_VEHICLES][TAXI_METER_VEHICLE_Info];

// Grua
new Float:CRANE_POINTS[][] =
{
	{-28.8145, -1124.5767, 0.6990, 157.4051},
	{-34.1703, -1122.5664, 0.6990, 157.4051},
	{-39.7803, -1119.8870, 0.6990, 157.4051},
	{-45.1235, -1117.3114, 0.6990, 157.4051},
	{-49.8637, -1115.2751, 0.6990, 157.4051},
	{-42.4484, -1154.7849, 0.6990, 333.7967},
	{-46.8119, -1152.4274, 0.6990, 333.7967},
	{-50.6488, -1150.6056, 0.6990, 333.7967},
	{-54.1760, -1149.1364, 0.6990, 333.7967},
	{-57.8852, -1147.4999, 0.6990, 333.7967},
	{-62.2619, -1145.2260, 0.6990, 333.7967},
	{-66.4254, -1143.2191, 0.6990, 333.7967},
	{-70.7787, -1140.9065, 0.6990, 333.7967},
	{-75.1332, -1138.9713, 0.6990, 333.7967},
	{-79.8642, -1136.7786, 0.6990, 333.7967},
	{-33.8437, -1135.5642, 0.6990, 333.7967},
	{-36.8147, -1141.7927, 0.6990, 157.4051},
	{-40.9361, -1140.1613, 0.6990, 157.4051},
	{-45.5692, -1138.2747, 0.6990, 157.4051},
	{-50.3522, -1136.1228, 0.6990, 157.4051},
	{-54.4753, -1134.3014, 0.6990, 157.4051},
	{-38.0563, -1133.7695, 0.6990, 333.7967},
	{-42.4517, -1132.0298, 0.6990, 333.7967},
	{-47.2834, -1129.8915, 0.6990, 333.7967},
	{-51.6219, -1127.9185, 0.6990, 333.7967}
};

//Pizzero
new Float:PIZZA_DELIVERY_POINT[][] = 
{
	{2232.147460, -1785.597656, 13.560449, 82.756179    },
	{2290.242675, -1796.022583, 13.546875, 267.344024   },
	{1739.314575, -1582.890747, 14.158246, 174.783370   },
	{1694.923339, -1583.478881, 13.546875, 179.829818   },
	{1241.816406, -2032.996093, 60.041099, 263.972076   },
	{1187.268798, -1666.487915, 13.634441, 172.332916   },
	{998.998962, -1868.162231, 12.820312, 333.677734    },
	{891.677551, -1695.211669, 13.546875, 182.046417    },
	{507.502838, -1606.101684, 16.247840, 359.563903    },
	{305.462341, -1748.736816, 4.546875, 356.093139     },
	{159.034683, -1906.259521, 3.773437, 0.044234       },
	{387.668762, -2083.981689, 7.835937, 11.638330      },
	{902.655456, -930.055786, 42.601562, 185.516662     },
	{1809.700439, -1166.832885, 24.226562, 168.451568   },
	{2007.953857, -985.501953, 33.888450, 203.231872    },
	{2580.753906, -969.438110, 81.363517, 50.412715     },
	{2796.151855, -1088.867187, 30.719810, 234.631011   },
	{2819.019287, -1614.678588, 11.079871, 245.630599   },
	{2756.354492, -1979.312011, 13.547579, 270.360687   },
	{931.654541, -1231.159545, 16.928218, 262.568939    },
	{952.439208, -913.921447, 45.729900, 180.787841     },
	{824.417663, -2031.578857, 12.867187, 331.166229    },
	{1714.394531, -1629.683593, 20.203384, 332.709594   }
};

enum PIZZA_VEHICLE_Info
{
	bool:pizza_vehicle_STARTED,
	pizza_vehicle_DRIVER_AID,
	pizza_vehicle_PIZZAS,
	pizza_vehicle_PIZZA_POINT,
	bool:pizza_vehicle_PIZZA_POINT_DELI,
}
new PIZZA_VEHICLE[MAX_VEHICLES][PIZZA_VEHICLE_Info];

//Camioneros
new Float:LoadTrucksPoints[][] =
{
	{1091.4238, 1915.9153, 11.2570}, // punto carga
	{1082.6978, 1915.7936, 11.2570}, // punto carga
	{1060.4292, 1916.0267, 11.2570}, // punto carga
	{1052.9006, 1915.8973, 11.2570} // punto carga
};

enum TRUCK_VEHICLE_Info
{
	bool:truck_vehicle_LOADED,
	bool:truck_vehicle_LOADING,
	bool:truck_vehicle_UNLOADING,
	bool:truck_vehicle_DELIVERED,
	truck_vehicle_DRIVER_USER_ID,
	truck_vehicle_POINT
}
new TRUCK_VEHICLE[MAX_VEHICLES][TRUCK_VEHICLE_Info];

new Float:Truck_Return_Positions[3] =
{
	1107.4789, 1934.7332, 10.8203
};

#define	TRUCK_MAX_ROUTES 101
enum Truck_Content_Info
{
	bool:truck_content_VALID,
	truck_content_MONEY,
	Float:truck_content_X,
	Float:truck_content_Y,
	Float:truck_content_Z
}
new Truck_Contents[TRUCK_MAX_ROUTES][Truck_Content_Info];

/* Mecánico */
new Float:MechanicStartWorkingCoords[1][3] =
{
	{-601.4045, -559.5615, 25.5615}
};

new Float:MechanicBuyPiecesCoords[1][3] =
{
	{-585.3810, -557.4058, 25.5615}
};
new Text3D:MechanicBuyPiecesLabel[sizeof(MechanicBuyPiecesCoords)];

new Float:MechanicPiecesForklift[1][3] = 
{
	{-581.2229, -520.7006, 25.5441}
};
new Text3D:MechanicPiecesForkliftLabel[sizeof(MechanicPiecesForklift)];

new Float:MechanicGaragePieces[1][3] =
{
	{-591.9200, -555.5457, 25.5615}
};

/* Leñador */
enum
{
	LUMBER_TREE_STATE_NORMAL,
	LUMBER_TREE_STATE_CUTTING,
	LUMBER_TREE_STATE_CUTTED,
}
enum LUMBER_TREES_Info
{
	lumber_tree_MODELID,
	Float:lumber_tree_X,
	Float:lumber_tree_Y,
	Float:lumber_tree_Z,
	Float:lumber_tree_RX,
	Float:lumber_tree_RY,
	Float:lumber_tree_RZ,
	lumber_tree_OBJECT_ID,
	Text3D:lumber_tree_LABEL,
	lumber_tree_STATE,
	lumber_tree_GROW_TIMER,
	lumber_tree_GROW_COUNTER,
}
new LUMBER_TREES[][LUMBER_TREES_Info] =
{
	{657, -467.31256, -47.68515, 59.00023,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -480.88443, -53.57695, 59.39736,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -491.79199, -45.14817, 59.24156,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -493.84619, -54.35930, 59.48059,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -473.43958, -40.64830, 59.00023,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -468.32245, -61.54378, 58.98302,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -458.69937, -75.32365, 58.80302,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -453.17416, -65.31260, 58.98302,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -444.92609, -78.80465, 57.97836,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -465.78470, -85.49714, 58.96302,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -454.24377, -86.58199, 58.46635,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -440.20041, -92.70150, 57.60720,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -484.98972, -65.79082, 59.82284,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -460.57928, -95.55928, 59.25615,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -521.20569, -44.74903, 60.62712,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -534.94348, -50.98387, 61.66861,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -533.45081, -41.45306, 61.64992,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -495.74197, -64.77782, 59.94119,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -519.74005, -72.02750, 61.19377,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -518.47144, -57.24505, 60.76774,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1}
};

/* Basurero */

#define MAX_ROUTES	5
#define MAX_OBJECTS_PER_ROUTE	20

enum Trash_Object_Info
{
	bool:trash_route_VALID,
	trash_route_OBJECTS,
	Float:trash_route_DISTANCE,
	trash_route_MONEY,
	trash_object_MODELID[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_X[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_Y[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_Z[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RX[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RY[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RZ[MAX_OBJECTS_PER_ROUTE],
}
new TRASH_OBJECTS[MAX_ROUTES][Trash_Object_Info];
new TRASH_PLAYER_OBJECTS[MAX_PLAYERS][MAX_OBJECTS_PER_ROUTE];

enum TRASH_VEHICLES_INFO
{
	bool:trash_vehicle_JOB_STARTED, 
	trash_vehicle_ROUTE,
	trash_vehicle_CP,
	trash_vehicle_DRIVER_ID,
	trash_vehicle_PASSENGER_ID,
}
new TRASH_VEHICLES[MAX_VEHICLES][TRASH_VEHICLES_INFO];

enum enum_PT
{
	pt_GAME_STATE,
	pt_NAME[24],
	pt_IP[16],
	bool:pt_USER_EXIST, // Esta registrado?
	bool:pt_USER_LOGGED, // 1 = ha cargado todos los datos del user
	pt_ANTIFLOOD_COMMANDS,
	pt_ANTIFLOOD_TALK,
	pt_TIMERS[MAX_TIMERS_PER_PLAYER],
	bool:pt_USER_VALID_NAME,
	pt_BAD_LOGIN_ATTEMP,
	pt_DOUBT_CHANNEL_TIME,
	pt_LAST_PICKUP_ID,
	pt_LAST_AREA_ID,
	pt_HOSPITAL,
	Float:pt_HOSPITAL_LIFE,
	pt_TIME_PASSED_LAST_REP,
	pt_INTERIOR_INDEX,
	pt_CLOTHING_SHOP,
	pt_CLOTHING_SHOP_SELECTED_SKIN,
	bool:pt_SELECT_TEXTDRAW,
	bool:pt_HUD_TEXTDRAWS,
	bool:pt_THIRST_MESSAGE,
	bool:pt_HUNGRY_MESSAGE,
	bool:pt_TOYS_SHOP,
	pt_TOYS_SHOP_TOY_SELECTED,
	pt_SELECTED_TOY_SLOT,
	pt_SELECT_BANK_TRANSFER_ACCOUNT,
	pt_SELECT_BANK_TRANSFER_ID,
	bool:pt_PLAYER_IN_ATM,
	pt_POCKET_SLOT_SELECTED,
	bool:pt_PHONE_COMMANDS_MESSAGE,
	bool:pt_PLAYER_IN_CALL,
	pt_PLAYER_PHONE_CALL_STATE,
	pt_PLAYER_PHONE_CALL_PLAYERID,
	pt_PLAYER_LISTITEM[MAX_LISTITEMS],
	pt_PLAYER_PHONE_BOOK_ADD_NUMBER,
	pt_PLAYER_PHONE_BOOK_SELECTED,
	pt_PLAYER_PHONE_NUMBER_SELECTED,
	pt_BUY_HOUSE_INDEX,
	bool:pt_PLAYER_FINISH_HOSPITAL,
	pt_ANTIFLOOD_KNOCK_PROPERTY,
	pt_KNOCK_PLAYER_ID,
	pt_GPS_CHECKPOINT,
	pt_GPS_PLAYER_SELECTED,
	pt_PLAYER_GPS_SELECTED_PROPERTY[MAX_SU_PROPERTIES],
	pt_PLAYER_PROPERTY_SELECTED,
	bool:pt_PLAYER_WAITING_MP3_HTTP,
	bool:pt_MUSIC_FOR_PROPERTY,
	bool:pt_MUSIC_FOR_VEHICLE,
	pt_SELECTED_BUY_VEHICLE_ID,
	pt_LAST_VEHICLE_ID,
	pt_NOTARY_OPTION, //0 al banco, 1 a persona
	pt_NOTARY_PRICE,
	pt_NOTARY_TO_PLAYER,
	pt_PLAYER_VEHICLE_SELECTED,
	bool:pt_TAXI_METER_ENABLED,
	bool:pt_WANT_TAXI,
	Float:pt_TRUCK_LOADING_VALUE,
	pt_TRUCK_CHECKPOINT,
	pt_TUNING_SELECTED_PART[24],
	pt_TUNING_SELECTED_COMPONENT[24],
	pt_TUNING_SELECTED_COMPONENT_ID,
	pt_TUNING_SELECTED_PIECES,
	pt_PAINTJOB_SELECTED_ID,
	pt_WORKING_IN,
	pt_SELECTED_MECHANIC_VEHICLE_ID,
	pt_MECHANIC_COLOR_SLOT,
	pt_HARVERT_CHECKPOINT,
	pt_HARVERT_PROCCESS,
	pt_PIZZA_CHECKPOINT,
	bool:pt_TRASH_DRIVER,
	bool:pt_TRASH_PASSENGER,
	pt_TRASH_VEHICLE_ID,
	pt_TRASH_CHECKPOINT,
	Float:pt_RECYCLE_BIN_VALUE,
	pt_BUS_CHECKPOINT,
	bool:pt_PLAYER_CARRYING_TREE,
	pt_PLAYER_LUMBERJACK_TREE,
	pt_LUMBERJACK_CHECKPOINT,
	pt_LAST_GOT_WORK_TIME,
	pt_LAST_GIVE_MONEY_TIME,
	pt_SELECTED_BUY_SEED_ID,
	bool:pt_PLANTING,
	pt_PLANTING_PLANT_SELECTED,
	bool:pt_GPS_MAP,
	pt_PROPERTY_INDEX,
	bool:pt_KICKED,
	pt_SELECTED_DIALOG_WEAPON_SLOT,
	pt_TRICK_SELLER_PID,
	pt_TRICK_SELLER_AID,
	pt_TRICK_SELLER_EXTRA,
	pt_TRICK_PRICE,
	pt_TRICK_TIME,
	pt_DIALOG_BOT_VEHICLE,
	pt_DIALOG_BOT_VEHICLE_BOOT_SLOT,
	pt_POLICE_RADIO,
	bool:pt_CUFFING,
	bool:pt_CUFFED,
	pt_ENTER_JAIL_TIME,
	pt_DIALOG_DB_LIMIT,
	pt_DIALOG_DB_PAGE,
	pt_SELECTED_DB_AC_ID,
	bool:pt_POLICE_CALL_NAME,
	bool:pt_POLICE_CALL_DESCRIPTION,
	pt_POLICE_CALL_NAME_STR[24],
	pt_SAVE_ACCOUNT_TIME,
	pt_ANTIFLOOD_REPORT,
	bool:pt_SEE_ACMD_LOG,
	bool:pt_SEE_ADM_LOG,
	bool:pt_SEE_ADM_CHAT,
	pt_LAST_CHEAT_DETECTED_TIME,
	bool:pt_SEE_AC_LOG,
	pt_ANTIFLOOD_DEATH,
	pt_ANTIFLOOD_STATE,
	pt_ANTIFLOOD_ENTER_VEHICLE,
	pt_SELECTED_AC_LISTITEM,
	pt_ADMIN_PM_PID,
	pt_ADMIN_PM_AID,
	pt_ADMIN_PM_TIME,
	pt_MECHANIC_PID,
	pt_MECHANIC_AID,
	pt_MECHANIC_PRICE,
	pt_MECHANIC_TEXT[64],
	pt_MECHANIC_TYPE,
	pt_MECHANIC_EXTRA,
	pt_MECHANIC_VEHICLE_ID,
	pt_MECHANIC_PIECES,
	pt_MECHANIC_TIME,
	pt_MECHANIC_SELECTED_COLOR,
	pt_MECHANIC_SELECTED_COMPONENT,
	bool:pt_SHOP,
	pt_SHOP_STATE,
	pt_SHOP_ARTICLE_ID[6],
	pt_SHOP_SELECTED_ARTICLE_ID,
	bool:pt_SHOP_COME_FROM_MY_ADS,
	pt_ANTIFLOOD_SHOP,	
	pt_SHOP_ADD_TYPE,
	pt_SHOP_ADD_TEXT[24],
	pt_SHOP_ADD_MODELID,
	pt_SHOP_ADD_VCOL1,
	pt_SHOP_ADD_VCOL2,
	pt_VIRTUAL_WORLD,
	bool:pt_PLAYER_SPECTATE,
	pt_PIZZA_PROCCESS,
	pt_DELIVERED_PIZZAS,
	pt_PIZZA_ACTOR,
	pt_LAST_PLANT_TIME,
	pt_LAST_SET_WANTED_LEVEL,
	pt_CREATE_CREW_NAME[32],
	pt_CREATE_CREW_COLOR,
	pt_CREW_INVITE_PID,
	pt_CREW_INVITE_AID,
	pt_CREW_INVITE_INFO[4],
	pt_CREW_SELECTED_RANK,
	pt_CREW_SELECTED_NEW_RANK,
	pt_LAST_TERRITORY,
	pt_PLAYER_TERRITORY_PRO,
	pt_PLAYER_COLOR,
	pt_LAST_GOT_CREW,
	pt_POLICE_PEN_PID,
	pt_POLICE_PEN_AID,
	pt_POLICE_PEN_IM,
	pt_POLICE_PEN_TIME,
	pt_LAST_SU_CHECK,
	pt_PIVOT_OBJECT,
	pt_TUNING_PICKUP,
	bool:pt_IN_TUNING_GARAGE,
	pt_TUNING_GARAGE_VEHICLEID,
	pt_TUNING_EDIT_SLOT,
	Float:pt_OLD_EDIT_VOBJECT_POS[6],
	pt_TUNING_EDIT_COLOR_SLOT,
	pt_LAST_SHOT_ROBBERY,
	pt_PASSWD[24],
	bool:pt_CONTROL,
	pt_SELECTING_STYLE,
	pt_SELECTED_STYLE,
	pt_PROPERTY_CINFO[4],
	pt_CJ_WARNINGS,
	pt_FIRST_NAME[24],
	pt_SUB_NAME[24],
	Text3D:pt_POLICE_LABEL,
	bool:pt_ADMIN_SERVICE,
	Text3D:pt_ADMIN_LABEL,
	pt_LAST_SAFE_ZONE_WARNING,
	pt_SELECTED_POLICE_OBJECT_INDEX,
	pt_SELECTED_BYC_ID,
	pt_SELECTED_BYC_USER_ID,
	bool:pt_DIALOG_RESPONDED,
	pt_DIALOG_ID,
	pt_SPEAKERS_TIME,
	bool:pt_MUSIC_FOR_SPEAKERS,
	pt_FUMIGATOR_CHECKPOINT,
	pt_FUMIGATOR_PROCCESS,
	pt_COOLDOWN_MEDICINE,
	pt_COOLDOWN_CRACK,
	pt_COOLDOWN_WEED,
	pt_SELECTED_OBJECT,
	pt_DIALOG_CLOSET_PROPERTY,
	pt_DIALOG_CLOSET_PROPERTY_SLOT,
	bool:pt_CLASSED,
	pt_CREW_INDEX,
	pt_DEATH_TIME,
	bool:pt_CREW_HELP,
	bool:pt_COMBAT,
	pt_COMBAT_TIMER,
	pt_LAST_VEHICLE_DESTROY,
	pt_LOGIN_KICK_TIMER,
	pt_COOLDOWN_MEDICAL_KIT,
	pt_SELECTED_GRAFFITI,
	bool:pt_PAYDAY_NOTIFICATION,
	Float:pt_INJURED_POS[4],
	pt_DROP_ITEM_TIMER,
	Float:pt_LAST_PLAYER_POS[4],
	pt_LAST_PLAYER_WORLD,
	pt_LAST_PLAYER_INTERIOR,
	bool:pt_PLAYER_PASS,
	bool:pt_LOGGINING,
	bool:pt_DEATH_HOTDOG_BYPASS,
	Text3D:pt_MECHANIC_LABEL,
	bool:pt_OWN_VEHICLE_TAXI,
	pt_GLOBAL_CHANNEL_TIMER,
	bool:pt_ATM_MAKER,
	bool:pt_GPS_TELEPORT,
	bool:pt_PLAYER_INVISIBLE,
	pt_DISPENSARY,
	pt_PLAYER_KEYS,
	pt_PLAYER_KEYS_OWNER,
	pt_SELECTED_PLAYER,
	pt_GARAGE_INDEX,
	bool:pt_EDITING_EXT_GPOS,
	pt_SV_MODELID,
	pt_SV_COLOUR_0,
	pt_SV_COLOUR_1,
	bool:pt_SV_VIP,
	pt_SV_LEVEL,
	pt_SV_PRICE,
	pt_SV_SELECTED_PRICE,
	pt_SV_EXTRA,
	pt_SV_SHOP,
	pt_TRAILER_CHECKPOINT,
	pt_RENT_VEHICLE,
	bool:pt_POLICE_HELP,
	pt_BM_SELECTED_WEAPON
};
new PlayerTemp[MAX_PLAYERS][enum_PT];

/* 
	src/player_data.pwn se encarga de todos los datos del jugador
	Cada que se ponga una variable aqui se debe poner en ese modulo para limpiarla.
*/

#define MAX_ADS_PER_PLAYER	3
enum
{
	PLAYER_SHOP_STATE_ALL,
	PLAYER_SHOP_STATE_AD,
	PLAYER_SHOP_STATE_MY_ADS,
}

enum
{
	SHOP_ARTICLE_TYPE_PROPERTY,
	SHOP_ARTICLE_TYPE_VEHICLE,
	SHOP_ARTICLE_TYPE_OTHER,
}

enum
{
	MECHANIC_OPTION_REPAIR,
	MECHANIC_OPTION_COLOR_1,
	MECHANIC_OPTION_COLOR_2,
	MECHANIC_OPTION_TUNING,
	MECHANIC_OPTION_REMOVE_COMPONEN,
	MECHANIC_OPTION_PAINTJOB,
}

enum
{
	INTERIOR_NO_INFO,
	INTERIOR_BINCO,
	INTERIOR_SUBURBAN,
	INTERIOR_PROLAPS,
	INTERIOR_DIDIER_SACHS,
	INTERIOR_VICTIM,
	INTERIOR_ZIP,
	INTERIOR_247,
	INTERIOR_PIZZA,
	INTERIOR_CLUCKIN_BELL,
	INTERIOR_BURGER_SHOT,
	INTERIOR_BANK_LS,
	INTERIOR_BANK_SF,
	INTERIOR_BANK_LV,
	INTERIOR_CITY_HALL_LS,
	INTERIOR_UNITY_STATION,
	INTERIOR_POLICE_LS,
	INTERIOR_POLICE_SF,
	INTERIOR_POLICE_LV,
	INTERIOR_POLICE_GARAGE,
	INTERIOR_POLICE_ROOF,
	INTERIOR_HOSPITAL,
	INTERIOR_POLICE_DISPENSARY_LS,
	INTERIOR_POLICE_DISPENSARY_SF,
	INTERIOR_POLICE_DISPENSARY_LV,
	INTERIOR_BLACKMARKET
}
enum Enter_Exits
{
	ee_VISIBLE_ITEMS,
	bool:ee_ROBBABLE,
	ee_LAST_ROBBERY,
	ee_MAIN_ACTOR,
	ee_TIMER,
	Text:ee_TEXTDRAW,
	ee_STEP,
	ee_LAST_CREW_INDEX_ROBBERY,
	Float:ee_ROBBERY_PROGRESS,

	ee_ID,
	ee_NAME[64],
	
	ee_INTERIOR_TYPE,
	
	ee_INT_MAPICON,
	ee_INT_FREEZE,
	ee_INT_WORLD,
	ee_INT_INTERIOR,
	Float:ee_INT_X,
	Float:ee_INT_Y,
	Float:ee_INT_Z,
	Float:ee_INT_ANGLE,
	
	ee_EXT_MAPICON,
	ee_EXT_FREEZE,
	ee_EXT_WORLD,
	ee_EXT_INTERIOR,
	Float:ee_EXT_X,
	Float:ee_EXT_Y,
	Float:ee_EXT_Z,
	Float:ee_EXT_ANGLE,
	
	ee_TIME_OPEN,
	ee_TIME_CLOSE,
	
	ee_INT_MAPICON_ID,
	ee_EXT_MAPICON_ID,
	Text3D:ee_INT_LABEL_ID,
	Text3D:ee_EXT_LABEL_ID,
	
	
	ee_INT_PICKUP_ID,	/* No son pickups decorativos */
	ee_EXT_PICKUP_ID,	/* Son pickups para identificar el id */

	ee_EXT_PICKUP_OBJECT /* Pickups de area para ciudades extra */
}

new ENTER_EXIT[][Enter_Exits] = // EE = EnterExits
{
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Binco", INTERIOR_BINCO, -1, false, 0, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, 2244.484863, -1665.223510, 15.476562, 0.0, 9, 20, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Binco", INTERIOR_BINCO, -1, false, 1, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, -2374.125976, 910.103271, 45.433864, 90.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Binco", INTERIOR_BINCO, -1, false, 2, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, 2101.902832, 2257.391845, 11.023437, 270.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Binco", INTERIOR_BINCO, -1, false, 3, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, 1656.993408, 1733.450195, 10.828111, 90.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "SubUrban", INTERIOR_SUBURBAN, -1, false, 0, 1, 203.906326, -50.494247, 1001.804687, 0.0,	45, false, 0, 0, 2112.835205, -1211.456665, 23.962865, 180.0, 9, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "SubUrban", INTERIOR_SUBURBAN, -1, false, 1, 1, 203.906326, -50.494247, 1001.804687, 0.0,	45, false, 0, 0, -2490.140869, -29.123632, 25.617187, 90.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "SubUrban", INTERIOR_SUBURBAN, -1, false, 2, 1, 203.906326, -50.494247, 1001.804687, 0.0,	45, false, 0, 0, 2779.590087, 2453.658203, 11.062500, 136.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ProLaps", INTERIOR_PROLAPS, -1, false, 0, 3, 206.995925, -140.021163, 1003.507812, 0.0,	45, false, 0, 0, 499.498168, -1360.616088, 16.368682, 340.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ProLaps", INTERIOR_PROLAPS, -1, false, 1, 3, 206.995925, -140.021163, 1003.507812, 0.0,	45, false, 0, 0, 2825.891357, 2407.322265, 11.062500, 133.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Didier Sachs", INTERIOR_DIDIER_SACHS, -1, false, 0, 14, 204.348281, -168.678985, 1000.523437, 0.0,	45, false, 0, 0, 453.858032, -1478.098632, 30.813968, 111.110641, 8, 23, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Didier Sachs", INTERIOR_DIDIER_SACHS, -1, false, 1, 14, 204.348281, -168.678985, 1000.523437, 0.0,	45, false, 0, 0, 1642.838012, -2284.760742, -1.195312, 270.0, 8, 23, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Victim", INTERIOR_VICTIM, -1, false, 0, 5, 227.350250, -8.188652, 1002.210937, 90.0,	45, false, 0, 0, 461.541320, -1500.892333, 31.049194, 98.0, 8, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Victim", INTERIOR_VICTIM, -1, false, 1, 5, 227.350250, -8.188652, 1002.210937, 90.0,	45, false, 0, 0, -1694.747558, 951.613464, 24.890625, 135.0, 8, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Victim", INTERIOR_VICTIM, -1, false, 2, 5, 227.350250, -8.188652, 1002.210937, 90.0,	45, false, 0, 0, 2802.926269, 2430.682861, 11.062500, 130.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ZIP", INTERIOR_ZIP, -1, false, 0, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, 1456.611816, -1137.818969, 23.961400, 215.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ZIP", INTERIOR_ZIP, -1, false, 1, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, -1882.421997, 866.394836, 35.171875, 138.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ZIP", INTERIOR_ZIP, -1, false, 2, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, 2090.534667, 2224.481933, 11.023437, 180.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ZIP", INTERIOR_ZIP, -1, false, 3, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, 2572.074218, 1904.711181, 11.023437, 180.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 0, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2194.734130, 1991.022216, 12.296875, 90.0,	0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 1, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -180.966003, 1034.823242, 19.742187, 90.0,	0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 2, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1352.314941, -1758.961425, 13.507812, 0.0,	0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 3, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1833.540771, -1842.542724, 13.578125, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 4, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2884.694335, 2453.865478, 11.068956, 225.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 5, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2097.616210, 2224.081298, 11.023437, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 6, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2247.650146, 2396.417236, 10.820312, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 7, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1315.453247, -897.967102, 39.578125, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 8, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1000.317199, -919.933349, 42.328125, 105.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 9, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2452.572021, 2064.924316, 10.820312, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 10, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2546.502929, 1972.397338, 10.820312, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 11, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1937.592773, 2307.269042, 10.820312, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 12, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -1562.437744, -2733.189941, 48.743457, 234.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 13, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -2442.718994, 755.316589, 35.171875, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 0, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2105.234619, -1806.479614, 13.554687, 90.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 1, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, -1721.211425, 1359.705932, 7.185316, 90.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 2, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2756.652099, 2477.132812, 11.062500, 135.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 3, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2083.380615, 2224.687988, 11.023437, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 4, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2351.770996, 2533.328369, 10.820312, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 5, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2638.568847, 1849.818481, 11.023437, 90.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 6, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 372.310729, -133.246292, 1001.492187, 0.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 7, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 375.114501, -117.272621, 1001.492187, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 0, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2419.926025, -1509.024780, 24.000000, 270.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 1, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2397.772949, -1898.847778, 13.546875, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 2, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 928.553466, -1352.848876, 13.343750, 90.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 3, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2838.312011, 2407.552978, 11.068956, 225.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 4, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2101.901367, 2228.776855, 11.023437, 270.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 5, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2393.372070, 2041.856323, 10.820312, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 6, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2638.423828, 1671.904296, 11.023437, 90.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 7, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, -1816.567382, 618.417419, 35.171875, 180.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 8, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, -2671.401611, 257.927551, 4.632812, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 9, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 364.914093, -11.778851, 1001.851562, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 10, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 368.652679, -4.492218, 1001.851562, 180.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 0, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 810.715270, -1616.163330, 13.546875, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 1, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 1199.272216, -918.372253, 43.121376, 180.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 2, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 2366.805419, 2071.106201, 10.820312, 90.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 3, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 2472.626464, 2034.173339, 11.062500, 90.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 4, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 1872.485351, 2071.812255, 11.062500, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 5, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 2169.620117, 2795.799072, 10.820312, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 6, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 1157.925659, 2072.159912, 11.062500, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 7, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, -2356.003173, 1008.051147, 50.898437, 90.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 8, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, -2336.861816, -166.945022, 35.554687, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 9, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, -1912.406860, 827.900634, 35.227863, 315.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Banco Los Santos", INTERIOR_BANK_LS, -1, true, 5, 5, 1412.077880, 1315.779907, 1501.087890, 90.0,	52, false, 0, 0, 1473.2904, -1262.4603, 14.5625, 267.3080, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Banco San Fierro", INTERIOR_BANK_SF, -1, true, 10, 10, 1104.824462, 1515.503173, 1452.807128, 0.0, 52, false, 0, 0, -1961.6775, 539.9995, 35.1719, 271.3235, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Banco Las Venturas", INTERIOR_BANK_LV, -1, true, 15, 15, 2673.430908, -610.844604, -71.658203, 270.0, 52, false, 0, 0, 2447.6882, 2376.2087, 12.1635, 269.2639, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{1000, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Gobierno San Andreas", INTERIOR_CITY_HALL_LS, -1, true, 20, 20, -501.181243, 286.212188, 2001.094970, 0.0, 3, false, 0, 0, 1480.966918, -1772.065673, 18.795755, 0.0, 8, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Unity Station", INTERIOR_UNITY_STATION, -1, false, 0, 3, 1494.416015, 1303.681884, 1093.289062, 0.0, -1, false, 0, 0, 1752.603881, -1894.155883, 13.557376, 270.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Policía Los Santos", INTERIOR_POLICE_LS, -1, false, 0, 6, 246.827011, 62.424068, 1003.640625, 0.0, 30, false, 0, 0, 1555.400390, -1675.611694, 16.195312, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Policía San Fierro", INTERIOR_POLICE_SF, -1, false, 0, 10, 246.425857, 107.400123, 1003.218750, 0.0, 30, false, 0, 0, -1605.511840, 710.382507, 13.867187, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Policía Las Venturas", INTERIOR_POLICE_LV, -1, false, 0, 3, 238.758178, 138.726867, 1003.023437, 0.0, 30, false, 0, 0, 2388.9275, 2466.2620, 10.8203, 87.6494, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Policía Los Santos", INTERIOR_POLICE_GARAGE, -1, false, 0, 6, 246.407897, 87.903236, 1003.640625, 180.0, -1, false, 0, 0, 1568.651977, -1690.080688, 6.218750, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID}, // garaje lspd
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Policía San Fierro", INTERIOR_POLICE_GARAGE, -1, false, 0, 10, 278.369232, 117.561325, 1004.617187, 90.0, -1, false, 0, 0, -1594.110107, 716.163024, -4.906250, 270.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID}, // garaje lspd
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Policía Las Venturas", INTERIOR_POLICE_GARAGE, -1, false, 0, 3, 231.671142, 181.048477, 1003.031250, 90.0, -1, false, 0, 0, 2282.221923, 2423.218505, 3.476562, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID}, // garaje lspd
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Policía Los Santos", INTERIOR_POLICE_ROOF, -1, false, 0, 6, 242.5959 ,66.3320, 1003.6406, 269.7165, -1, false, 0, 0, 1564.6993, -1666.8246, 28.3956, 357.7589, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID}, // techo lspd
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 1, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	2034.197875, -1403.040039, 17.294845, 180.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 2, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	1172.832763, -1323.269531, 15.400051, 270.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 3, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	1242.235595, 328.113281, 19.755510, 0.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 4, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	-2201.566162, -2307.610839, 30.625000, 320.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 5, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	-2655.108886, 639.278625, 14.453125, 180.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 6, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	-318.812774, 1050.359130, 20.340259, 0.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 7, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	-1514.855590, 2520.366699, 55.909828, 0.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 8, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	1583.311401, 1768.952758, 10.820312, 90.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Dispensario Policía Los Santos", INTERIOR_POLICE_DISPENSARY_LS, -1, false, 1, 5, 322.2996, 302.3666, 999.1484, 350.2226, -1, false, 0, 0, 1524.4863, -1678.1053, 6.2188, 269.1525, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Dispensario Policía San Fierro", INTERIOR_POLICE_DISPENSARY_LV, -1, false, 2, 5, 322.2996, 302.3666, 999.1484, 350.2226, -1, false, 0, 0, -1606.4724, 672.0643, -4.9063, 356.7417, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Dispensario Policía Las Venturas", INTERIOR_POLICE_DISPENSARY_SF, -1, false, 3, 5, 322.2996, 302.3666, 999.1484, 350.2226, -1, false, 0, 0, 2268.2654, 2449.2861, 3.5313, 179.2697, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Mercado Negro", INTERIOR_BLACKMARKET, -1, false, 1, 6, 296.8741, -111.9642, 1001.5156, 2.6757, -1, false, 0, 0, 2314.9795, 56.2875, 26.4813, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID}
}; 

enum enum_JAIL_POSITIONS
{
	jail_INT,
	Float:jail_X,
	Float:jail_Y,
	Float:jail_Z,
	Float:jail_ANGLE,
	jail_INTERIOR,
}
new JAIL_POSITIONS[][enum_JAIL_POSITIONS] = 
{
	{INTERIOR_POLICE_LS, 265.070129, 77.518280, 1001.039062, 270.0, 6}, //jaills
	{INTERIOR_POLICE_SF, 215.681945, 110.177680, 999.015625, 0.0, 10}, //jailsf
	{INTERIOR_POLICE_LV, 197.925323, 174.997573, 1003.023437, 0.0, 3} //jaillv
};

enum BUY_PROPERTIES_SITES_INFO
{
	site_INTERIOR_TYPE,
	Float:site_X,
	Float:site_Y,
	Float:site_Z,
	site_WORLD,
	site_INTERIOR,
}
new BUY_PROPERTIES_SITES[][BUY_PROPERTIES_SITES_INFO] =
{
	{INTERIOR_BANK_LS, 1396.613403, 1320.551635, 1501.090698, 5, 5},
	{INTERIOR_BANK_SF, 1116.351684, 1540.468750, 1451.827148, 10, 10},
	{INTERIOR_BANK_LV, 2681.990966, -615.470520, -71.658203, 15, 15}
};



enum
{
	PRODUCT_TYPE_NONE,
	PRODUCT_TYPE_FOOD,
	PRODUCT_TYPE_PHONE,
	PRODUCT_TYPE_GPS,
	PRODUCT_TYPE_MP3,
	PRODUCT_TYPE_PHONE_RESOLVER,
	PRODUCT_TYPE_SPEAKERS,
}
enum Supermarket_Enum
{
	product_TYPE,
	product_NAME[24],
	product_PRICE,
	Float:product_HUNGRY,
	Float:product_THIRST,
	product_DRUNK,
}
new Supermarket_Product_List[][Supermarket_Enum] =  
{
	{PRODUCT_TYPE_PHONE, "Teléfono", 1000, 0.0, 0.0, 0},
	{PRODUCT_TYPE_PHONE_RESOLVER, "Guía telefónica", 300, 0.0, 0.0, 0},
	{PRODUCT_TYPE_GPS, "Localizador GPS", 500, 0.0, 0.0, 0},
	{PRODUCT_TYPE_MP3, "Reproductor MP3", 2000, 0.0, 0.0, 0},
	{PRODUCT_TYPE_SPEAKERS, "Altavoces", 3000, 0.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Botella de agua mineral", 80, 0.0, 25.0, 0},
	{PRODUCT_TYPE_FOOD, "Lata de refresco Sprunk", 40, 0.0, 12.0, 0},
	{PRODUCT_TYPE_FOOD, "Lata de refresco cola", 30, 0.0, 10.0, 0},
	{PRODUCT_TYPE_FOOD, "Barrita energetica", 80, 15.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Porcion de pizza", 60, 20.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Ensalada", 50, 15.0, 2.0, 0},
	{PRODUCT_TYPE_FOOD, "Sandwich", 45, 10.0, 2.0, 0},
	{PRODUCT_TYPE_FOOD, "Lata de cerveza", 40, 0.0, 3.0, 1000},
	{PRODUCT_TYPE_FOOD, "Vodka", 80, 0.0, 3.0, 2500},
	{PRODUCT_TYPE_FOOD, "Whisky", 200, 0.0, 3.0, 3000}
};


enum Clothing_Shop_Info
{
	clothing_shop_INTERIOR_TYPE,
	clothing_shop_NAME[24],
	Float:clothing_shop_X,
	Float:clothing_shop_Y,
	Float:clothing_shop_Z,
	Float:clothing_shop_ANGLE,
	clothing_shop_INTERIOR,
}
new Clothing_Shop_Positions[][Clothing_Shop_Info] =  
{ 
	{INTERIOR_BINCO, "Binco", 207.733657, -100.633468, 1005.257812, 180.0, 15}, //Binco
	{INTERIOR_SUBURBAN, "SubUrban", 203.905395, -43.450450, 1001.804687, 180.0, 1}, //SubUrban
	{INTERIOR_PROLAPS, "ProLaps", 207.049148, -129.177581, 1003.507812, 180.0, 3}, //prolaps
	{INTERIOR_DIDIER_SACHS, "Didier Sachs", 204.348281, -159.493728, 1000.523437, 180.0, 14}, //Didier
	{INTERIOR_VICTIM, "Victim", 206.374328, -7.241514, 1001.210937, 270.0, 5}, //Victim
	{INTERIOR_ZIP, "ZIP", 161.443634, -83.589271, 1001.804687, 180.0, 18} //Zip
};


enum Fast_Food_Info
{
	fast_food_INTERIOR_TYPE,
	fast_food_NAME[24],
	Float:fast_food_X,
	Float:fast_food_Y,
	Float:fast_food_Z,
	fast_food_INTERIOR,
}
new Fast_Food_Positions[][Fast_Food_Info] =
{
	{INTERIOR_BURGER_SHOT, "Burger Shot", 375.913238, -67.435272, 1001.507812, 10}, // BurgerShot
	{INTERIOR_PIZZA, "Well Stacked Pizza", 375.254730, -118.804710, 1001.499511, 5}, //Pizza
	{INTERIOR_CLUCKIN_BELL, "Cluckin Bell", 368.757904, -6.018908, 1001.851562, 9} //Cluckin Bell
};

#define MAX_ATM_BANK 500

enum atm_bank_info
{
	bool:atm_valid,
	atm_id,
	atm_objectid,
	Text3D:atm_label,
	atm_pickupid,
	Float:atm_X,
	Float:atm_Y,
	Float:atm_Z,
	Float:atm_RX,
	Float:atm_RY,
	Float:atm_RZ
}
new ATM_BANK[MAX_ATM_BANK][atm_bank_info];

#define MAX_BANK_TRANSACTIONS_DIALOG	20
enum
{
	BANK_TRANSACTION_WITHDRAW,
	BANK_TRANSACTION_DEPOSIT,
	BANK_TRANSACTION_TRANSFER,
	BANK_TRANSACTION_CREATE_ACCOUNT,
	BANK_TRANSACTION_BUY_PROPERTY,
	BANK_TRANSACTION_SOLD_PROPERTY,
	BANK_TRANSACTION_BUY_VEHICLE,
	BANK_TRANSACTION_SOLD_VEHICLE
};
enum Bank_Interior_Info
{
	bank_INTERIOR_TYPE,
	Float:bank_X,
	Float:bank_Y,
	Float:bank_Z,
	bank_WORLD,
	bank_INTERIOR,
}
new Bank_Interior_Positions[][Bank_Interior_Info] =
{
	{INTERIOR_BANK_LS, 1407.356201, 1320.171142, 1501.083984, 5, 5},
	{INTERIOR_BANK_SF, 1105.033935, 1529.565795, 1452.480957, 10, 10},
	{INTERIOR_BANK_LV, 2690.869628, -610.943664, -71.658203, 15, 15}
};

enum Food_Info
{
	food_NAME[24],
	food_PRICE,
	Float:food_HUNGRY,
	Float:food_THIRST,
}
new PIZZA_FOOD[][Food_Info] =
{
	{"Pizza de verduras", 5, 10.0, -0.1},
	{"Pizza de jamón y queso", 10, 16.0, -0.1},
	{"Pizza barbacoa", 15, 15.0, -0.1},
	{"Pizza 4 quesos", 15, 14.0, -0.1},
	{"Ensalada", 5, 10.0, 5.0},
	{"Refresco de Sprunk", 15, 0.0, 12.0},
	{"Refresco de Cola", 10, 0.0, 13.5},
	{"Agua mineral", 5, 0.0, 19.0}
};
new BURGER_SHOT_FOOD[][Food_Info] =
{
	{"Hamburguesa de ternera", 5, 16.0, -0.1},
	{"Hamburguesa de pollo", 10, 10.0, -0.1},
	{"Hamburguesa especial", 15, 12.0, -3.0},
	{"Ensalada", 5, 10.0, 5.0},
	{"Refresco de Sprunk", 15, 0.0, 12.0},
	{"Refresco de Cola", 10, 0.0, 13.5},
	{"Agua mineral", 5, 0.0, 19.0}
};
new CLUCKIN_BELL_FOOD[][Food_Info] =
{
	{"Alitas de pollo", 10, 16.0, -0.1},
	{"Plato especial", 15, 18.0, -2.0},
	{"Ensalada", 5, 10.0, 5.0},
	{"Refresco de Sprunk", 15, 0.0, 12.0},
	{"Refresco de Cola", 10, 0.0, 13.5},
	{"Agua mineral", 5, 0.0, 19.0}
};

enum Player_Toys_Info
{
	player_toy_VALID,
	
	player_toy_ID,
	player_toy_NAME[24],
	player_toy_ATTACHED,
	player_toy_MODELID,
	player_toy_BONE,
	Float:player_toy_OFFSET_X,
	Float:player_toy_OFFSET_Y,
	Float:player_toy_OFFSET_Z,
	Float:player_toy_ROT_X,
	Float:player_toy_ROT_Y,
	Float:player_toy_ROT_Z,
	Float:player_toy_SCALE_X,
	Float:player_toy_SCALE_Y,
	Float:player_toy_SCALE_Z,
	player_toy_COLOR_1,
	player_toy_COLOR_2,
}
new PLAYER_TOYS[MAX_PLAYERS][MAX_SU_TOYS][Player_Toys_Info]; //PTOYS = PlayerToys

new Toys_Bones[][24] = 
{
	{"Espalda"},
	{"Cabeza"},
	{"Brazo izquierdo"},
	{"Brazo derecho"},
	{"Mano izquierda"},
	{"Mano derecha"},
	{"Muslo izquierdo"},
	{"Muslo derecho"},
	{"Pie izquierdo"},
	{"Pie derecho"},
	{"Pantorrilla derecha"},
	{"Pantorrilla izquierda"},
	{"Antebrazo izquierdo"},
	{"Antebrazo derecho"},
	{"Hombro izquierdo"},
	{"Hombro derecho"},
	{"Cuello"},
	{"Boca"}
};

enum Toys_Info
{
	shop_toy_model[24],
	shop_toy_modelid,
	shop_toy_price_base,
	shop_toy_price,
}
new Toys_Shop[][Toys_Info] =
{
	{"motorcyclehelmet2", 18976, 2000, 0},
	{"motorcyclehelmet3", 18977, 500, 0},
	{"motorcyclehelmet4", 18978, 500, 0},
	{"motorcyclehelmet5", 18979, 500, 0},
	{"sillyhelmet2", 19114, 100, 0},
	{"sillyhelmet3", 19115, 200, 0},
	{"plainhelmet1", 19116, 75, 0},
	{"plainhelmet2", 19117, 75, 0},
	{"plainhelmet3", 19118, 75, 0},
	{"plainhelmet4", 19119, 75, 0},
	{"plainhelmet5", 19120, 75, 0},
	{"glassestype1", 19006, 2000, 0},
	{"glassestype2", 19007, 2000, 0},
	{"glassestype3", 19008, 2000, 0},
	{"glassestype4", 19009, 2000, 0},
	{"glassestype5", 19010, 2000, 0},
	{"glassestype6", 19011, 2000, 0},
	{"glassestype7", 19012, 2000, 0},
	{"glassestype8", 19013, 2000, 0},
	{"glassestype9", 19014, 2000, 0},
	{"glassestype10", 19015, 2000, 0},
	{"glassestype11", 19016, 2000, 0},
	{"glassestype12", 19017, 2000, 0},
	{"glassestype13", 19018, 2000, 0},
	{"glassestype14", 19019, 2000, 0},
	{"glassestype15", 19020, 2000, 0},
	{"glassestype16", 19021, 2000, 0},
	{"glassestype17", 19022, 2000, 0},
	{"glassestype18", 19023, 2000, 0},
	{"glassestype19", 19024, 2000, 0},
	{"glassestype20", 19025, 2000, 0},
	{"glassestype21", 19026, 2000, 0},
	{"glassestype22", 19027, 2000, 0},
	{"glassestype23", 19028, 2000, 0},
	{"glassestype24", 19029, 2000, 0},
	{"glassestype25", 19030, 2000, 0},
	{"glassestype26", 19031, 2000, 0},
	{"glassestype27", 19032, 2000, 0},
	{"glassestype28", 19033, 2000, 0},
	{"glassestype29", 19034, 2000, 0},
	{"glassestype30", 19035, 2000, 0},
	{"policeglasses1", 19138, 2300, 0},
	{"policeglasses2", 19139, 2300, 0},
	{"policeglasses3", 19140, 2300, 0},
	{"bandana1", 18891, 600, 0},	
	{"bandana2", 18892, 600, 0},
	{"bandana3", 18893, 600, 0},
	{"bandana4", 18894, 600, 0},
	{"bandana5", 18895, 600, 0},
	{"bandana6", 18896, 600, 0},
	{"bandana7", 18897, 600, 0},
	{"bandana8", 18898, 600, 0},
	{"bandana9", 18899, 600, 0},
	{"bandana10", 18900, 600, 0},
	{"bandana11", 18901, 600, 0},
	{"bandana12", 18902, 600, 0},
	{"bandana13", 18903, 600, 0},
	{"bandana14", 18904, 600, 0},
	{"bandana15", 18905, 600, 0},
	{"bandana16", 18906, 600, 0},
	{"bandana17", 18907, 600, 0},
	{"bandana18", 18908, 600, 0},
	{"bandana19", 18909, 600, 0},
	{"bandana20", 18910, 600, 0},
	{"mask1", 18911, 500, 0},
	{"mask2", 18912, 500, 0},
	{"mask3", 18913, 500, 0},
	{"mask4", 18914, 500, 0},
	{"mask5", 18915, 500, 0},
	{"mask6", 18916, 500, 0},
	{"mask7", 18917, 500, 0},
	{"mask8", 18918, 500, 0},
	{"mask9", 18919, 500, 0},
	{"mask10", 18920, 500, 0},
	{"watchtype1", 19039, 3000, 0},
	{"watchtype2", 19040, 3000, 0},
	{"watchtype3", 19041, 3000, 0},
	{"watchtype4", 19042, 3000, 0},
	{"watchtype5", 19043, 3000, 0},
	{"watchtype6", 19044, 3000, 0},
	{"watchtype7", 19045, 3000, 0},
	{"watchtype8", 19046, 3000, 0},
	{"watchtype9", 19047, 3000, 0},
	{"watchtype10", 19048, 3000, 0},
	{"watchtype11", 19049, 3000, 0},
	{"watchtype12", 19050, 3000, 0},
	{"watchtype13", 19051, 3000, 0},
	{"watchtype14", 19052, 3000, 0},
	{"watchtype15", 19053, 3000, 0},
	{"beret1", 18921, 1150, 0},
	{"beret2", 18922, 1150, 0},
	{"beret3", 18923, 1150, 0},
	{"beret4", 18924, 1150, 0},
	{"beret5", 18925, 1150, 0},
	{"cj_tommy_hat", 2052, 200, 0},
	{"cj_jerry_hat", 2053, 200, 0},
	{"cj_capt_hat", 2054, 2000, 0},
	{"hardhat1", 18638, 300, 0},
	{"hardhat2", 19093, 450, 0},
	{"hardhat3", 19160, 450, 0},
	{"blackhat1", 18639, 600, 0},
	{"hat1", 18926, 650, 0},
	{"hat2", 18927, 650, 0},
	{"hat3", 18928, 650, 0},
	{"hat4", 18929, 650, 0},
	{"hat5", 18930, 650, 0},
	{"hat6", 18931, 650, 0},
	{"hat7", 18932, 650, 0},
	{"hat8", 18933, 650, 0},
	{"hat9", 18934, 650, 0},
	{"hat10", 18935, 650, 0},
	{"hatboater1", 18944, 800, 0},
	{"hatboater2", 18945, 800, 0},
	{"hatboater3", 18946, 800, 0},
	{"hatbowler1", 18947, 1200, 0},
	{"hatbowler2", 18948, 1200, 0},
	{"hatbowler3", 18949, 1200, 0},
	{"hatbowler4", 18950, 1200, 0},
	{"hatbowler5", 18951, 1200, 0},
	{"hatbowler6", 19488, 1200, 0},
	{"cowboyhat1", 19095, 1150, 0},
	{"cowboyhat2", 18962, 1150, 0},
	{"cowboyhat3", 19096, 1150, 0},
	{"cowboyhat4", 19097, 1150, 0},
	{"cowboyhat5", 19098, 1150, 0},
	{"hatman1", 18967, 650, 0},
	{"hatman2", 18968, 650, 0},
	{"hatman3", 18969, 650, 0},
	{"hatman3", 18969, 650, 0},
	{"hattiger1", 18970, 1500, 0},
	{"hatcool1", 18971, 1500, 0},
	{"hatcool2", 18972, 1500, 0},
	{"hatcool3", 18973, 1500, 0},
	{"santahat1", 19064, 100, 0},
	{"santahat2", 19065, 100, 0},
	{"santahat3", 19066, 100, 0},
	{"hoodyhat1", 19067, 500, 0},
	{"hoodyhat2", 19068, 500, 0},
	{"hoodyhat3", 19069, 500, 0},
	{"policehat1", 19161, 2500, 0},
	{"policehat2", 19162, 2500, 0},
	{"tophat01", 19352, 700, 0},
	{"tophat02", 19487, 700, 0},
	{"pilothat01", 19520, 3000, 0},
	{"policehat01", 19521, 3000, 0},
	{"witcheshat1", 19528, 150, 0},
	{"strawhat1", 19553, 450, 0},
	{"pizzahat1", 19558, 100, 0},
	{"hikerbackpack1", 19559, 600, 0},
	{"hair1", 19517, 1000, 0},
    {"hair2", 19516, 1000, 0},
    {"hair3", 19077, 1000, 0},
    {"hair4", 18975, 1000, 0},
    {"cluckinbellhat", 19137, 2500, 0},
    {"firehat01", 19330, 3000, 0},
    {"firehat02", 19331, 3000, 0},
    {"burgershothat1", 19094, 2000, 0},
    {"captruker1", 18961, 1000, 0},
    {"bassguitar01", 19317, 2100, 0},
    {"bassguitar02", 19318, 2100, 0},
    {"boxinghelmet01", 18952, 1500, 0},
    {"hockeymas1", 19036, 1700, 0},
    {"theparrot1", 19078, 7500, 0},
    {"armour", 19515, 7000, 0},
    {"bdupsmask1", 11704, 3500, 0},
    {"glimpmask1", 19163, 2500, 0},
    {"headphones02", 19422, 1500, 0},
    {"parachute", 371, 2200, 0}
};

new 
Binco_Shop_Male_Skins[][2] =
{
/* BINCO - HOMBRE */
    {4, 75},
    {5, 75},
    {6, 90},
    {7, 80},
    {21, 121},
    {44, 65},
    {47, 119},
    {101, 149},
    {127, 89},
    {128, 25},
    {134, 25},
    {135, 25},
    {137, 19},
    {160, 55},
    {161, 68},
    {168, 39},
    {176, 79},
    {177, 65},
    {179, 110},
    {184, 150},
    {188, 160},
    {200, 15},
    {212, 30},
    {230, 10},
    {258, 69},
    {259, 69},
    {262, 50},
    {86, 70},
    {102, 100},
    {103, 100},
    {104, 100},
    {105, 100},
    {106, 100},
    {107, 100},
    {108, 100},
    {109, 100},
    {110, 100},
    {111, 100},
    {112, 100},
    {113, 100},
    {114, 100},
    {115, 100},
    {116, 100},
    {117, 100},
    {118, 100},
    {119, 100},
    {120, 100},
    {121, 100},
    {122, 100},
    {123, 100},
    {124, 100},
    {125, 100},
    {126, 100}
},

Binco_Shop_Female_Skins[][2] =
{
/* BINCO - MUJER */
    {13, 120},
    {41, 59},
    {56, 190},
    {65, 110},
    {69, 100},
    {75, 50},
    {89, 69},
    {151, 89},
    {152, 3000},
    {207, 500},
    {226, 120},
    {298, 900}
},

Suburban_Shop_Male_Skins[][2] =
{
/* SUBURBAN - HOMBRE */
    {2, 100},
    {3, 140},
    {20, 190},
    {43, 180},
    {48, 145},
    {60, 250},
    {100, 300},
    {112, 200},
    {119, 49},
    {143, 199},
    {180, 150},
    {183, 100},
    {184, 140},
    {241, 200},
    {242, 190},
    {247, 450},
    {248, 499},
    {249, 650},
    {264, 5}
},

Suburban_Shop_Female_Skins[][2] =
{
/* SUBURBAN - MUJER */
    {39, 109},
    {56, 100},
    {88, 140},
    {131, 200},
    {195, 199}
},

Prolaps_Shop_Male_Skins[][2] =
{
/* PROLAPS - HOMBRE */
    {29, 129},
    {36, 140},
    {37, 150},
    {51, 160},
    {52, 170},
    {96, 200},
    {99, 700},
    {206, 499},
    {154, 199}
},

Prolaps_Shop_Female_Skins[][2] =
{
/* PROLAPS - MUJER */
    {41, 199},
    {90, 250},
    {92, 860},
    {138, 150},
    {139, 150},
    {140, 159},
    {190, 150},
    {192, 180},
    {193, 195}
},

Didier_Shop_Male_Skins[][2] =
{
/* DIDIER - HOMBRE */
    {17, 1500},
    {46, 1900},
    {57, 1220},
    {82, 3400},
    {83, 3400},
    {84, 3400},
    {124, 3500},
    {147, 6000},
    {163, 3000},
    {166, 3000},
    {171, 4000},
    {187, 4500},
    {223, 3100},
    {240, 1500},
    {295, 3000}
},

Didier_Shop_Female_Skins[][2] =
{
/* DIDIER - MUJER */
    {11, 1500},
    {12, 3000},
    {40, 2500},
    {91, 8000},
    {141, 3500},
    {169, 4000},
    {172, 2100},
    {194, 2000},
    {214, 25000},
    {215, 3200},
    {216, 10500},
    {219, 9500}
},

Victim_Shop_Male_Skins[][2] =
{
/* VICTIM - HOMBRE */
    {19, 400},
    {46, 1200},
    {59, 900},
    {72, 599},
    {73, 699},
    {98, 339},
    {121, 200},
    {170, 500},
    {185, 400},
    {186, 900},
    {188, 350},
    {221, 700},
    {223, 1200},
    {250, 50000},
    {289, 699},
    {299, 700},
    {303, 500},
    {304, 700}
},

Victim_Shop_Female_Skins[][2] =
{
/* VICTIM - MUJER */
    {12, 2900},
    {40, 3000},
    {55, 1010},
    {56, 400},
    {192, 3000},
    {211, 3500},
    {226, 600},
    {233, 900}
},

Zip_Shop_Male_Skins[][2] =
{
/* ZIP - HOMBRE */
    {121, 190},
    {170, 500},
    {185, 400},
    {186, 900},
    {19, 400},
    {46, 1200},
    {59, 905},
    {72, 400},
    {73, 650},
    {98, 320},
    {250, 49999},
    {289, 622},
    {299, 730},
    {303, 550},
    {188, 350},
    {221, 700},
    {223, 1200},
    {304, 700}
},

Zip_Shop_Female_Skins[][2] =
{
/* ZIP - MUJER */
    {56, 405},
    {192, 3010},
    {211, 3520},
    {226, 620},
    {233, 950},
    {12, 2904},
    {40, 3002},
    {55, 1011}
};

enum
{
	PICKUP_TYPE_NONE = 0,
	PICKUP_TYPE_ENTER_EXIT,
	PICKUP_TYPE_ATM,
	PICKUP_TYPE_PROPERTY,
	PICKUP_TYPE_GARAGE,
};

enum Fuel_Stations_Info
{
	Float:fs_X,
	Float:fs_Y,
	Float:fs_Z
};
new Fuel_Stations[][Fuel_Stations_Info] =
{
	{1942.679443, -1771.374511, 13.390598},
	{654.678710, -570.627807, 16.335937},
	{1384.011962, 457.825012, 19.995258},
	{-1669.027221, 411.541076, 7.179687},
	{-2409.644042, 976.147644, 45.307708},
	{-1328.633666, 2675.913818, 50.062500},
	{621.9183, 1698.5494, 6.9995},
	{-1607.715820, -2717.499023, 48.539062},
	{2146.831542, 2743.855224, 10.820312},
	{2197.993408, 2475.015625, 10.820312},
	{2115.124267, 926.094909, 10.960937},
	{1595.974731, 2193.016845, 10.820312},
	{-1477.559326, 1858.962524, 32.639846},
	{-98.757804, -1172.726440, 2.428447},
	{-609.9359, -491.0864, 25.5441},
	{-2244.0498, -2560.4192, 31.9219}
};

enum E_HOSPITAL_SPAWN_INFO
{
	Float:hspi_X,
	Float:hspi_Y,
	Float:hspi_Z,
	Float:hspi_ANGLE,
}

new Hospital_Spawn_Positions[][E_HOSPITAL_SPAWN_INFO] =  
{ 
	{2034.197875, -1403.040039, 17.294845, 180.0},
	{1172.832763, -1323.269531, 15.400051, 270.0},
	{1242.235595, 328.113281, 19.755510, 0.0},
	{-2201.566162, -2307.610839, 30.625000, 320.0},
	{-2655.108886, 639.278625, 14.453125, 180.0},
	{-318.812774, 1050.359130, 20.340259, 0.0},
	{-1514.855590, 2520.366699, 55.909828, 0.0},
	{1583.311401, 1768.952758, 10.820312, 90.0}
};

new Police_Dispensary_Positions[][E_HOSPITAL_SPAWN_INFO] =
{
	{1524.4863, -1678.1053, 6.2188, 269.1525},
	{-1606.4724, 672.0643, -4.9063, 356.7417},
	{2268.2654, 2449.2861, 3.5313, 179.2697}
};

new Float:Hospital_Cameras_Positions[][] =
{
	{2007.3301, -1442.3809, 26.7332, 2008.0043, -1441.6445, 26.4982},
	{1209.2427, -1314.4705, 23.4945, 1208.5284, -1315.1681, 23.3195},
	{1260.2025, 342.6251, 22.3913, 1259.4681, 341.9478, 22.2512},
	{-2200.5859, -2316.3057, 31.7932, -2200.8340, -2315.3367, 31.6932},
	{-2530.8450, 568.0942, 29.4603, -2531.6973, 568.6146, 29.4553},
	{-305.5014, 1068.6696, 24.2657, -306.1943, 1067.9514, 24.0607},
	{-1504.2892, 2553.1243, 61.1113, -1504.5568, 2552.1619, 60.8414},
	{1624.5881, 1837.4691, 12.5740, 1623.9382, 1836.7124, 12.4690}
};

enum enum_pbar
{
	PlayerBar:pbar_THIRST,
	PlayerBar:pbar_HUNGRY
}
new PLAYER_BARS[MAX_PLAYERS][enum_pbar];

/* TEXTDRAWS */
#define MAX_PLAYER_MAP_GPS_POINTS 20
#define HUD_PTEXTDRAWS_SIZE 2
enum Player_Textdraws_Enum
{
	PlayerText:ptextdraw_HOSPITAL[3], //Barra recuperando vida despues de morir
	PlayerText:ptextdraw_CLOTHING_SHOP[6], //Tiendas de ropas
	PlayerText:ptextdraw_TOYS_SHOP[10],
	PlayerText:ptextdraw_PROPERTY_CONSTRUCTOR[6],
	PlayerText:ptextdraw_TRUCK_LOAD[4],
	PlayerText:ptextdraw_RECYCLE_TRASH[3],
	PlayerText:ptextdraw_PLAYER_GPS_MAP[MAX_PLAYER_MAP_GPS_POINTS],
	PlayerText:ptextdraw_SHOP_BUTTONS[5],
	PlayerText:ptextdraw_SHOP_ARTICLES_PAGE,
	PlayerText:ptextdraw_SHOP_ARTICLES_MODEL[6],
	PlayerText:ptextdraw_SHOP_ARTICLES_PRICE[6],
	PlayerText:ptextdraw_SHOP_ARTICLE_NUMBER,
	PlayerText:ptextdraw_SHOP_ARTICLE_INFO,
	PlayerText:ptextdraw_SHOP_ARTICLE_MODELID,
	PlayerText:ptextdraw_HUD[HUD_PTEXTDRAWS_SIZE]
}
new PlayerTextdraws[MAX_PLAYERS][Player_Textdraws_Enum];

#define map_td_X 3.0
#define map_td_Y 134.0
#define map_td_SIZE_X 175.0
#define map_td_SIZE_Y 190.0

#define HUD_TEXTDRAWS_SIZE 6
#define LOAD_SCREEN_TEXTDRAWS_SIZE 4
enum Textdraws_Enum
{
	Text:textdraw_PLAYER_REP_BACK[2],
	Text:textdraw_LOAD_SCREEN[LOAD_SCREEN_TEXTDRAWS_SIZE],
	Text:textdraw_SERVER_TIME,
	Text:textdraw_GPS_MAP[4],
	Text:textdraw_SHOP[5],
	Text:textdraw_SHOP_ARTICLES_BOX[6],
	Text:textdraw_SHOP_ARTICLE_BOX,
	Text:textdraw_TERRITORY_BOX,
	Text:textdraw_HUD[HUD_TEXTDRAWS_SIZE],
	Text:textdraw_COMBAT_MODE,
	Text:textdraw_STAFF_DUTY[2],
	Text:textdraw_STAFF_INVIS[2]
}
new Textdraws[Textdraws_Enum];

#define MIN_PASS_LENGTH	6
#define MAX_PASS_LENGTH	18

enum enum_PI
{
	pi_ID,
	pi_NAME[24],
	pi_IP[16],
	pi_EMAIL[32],
	pi_SALT[16],
	pi_PASS[65],
	pi_REG_DATE[24],
	pi_LAST_CONNECTION[24],
	pi_LAST_CONNECTION_TIMESTAMP,
	pi_TIME_PLAYING,
	pi_LEVEL,
	pi_REP,
	pi_CONNECTED,
	pi_PLAYERID,
	pi_DOUBT_CHANNEL,
	pi_TIME_FOR_REP,
	pi_ADMIN_LEVEL,
	pi_PAYDAY_REP,
	pi_VIP,
	pi_VIP_EXPIRE_DATE[24],
	pi_COINS,
	pi_SKIN,
	pi_CASH,
	Float:pi_POS_X,
	Float:pi_POS_Y,
	Float:pi_POS_Z,
	Float:pi_ANGLE,
	pi_STATE,
	pi_INTERIOR,
	pi_LOCAL_INTERIOR,
	pi_FIGHT_STYLE,
	Float:pi_HEALTH,
	Float:pi_ARMOUR,
	pi_GENDER,
	Float:pi_HUNGRY,
	Float:pi_THIRST,
	pi_WANTED_LEVEL,
	pi_POLICE_JAIL_TIME,
	pi_POLICE_DUTY,
	pi_POLICE_JAIL_ID,
	pi_BANK_ACCOUNT,
	pi_BANK_MONEY,
	pi_PHONE_NUMBER,
	pi_PHONE_STATE,
	pi_PHONE_VISIBLE_NUMBER,
	pi_GPS,
	pi_MP3,
	pi_PHONE_RESOLVER,
	pi_SPEAKERS,
	pi_MECHANIC_PIECES,
	pi_FUEL_DRUM,
	pi_SEED_MEDICINE,
	pi_SEED_CANNABIS,
	pi_SEED_CRACK,
	pi_MEDICINE,
	pi_CANNABIS,
	pi_CRACK,
	pi_CONFIG_SOUNDS,
	pi_CONFIG_AUDIO,
	pi_CONFIG_TIME,
	pi_CONFIG_HUD,
	pi_CONFIG_ADMIN,
	pi_MUTE,
	pi_PLACA_PD,
	pi_CREW,
	pi_CREW_RANK,
	pi_MECHANIC_KITS,
	pi_MEDICAL_KITS,
	pi_TRUCK_BONUS
};
new PI[MAX_PLAYERS][enum_PI];

forward OnPlayerRegister(playerid);
forward OnPlayerLogin(playerid);

#define MAX_PLAYER_POCKET_OBJECTS 10
enum Player_Pocket_Enum
{
	bool:player_pocket_VALID,
	player_pocket_object_ID,
	player_pocket_object_NAME[24],
	Float:player_pocket_object_HUNGRY,
	Float:player_pocket_object_THIRST,
	player_pocket_object_DRUNK,
}
new PLAYER_POCKET[MAX_PLAYERS][MAX_PLAYER_POCKET_OBJECTS][Player_Pocket_Enum]; // PP (PlayerPocket)


new 
	DIALOG_FOOD_PIZZA_String[800],
	DIALOG_FOOD_CLUCKIN_String[800],
	DIALOG_FOOD_BURGER_String[800],
	DIALOG_247_LIST_String[34 + 55 * sizeof Supermarket_Product_List],
	DIALOG_ANIMS_String[1000],
	DIALOG_PLAYER_GPS_SITE_7_String[4096],
	DIALOG_CREATE_CREW_COLOR_String[4200],
	DIALOG_CREDIT_String[2000]
;

// PLAYER WEAPONS
#define NO_WEAPON 0
enum enum_WEAPON_INFO
{
	bool:weapon_info_SPECIAL,
	bool:weapon_info_AC_CBUG,
	bool:weapon_info_ANTI_CHEAT,
	bool:weapon_info_AMMO,
	weapon_info_TYPE,
	weapon_info_NAME[32],
	weapon_info_SLOT,
	weapon_info_SHOT_TIME,
	weapon_info_MODEL,
	bool:weapon_info_DROP
}
new WEAPON_INFO[][enum_WEAPON_INFO] = 
{
	{false, false, false, false, NO_WEAPON, "Puño", 0, 250, -1, false},
	{false, false, true, false, WEAPON_BRASSKNUCKLE, "Manopla", 0, 250, 331, true},
	{false, false, true, false, WEAPON_GOLFCLUB, "Palo de golf", 1, 250, 333, true},
	{false, false, true, false, WEAPON_NITESTICK, "Porra", 1, 250, 334, false},
	{false, false, true, false, WEAPON_KNIFE, "Cuchillo", 1, 250, 335, true},
	{false, false, true, false, WEAPON_BAT, "Bate", 1, 250, 336, true},
	{false, false, true, false, WEAPON_SHOVEL, "Pala", 1, 250, 337, true},
	{false, false, true, false, WEAPON_POOLSTICK, "Taco", 1, 250, 338, true},
	{false, false, true, false, WEAPON_KATANA, "Katana", 1, 250, 339, true},
	{false, false, true, false, WEAPON_CHAINSAW, "Motosierra", 1, 30, 341, true},
	{false, false, true, false, WEAPON_DILDO, "Dildo morado", 10, 250, 321, true},
	{false, false, true, false, WEAPON_DILDO2, "Dildo", 10, 250, 322, true},
	{false, false, true, false, WEAPON_VIBRATOR, "Vibrador", 10, 250, 323, true},
	{false, false, true, false, WEAPON_VIBRATOR2, "Vibrador plateado", 10, 250, 324, true},
	{false, false, true, false, WEAPON_FLOWER, "Flores", 10, 250, 325, true},
	{false, false, true, false, WEAPON_CANE, "Bastón", 10, 250, 326, true},
	{false, false, true, true, WEAPON_GRENADE, "Granada", 8, 500, 342, true},
	{false, false, true, true, WEAPON_TEARGAS, "Gas lacrimógeno", 8, 500, 343, true},
	{false, false, true, true, WEAPON_MOLTOV, "Cocktail Molotov", 8, 500, 344, true},
	{false, false, false, false, NO_WEAPON, "", 0, 0, -1, false},
	{false, false, false, false, NO_WEAPON, "", 0, 0, -1, false},
	{false, false, false, false, NO_WEAPON, "", 0, 0, -1, false},
	{false, true, true, true, WEAPON_COLT45, "9mm", 2, 160, 346, true},
	{false, true, true, true, WEAPON_SILENCED, "9mm silenciada", 2, 120, 347, true},
	{false, true, true, true, WEAPON_DEAGLE, "Desert Eagle", 2, 950, 348, true},
	{false, true, true, true, WEAPON_SHOTGUN, "Escopeta", 3, 800, 349, true},
	{false, true, true, true, WEAPON_SAWEDOFF, "Escopeta recortada", 3, 120, 350, true},
	{false, true, true, true, WEAPON_SHOTGSPA, "Escopeta de combate", 3, 120, 351, true},
	{false, true, true, true, WEAPON_UZI, "Micro UZI", 4, 70, 352, true},
	{false, true, true, true, WEAPON_MP5, "MP5", 4, 70, 353, true},
	{false, true, true, true, WEAPON_AK47, "Ak-47", 5, 80, 355, true},
	{false, true, true, true, WEAPON_M4, "M4", 5, 80, 356, true},
	{false, true, true, true, WEAPON_TEC9, "TEC-9", 4, 70, 372, true},
	{false, true, true, true, WEAPON_RIFLE, "Rifle", 6, 1000, 357, true},
	{false, true, true, true, WEAPON_SNIPER, "Sniper", 6, 1000, 358, true},
	{false, true, true, true, WEAPON_ROCKETLAUNCHER, "Lanzacohetes RPG", 7, 1000, 359, true},
	{false, true, true, true, WEAPON_HEATSEEKER, "Lanzacohetes HS", 7, 1000, 360, true},
	{false, true, true, true, WEAPON_FLAMETHROWER, "Lanzallamas", 7, 500, 361, true},
	{false, true, true, true, WEAPON_MINIGUN, "Minigun", 7, 0, 362, false},
	{false, false, true, true, WEAPON_SATCHEL, "Bomba detonadora", 8, 500, 363, false},
	{false, false, false, false, WEAPON_BOMB, "Detonador", 12, 500, 364, false},
	{false, false, true, true, WEAPON_SPRAYCAN, "Bote de spray", 9, 10, 365, true},
	{false, false, true, true, WEAPON_FIREEXTINGUISHER, "Extintor", 9, 10, 366, true},
	{false, false, true, false, WEAPON_CAMERA, "Cámara", 9, 500, 367, true},
	{false, false, true, false, NO_WEAPON, "Gafas de visión nocturna", 11, 0, 368, false},
	{false, false, true, false, NO_WEAPON, "Gafas térmicas", 11, 0, 369, false},
	{false, false, false, false, WEAPON_PARACHUTE, "Paracaídas", 11, 0, 371, true}
};

enum enum_PLAYER_WEAPONS
{
	bool:player_weapon_VALID,
	player_weapon_DB_ID,
	player_weapon_ID,
	player_weapon_AMMO,
}
new PLAYER_WEAPONS[MAX_PLAYERS][20][enum_PLAYER_WEAPONS];

enum
{
	TYPE_WARNING,
	TYPE_KICK,
	TYPE_BAN,
	TYPE_TEMP_BAN,
	TYPE_UNBAN
}

enum
{
	CMD_USER,
	CMD_ASSISTANT,
	CMD_MODERATOR,
	CMD_SENIOR,
	CMD_SUPERVISOR,
	CMD_ADMINISTRATOR,
	CMD_OWNER,
	CMD_DISABLED,
}
new ADMIN_LEVELS[][] = 
{
	"Ciudadano",
	"Asistente",
	"Moderador",
	"Senior",
	"Supervisor",
	"Administrador",
	"Dueño"
};


public OnIncomingConnection(playerid, ip_address[], port)
{
	if(!server_loaded) BlockIpAddress(ip_address, 20 * 1000);
	return 1;
}

public OnPlayerConnect(playerid)
{
	ResetPlayerTemp(playerid);
	ResetPlayerInfo(playerid);

	pTemp(playerid)[pt_GAME_STATE] = GAME_STATE_CONNECTED;
	pTemp(playerid)[pt_INTERIOR_INDEX] = -1;
	pTemp(playerid)[pt_PROPERTY_INDEX] = -1;
	pTemp(playerid)[pt_CLOTHING_SHOP] = -1;
	pTemp(playerid)[pt_HUD_TEXTDRAWS] = false;
	pTemp(playerid)[pt_SEE_ACMD_LOG] = true;
	pTemp(playerid)[pt_SEE_AC_LOG] = true;
	pTemp(playerid)[pt_SEE_ADM_LOG] = true;
	pTemp(playerid)[pt_SEE_ADM_CHAT] = true;
	pTemp(playerid)[pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
	pTemp(playerid)[pt_KNOCK_PLAYER_ID] = INVALID_PLAYER_ID;
	pTemp(playerid)[pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	pTemp(playerid)[pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	pTemp(playerid)[pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	pTemp(playerid)[pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	pTemp(playerid)[pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
	pTemp(playerid)[pt_NOTARY_TO_PLAYER] = INVALID_PLAYER_ID;
	pTemp(playerid)[pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
	pTemp(playerid)[pt_LAST_VEHICLE_ID] = INVALID_VEHICLE_ID;
	pTemp(playerid)[pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
	pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] = -1;
	pTemp(playerid)[pt_CREW_HELP] = false;
	pTemp(playerid)[pt_COMBAT_TIMER] = -1;
	pTemp(playerid)[pt_COMBAT] = false;
	pTemp(playerid)[pt_DIALOG_ID] = -1;
	pTemp(playerid)[pt_LOGIN_KICK_TIMER] = -1;
	pTemp(playerid)[pt_DEATH_HOTDOG_BYPASS] = false;
	pTemp(playerid)[pt_OWN_VEHICLE_TAXI] = false;
	pTemp(playerid)[pt_PLAYER_INVISIBLE] = false;
	pTemp(playerid)[pt_PLAYER_KEYS] = -1;
	pTemp(playerid)[pt_PLAYER_KEYS_OWNER] = -1;
	pTemp(playerid)[pt_GARAGE_INDEX] = -1;
	pTemp(playerid)[pt_TRAILER_CHECKPOINT] = INVALID_STREAMER_ID;
	pTemp(playerid)[pt_RENT_VEHICLE] = INVALID_VEHICLE_ID;
	pTemp(playerid)[pt_POLICE_HELP] = false;
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++) TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;
	
	GetPlayerName(playerid, pTemp(playerid)[pt_NAME], 24);
	GetPlayerIp(playerid, pTemp(playerid)[pt_IP], 16);
	
	EnablePlayerCameraTarget(playerid, true);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllableEx(playerid, true);
	HidePlayerDialog(playerid);
	ResetPlayerMoney(playerid);
	CancelSelectTextDrawEx(playerid);
	SetPlayerScore(playerid, 0);
	ResetPlayerWeapons(playerid);
	SetPlayerColorEx(playerid, PLAYER_COLOR);
	CancelEdit(playerid);
	//TogglePlayerClock(playerid, false);

	if(!IsValidRPName(pTemp(playerid)[pt_NAME]))
	{
		pTemp(playerid)[pt_USER_VALID_NAME] = false;
		ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Nombre Anti Rol", "{d1d1d1}Bienvenido, has entrado a un servidor de rol.\n\nTu nombre no cumple con el formato necesario.\nPor favor utilice el formato: Nombre_Apellido.", "Salir", "");
		KickEx(playerid, 500);
	}
	else
	{
		pTemp(playerid)[pt_USER_VALID_NAME] = true;
		SetRolePlayNames(playerid);

		if(GetNumberOfPlayersOnThisIP(pTemp(playerid)[pt_IP]) > 3)
		{
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Maximo de IP", "{d1d1d1}Ha sido expulsado por exceder el máximo de conexiones desde una IP.", "Salir", "");
			KickEx(playerid, 500);
		}
		else
		{
			pTemp(playerid)[pt_LOGIN_KICK_TIMER] = SetTimerEx("KickPlayer", LOGIN_TIME, false, "i", playerid);

			CreatePlayerTextDraws(playerid);
			CreatePlayerBars(playerid);
			SetPiDefaultValues(playerid);
		}
	}
	return 1;
}

public CloseServer()
{
    SendRconCommand("exit");
}

public OnPlayerDisconnect(playerid, reason)
{
	for(new i = 0; i != MAX_TIMERS_PER_PLAYER; i++) KillTimer(pTemp(playerid)[pt_TIMERS][i]);

	if(pTemp(playerid)[pt_LOGIN_KICK_TIMER] != -1) 
	{
		KillTimer(pTemp(playerid)[pt_LOGIN_KICK_TIMER]);
		pTemp(playerid)[pt_LOGIN_KICK_TIMER] = -1;
	}

	if(pTemp(playerid)[pt_COMBAT])
	{
		new 
			str_text[190];

		pTemp(playerid)[pt_COMBAT] = false;
		KillTimer(pTemp(playerid)[pt_COMBAT_TIMER]);
		pTemp(playerid)[pt_COMBAT_TIMER] = -1;

		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id_player = %d;", PI[playerid][pi_ID]);
		mysql_tquery(handle_db, QUERY_BUFFER);

		ResetPlayerWeaponsEx(playerid);

		format(str_text, 190, "* %s ha perdido todas sus armas por desconectar estando en combate.", pTemp(playerid)[pt_NAME]);
		ProxDetector(playerid, 25.0, str_text, 0xDD4C4FFF, 0xDD4C4FFF, 0xDD4C4FFF, 0xDD4C4FFF, 0xDD4C4FFF, 85);
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid)
		{
			GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
			GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
			GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
			GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_OCCUPIED] = false;
		}
	}
	if(pTemp(playerid)[pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
	{
		if(GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] == playerid) GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	}

	pTemp(playerid)[pt_TIME_PASSED_LAST_REP] = gettime() * 1000 - pTemp(playerid)[pt_TIME_PASSED_LAST_REP];
	PI[playerid][pi_TIME_FOR_REP] -= pTemp(playerid)[pt_TIME_PASSED_LAST_REP];
	if(PI[playerid][pi_CREW]) CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] --;
	if(pTemp(playerid)[pt_PIVOT_OBJECT] != INVALID_OBJECT_ID) DestroyPlayerObject(playerid, pTemp(playerid)[pt_PIVOT_OBJECT]);
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL) PI[playerid][pi_POLICE_JAIL_TIME] -= gettime() - pTemp(playerid)[pt_ENTER_JAIL_TIME];
	if(pTemp(playerid)[pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);

	DestroyPlayerCheckpoints(playerid);
	DestroyPlayerTextDraws(playerid);
	CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], false);

	if(PI[playerid][pi_ID] != 0)
	{
		if(pTemp(playerid)[pt_USER_LOGGED]) //guardar datos solo si ha logeado
		{
			if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK && PI[playerid][pi_WANTED_LEVEL] > 0) {
				PI[playerid][pi_STATE] = ROLEPLAY_STATE_HOSPITAL;
			}

			PI[playerid][pi_CONNECTED] = 0;
			PI[playerid][pi_PLAYERID] = 0;
			UpdatePlayerWorldInfo(playerid);

			if(pTemp(playerid)[pt_IN_TUNING_GARAGE])
			{
				pTemp(playerid)[pt_IN_TUNING_GARAGE] = false;
				SetVehiclePosEx(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], -610.9049, -515.7297, 27.0);
				SetVehicleZAngle(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], 0.0);
				SetVehicleVelocity(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], 0.0, 0.0, 0.0);
				SetVehicleVirtualWorldEx(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], 0);
				SetPlayerVirtualWorld(playerid, 0);
				pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] = INVALID_VEHICLE_ID;
			}

			getDateTime(PI[playerid][pi_LAST_CONNECTION]);
			SavePlayerData(playerid);
			SavePlayerVehicles(playerid, true);
			SavePlayerToys(playerid);
			SavePlayerWeaponsData(playerid);
			SavePlayerWorkLevels(playerid);
			
			//msg
			new disconnect_message[128];
			switch(reason)
			{
				case 0: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado por error (crash).", pTemp(playerid)[pt_NAME]);
				case 1: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado.", pTemp(playerid)[pt_NAME]);
				case 2: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado porque fue expulsado del servidor.", pTemp(playerid)[pt_NAME]);
			}
			NearbyMessage(PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_INTERIOR], GetPlayerVirtualWorld(playerid), 15.0, 0x909D95FF, disconnect_message);
		}
		else {
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET connected = 0, playerid = 0 WHERE id = %d;", PI[playerid][pi_ID]);
			mysql_tquery(handle_db, QUERY_BUFFER);
		}
	}

	//reset
	ResetPlayerTemp(playerid);
	ResetPlayerInfo(playerid);
	ResetPlayerVariables(playerid);
	return 1;
}

DestroyPlayerCheckpoints(playerid)
{
	if(IsValidDynamic3DTextLabel(pTemp(playerid)[pt_POLICE_LABEL]))
	{
		DestroyDynamic3DTextLabel(pTemp(playerid)[pt_POLICE_LABEL]);
		pTemp(playerid)[pt_POLICE_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	if(IsValidDynamic3DTextLabel(pTemp(playerid)[pt_MECHANIC_LABEL]))
	{
		DestroyDynamic3DTextLabel(pTemp(playerid)[pt_MECHANIC_LABEL]);
		pTemp(playerid)[pt_MECHANIC_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	if(IsValidDynamic3DTextLabel(pTemp(playerid)[pt_ADMIN_LABEL]))
	{
		DestroyDynamic3DTextLabel(pTemp(playerid)[pt_ADMIN_LABEL]);
		pTemp(playerid)[pt_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(pTemp(playerid)[pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(pTemp(playerid)[pt_GPS_CHECKPOINT]);
		pTemp(playerid)[pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(pTemp(playerid)[pt_TRUCK_CHECKPOINT]))
	{
		DestroyDynamicCP(pTemp(playerid)[pt_TRUCK_CHECKPOINT]);
		pTemp(playerid)[pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(pTemp(playerid)[pt_TRASH_CHECKPOINT]))
	{
		DestroyDynamicCP(pTemp(playerid)[pt_TRASH_CHECKPOINT]);
		pTemp(playerid)[pt_TRASH_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicRaceCP(pTemp(playerid)[pt_HARVERT_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(pTemp(playerid)[pt_HARVERT_CHECKPOINT]);
		pTemp(playerid)[pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT]);
		pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(pTemp(playerid)[pt_PIZZA_CHECKPOINT]))
	{
		DestroyDynamicCP(pTemp(playerid)[pt_PIZZA_CHECKPOINT]);
		pTemp(playerid)[pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicActor(pTemp(playerid)[pt_PIZZA_ACTOR]))
	{
		DestroyDynamicActor(pTemp(playerid)[pt_PIZZA_ACTOR]);
		pTemp(playerid)[pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(pTemp(playerid)[pt_TRAILER_CHECKPOINT]))
	{
		DestroyDynamicCP(pTemp(playerid)[pt_TRAILER_CHECKPOINT]);
		pTemp(playerid)[pt_TRAILER_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	return 1;
}

GetEnterExitIndexById(id)
{
	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		if(ENTER_EXIT[i][ee_ID] == 0) continue;
		if(ENTER_EXIT[i][ee_ID] == id) return i;
	}
	return -1;
}

stock IsPlayerWorking(playerid, work)
{
	if(pTemp(playerid)[pt_WORKING_IN] == work) return 1;
	return 0;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(!success) BlockIpAddress(ip, 12000);
    return 1;
}

public OnPlayerSpawn(playerid)
{
	if(!pTemp(playerid)[pt_USER_LOGGED]) return Kick(playerid);

	if(pTemp(playerid)[pt_GAME_STATE] == GAME_STATE_CONNECTED) // Primer spawn
	{
		if(pTemp(playerid)[pt_LOGIN_KICK_TIMER] != -1) 
		{
			KillTimer(pTemp(playerid)[pt_LOGIN_KICK_TIMER]);
			pTemp(playerid)[pt_LOGIN_KICK_TIMER] = -1;
		}

		new now = gettime();
		pTemp(playerid)[pt_LAST_PLANT_TIME] = now;
		pTemp(playerid)[pt_COOLDOWN_MEDICAL_KIT] = now + 300;
		format(PI[playerid][pi_IP], 16, "%s", pTemp(playerid)[pt_IP]);
		
		if(PI[playerid][pi_CREW]) SetPlayerGangZones(playerid);
		SetPlayerSkillLevels(playerid);
		SetWantedMarkerToFactions(playerid);
		ApplyAnimation(playerid,"SWAT","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"MEDIC","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"SHOP","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"BOMBER","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"FOOD","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"CHAINSAW","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"ROB_BANK","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"CARRY","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"PED","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"SWEET","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"CRACK","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"POLICE","null",0.0,0,0,0,0,0);

		if(PI[playerid][pi_POLICE_DUTY] != 0)
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_POLICE, INVALID_VEHICLE_ID);
			else PI[playerid][pi_POLICE_DUTY] = 0;
		}
		switch(PI[playerid][pi_STATE])
		{
			case ROLEPLAY_STATE_NORMAL:
			{
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(pTemp(playerid)[pt_TIMERS][3]);
				pTemp(playerid)[pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);

				SetPlayerVirtualWorld(playerid, 0);

				if(PI[playerid][pi_WANTED_LEVEL] > 0)
				{
					PI[playerid][pi_POLICE_JAIL_ID] = 0;
					JailPlayer(playerid);
				}
			}
			case ROLEPLAY_STATE_JAIL:
			{
				PI[playerid][pi_STATE] = ROLEPLAY_STATE_JAIL;
				if(PI[playerid][pi_POLICE_JAIL_TIME] < 5) PI[playerid][pi_POLICE_JAIL_TIME] = 5;
				KillTimer(pTemp(playerid)[pt_TIMERS][15]);
				pTemp(playerid)[pt_TIMERS][15] = SetTimerEx("UnjailPlayer", PI[playerid][pi_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
				
				pTemp(playerid)[pt_ENTER_JAIL_TIME] = gettime();
				SetPlayerPosEx(playerid, JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);
				
				new time = PI[playerid][pi_POLICE_JAIL_TIME] - (gettime() - pTemp(playerid)[pt_ENTER_JAIL_TIME]);
				SendClientMessagef(playerid, -1, "Te quedan %s minutos de condena.", TimeConvert(time));
				
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(pTemp(playerid)[pt_TIMERS][3]);
				pTemp(playerid)[pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_ARRESTED:
			{
				if(PI[playerid][pi_VIP]) PI[playerid][pi_POLICE_JAIL_TIME] = 150 * PI[playerid][pi_WANTED_LEVEL];
				else PI[playerid][pi_POLICE_JAIL_TIME] = 300 * PI[playerid][pi_WANTED_LEVEL];
				
				PI[playerid][pi_WANTED_LEVEL] = 0;
				
				PI[playerid][pi_STATE] = ROLEPLAY_STATE_JAIL;
				if(PI[playerid][pi_POLICE_JAIL_TIME] < 5) PI[playerid][pi_POLICE_JAIL_TIME] = 5;
				KillTimer(pTemp(playerid)[pt_TIMERS][15]);
				pTemp(playerid)[pt_TIMERS][15] = SetTimerEx("UnjailPlayer", PI[playerid][pi_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
				
				pTemp(playerid)[pt_ENTER_JAIL_TIME] = gettime();
				SetPlayerPosEx(playerid, JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);
				
				new time = PI[playerid][pi_POLICE_JAIL_TIME] - (gettime() - pTemp(playerid)[pt_ENTER_JAIL_TIME]);
				SendClientMessagef(playerid, -1, "Te quedan %s minutos de condena.", TimeConvert(time));
				
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(pTemp(playerid)[pt_TIMERS][3]);
				pTemp(playerid)[pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_OWN_PROPERTY:
			{
				new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
				if(index == -1)
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = New_User_Pos[0];
					PI[playerid][pi_POS_Y] = New_User_Pos[1];
					PI[playerid][pi_POS_Z] = New_User_Pos[2];
					PI[playerid][pi_ANGLE] = New_User_Pos[3];
					PI[playerid][pi_INTERIOR] = 0;
					
					SetPlayerPosEx(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], PI[playerid][pi_INTERIOR], 0);
				}
				else
				{
					if(PROPERTY_INFO[index][property_OWNER_ID] == PI[playerid][pi_ID])
					{
						SetPlayerInterior(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_INTERIOR]);
						SetPlayerVirtualWorld(playerid, PROPERTY_INFO[index][property_ID]);
					}
					else
					{
						PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
						PI[playerid][pi_LOCAL_INTERIOR] = 0;
						PI[playerid][pi_POS_X] = PROPERTY_INFO[index][property_EXT_X];
						PI[playerid][pi_POS_Y] = PROPERTY_INFO[index][property_EXT_Y];
						PI[playerid][pi_POS_Z] = PROPERTY_INFO[index][property_EXT_Z];
						PI[playerid][pi_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
						PI[playerid][pi_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
						
						SetPlayerPosEx(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], PI[playerid][pi_INTERIOR], 0);
					}
				}
					
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(pTemp(playerid)[pt_TIMERS][3]);
				pTemp(playerid)[pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_OWN_GARAGE:
			{
				new index = GetGarageIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);

				if(index == -1)
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = New_User_Pos[0];
					PI[playerid][pi_POS_Y] = New_User_Pos[1];
					PI[playerid][pi_POS_Z] = New_User_Pos[2];
					PI[playerid][pi_ANGLE] = New_User_Pos[3];
					PI[playerid][pi_INTERIOR] = 0;
					
					SetPlayerPosEx(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], PI[playerid][pi_INTERIOR], 0);
				}
				else
				{
					if(IsPropertyGarageOwner(playerid, index))
					{
						SetWorldInteriorPlayerGarage(playerid, index);
					}
					else
					{
						SetPlayerGarageExtPos(playerid, index);
						SetPlayerPosEx(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], PI[playerid][pi_INTERIOR], 0);
					}
				}

				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(pTemp(playerid)[pt_TIMERS][3]);
				pTemp(playerid)[pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_HOSPITAL:
			{
				if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] == WORK_POLICE) pTemp(playerid)[pt_DISPENSARY] = GetNearestDispensaryForPlayer(playerid);
				else pTemp(playerid)[pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);

				pTemp(playerid)[pt_PLAYER_FINISH_HOSPITAL] = false;
				pTemp(playerid)[pt_GAME_STATE] = GAME_STATE_DEAD;
				
				TogglePlayerControllableEx(playerid, true);
				TogglePlayerSpectatingEx(playerid, true);
				SetPlayerInterior(playerid, 0);
				PI[playerid][pi_LOCAL_INTERIOR] = 0;
				pTemp(playerid)[pt_INTERIOR_INDEX] = -1;
				pTemp(playerid)[pt_PROPERTY_INDEX] = -1;
				
				pTemp(playerid)[pt_HOSPITAL_LIFE] = 35.0;
				UpdateHospitalSizeTextdrawLife(playerid);
				KillTimer(pTemp(playerid)[pt_TIMERS][4]);
				pTemp(playerid)[pt_TIMERS][4] = SetTimerEx("HealthUp", 1000, false, "i", playerid);

				DeleteIlegalInv(playerid);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
								
			
				if(PI[playerid][pi_WANTED_LEVEL] > 0)
				{
					if(PI[playerid][pi_VIP]) PI[playerid][pi_POLICE_JAIL_TIME] = 150 * PI[playerid][pi_WANTED_LEVEL];
					else PI[playerid][pi_POLICE_JAIL_TIME] = 300 * PI[playerid][pi_WANTED_LEVEL];
					
					SendClientMessagef(playerid, -1, "Fuiste ingresado en el centro médico más cercano. Espera mientras te recuperas.");
				}
				else
				{
					SendClientMessagef(playerid, -1, "Fuiste ingresado en el centro médico más cercano. Espera mientras te recuperas.");
				}

				InterpolateCameraPos(playerid, Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][0], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][1], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][2], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][0], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][1], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][2], 1000, CAMERA_CUT);
				InterpolateCameraLookAt(playerid, Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][3], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][4], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][5], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][3], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][4], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][5], 1000, CAMERA_CUT);
			}
		}
		
		for(new i = 0; i < LOAD_SCREEN_TEXTDRAWS_SIZE; i ++) {
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][i]);
		}

		new neccessary_rep = PI[playerid][pi_LEVEL] * REP_MULTIPLIER;
		if(PI[playerid][pi_REP] < neccessary_rep)
		{
			if(PI[playerid][pi_TIME_FOR_REP] > TIME_FOR_REP) PI[playerid][pi_TIME_FOR_REP] = TIME_FOR_REP;
			if(PI[playerid][pi_TIME_FOR_REP] <= 900) PI[playerid][pi_TIME_FOR_REP] = 3000;
			
			pTemp(playerid)[pt_TIME_PASSED_LAST_REP] = gettime() * 1000;
			pTemp(playerid)[pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", PI[playerid][pi_TIME_FOR_REP], false, "i", playerid);
		}
		
		if(PI[playerid][pi_PHONE_NUMBER])
		{
			inline OnOfflineMessagesChecked()
			{
				new rows;
				if(get_rows(rows))
				{
					if(rows)
					{
						new unreaded_messages;
						cache_get_value_index_int(0, 0, unreaded_messages);
						if(unreaded_messages > 0) SendClientMessagef(playerid, -1, "Tienes {f1f442}%d {FFFFFF}mensajes nuevos en tu /movil desde tu última conexión.", unreaded_messages);
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pmessages SET offline = 0 WHERE to_id = %d;", PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM pmessages WHERE to_id = %d AND offline = 1;", PI[playerid][pi_ID]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnOfflineMessagesChecked);
		}
	}
	else if(pTemp(playerid)[pt_GAME_STATE] == GAME_STATE_DEAD) // Viene de morir
	{
		if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_HOSPITAL)
		{
			if(!pTemp(playerid)[pt_PLAYER_FINISH_HOSPITAL])
			{
				TogglePlayerSpectatingEx(playerid, true);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				pTemp(playerid)[pt_PLAYER_FINISH_HOSPITAL] = false;
				PI[playerid][pi_STATE] = ROLEPLAY_STATE_HOSPITAL;
				PI[playerid][pi_LOCAL_INTERIOR] = 0;
				if(pTemp(playerid)[pt_INTERIOR_INDEX] != -1) {
					CallLocalFunction("OnPlayerExitInterior", "ii", playerid, pTemp(playerid)[pt_INTERIOR_INDEX]);
				}
				pTemp(playerid)[pt_INTERIOR_INDEX] = -1;
				pTemp(playerid)[pt_PROPERTY_INDEX] = -1;
				
				pTemp(playerid)[pt_HOSPITAL_LIFE] = 35.0;
				UpdateHospitalSizeTextdrawLife(playerid);
				KillTimer(pTemp(playerid)[pt_TIMERS][4]);
				pTemp(playerid)[pt_TIMERS][4] = SetTimerEx("HealthUp", 1000, false, "i", playerid);

				DeleteIlegalInv(playerid);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
				
				ClearPlayerChat(playerid);
				if(PI[playerid][pi_WANTED_LEVEL] > 0 || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED)
				{
					SendClientMessagef(playerid, -1, "Fuiste ingresado en el centro médico más cercano.");
					SendClientMessagef(playerid, -1, "Cuando te recuperes serás llevado a la cárcel.");
				}
				else
				{
					SendClientMessagef(playerid, -1, "Fuiste ingresado en el centro médico más cercano.");
					SendClientMessagef(playerid, -1, "Espera mientras te recuperas.");
				}
				
				InterpolateCameraPos(playerid, Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][0], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][1], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][2], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][0], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][1], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][2], 1000, CAMERA_CUT);
				InterpolateCameraLookAt(playerid, Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][3], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][4], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][5], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][3], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][4], Hospital_Cameras_Positions[pTemp(playerid)[pt_HOSPITAL]][5], 1000, CAMERA_CUT);
			}
		}
		else if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK)
		{
			SetPlayerHud(playerid);
			SetPlayerHealthEx(playerid, 50.0);
			SendAlertToMedics(playerid);
			TogglePlayerControllableEx(playerid, false);
			KillTimer(pTemp(playerid)[pt_TIMERS][3]);
			pTemp(playerid)[pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			
			KillTimer(pTemp(playerid)[pt_TIMERS][16]);
			pTemp(playerid)[pt_TIMERS][16] = SetTimerEx("HealthDown", 2000, false, "i", playerid);

			pTemp(playerid)[pt_INJURED_POS][0] = PI[playerid][pi_POS_X];
			pTemp(playerid)[pt_INJURED_POS][1] = PI[playerid][pi_POS_Y];
			pTemp(playerid)[pt_INJURED_POS][2] = PI[playerid][pi_POS_Z];
			pTemp(playerid)[pt_INJURED_POS][3] = PI[playerid][pi_ANGLE];
			
			ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, true, 0, 0, 1, 0, 1);
			if(PI[playerid][pi_WANTED_LEVEL] > 0) SendClientMessagef(playerid, -1, "Estás herido y en búsqueda, espera a que la policía venga a por ti.");
			else SendClientMessagef(playerid, -1, "Estás herido, puedes esperar a un médico o usar /morir.");
		}
	}

	if(pTemp(playerid)[pt_PLAYER_FINISH_HOSPITAL])
	{
		if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL)
		{
			KillTimer(pTemp(playerid)[pt_TIMERS][15]);
			pTemp(playerid)[pt_TIMERS][15] = SetTimerEx("UnjailPlayer", PI[playerid][pi_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
		}
		SetPlayerInterior(playerid, PI[playerid][pi_INTERIOR]);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerHud(playerid);
		TogglePlayerControllableEx(playerid, false);
		pTemp(playerid)[pt_PLAYER_FINISH_HOSPITAL] = false;
		KillTimer(pTemp(playerid)[pt_TIMERS][3]);
		SetCameraBehindPlayer(playerid);
		pTemp(playerid)[pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	}
	
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) SetPlayerSkin(playerid, PI[playerid][pi_SKIN]);
	else SetPlayerSkin(playerid, PI[playerid][pi_POLICE_DUTY]);

	pTemp(playerid)[pt_GAME_STATE] = GAME_STATE_NORMAL;
	SetPlayerToys(playerid);
	if(PI[playerid][pi_STATE] != ROLEPLAY_STATE_JAIL && PI[playerid][pi_STATE] != ROLEPLAY_STATE_CRACK) SetWeaponsForPlayer(playerid);
	if(PI[playerid][pi_STATE] != ROLEPLAY_STATE_HOSPITAL) SetPlayerWantedLevelEx(playerid, PI[playerid][pi_WANTED_LEVEL]);
	SetPlayerArmedWeapon(playerid, 0);
	SetPlayerNormalColor(playerid);
	SetPlayerCityWeather(playerid);
	CheckPlayerSanctions(playerid);
	GameTextForPlayer(playerid, "_", 500, 3);
	pTemp(playerid)[pt_CONTROL] = false;
	
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY] = gettime() + 5;
	return 1;
}

CMD:cachear(playerid, params[])
{
	if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No formas parte de una banda.");
	if(sscanf(params, "u", params[0])) return SendClientMessagef(playerid, -1, "Error: /cachear [playerid/nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás de pie.");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
	if(PI[params[0]][pi_STATE] != ROLEPLAY_STATE_CRACK) return SendClientMessagef(playerid, -1, "El jugador no está abatido.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "Para revisar a esta persona tiene que estar de pie.");
	
	new dialog[95 * 15], line_str[95];
	format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Arma\t{"#BLUE_COLOR"}Munición\t{"#SILVER_COLOR"}Slot\n");
	
	for(new i = 0; i < sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(!PLAYER_WEAPONS[params[0]][i][player_weapon_VALID]) continue;
		
		format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[params[0]][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[params[0]][i][player_weapon_AMMO]), i);
		strcat(dialog, line_str);
	}

	format(line_str, sizeof line_str, "Armas de %s", pTemp(playerid)[pt_NAME]);
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, line_str, dialog, "Continuar", "Cerrar");
	
	new action[64];
	format(action, sizeof action, "cachea rápidamente a %s.", PlayerTemp[params[0]][pt_NAME]);
	Auto_SendPlayerAction(playerid, action);
	return 1;
}

CMD:morir(playerid, params[])
{
	if(PI[playerid][pi_STATE] != ROLEPLAY_STATE_CRACK) return SendClientMessagef(playerid, -1, "No estás malherido");
	
	new now = gettime();
	if(now < pTemp(playerid)[pt_DEATH_TIME] + 30)
	{
		new time = 30 - (now - pTemp(playerid)[pt_DEATH_TIME]);
		SendClientMessagef(playerid, -1, "Tienes que esperar %s minutos para poder usar este comando.", TimeConvert(time));
		return 1;
	}

	SetPlayerHealthEx(playerid, 0.0);
	Auto_SendPlayerAction(playerid, "ha elegido la salida rápida.");
	return 1;
}

CMD:gpos(playerid, params[])
{
	new Float:pos[3], Float:angle;
	if(IsPlayerInAnyVehicle(playerid)) {
		new vehicleId = GetPlayerVehicleID(playerid);
		GetVehiclePos(vehicleId, pos[0], pos[1], pos[2]);
		GetVehicleZAngle(vehicleId, angle);
	}
	else {
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GetPlayerFacingAngle(playerid, angle);
	}

	if(isnull(params)) printf("%f, %f, %f, %f, %d", pos[0], pos[1], pos[2], angle, GetPlayerInterior(playerid));
	else printf("%f, %f, %f, %f, %d //%s", pos[0], pos[1], pos[2], angle, GetPlayerInterior(playerid), params);
	return 1;
}

CMD:cpos(playerid, params[])
{
	new Float:pos[3], Float:at[3];
	GetPlayerCameraPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerCameraLookAt(playerid, at[0], at[1], at[2]);

	printf("{%f, %f, %f, %f, %f, %f}", pos[0], pos[1], pos[2], at[0], at[1], at[2]);
	return 1;
}

hook OnPlayerDeath(playerid, killerid, reason)
{
	if(pTemp(playerid)[pt_KICKED] || !pTemp(playerid)[pt_USER_LOGGED]) return 0;

	if(pTemp(playerid)[pt_COMBAT]) ResetCombat(playerid);
	
	KillTimer(pTemp(playerid)[pt_TIMERS][16]);
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
	if(!PI[playerid][pi_VIP]) SetPlayerArmourEx(playerid, 0.0);
	
	LoopEx(i, MAX_PLAYERS, 0) //log de muertes
	{
		if(IsPlayerConnected(i) && PlayerTemp[i][pt_USER_LOGGED])
		{
			if(PI[i][pi_ADMIN_LEVEL] > 1)
	        {
				SendDeathMessageToPlayer(i, killerid, playerid, reason);
			}
		}
	}

	if(ac_Info[CHEAT_DEATH_SPAMMER][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_IMMUNITY])
		{
			new interval = GetTickDiff(GetTickCount(), pTemp(playerid)[pt_ANTIFLOOD_DEATH]);
			if(interval < 50)
			{
				if(!ac_Info[CHEAT_DEATH_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DEATH_SPAMMER, float(interval));
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DEATH_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DEATH_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DEATH_SPAMMER, float(interval));
				}
			}
			pTemp(playerid)[pt_ANTIFLOOD_DEATH] = GetTickCount();
		}
	}
	
	if(IsPlayerConnected(killerid) && PI[killerid][pi_STATE] == ROLEPLAY_STATE_NORMAL && PI[playerid][pi_STATE] == ROLEPLAY_STATE_NORMAL)
	{
		if(!PLAYER_WORKS[killerid][WORK_POLICE][pwork_SET])
		{
			if(IsPlayerInSafeZone(killerid))
			{
				SendClientMessage(killerid, -1, "Estás en una zona segura, la policía ha sido avisada del homicidio.");
				
				new level = PI[killerid][pi_WANTED_LEVEL] + 3;
				if(level > 6) level = 6;

				SetPlayerWantedLevelEx(killerid, level);
				
				new city[45], zone[45];
				GetPlayerZones(killerid, city, zone);

				new message[145];
				format(message, sizeof message, "{"#POLICE_COLOR"}[Central policía] {FFFFFF}%s ha causado un asesinato en {"#POLICE_COLOR"}%s, %s.", PlayerTemp[killerid][pt_NAME], city, zone);
				SendPoliceRadioMessage(-1, -1, message);
				
				PlayerTemp[killerid][pt_LAST_SAFE_ZONE_WARNING] = gettime();
			}
		}
	}
	
	if(pTemp(playerid)[pt_SELECT_TEXTDRAW])
	{
		if(pTemp(playerid)[pt_CLOTHING_SHOP] != -1) ClosePlayerClothingMenu(playerid);
		if(pTemp(playerid)[pt_TOYS_SHOP]) ClosePlayerToysMenu(playerid);
		if(pTemp(playerid)[pt_SHOP]) HidePlayerShop(playerid);
	}
	
	StopAudioStreamForPlayer(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	KillTimer(pTemp(playerid)[pt_TIMERS][3]);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	GetPlayerPos(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z]);
	GetPlayerFacingAngle(playerid, PI[playerid][pi_ANGLE]);
	PI[playerid][pi_INTERIOR] = GetPlayerInterior(playerid);
	HidePlayerHud(playerid);
	CancelEdit(playerid);
	HidePlayerDialog(playerid);
	SetNormalPlayerMarkers(playerid);
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], false);
	pTemp(playerid)[pt_HUNGRY_MESSAGE] = false;
	pTemp(playerid)[pt_THIRST_MESSAGE] = false;
	pTemp(playerid)[pt_PLAYER_IN_ATM] = false;
	pTemp(playerid)[pt_CUFFED] = false;
	pTemp(playerid)[pt_CUFFING] = false;
	pTemp(playerid)[pt_PLAYER_WAITING_MP3_HTTP] = false;
	if(pTemp(playerid)[pt_WANT_TAXI])
	{
		pTemp(playerid)[pt_WANT_TAXI] = false;
		DisablePlayerTaxiMark(playerid);
	}
	if(pTemp(playerid)[pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
	if(pTemp(playerid)[pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	if(PI[playerid][pi_WANTED_LEVEL] > 0) DisablePlayerPoliceMark(playerid);
	if(pTemp(playerid)[pt_IN_TUNING_GARAGE])
	{
		pTemp(playerid)[pt_IN_TUNING_GARAGE] = false;
		SetVehicleVirtualWorldEx(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], 0);
		SetVehiclePosEx(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], -610.9049, -515.7297, 27.0);
		SetVehicleZAngle(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], 0.0);
	}

	if(pTemp(playerid)[pt_TRASH_VEHICLE_ID] != INVALID_VEHICLE_ID)
	{
		if(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
		{
			if(pTemp(playerid)[pt_TRASH_DRIVER])
			{
				SendClientMessage(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "{"#SILVER_COLOR"}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
				CancelTrashWork(playerid, TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], pTemp(playerid)[pt_TRASH_VEHICLE_ID]);
			}
			if(pTemp(playerid)[pt_TRASH_PASSENGER])
			{
				SendClientMessage(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "{"#SILVER_COLOR"}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
				CancelTrashWork(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], playerid, pTemp(playerid)[pt_TRASH_VEHICLE_ID]);
			}
		}
	}
	
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL)
	{
		KillTimer(pTemp(playerid)[pt_TIMERS][15]);
		pTemp(playerid)[pt_PLAYER_FINISH_HOSPITAL] = true;
		PI[playerid][pi_POLICE_JAIL_TIME] -= gettime() - pTemp(playerid)[pt_ENTER_JAIL_TIME];
		if(PI[playerid][pi_POLICE_JAIL_TIME] < 5) PI[playerid][pi_POLICE_JAIL_TIME] = 5;
		pTemp(playerid)[pt_ENTER_JAIL_TIME] = gettime();
		SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_ANGLE], 0, 0, 0, 0, 0, 0);
		PI[playerid][pi_INTERIOR] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR];
		SetPlayerVirtualWorld(playerid, 0);
	}
	else
	{
		new bool:wanted_level_go_to_hospital = false;
		if(wanted_level_go_to_hospital || PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
		{
			if(PI[playerid][pi_WANTED_LEVEL])
			{
				pTemp(playerid)[pt_DEATH_TIME] = gettime();
				PI[playerid][pi_STATE] = ROLEPLAY_STATE_CRACK;
			}
			else
			{
				DisablePlayerInjuredMark(playerid);

				if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] == WORK_POLICE) pTemp(playerid)[pt_DISPENSARY] = GetNearestDispensaryForPlayer(playerid);
				else pTemp(playerid)[pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);

				PI[playerid][pi_STATE] = ROLEPLAY_STATE_HOSPITAL;
				pTemp(playerid)[pt_PLAYER_FINISH_HOSPITAL] = false;
				KillTimer(pTemp(playerid)[pt_TIMERS][16]);
			}
		}
		else
		{
			pTemp(playerid)[pt_DEATH_TIME] = gettime();
			PI[playerid][pi_STATE] = ROLEPLAY_STATE_CRACK;
		}
	}
	
	pTemp(playerid)[pt_GAME_STATE] = GAME_STATE_DEAD;
   	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(pTemp(playerid)[pt_GAME_STATE] == GAME_STATE_CONNECTED) // Recién conectado
	{
		if(!pTemp(playerid)[pt_USER_VALID_NAME] || pTemp(playerid)[pt_KICKED] || pTemp(playerid)[pt_CLASSED]) Kick(playerid);
		else
		{
			pTemp(playerid)[pt_CLASSED] = true;
			TogglePlayerSpectatingEx(playerid, true);
			ClearPlayerChat(playerid);

			//check ban
			inline OnPlayerBannedCheck()
			{
				new rows, bool:continue_proccess;
				if(get_rows(rows))
				{
					if(rows)
					{
						new name[24], expire_date[24], id_player, by, text[128], date[24], expire_date_ts, now[24], now_ts, bool:isnull_name, bool:isnull_by, bool:isnull_expire_date_ts;
						cache_is_value_name_null(0, "name", isnull_name);
						if(!isnull_name) reg_name(0, "name", name, 24);
						reg_name(0, "expire_date", expire_date, 24);
						reg_int(0, "id_player", id_player);
						cache_is_value_name_null(0, "by", isnull_by);
						if(!isnull_by) reg_int(0, "by", by);
						reg_name(0, "text", text, 128);
						reg_name(0, "date", date, 24);
						cache_is_value_name_null(0, "expire_date_ts", isnull_expire_date_ts);
						if(!isnull_expire_date_ts) reg_int(0, "expire_date_ts", expire_date_ts);
						reg_name(0, "now", now, 24);
						reg_int(0, "now_ts", now_ts);

						if(expire_date_ts)
						{
							//temporal
							if(now_ts >= expire_date_ts)
							{
								continue_proccess = true;
								mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM bans WHERE name = '%e' OR ip = '%e';", pTemp(playerid)[pt_NAME], pTemp(playerid)[pt_IP]);
								mysql_tquery(handle_db, QUERY_BUFFER);

								if(id_player) AddPlayerBadHistory(id_player, -1, TYPE_UNBAN, "Readmitido (de tban)");
								SendClientMessagef(playerid, -1, "Tu cuenta ha sido re-admitida, no hagas que vuelvan a banearte.");
							}
							else
							{
								new dialog[600];
								format(dialog, sizeof dialog, 
									
									"\
										Esta IP o cuenta está expulsada temporalmente, detalles:\n\
										\n\
										Tu nombre: %s\n\
										\n\
										Nombre: %s\n\
										Expulsado por: %d\n\
										Fecha expulsión: %s\n\
										Razón: %s\n\
										\n\
										Fecha actual: %s\n\
										Fecha readmisión: %s\n\
										\n\
									",
									
									pTemp(playerid)[pt_NAME],
									name, by, date, text, now, expire_date
								);

								ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
								KickEx(playerid, 500);
							}

						}
						else
						{
							//permanente
							new dialog[480];
							format(dialog, sizeof dialog, 
								
								"\
									Esta IP o cuenta está expulsada permanentemente, detalles:\n\
									\n\
									Tu nombre: %s\n\
									\n\
									Nombre: %s\n\
									Expulsado por: %d\n\
									Fecha expulsión: %s\n\
									Razón: %s\n\
									\n\
								",
								
								pTemp(playerid)[pt_NAME],
								name, by, date, text
							);
								
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
							KickEx(playerid, 500);
						}
					}
					else continue_proccess = true;

					if(continue_proccess)
					{
						inline OnPlayerCheck()
						{
							if(get_rows(rows))
							{

								SetPlayerCameraPos(playerid, 2270.007568, -1253.644287, 30.250755);
								SetPlayerCameraLookAt(playerid, 2236.251464, -1262.034790, 23.810737);

								InterpolateCameraPos(playerid, 2270.007568, -1253.644287, 30.250755, 2269.917480, -1271.266967, 30.650810, LOGIN_TIME, CAMERA_MOVE);
								InterpolateCameraLookAt(playerid, 2236.251464,-1262.034790, 23.810737, 2236.084960, -1262.035156, 23.810737, LOGIN_TIME, CAMERA_MOVE);

								if(rows)
								{
									reg_int(0, "id", PI[playerid][pi_ID]);
									reg_name(0, "ip", PI[playerid][pi_IP], 16);
									reg_name(0, "email", PI[playerid][pi_EMAIL], 32);
									reg_name(0, "salt", PI[playerid][pi_SALT], 16);
									reg_name(0, "pass", PI[playerid][pi_PASS], 65);

									reg_int(0, "skin", PI[playerid][pi_SKIN]);
									reg_name(0, "last_connection", PI[playerid][pi_LAST_CONNECTION], 24);
									reg_float(0, "health", PI[playerid][pi_HEALTH]);
									reg_float(0, "armour", PI[playerid][pi_ARMOUR]);
									reg_float(0, "pos_x", PI[playerid][pi_POS_X]);
									reg_float(0, "pos_y", PI[playerid][pi_POS_Y]);

									mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET connected = 1, playerid = %d WHERE id = %d;", playerid, PI[playerid][pi_ID]);
									mysql_tquery(handle_db, QUERY_BUFFER);
									pTemp(playerid)[pt_USER_EXIST] = true;
								}
								else pTemp(playerid)[pt_USER_EXIST] = false;

								GameTextForPlayer(playerid, "_", 500, 3);
								if(pTemp(playerid)[pt_USER_EXIST]) 
								{
									ShowPlayerLogin(playerid);
								}
								else
								{
									TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][1]);
									TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][2]);
									TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][3]);

									ShowDialog(playerid, DIALOG_REGISTER);
								}
							}
							else Kick(playerid);
						}
						mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, email, salt, pass, skin, last_connection, health, armour, pos_x, pos_y FROM player WHERE name = '%e';", pTemp(playerid)[pt_NAME]);
						mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPlayerCheck);
					}
				}
				else Kick(playerid);
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT *, UNIX_TIMESTAMP(bans.expire_date) AS expire_date_ts, NOW() AS now, UNIX_TIMESTAMP(NOW()) AS now_ts FROM bans LEFT JOIN bad_history ON bans.id_history = bad_history.id WHERE bans.name = '%e' OR bans.ip = '%e';", pTemp(playerid)[pt_NAME], pTemp(playerid)[pt_IP]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPlayerBannedCheck);
		}
	}
	else if((pTemp(playerid)[pt_GAME_STATE] == GAME_STATE_NORMAL || pTemp(playerid)[pt_GAME_STATE] == GAME_STATE_DEAD) && pTemp(playerid)[pt_USER_LOGGED]) // Viene de jugar
	{
		SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		return 0;
	}
	
	return 0;
}

public OnPlayerRequestSpawn(playerid) // Intentar 'spawnear' mediante la selección de skin << spawn >>
{
	if(pTemp(playerid)[pt_GAME_STATE] == GAME_STATE_CONNECTED) CallLocalFunction("OnPlayerRequestClass", "dd", playerid, 0);
    return 0;
}

public OnGameModeInit()
{
	AntiAmx();

	SetGameModeText(SERVER_GAMEMODE);
    SendRconCommandf("hostname "SERVER_HOSTNAME" !%s¡", HostNames[ random(sizeof(HostNames)) ]);
    SendRconCommand("language "SERVER_LANGUAGE"");
	SendRconCommand("weburl "SERVER_WEBSITE"");
	SendRconCommand("mapname "SERVER_WEBSITE"");
	SendRconCommand("minconnectiontime 0");
    SendRconCommand("ackslimit 8000");
    SendRconCommand("messageslimit 100");
    SendRconCommand("conncookies 1");
	SendRconCommand("cookielogging 0");
	SendRconCommand("chatlogging 0");
	SendRconCommand("sleep 1");
	SendRconCommand("query 0");

	ConnectDatabase();

	rcon_pass = random(1000000000);
	SendRconCommandf("rcon_password %d", rcon_pass);
	printf("Random RCON Password generated by server: %d", rcon_pass);

	SetWorldMinutesForDay(180); // 3 horas reales = 24 horas en juego
	DisableInteriorEnterExits();
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
	EnableStuntBonusForAll(false);
	ManualVehicleEngineAndLights();
	FormatDialogStrings();
	UsePlayerPedAnims();
	MapAndreas_Init(MAP_ANDREAS_MODE_FULL);
	return 1;
}

FormatDialogStrings()
{
	new Dialog_Lines_String[256];
	
		/* PIZZA FOOD */
	format(DIALOG_FOOD_PIZZA_String, sizeof DIALOG_FOOD_PIZZA_String, "Producto\tPrecio\n");
	for(new i; i != sizeof PIZZA_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t{"#BLUE_COLOR"}%d$\n", i + 1, PIZZA_FOOD[i][food_NAME], PIZZA_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_PIZZA_String, Dialog_Lines_String);
	}
	
		/* CLUCKIN FOOD */
	format(DIALOG_FOOD_CLUCKIN_String, sizeof DIALOG_FOOD_CLUCKIN_String, "Producto\tPrecio\n");
	for(new i; i != sizeof CLUCKIN_BELL_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t{"#BLUE_COLOR"}%d$\n", i + 1, CLUCKIN_BELL_FOOD[i][food_NAME], CLUCKIN_BELL_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_CLUCKIN_String, Dialog_Lines_String);
	}
	
		/* BURGER_SHOT FOOD */
	format(DIALOG_FOOD_BURGER_String, sizeof DIALOG_FOOD_BURGER_String, "Producto\tPrecio\n");
	for(new i; i != sizeof BURGER_SHOT_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t{"#BLUE_COLOR"}%d$\n", i + 1, BURGER_SHOT_FOOD[i][food_NAME], BURGER_SHOT_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_BURGER_String, Dialog_Lines_String);
	}

		/* 24/7 LIST */
	format(DIALOG_247_LIST_String, sizeof DIALOG_247_LIST_String, "Producto\tPrecio\n");
	for(new i = 0; i != sizeof Supermarket_Product_List; i ++)
	{
		format(Dialog_Lines_String, sizeof(Dialog_Lines_String), "{FFFFFF}%d. %s\t{"#BLUE_COLOR"}%d$\n", i + 1, Supermarket_Product_List[i][product_NAME], Supermarket_Product_List[i][product_PRICE]);
		strcat(DIALOG_247_LIST_String, Dialog_Lines_String);
	}
	
	//Colores bandas
	format(DIALOG_CREATE_CREW_COLOR_String, sizeof DIALOG_CREATE_CREW_COLOR_String, "");
	for(new i = 0; i != sizeof(RandomColors); i++)
	{
		format(Dialog_Lines_String, sizeof(Dialog_Lines_String), "{%06x}color %d\n", RandomColors[i] >>> 8, i + 1);
		strcat(DIALOG_CREATE_CREW_COLOR_String, Dialog_Lines_String);
	}

	format(DIALOG_CREDIT_String, sizeof DIALOG_CREDIT_String, 
		"\
			"SERVER_NAME"\n\
			\n\
			"SERVER_SHORT_NAME" es un servidor Roleplay nuevo por lo que actualmente\n\
			se encuentra desarrollo, puedes dejar tus sugerencias en el discord.\n\
			Actualmente al ser una versión inicial puede contener fallos. a si que recuerda avisar.\n\
			\n\
		"
	);
	
	//Animaciones
	format(DIALOG_ANIMS_String, sizeof DIALOG_ANIMS_String, "");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /rendirse\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /blowjob\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /rodar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /borracho\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /bomba\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /apuntar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /reir\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /amenazar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /paja\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /herido\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /cruzarbrazos\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /recostarse\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /cubrirse\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /vomitar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /comer\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /despedir\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /nalgada\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /agonizar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /besar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /crack\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /mear\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /sentarse\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /fucku\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /llamar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /taichi\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /beber\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /boxear\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /saludar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /llorar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /dormir\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /rapear\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /astrip\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /bailar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /alentar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /hablar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /asiento\n");
			
	return 1;
}

SanAndreas()
{
	CreateTextDraws();
	LoadEnterExits();
	LoadProperties();

	//Tuning
	CreateDynamicMapIcon(-602.2586, -508.6797, 25.2885, 63, -1, 0, 0);
	CreateDynamic3DTextLabel("Pulsa {"#PRIMARY_COLOR"}'H'{FFFFFF} para tunear tu vehículo", 0xFFFFFFFF, -602.2586, -508.6797, 25.2885, 10.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//3d texts armarios
	for(new i = 0; i < sizeof PROPERTY_CLOSET_POS; i++)
	{
		CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Armario\n\n{FFFFFF}Escribe {"#PRIMARY_COLOR"}/armario {FFFFFF}para verlo", 0xFFFFFFFF, PROPERTY_CLOSET_POS[i][property_closet_X], PROPERTY_CLOSET_POS[i][property_closet_Y], PROPERTY_CLOSET_POS[i][property_closet_Z] + 0.25, 10.0, .testlos = true, .interiorid = PROPERTY_INTERIORS[i][property_INT_INTERIOR]);
		if(PROPERTY_INTERIORS[i][property_EMPTY_INTERIOR]) CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Armario\n\n{FFFFFF}Escribe {"#PRIMARY_COLOR"}/armario {FFFFFF}para verlo", 0xFFFFFFFF, PROPERTY_CLOSET_POS[i][property_closet_X], PROPERTY_CLOSET_POS[i][property_closet_Y], PROPERTY_CLOSET_POS[i][property_closet_Z] + 0.25 + PROPERTY_EMPTY_INTERIOR_Z_OFFSET, 10.0, .testlos = true, .interiorid = PROPERTY_INTERIORS[i][property_INT_INTERIOR]);
	}

	// 3D Texts Ropas
	for(new i = 0; i < sizeof Clothing_Shop_Positions; i++)
	{
		new label_str[256];
		format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}%s\n{FFFFFF}Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para ver las opciones disponibles", Clothing_Shop_Positions[i][clothing_shop_NAME]);
		CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, Clothing_Shop_Positions[i][clothing_shop_X], Clothing_Shop_Positions[i][clothing_shop_Y], Clothing_Shop_Positions[i][clothing_shop_Z] + 0.25, 10.0, .testlos = true, .interiorid = Clothing_Shop_Positions[i][clothing_shop_INTERIOR]);
	}
	
	// 3D Texts Pedir comida
	for(new i = 0; i < sizeof Fast_Food_Positions; i++)
	{
		new label_str[128];
		format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}%s\n{FFFFFF}Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para alimentarte", Fast_Food_Positions[i][fast_food_NAME]);
		CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, Fast_Food_Positions[i][fast_food_X], Fast_Food_Positions[i][fast_food_Y], Fast_Food_Positions[i][fast_food_Z] + 0.25, 10.0, .testlos = true, .interiorid = Fast_Food_Positions[i][fast_food_INTERIOR]);
	}
	
	// 3D Texts Bank
	for(new i = 0; i < sizeof Bank_Interior_Positions; i++) CreateDynamic3DTextLabel("Banco\nPresiona {"#PRIMARY_COLOR"} 'H' {FFFFFF}para realizar una operación", 0xFFFFFFFF, Bank_Interior_Positions[i][bank_X], Bank_Interior_Positions[i][bank_Y], Bank_Interior_Positions[i][bank_Z] + 0.25, 10.0, .testlos = true, .worldid = Bank_Interior_Positions[i][bank_WORLD], .interiorid = Bank_Interior_Positions[i][bank_INTERIOR]);
	for(new i = 0; i < sizeof BUY_PROPERTIES_SITES; i++) CreateDynamic3DTextLabel("Escribe {"#PRIMARY_COLOR"}/comprarcasa [ID] {FFFFFF}para comprar una propiedad", 0xFFFFFFFF, BUY_PROPERTIES_SITES[i][site_X], BUY_PROPERTIES_SITES[i][site_Y], BUY_PROPERTIES_SITES[i][site_Z] + 0.25, 10.0, .testlos = true, .worldid = BUY_PROPERTIES_SITES[i][site_WORLD], .interiorid = BUY_PROPERTIES_SITES[i][site_INTERIOR]);
	
	// 3D Texts Gasolinera
	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		CreateDynamic3DTextLabel("{"#RED_COLOR"}Gasolinera\n\n{FFFFFF}Precio: {"#GREEN_COLOR"}15$/Litro\n{FFFFFF}Escribe {"#PRIMARY_COLOR"}/gasolina [litros / lleno] {FFFFFF}para repostar\n\nCompra {"#PRIMARY_COLOR"}/bidon {FFFFFF}de 20 litros por 300$", 0xFFFFFFFF, Fuel_Stations[i][fs_X], Fuel_Stations[i][fs_Y], Fuel_Stations[i][fs_Z] + 0.25, 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
	}

	//24/7 Int
	CreateDynamic3DTextLabel("Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para ver los productos disponibles", 0xFFFFFFFF, -27.964675, -89.948631, 1003.546875 + 0.25, 10.0, .testlos = true, .interiorid = 18);

	//Mercado negro
	CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Mercado negro\n{FFFFFF}Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para comprar", 0xFFFFFFFF, 2119.059814, -2001.701904, 7.984375, 10.0, .testlos = true, .interiorid = 0, .worldid = 0);

	//Notario
	CreateDynamic3DTextLabel("Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para vender\nalguna propiedad o vehículo", 0xFFFFFFFF, -474.596282, 289.679107, 2004.584960, 10.0, .testlos = true, .interiorid = 20);
	//Grua
	CreateDynamic3DTextLabel("Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para solicitar\nel servicio de grúa a un vehículo", 0xFFFFFFFF, -508.645385, 322.147644, 2004.585937, 10.0, .testlos = true, .interiorid = 20);
	
	//San Andreas Vehicles
	for(new i = 0; i != sizeof San_Andreas_Vehicles; i ++)
	{
		
		if(San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1] == -1) San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1] = minrand(0, 255);
		if(San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2] == -1) San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2] = minrand(0, 255);
		
		new vehicle_id = INVALID_VEHICLE_ID, respawn_time = 300;
		
		if(San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if(work_info[ San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN] ][work_info_TYPE] == WORK_TYPE_FAMILY)
			{
				respawn_time = 2700;
			}
		}
		
		vehicle_id = CreateVehicle(San_Andreas_Vehicles[i][san_andreas_vehicle_MODELID], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_X], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Y], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Z], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_ANGLE], San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1], San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2], respawn_time, false);
		if(vehicle_id == INVALID_VEHICLE_ID) continue;
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = San_Andreas_Vehicles[i][san_andreas_vehicle_MODELID];
		format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "%c%c%c-%04d", getRandomLetter(), getRandomLetter(), getRandomLetter(), random(9999));
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Z];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_ANGLE];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[ GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_MAX_GAS];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] / 3, 2);
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VIP] = San_Andreas_Vehicles[i][san_andreas_vehicle_vip];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = San_Andreas_Vehicles[i][san_andreas_vehicle_WORLD];
		
		if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			WORK_VEHICLES[vehicle_id][work_vehicle_VALID] = true;
			WORK_VEHICLES[vehicle_id][work_vehicle_WORK] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN];
			WORK_VEHICLES[vehicle_id][work_vehicle_EXP] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN_EXP];
			WORK_VEHICLES[vehicle_id][work_vehicle_NEED_DUTY] = work_info[ WORK_VEHICLES[vehicle_id][work_vehicle_WORK] ][work_info_NEED_DUTY];
		}
		
		SetVehicleToRespawnEx(vehicle_id);
		CallLocalFunction("OnSanAndreasVehicleLoad", "i", vehicle_id);
	}
	CallLocalFunction("OnSanAndreasVehiclesLoad", "");
	
	//Barreras
	for(new i = 0; i != sizeof San_Andreas_Barriers; i ++)
	{
		new tmpobjid = CreateDynamicObject(966, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z], 0.0, 0.0, San_Andreas_Barriers[i][barrier_ROTATION], San_Andreas_Barriers[i][barrier_WORLD], San_Andreas_Barriers[i][barrier_INTERIOR], .streamdistance = 600.0, .drawdistance = 600.0);
		tmpobjid = CreateDynamicObject(968, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967, 0.0, -90.0, San_Andreas_Barriers[i][barrier_ROTATION], San_Andreas_Barriers[i][barrier_WORLD], San_Andreas_Barriers[i][barrier_INTERIOR], .streamdistance = 600.0, .drawdistance = 600.0);
		San_Andreas_Barriers[i][barrier_OBJECT_ID] = tmpobjid;

		new label_str[256];
		
		if(San_Andreas_Barriers[i][barrier_PRICE] > 0) format(label_str, sizeof label_str, "{"#BLUE_COLOR"}Peaje\n\n{FFFFFF}Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para pagar {"#PRIMARY_COLOR"}%s$", number_format_thousand(San_Andreas_Barriers[i][barrier_PRICE]));
		else {
			if(San_Andreas_Barriers[i][barrier_VEHICLE_TYPE]) format(label_str, sizeof label_str, "{"#BLUE_COLOR"}%c%s\n\n{FFFFFF}Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para que te abran", toupper(work_info[ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][work_info_NAME][0]), work_info[ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][work_info_NAME][1]);
			else format(label_str, sizeof label_str, "{FFFFFF}Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para que te abran");
		}

		CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 1.5, 15.0, .worldid = San_Andreas_Barriers[i][barrier_WORLD], .interiorid = San_Andreas_Barriers[i][barrier_INTERIOR], .testlos = true);

		San_Andreas_Barriers[i][barrier_PLAYER_X] = San_Andreas_Barriers[i][barrier_X] + (3.4 * floatsin(-(San_Andreas_Barriers[i][barrier_ROTATION] + 90.0), degrees));
		San_Andreas_Barriers[i][barrier_PLAYER_Y] = San_Andreas_Barriers[i][barrier_Y] + (3.4 * floatcos(-(San_Andreas_Barriers[i][barrier_ROTATION] + 90.0), degrees));
		San_Andreas_Barriers[i][barrier_PLAYER_Z] = San_Andreas_Barriers[i][barrier_Z];
	}
	
	//polciais
	for(new i = 0; i != sizeof POLICE_GARAGE_DOORS; i ++)
	{
		POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID] = CreateDynamicObject(POLICE_GARAGE_DOORS[i][police_gdoor_MODELID], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Z], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RX], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RY], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RZ], 0, 0);
	}
	for(new i = 0; i != sizeof POLICE_DOORS; i ++)
	{
		POLICE_DOORS[i][police_door_OBJECT_ID] = CreateDynamicObject(POLICE_DOORS[i][police_door_MODELID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z], 0.0, 0.0, POLICE_DOORS[i][police_door_RZ], POLICE_DOORS[i][police_door_WORLD], POLICE_DOORS[i][police_door_INTERIOR]);
		CreateDynamic3DTextLabel("Pulsa {"#PRIMARY_COLOR"} [ ENTER ] {FFFFFF}para abrir la puerta", 0xFFFFFFFF, POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z] + 1.25, 5.0, .testlos = false, .interiorid = POLICE_DOORS[i][police_door_INTERIOR], .worldid = POLICE_DOORS[i][police_door_WORLD]);
	}
	CreateDynamic3DTextLabel("Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 253.280288, 76.219017, 1003.640625, 5.0, .testlos = true, .interiorid = 6);
	CreateDynamic3DTextLabel("Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 266.547180, 119.652816, 1004.617187, 5.0, .testlos = true, .interiorid = 10);
	CreateDynamic3DTextLabel("Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 217.816406, 187.667922, 1003.031250, 5.0, .testlos = true, .interiorid = 3);

	CreateDynamic3DTextLabel("Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para equiparte", 0xFFFFFFFF, 219.244018, 69.982215, 1005.039062, 5.0, .testlos = true, .interiorid = 6);
	CreateDynamic3DTextLabel("Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para equiparte", 0xFFFFFFFF, 262.945587, 109.785270, 1004.617187, 5.0, .testlos = true, .interiorid = 10);
	CreateDynamic3DTextLabel("Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para equiparte", 0xFFFFFFFF, 222.683914, 186.956054, 1003.031250, 5.0, .testlos = true, .interiorid = 3);
	
	Jail_Areas[0] = CreateDynamicRectangle(258.236938, 72.319061, 273.117279, 95.841438, -1, 6);
	Jail_Areas[1] = CreateDynamicRectangle(211.001739, 117.171920, 236.010986, 104.004219, -1, 10);
	Jail_Areas[2] = CreateDynamicRectangle(204.957885, 180.868392, 183.743148, 168.624618, -1, 3);
	Jail_Areas[3] = CreateDynamicRectangle(366.3146, 1951.8367, 17.6406, 78.4408, -1, 13);

	//Safe Zones
	for(new i = 0; i != sizeof SAFE_ZONES; i ++)
	{
		SAFE_ZONES[i][safe_zone_AREA_ID] = CreateDynamicRectangle(SAFE_ZONES[i][safe_zone_MIN_X], SAFE_ZONES[i][safe_zone_MIN_Y], SAFE_ZONES[i][safe_zone_MAX_X], SAFE_ZONES[i][safe_zone_MAX_Y], SAFE_ZONES[i][safe_zone_WORLD], SAFE_ZONES[i][safe_zone_INTERIOR]);
	}

	//Trabajos
	for(new i = 1; i < E_WORKS; i ++)
	{
		if(!obtain_work_coords[i][obtain_work_AVAILABLE]) continue;
		switch(work_info[i][work_info_TYPE])
		{
			case WORK_TYPE_NORMAL:
			{
				if(obtain_work_coords[i][obtain_work_LABELS])
				{
					new label_str[256];

					format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Puesto de trabajo (%s)\n\n{FFFFFF}Nivel requerido: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Presiona {"#PRIMARY_COLOR"} 'H'{FFFFFF} para conseguirlo", work_info[i][work_info_NAME], work_info[i][work_info_LEVEL]);
					CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z], 10.0, .testlos = true, .interiorid = obtain_work_coords[i][obtain_work_INTERIOR]);
					CreateDynamicPickup(1239, 1, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z], -1, obtain_work_coords[i][obtain_work_INTERIOR]);
				}
				if(obtain_work_coords[i][obtain_work_MAP_ICON]) CreateDynamicMapIcon(obtain_work_coords[i][obtain_work_MAP_ICON_X], obtain_work_coords[i][obtain_work_MAP_ICON_Y], obtain_work_coords[i][obtain_work_MAP_ICON_Z], obtain_work_coords[i][obtain_work_MAP_ICON_ID], -1, 0, 0);
			}
		}
	}

	//Random taximeters
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++) TAXI_METER_VEHICLE[i][veh_taxi_meter_PRICE] = minrand(2, 8);

	//Carga camioneros
	for(new i = 0; i != sizeof LoadTrucksPoints; i ++)
	{
		CreateDynamic3DTextLabel("Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para cargar el camión", 0xFFFFFFFF, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2], 10.0, .testlos = true, .interiorid = 0);
		CreateDynamicPickup(19133, 1, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2], -1, 0);
	}

	//Mecánico
	Mechanic_Areas[0] = CreateDynamicRectangle(-621.5028076171875, -561.4997863769531, -549.5028076171875, -469.4997863769531, 0, 0);
	Streamer_SetArrayData(STREAMER_TYPE_AREA, Mechanic_Areas[0], E_STREAMER_EXTRA_ID, { AREA_TYPE_MECHANIC });

	for(new i; i != sizeof MechanicStartWorkingCoords; i++)
		CreateDynamic3DTextLabel("Pulsa {"#BLUE_COLOR"}'H' {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, MechanicStartWorkingCoords[i][0], MechanicStartWorkingCoords[i][1], MechanicStartWorkingCoords[i][2], 5.0, .testlos = true, .interiorid = 0);

	for(new i; i != sizeof MechanicGaragePieces; i++)
		CreateDynamic3DTextLabel("Pulsa {"#BLUE_COLOR"}'H' {FFFFFF}para dejar las piezas del monta cargas en el taller", 0xFFFFFFFF, MechanicGaragePieces[i][0], MechanicGaragePieces[i][1], MechanicGaragePieces[i][2], 5.0, .testlos = true, .interiorid = 0);

	//Leñador
	CreateDynamicPickup(19793, 1, -527.670349, -97.338562, 63.176174, 0, 0);
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/talar {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, -527.670349, -97.338562, 63.176174, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Pizzero
	CreateDynamicPickup(1582, 1, 2097.355712, -1818.040771, 13.382812, 0, 0);
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/pizzero {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 2097.355712, -1818.040771, 13.382812, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Medico
	CreateDynamicPickup(1275, 1, -2029.751342, -114.503044, 1035.171875, -1, 3);
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/medico {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, -2029.751342, -114.503044, 1035.171875, 5.0, .testlos = true, .interiorid = 3);

	for(new i; i != sizeof MedicalBuyKitsCoords; i++)
		CreateDynamic3DTextLabel("Botiquines\n\nEscribe {"#PRIMARY_COLOR"}/botiquin {FFFFFF}para comprar un botiquín\nPrecio del botiquín: {"#PRIMARY_COLOR"}5.000$", 0xFFFFFFFF, MedicalBuyKitsCoords[i][0], MedicalBuyKitsCoords[i][1], MedicalBuyKitsCoords[i][2], 5.0, .testlos = true);

	//mercado
	CreateDynamicActor(179, 2120.724853, -2000.400268, 7.984375, 130.0, true, 100.0, 0, 0);

	//Trash
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/basurero {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, -1906.577514, -1756.457519, 22.079319, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Ruta 0
	CreateTrashCheckpoint(0, 1440, -1812.46228, -558.37744, 15.73948,   0.00000, 0.00000, 274.24359);
	CreateTrashCheckpoint(0, 1440, -1793.84106, -312.50452, 24.46057,   0.00000, 0.00000, 268.49271);
	CreateTrashCheckpoint(0, 1440, -1801.20825, 115.39587, 14.55550,   0.00000, 0.00000, 280.09882);
	CreateTrashCheckpoint(0, 1440, -1750.40051, 323.11810, 6.61720,   0.00000, 0.00000, 319.06424);
	CreateTrashCheckpoint(0, 1440, -1814.43311, 511.15622, 28.66113,   0.00000, 9.00000, 304.31201);
	CreateTrashCheckpoint(0, 1440, -1982.79871, 614.85687, 34.61121,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, -2229.42896, 575.27448, 34.58952,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, -2385.20020, 513.64594, 28.11606,   0.00000, 0.00000, 282.48959);
	CreateTrashCheckpoint(0, 1440, -2258.51782, 221.79150, 34.74878,   0.00000, 0.00000, 90.00000);
	CreateTrashCheckpoint(0, 1440, -2266.30273, -206.86926, 34.86986,   0.00000, 0.00000, 90.00000);
	CreateTrashCheckpoint(0, 1440, -1995.48499, -771.90076, 31.56746,   0.00000, 0.00000, 90.00000);
		//Ruta 1
	CreateTrashCheckpoint(1, 1440, -2211.24414, -964.98248, 38.68247,   0.00000, 2.50000, 286.39740);
	CreateTrashCheckpoint(1, 1440, -2424.54443, -595.71997, 131.88649,   0.00000, -4.50000, 303.65921);
	CreateTrashCheckpoint(1, 1440, -2602.82544, -478.18484, 68.15035,   0.00000, 0.00000, 21.71607);
	CreateTrashCheckpoint(1, 1440, -2353.62256, -396.48764, 78.42006,   0.00000, -3.50000, 305.07410);
	CreateTrashCheckpoint(1, 1440, -2756.29199, -500.66721, 6.77589,   0.00000, 0.00000, 316.44635);
	CreateTrashCheckpoint(1, 1440, -2811.07056, -346.85269, 6.66456,   0.00000, 0.00000, 259.86459);
	CreateTrashCheckpoint(1, 1440, -2415.51563, -128.34013, 34.82273,   0.00000, 0.00000, 250.60507);
	CreateTrashCheckpoint(1, 1440, -2028.09985, -76.42242, 34.70956,   0.00000, 0.00000, 0.00000);
		//Ruta 2
	CreateTrashCheckpoint(2, 1440, -2193.88306, -2156.55347, 46.46848,   0.00000, -10.00000, 46.48320);
	CreateTrashCheckpoint(2, 1440, -2208.01904, -2280.10645, 30.12751,   0.00000, 0.00000, 331.91882);
	CreateTrashCheckpoint(2, 1440, -2125.33594, -2256.24902, 30.10599,   0.00000, 0.00000, 326.47290);
	CreateTrashCheckpoint(2, 1440, -2101.86353, -2313.20093, 30.14946,   0.00000, 0.00000, 42.68287);
	CreateTrashCheckpoint(2, 1440, -2183.69775, -2449.03003, 30.01783,   0.00000, 0.00000, 51.16318);
	CreateTrashCheckpoint(2, 1440, -2328.98047, -2704.17358, 44.41791,   6.17998, 5.88000, 340.20822);
	CreateTrashCheckpoint(2, 1440, -2601.78345, -2334.39746, 10.50614,   0.00000, 0.00000, 41.64481);

	//Ruta Camionero
    CreateTruckCheckpoint(1, 3600, -1054.6196, -596.1787, 31.5781); // Camionero 1 
    CreateTruckCheckpoint(2, 3600, 2746.3049, -2443.6436, 13.2141); // Camionero 2
    CreateTruckCheckpoint(3, 3600, 2467.1924, -2548.5383, 13.2126); // Camionero 3
    CreateTruckCheckpoint(4, 3600, 2417.1292, -2219.0166, 13.1102); // Camionero 4
    CreateTruckCheckpoint(5, 3600, 2632.5806, -2242.3816, 13.1012); // Camionero 5
    CreateTruckCheckpoint(6, 3600, 2279.6248, 63.6557, 26.0527); // Camionero 6
    CreateTruckCheckpoint(7, 3600, 2439.7515, 114.7913, 26.0306); // Camionero 7
    CreateTruckCheckpoint(8, 3600, 1583.9530, 38.8817, 24.3608); // Camionero 8
    CreateTruckCheckpoint(9, 3600, 1387.5306, 265.8192, 19.1330); // Camionero 9
    CreateTruckCheckpoint(10, 3600, 1407.9425, 458.5937, 19.7841); // Camionero 10
    CreateTruckCheckpoint(11, 3600, 1362.8693, 481.4456, 19.7561); // Camionero 11
    CreateTruckCheckpoint(12, 3600, 219.3176, 32.9477, 2.1429); // Camionero 12
    CreateTruckCheckpoint(13, 3600, 168.7279, -15.1551, 1.1493); // Camionero 13
    CreateTruckCheckpoint(14, 3600, 109.0504, -164.8963, 1.3779); // Camionero 14
    CreateTruckCheckpoint(15, 3600, -24.1087, 109.6252, 2.6836); // Camionero 15
    CreateTruckCheckpoint(16, 3600, -84.2985, 1159.0797, 19.3082); // Camionero 16
    CreateTruckCheckpoint(17, 3600, 250.2443, 1420.8013, 10.1505); // Camionero 17
    CreateTruckCheckpoint(18, 3600, 648.4564, 1690.3639, 6.5661); // Camionero 18
    CreateTruckCheckpoint(19, 3600, 687.6994, 1717.4076, 6.5582); // Camionero 19
    CreateTruckCheckpoint(20, 3600, 1024.7125, 2109.2419, 10.3845); // Camionero 20
    CreateTruckCheckpoint(21, 3600, 1053.0925, 2192.8774, 10.3864); // Camionero 21
    CreateTruckCheckpoint(22, 3600, 1101.4080, 2132.3206, 10.3749); // Camionero 22
    CreateTruckCheckpoint(23, 3600, 1107.4478, 2337.8682, 10.3851); // Camionero 23
    CreateTruckCheckpoint(24, 3600, -275.6705, 2674.3677, 62.1858); // Camionero 24
    CreateTruckCheckpoint(25, 3600, -318.2948, 2664.8755, 62.5249); // Camionero 25
    CreateTruckCheckpoint(26, 3600, -731.6951, 2744.4417, 46.7929); // Camionero 26
    CreateTruckCheckpoint(27, 3600, -1278.2625, 2721.7808, 49.6256); // Camionero 27
    CreateTruckCheckpoint(28, 3600, -1328.7443, 2697.1638, 49.6286); // Camionero 28
    CreateTruckCheckpoint(29, 3600, -1522.1049, 2584.6006, 55.4054); // Camionero 29
    CreateTruckCheckpoint(30, 3600, -2244.8970, 2372.9019, 4.5648); // Camionero 30
    CreateTruckCheckpoint(31, 3600, -2545.8774, 1217.2208, 36.9878); // Camionero 31
    CreateTruckCheckpoint(32, 3600, -2280.6763, 1100.2761, 79.7055); // Camionero 32
    CreateTruckCheckpoint(33, 3600, -2486.3450, 789.9917, 34.7420); // Camionero 33
    CreateTruckCheckpoint(34, 3600, -2405.8708, 735.0450, 34.5861); // Camionero 34
    CreateTruckCheckpoint(35, 3600, -1715.4126, 393.8911, 6.7446); // Camionero 35
    CreateTruckCheckpoint(36, 3600, -1665.8876, 446.4712, 6.7521); // Camionero 36
    CreateTruckCheckpoint(37, 3600, -1640.0603, 1282.8387, 6.6056); // Camionero 37
    CreateTruckCheckpoint(38, 3600, -1790.2880, 1424.3297, 6.7570); // Camionero 38
    CreateTruckCheckpoint(39, 3600, -1853.6162, 118.5278, 14.6833); // Camionero 39
    CreateTruckCheckpoint(40, 3600, -1839.2950, -14.3454, 14.6832); // Camionero 40
    CreateTruckCheckpoint(41, 3600, -1698.2308, -90.6935, 3.1225); // Camionero 41
    CreateTruckCheckpoint(42, 3600, -1546.8440, 124.6599, 3.1243); // Camionero 42
    CreateTruckCheckpoint(43, 3600, -610.5728, -498.7329, 25.1102); // Camionero 43
    CreateTruckCheckpoint(44, 3600, -19.6714, -274.9840, 4.9979); // Camionero 44
    CreateTruckCheckpoint(45, 3600, 356.8361, -80.2742, 0.9129); // Camionero 45
    CreateTruckCheckpoint(46, 3600, 318.1404, -249.8626, 1.1401); // Camionero 46
    CreateTruckCheckpoint(47, 3600, -2191.9675, -2323.5134, 30.1960); // Camionero 47
    CreateTruckCheckpoint(48, 3600, -2118.5300, -2489.3074, 30.1917); // Camionero 48
    CreateTruckCheckpoint(49, 3600, -2241.5657, -2554.4700, 31.4921); // Camionero 49
    CreateTruckCheckpoint(50, 3600, -1546.6370, -2738.6682, 48.1036); // Camionero 50
    CreateTruckCheckpoint(51, 3600, -259.6676, -2219.7163, 28.2244); // Camionero 51
    CreateTruckCheckpoint(52, 3600, 441.2480, -1297.2614, 14.7502); // Camionero 52
    CreateTruckCheckpoint(53, 3600, 360.3151, -1320.1871, 14.1407); // Camionero 53
    CreateTruckCheckpoint(54, 3600, 445.2579, -1803.3337, 5.1170); // Camionero 54
    CreateTruckCheckpoint(55, 3600, 1097.0187, -1880.4844, 13.1171); // Camionero 55
    CreateTruckCheckpoint(56, 3600, 1571.2336, -2328.3762, -3.1216); // Camionero 56
    CreateTruckCheckpoint(57, 3600, 1800.9304, -2291.2864, -3.1191); // Camionero 57
    CreateTruckCheckpoint(58, 3600, 2102.4680, -2044.0658, 13.1129); // Camionero 58
    CreateTruckCheckpoint(59, 3600, 2000.4470, -2062.5193, 13.112); // Camionero 59
    CreateTruckCheckpoint(60, 3600, 1923.7571, -2139.5596, 13.127); // Camionero 60
    CreateTruckCheckpoint(61, 3600, 1944.7896, -1979.4117, 13.1033); // Camionero 61
    CreateTruckCheckpoint(62, 3600, 2053.2529, -1810.0323, 12.9470); // Camionero 62
    CreateTruckCheckpoint(63, 3600, 2121.8701, -1783.2411, 12.9571); // Camionero 63
    CreateTruckCheckpoint(64, 3600, 2245.4697, -1939.0035, 13.1120); // Camionero 64
    CreateTruckCheckpoint(65, 3600, 2262.5879, -1938.8926, 13.1080); // Camionero 65
    CreateTruckCheckpoint(66, 3600, 2279.0603, -1938.7921, 13.1094); // Camionero 66
    CreateTruckCheckpoint(67, 3600, 2373.0098, -1935.6671, 13.1187); // Camionero 67
    CreateTruckCheckpoint(68, 3600, 2388.0168, -2015.0623, 13.1184); // Camionero 68
    CreateTruckCheckpoint(69, 3600, 2382.7163, -2073.7986, 13.0618); // Camionero 69
    CreateTruckCheckpoint(70, 3600, 2333.3240, -2079.8447, 13.1232); // Camionero 70
    CreateTruckCheckpoint(71, 3600, 2489.2683, -1953.2891, 12.9926); // Camionero 71
    CreateTruckCheckpoint(72, 3600, 2481.5867, -1749.3890, 13.1119); // Camionero 72
    CreateTruckCheckpoint(73, 3600, 2772.2117, -1610.6364, 10.4884); // Camionero 73
    CreateTruckCheckpoint(74, 3600, 2274.8379, -1034.7544, 50.6111); // Camionero 74
    CreateTruckCheckpoint(75, 3600, 1687.9236, -1482.3376, 12.9463); // Camionero 75
    CreateTruckCheckpoint(76, 3600, 2631.9580, 1072.2944, 10.3932); // Camionero 76
    CreateTruckCheckpoint(77, 3600, 2413.7463, 1485.8363, 10.3936); // Camionero 77
    CreateTruckCheckpoint(78, 3600, 2276.6768, 2041.2411, 10.3898); // Camionero 78
    CreateTruckCheckpoint(79, 3600, 2359.9768, 1894.3685, 10.2917); // Camionero 79
    CreateTruckCheckpoint(80, 3600, 2246.7458, 2233.0422, 10.3157); // Camionero 80
    CreateTruckCheckpoint(81, 3600, 2554.4221, 2319.6501, 10.3863); // Camionero 81
    CreateTruckCheckpoint(82, 3600, 1988.2937, 2073.2708, 10.3877); // Camionero 82
    CreateTruckCheckpoint(83, 3600, 1844.7791, 2086.6372, 10.396); // Camionero 83
    CreateTruckCheckpoint(84, 3600, 1494.4594, 2367.6289, 10.3800); // Camionero 84
    CreateTruckCheckpoint(85, 3600, 1827.3765, 2616.6760, 10.3899); // Camionero 85
    CreateTruckCheckpoint(86, 3600, 1360.4467, 1158.9868, 10.3898); // Camionero 86
    CreateTruckCheckpoint(87, 3600, 1532.5996, 1035.4827, 10.3863); // Camionero 87
    CreateTruckCheckpoint(88, 3600, -755.7060, 1588.2426, 26.5272); // Camionero 88
    CreateTruckCheckpoint(89, 3600, -1489.4685, 1871.1178, 32.199); // Camionero 89
    CreateTruckCheckpoint(90, 3600, 643.8715, -502.0673, 15.8992); // Camionero 90
    CreateTruckCheckpoint(91, 3600, 698.0093, -441.2802, 15.8967); // Camionero 91
    CreateTruckCheckpoint(92, 3600, 1338.1689, -864.0070, 38.8755); // Camionero 92
    CreateTruckCheckpoint(93, 3600, 1620.1962, -1889.5791, 13.1165); // Camionero 93
    CreateTruckCheckpoint(94, 3600, 369.7258, -2041.6675, 7.2386); // Camionero 94
    CreateTruckCheckpoint(95, 3600, -68.2107, -1159.7506, 1.3195); // Camionero 95
    CreateTruckCheckpoint(96, 3600, -216.6386, 1214.4691, 19.308); // Camionero 96
    CreateTruckCheckpoint(97, 3600, -176.5196, 1017.2153, 19.2953); // Camionero 97
    CreateTruckCheckpoint(98, 3600, 2092.4761, -1558.1576, 12.682); // Camionero 98
    CreateTruckCheckpoint(99, 3600, 2388.5242, -1541.8246, 23.5662); // Camionero 99
    CreateTruckCheckpoint(100, 3600, 2519.1714, -1466.4921, 23.5513); // Camionero 100	

	//Leñador arboles
	Lumberjack_Area = CreateDynamicRectangle(-613.953796, -209.777252, -381.961181, -6.355076, 0, 0);
	for(new i = 0; i != sizeof LUMBER_TREES; i ++)
	{
		LUMBER_TREES[i][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[i][lumber_tree_MODELID], LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z], LUMBER_TREES[i][lumber_tree_RX], LUMBER_TREES[i][lumber_tree_RY], LUMBER_TREES[i][lumber_tree_RZ], 0, 0);
		
		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Pulsa {f9d834}'N' {FFFFFF}para talar el árbol.", i);
		LUMBER_TREES[i][lumber_tree_LABEL] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z] + 1.5, 5.0, .testlos = false, .worldid = 0, .interiorid = 0);
	}
	
	//Agricultor
	Farmer_Area = CreateDynamicRectangle(-1197.7096557617188, -1068.4170837402344, -1000.7096557617188, -908.4170837402344, 0, 0);
	Farmer_Vehicles_Area = CreateDynamicRectangle(-1216.71875, -1363.40625, -991.71875, -908.40625, 0, 0);
	CreateDynamicMapIcon(-1097.1232, -990.1116, 129.2188, 53, -1, 0, 0);

	CreateDynamic3DTextLabel("Pulsa {"#BLUE_COLOR"}'H' {FFFFFF}para comprar semillas", 0xFFFFFFFF, -1077.4634, -1155.7748, 129.2188, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("Pulsa {"#BLUE_COLOR"}'H' {FFFFFF}para comprar semillas", 0xFFFFFFFF, -1073.3785, -1155.9309, 129.2188, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("Pulsa {"#BLUE_COLOR"}'H' {FFFFFF}para comprar semillas", 0xFFFFFFFF, -1069.5953, -1155.9102, 129.2188, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);
	return 1;
}

stock Float:GetSpeed(Float:vx, Float:vy, Float:vz)
{
	new Float:vel = floatmul(floatsqroot(floatadd(floatadd(floatpower(vx, 2), floatpower(vy, 2)),  floatpower(vz, 2))), 181.5);
	return vel;
}

stock IsVehicleDrivingForward(vehicleid)
{
    new Float:Float[3];
    if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
    {
        GetVehicleZAngle(vehicleid, Float[0]);
        if(Float[0] < 90)
        {
            if(Float[1] < 0 && Float[2] > 0) return true;
        }
        else if(Float[0] < 180)
        {
            if(Float[1] < 0 && Float[2] < 0) return true;
        }
        else if(Float[0] < 270)
        {
            if(Float[1] > 0 && Float[2] < 0) return true;
        }
        else if(Float[1] > 0 && Float[2] > 0) return true;
    }
    return false;
}

CreateTruckCheckpoint(index, payment, Float:x, Float:y, Float:z)
{
	if(index >= TRUCK_MAX_ROUTES) return print("---> Límite superado en array 'Truck_Contents, index' en la función 'CreateTruckCheckpoint'.");

	Truck_Contents[index][truck_content_VALID] = true;
	Truck_Contents[index][truck_content_MONEY] = payment;

	Truck_Contents[index][truck_content_X] = x;
	Truck_Contents[index][truck_content_Y] = y;
	Truck_Contents[index][truck_content_Z] = z;
	return 1;
}

CreateTrashCheckpoint(route, modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(route >= MAX_ROUTES) return print("---> Límite superado en array 'TRASH_OBJECTS, route' en la función 'CreateTrashCheckpoint'.");
	if(!TRASH_OBJECTS[route][trash_route_VALID]) TRASH_OBJECTS[route][trash_route_VALID] = true;
	if(TRASH_OBJECTS[route][trash_route_OBJECTS] >= MAX_OBJECTS_PER_ROUTE) return print("---> Límite superado en array 'TRASH_OBJECTS, objects' en la función 'CreateTrashCheckpoint'.");

	if(TRASH_OBJECTS[route][trash_route_OBJECTS] == 0) TRASH_OBJECTS[route][trash_route_DISTANCE] = GetDistanceBetweenPoints3D(x, y, z, obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
	else
	{
		TRASH_OBJECTS[route][trash_route_DISTANCE] -= GetDistanceBetweenPoints3D(TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1], TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
		TRASH_OBJECTS[route][trash_route_DISTANCE] += GetDistanceBetweenPoints3D(x, y, z, TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1], TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ]);
	}
	
	TRASH_OBJECTS[route][trash_object_MODELID][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = modelid;
	TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = x;
	TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = y;
	TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = z;
	TRASH_OBJECTS[route][trash_object_RX][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = rx;
	TRASH_OBJECTS[route][trash_object_RY][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = ry;
	TRASH_OBJECTS[route][trash_object_RZ][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = rz;
	//CreateDynamicObject(modelid, x, y, z, rx, ry, rz, 0, 0);
	
	TRASH_OBJECTS[route][trash_route_DISTANCE] += GetDistanceBetweenPoints3D(x, y, z, obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
	TRASH_OBJECTS[route][trash_route_MONEY] = floatround(0.3 * TRASH_OBJECTS[route][trash_route_DISTANCE]);
	
	TRASH_OBJECTS[route][trash_route_OBJECTS] ++;
	return 1;
}
	
stock Float:GetDistanceBetweenPoints3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return VectorSize(x1-x2,y1-y2,z1-z2);
}

CreateTextDraws()
{
	for(new i; i < sizeof(Textdraws); i++) Textdraws[Textdraws_Enum:i] = INVALID_TEXT_DRAW;
	
	Textdraws[textdraw_COMBAT_MODE] = TextDrawCreate(87.000000, 315.000000, "En_combate");
	TextDrawLetterSize(Textdraws[textdraw_COMBAT_MODE], 0.267000, 1.521185);
	TextDrawTextSize(Textdraws[textdraw_COMBAT_MODE], 0.000000, 98.000000);
	TextDrawAlignment(Textdraws[textdraw_COMBAT_MODE], 2);
	TextDrawColor(Textdraws[textdraw_COMBAT_MODE], -16776961);
	TextDrawSetShadow(Textdraws[textdraw_COMBAT_MODE], 0);
	TextDrawSetOutline(Textdraws[textdraw_COMBAT_MODE], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_COMBAT_MODE], 255);
	TextDrawFont(Textdraws[textdraw_COMBAT_MODE], 2);
	TextDrawSetProportional(Textdraws[textdraw_COMBAT_MODE], 1);

	Textdraws[textdraw_STAFF_DUTY][0] = TextDrawCreate(575.000000, 220.000000, "_");
	TextDrawFont(Textdraws[textdraw_STAFF_DUTY][0], 0);
	TextDrawLetterSize(Textdraws[textdraw_STAFF_DUTY][0], 0.000000, 2.500000);
	TextDrawTextSize(Textdraws[textdraw_STAFF_DUTY][0], 0.000000, 100.000000);
	TextDrawSetOutline(Textdraws[textdraw_STAFF_DUTY][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_STAFF_DUTY][0], 0);
	TextDrawAlignment(Textdraws[textdraw_STAFF_DUTY][0], 2);
	TextDrawColor(Textdraws[textdraw_STAFF_DUTY][0], -1);
	TextDrawBackgroundColor(Textdraws[textdraw_STAFF_DUTY][0], 255);
	TextDrawBoxColor(Textdraws[textdraw_STAFF_DUTY][0], 15);
	TextDrawUseBox(Textdraws[textdraw_STAFF_DUTY][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_STAFF_DUTY][0], 1);
	TextDrawSetSelectable(Textdraws[textdraw_STAFF_DUTY][0], 0);

	Textdraws[textdraw_STAFF_DUTY][1] = TextDrawCreate(575.000000, 224.000000, "STAFF_-_En_Servicio");
	TextDrawFont(Textdraws[textdraw_STAFF_DUTY][1], 0);
	TextDrawLetterSize(Textdraws[textdraw_STAFF_DUTY][1], 0.345833, 1.699999);
	TextDrawTextSize(Textdraws[textdraw_STAFF_DUTY][1], 0.000000, 0.000000);
	TextDrawSetOutline(Textdraws[textdraw_STAFF_DUTY][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_STAFF_DUTY][1], 0);
	TextDrawAlignment(Textdraws[textdraw_STAFF_DUTY][1], 2);
	TextDrawColor(Textdraws[textdraw_STAFF_DUTY][1], PLAYER_ACTION_COLOR);
	TextDrawBackgroundColor(Textdraws[textdraw_STAFF_DUTY][1], 255);
	TextDrawBoxColor(Textdraws[textdraw_STAFF_DUTY][1], 50);
	TextDrawUseBox(Textdraws[textdraw_STAFF_DUTY][1], 0);
	TextDrawSetProportional(Textdraws[textdraw_STAFF_DUTY][1], 1);
	TextDrawSetSelectable(Textdraws[textdraw_STAFF_DUTY][1], 0);

    Textdraws[textdraw_STAFF_INVIS][0] = TextDrawCreate(575.000000, 250.000000, "_");
    TextDrawFont(Textdraws[textdraw_STAFF_INVIS][0], 0);
    TextDrawLetterSize(Textdraws[textdraw_STAFF_INVIS][0], 0.000000, 2.500000);
    TextDrawTextSize(Textdraws[textdraw_STAFF_INVIS][0], 0.000000, 100.000000);
    TextDrawSetOutline(Textdraws[textdraw_STAFF_INVIS][0], 1);
    TextDrawSetShadow(Textdraws[textdraw_STAFF_INVIS][0], 0);
    TextDrawAlignment(Textdraws[textdraw_STAFF_INVIS][0], 2);
    TextDrawColor(Textdraws[textdraw_STAFF_INVIS][0], -1);
    TextDrawBackgroundColor(Textdraws[textdraw_STAFF_INVIS][0], 255);
    TextDrawBoxColor(Textdraws[textdraw_STAFF_INVIS][0], 15);
    TextDrawUseBox(Textdraws[textdraw_STAFF_INVIS][0], 1);
    TextDrawSetProportional(Textdraws[textdraw_STAFF_INVIS][0], 1);
    TextDrawSetSelectable(Textdraws[textdraw_STAFF_INVIS][0], 0);

    Textdraws[textdraw_STAFF_INVIS][1] = TextDrawCreate(575.000000, 253.000000, "STAFF_-_Invisible");
    TextDrawFont(Textdraws[textdraw_STAFF_INVIS][1], 0);
    TextDrawLetterSize(Textdraws[textdraw_STAFF_INVIS][1], 0.399999, 1.799999);
    TextDrawTextSize(Textdraws[textdraw_STAFF_INVIS][1], 400.000000, 17.000000);
    TextDrawSetOutline(Textdraws[textdraw_STAFF_INVIS][1], 0);
    TextDrawSetShadow(Textdraws[textdraw_STAFF_INVIS][1], 0);
    TextDrawAlignment(Textdraws[textdraw_STAFF_INVIS][1], 2);
    TextDrawColor(Textdraws[textdraw_STAFF_INVIS][1], PLAYER_ENVIROMENT_COLOR);
    TextDrawBackgroundColor(Textdraws[textdraw_STAFF_INVIS][1], 255);
    TextDrawBoxColor(Textdraws[textdraw_STAFF_INVIS][1], 50);
    TextDrawUseBox(Textdraws[textdraw_STAFF_INVIS][1], 0);
    TextDrawSetProportional(Textdraws[textdraw_STAFF_INVIS][1], 1);
    TextDrawSetSelectable(Textdraws[textdraw_STAFF_INVIS][1], 0);

    Textdraws[textdraw_HUD][0] = TextDrawCreate(128.000000, 429.000000, "_");
    TextDrawFont(Textdraws[textdraw_HUD][0], 1);
    TextDrawLetterSize(Textdraws[textdraw_HUD][0], 0.000000, 1.700000);
    TextDrawTextSize(Textdraws[textdraw_HUD][0], 0.000000, 250.000000);
    TextDrawSetOutline(Textdraws[textdraw_HUD][0], 1);
    TextDrawSetShadow(Textdraws[textdraw_HUD][0], 0);
    TextDrawAlignment(Textdraws[textdraw_HUD][0], 2);
    TextDrawColor(Textdraws[textdraw_HUD][0], -1);
    TextDrawBackgroundColor(Textdraws[textdraw_HUD][0], 255);
    TextDrawBoxColor(Textdraws[textdraw_HUD][0], 50);
    TextDrawUseBox(Textdraws[textdraw_HUD][0], 1);
    TextDrawSetProportional(Textdraws[textdraw_HUD][0], 1);
    TextDrawSetSelectable(Textdraws[textdraw_HUD][0], 0);

    Textdraws[textdraw_HUD][1] = TextDrawCreate(283.000000, 429.000000, "_");
    TextDrawFont(Textdraws[textdraw_HUD][1], 1);
    TextDrawLetterSize(Textdraws[textdraw_HUD][1], 0.000000, 1.700000);
    TextDrawTextSize(Textdraws[textdraw_HUD][1], 0.000000, 50.000000);
    TextDrawSetOutline(Textdraws[textdraw_HUD][1], 1);
    TextDrawSetShadow(Textdraws[textdraw_HUD][1], 0);
    TextDrawAlignment(Textdraws[textdraw_HUD][1], 2);
    TextDrawColor(Textdraws[textdraw_HUD][1], -1);
    TextDrawBackgroundColor(Textdraws[textdraw_HUD][1], 255);
    TextDrawBoxColor(Textdraws[textdraw_HUD][1], 50);
    TextDrawUseBox(Textdraws[textdraw_HUD][1], 1);
    TextDrawSetProportional(Textdraws[textdraw_HUD][1], 1);
    TextDrawSetSelectable(Textdraws[textdraw_HUD][1], 0);

    Textdraws[textdraw_HUD][2] = TextDrawCreate(401.000000, 429.000000, "_");
    TextDrawFont(Textdraws[textdraw_HUD][2], 1);
    TextDrawLetterSize(Textdraws[textdraw_HUD][2], 0.000000, 1.700000);
    TextDrawTextSize(Textdraws[textdraw_HUD][2], 0.000000, 175.000000);
    TextDrawSetOutline(Textdraws[textdraw_HUD][2], 1);
    TextDrawSetShadow(Textdraws[textdraw_HUD][2], 0);
    TextDrawAlignment(Textdraws[textdraw_HUD][2], 2);
    TextDrawColor(Textdraws[textdraw_HUD][2], -1);
    TextDrawBackgroundColor(Textdraws[textdraw_HUD][2], 255);
    TextDrawBoxColor(Textdraws[textdraw_HUD][2], 2615);
    TextDrawUseBox(Textdraws[textdraw_HUD][2], 1);
    TextDrawSetProportional(Textdraws[textdraw_HUD][2], 1);
    TextDrawSetSelectable(Textdraws[textdraw_HUD][2], 0);

    Textdraws[textdraw_HUD][3] = TextDrawCreate(566.000000, 429.000000, "_");
    TextDrawFont(Textdraws[textdraw_HUD][3], 1);
    TextDrawLetterSize(Textdraws[textdraw_HUD][3], 0.000000, 1.700000);
    TextDrawTextSize(Textdraws[textdraw_HUD][3], 0.000000, 143.000000);
    TextDrawSetOutline(Textdraws[textdraw_HUD][3], 1);
    TextDrawSetShadow(Textdraws[textdraw_HUD][3], 0);
    TextDrawAlignment(Textdraws[textdraw_HUD][3], 2);
    TextDrawColor(Textdraws[textdraw_HUD][3], -1);
    TextDrawBackgroundColor(Textdraws[textdraw_HUD][3], 255);
    TextDrawBoxColor(Textdraws[textdraw_HUD][3], 50);
    TextDrawUseBox(Textdraws[textdraw_HUD][3], 1);
    TextDrawSetProportional(Textdraws[textdraw_HUD][3], 1);
    TextDrawSetSelectable(Textdraws[textdraw_HUD][3], 0);

    Textdraws[textdraw_HUD][4] = TextDrawCreate(495.000000, 430.000000, "HUD:radar_pizza");
    TextDrawFont(Textdraws[textdraw_HUD][4], 4);
    TextDrawLetterSize(Textdraws[textdraw_HUD][4], 0.300000, 1.500000);
    TextDrawTextSize(Textdraws[textdraw_HUD][4], 15.000000, 15.000000);
    TextDrawSetOutline(Textdraws[textdraw_HUD][4], 0);
    TextDrawSetShadow(Textdraws[textdraw_HUD][4], 1);
    TextDrawAlignment(Textdraws[textdraw_HUD][4], 2);
    TextDrawColor(Textdraws[textdraw_HUD][4], -1);
    TextDrawBackgroundColor(Textdraws[textdraw_HUD][4], 255);
    TextDrawBoxColor(Textdraws[textdraw_HUD][4], 2815);
    TextDrawUseBox(Textdraws[textdraw_HUD][4], 0);
    TextDrawSetProportional(Textdraws[textdraw_HUD][4], 1);
    TextDrawSetSelectable(Textdraws[textdraw_HUD][4], 0);

    Textdraws[textdraw_HUD][5] = TextDrawCreate(569.000000, 429.000000, "HUD:radar_diner");
    TextDrawFont(Textdraws[textdraw_HUD][5], 4);
    TextDrawLetterSize(Textdraws[textdraw_HUD][5], 0.300000, 1.500000);
    TextDrawTextSize(Textdraws[textdraw_HUD][5], 15.000000, 15.500000);
    TextDrawSetOutline(Textdraws[textdraw_HUD][5], 0);
    TextDrawSetShadow(Textdraws[textdraw_HUD][5], 1);
    TextDrawAlignment(Textdraws[textdraw_HUD][5], 2);
    TextDrawColor(Textdraws[textdraw_HUD][5], -1);
    TextDrawBackgroundColor(Textdraws[textdraw_HUD][5], 255);
    TextDrawBoxColor(Textdraws[textdraw_HUD][5], 2815);
    TextDrawUseBox(Textdraws[textdraw_HUD][5], 0);
    TextDrawSetProportional(Textdraws[textdraw_HUD][5], 1);
    TextDrawSetSelectable(Textdraws[textdraw_HUD][5], 0);

	Textdraws[textdraw_GPS_MAP][0] = TextDrawCreate(-5.000000, 132.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][0], 0.000000, 22.498472);
	TextDrawTextSize(Textdraws[textdraw_GPS_MAP][0], 180.130477, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][0], -1);
	TextDrawUseBox(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_GPS_MAP][0], 120);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][0], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][0], 0);

	Textdraws[textdraw_GPS_MAP][1] = TextDrawCreate(map_td_X, map_td_Y, "samaps:map");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][1], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_GPS_MAP][1], map_td_SIZE_X, map_td_SIZE_Y);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][1], 1);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][1], -1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][1], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][1], 4);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][1], 0);

	Textdraws[textdraw_GPS_MAP][2] = TextDrawCreate(90.000000, 324.000000, "GPS_-_/mapa");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][2], 0.197330, 1.027553);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][2], 2);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][2], -186);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][2], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][2], 0);

	Textdraws[textdraw_GPS_MAP][3] = TextDrawCreate(map_td_X, map_td_Y, "mdl-1000:lc_map");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][3], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_GPS_MAP][3], map_td_SIZE_X, map_td_SIZE_Y);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][3], 1);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][3], -1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][3], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][3], 4);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][3], 0);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][3], 0);
	
	
	Textdraws[textdraw_PLAYER_REP_BACK][0] = TextDrawCreate(500.000000, 13.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_PLAYER_REP_BACK][0], 0.000000, 0.633333);
	TextDrawTextSize(Textdraws[textdraw_PLAYER_REP_BACK][0], 605.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawColor(Textdraws[textdraw_PLAYER_REP_BACK][0], -1);
	TextDrawUseBox(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_PLAYER_REP_BACK][0], 255);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_PLAYER_REP_BACK][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_PLAYER_REP_BACK][0], 255);
	TextDrawFont(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][0], 0);

	Textdraws[textdraw_PLAYER_REP_BACK][1] = TextDrawCreate(502.000000, 15.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_PLAYER_REP_BACK][1], 0.000000, 0.200000);
	TextDrawTextSize(Textdraws[textdraw_PLAYER_REP_BACK][1], 603.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawColor(Textdraws[textdraw_PLAYER_REP_BACK][1], -1);
	TextDrawUseBox(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_PLAYER_REP_BACK][1], 5787296);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_PLAYER_REP_BACK][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_PLAYER_REP_BACK][1], 255);
	TextDrawFont(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][1], 0);

	Textdraws[textdraw_LOAD_SCREEN][0] = TextDrawCreate(-15.000000, -4.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][0], 0.000000, 50.866653);
	TextDrawTextSize(Textdraws[textdraw_LOAD_SCREEN][0], 728.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][0], 1);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][0], -1);
	TextDrawUseBox(Textdraws[textdraw_LOAD_SCREEN][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_LOAD_SCREEN][0], 0x000000FF);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][0], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][0], 1);

	Textdraws[textdraw_LOAD_SCREEN][1] = TextDrawCreate(-15.000000, -4.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][1], 0.000000, 50.866653);
	TextDrawTextSize(Textdraws[textdraw_LOAD_SCREEN][1], 728.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][1], 1);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][1], -1);
	TextDrawUseBox(Textdraws[textdraw_LOAD_SCREEN][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_LOAD_SCREEN][1], 90);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][1], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][1], 1);

	Textdraws[textdraw_LOAD_SCREEN][2] = TextDrawCreate(320.000000, 80.000000, SERVER_SHORT_NAME);
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][2], 0.505666, 2.649481);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][2], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][2], -1);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][2], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][2], 2);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][2], 1);

	Textdraws[textdraw_LOAD_SCREEN][3] = TextDrawCreate(320.000000, 99.000000, "ROLEPLAY");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][3], 0.311000, 1.811555);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][3], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][3], -1);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][3], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][3], 2);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][3], 1);
	
    Textdraws[textdraw_SERVER_TIME] = TextDrawCreate(283.000000, 429.000000, "00:00");
    TextDrawFont(Textdraws[textdraw_SERVER_TIME], 2);
    TextDrawLetterSize(Textdraws[textdraw_SERVER_TIME], 0.300000, 1.500000);
    TextDrawTextSize(Textdraws[textdraw_SERVER_TIME], 1000.000000, 0.000000);
    TextDrawSetOutline(Textdraws[textdraw_SERVER_TIME], 0);
    TextDrawSetShadow(Textdraws[textdraw_SERVER_TIME], 1);
    TextDrawAlignment(Textdraws[textdraw_SERVER_TIME], 2);
    TextDrawColor(Textdraws[textdraw_SERVER_TIME], -1);
    TextDrawBackgroundColor(Textdraws[textdraw_SERVER_TIME], 255);
    TextDrawBoxColor(Textdraws[textdraw_SERVER_TIME], 2815);
    TextDrawUseBox(Textdraws[textdraw_SERVER_TIME], 0);
    TextDrawSetProportional(Textdraws[textdraw_SERVER_TIME], 1);
    TextDrawSetSelectable(Textdraws[textdraw_SERVER_TIME], 0);
	
	Textdraws[textdraw_SHOP][0] = TextDrawCreate(320.000000, 120.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][0], 0.000000, 24.936986);
	TextDrawTextSize(Textdraws[textdraw_SHOP][0], 0.000000, 254.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][0], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][0], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][0], 201);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][0], 0);

	Textdraws[textdraw_SHOP][1] = TextDrawCreate(320.000000, 125.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][1], 0.000000, 23.766672);
	TextDrawTextSize(Textdraws[textdraw_SHOP][1], 0.000000, 254.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][1], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][1], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][1], 11117257);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][1], 0);

	Textdraws[textdraw_SHOP][2] = TextDrawCreate(207.000000, 128.000000, "Compra_y_venta");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][2], 0.295333, 1.388446);
	TextDrawAlignment(Textdraws[textdraw_SHOP][2], 1);
	TextDrawColor(Textdraws[textdraw_SHOP][2], -1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][2], 0);

	Textdraws[textdraw_SHOP][3] = TextDrawCreate(320.000000, 145.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][3], 0.000000, -0.266666);
	TextDrawTextSize(Textdraws[textdraw_SHOP][3], 0.000000, 222.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][3], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][3], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][3], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][3], 0);

	Textdraws[textdraw_SHOP][4] = TextDrawCreate(320.000000, 301.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][4], 0.000000, -0.266666);
	TextDrawTextSize(Textdraws[textdraw_SHOP][4], 0.000000, 222.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][4], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][4], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][4], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][4], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][4], 0);
	
	
	Textdraws[textdraw_SHOP_ARTICLES_BOX][0] = TextDrawCreate(208.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][1] = TextDrawCreate(285.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][2] = TextDrawCreate(362.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][3] = TextDrawCreate(208.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][4] = TextDrawCreate(285.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][5] = TextDrawCreate(362.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], true);
	
	Textdraws[textdraw_SHOP_ARTICLE_BOX] = TextDrawCreate(208.000000, 175.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLE_BOX], 100.000000, 100.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLE_BOX], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLE_BOX], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLE_BOX], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLE_BOX], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	
	Textdraws[textdraw_TERRITORY_BOX] = TextDrawCreate(320.000000, 355.000000, "-");
	TextDrawLetterSize(Textdraws[textdraw_TERRITORY_BOX], 12.321674, 9.937778);
	TextDrawAlignment(Textdraws[textdraw_TERRITORY_BOX], 2);
	TextDrawColor(Textdraws[textdraw_TERRITORY_BOX], 167);
	TextDrawSetShadow(Textdraws[textdraw_TERRITORY_BOX], 0);
	TextDrawSetOutline(Textdraws[textdraw_TERRITORY_BOX], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_TERRITORY_BOX], 255);
	TextDrawFont(Textdraws[textdraw_TERRITORY_BOX], 1);
	TextDrawSetProportional(Textdraws[textdraw_TERRITORY_BOX], 1);
	TextDrawSetShadow(Textdraws[textdraw_TERRITORY_BOX], 0);
	return 1;
}

stock DestroyTextDraws()
{
	for(new i; i < sizeof(Textdraws); i++)
	{
		if(Textdraws[Textdraws_Enum:i] == INVALID_TEXT_DRAW) continue;
		TextDrawDestroy(Text:Textdraws[Textdraws_Enum:i]);
		Textdraws[Textdraws_Enum:i] = INVALID_TEXT_DRAW;
	}
	return 1;
}

public OnGameModeExit()
{
	AntiAmx();

	new date[24];
	getDateTime(date);

	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			format(PI[i][pi_LAST_CONNECTION], 24, "%s", date);
			OnPlayerDisconnect(i, 1); //Normal disconnect.
		}
	}

	mysql_close(handle_db);
	return 1;
}

#define MIN_SECONDS_BETWEEN_TALKS 100 // Deben pasar al menos 1 segundos para volver a hablar.
hook OnPlayerText(playerid, text[])
{
	if(pTemp(playerid)[pt_KICKED]) return 0;
	
	if(pTemp(playerid)[pt_GAME_STATE] != GAME_STATE_NORMAL || pTemp(playerid)[pt_SELECT_TEXTDRAW] || PI[playerid][pi_STATE] == ROLEPLAY_STATE_HOSPITAL) { SendClientMessagef(playerid, -1, "Ahora no puedes hablar."); return 0; }
	if(text[0] == '#' && PI[playerid][pi_ADMIN_LEVEL] > 1 /*&& pTemp(playerid)[pt_ADMIN_SERVICE]*/)
	{
      	new string[145];
        format(string, sizeof(string), "%s (%s): %s", PI[playerid][pi_NAME], ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ], text[1]);
		SendChatMessageToAdmins(RED_COLOR2, string);
		return 0;
	}

	new interval = GetTickDiff(GetTickCount(), pTemp(playerid)[pt_ANTIFLOOD_TALK]);
	if(interval < MIN_SECONDS_BETWEEN_TALKS)
	{
		if(ac_Info[CHEAT_TEXT_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_IMMUNITY])
			{
				if(interval < 50)
				{
					if(!ac_Info[CHEAT_TEXT_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_TEXT_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_TEXT_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_TEXT_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_TEXT_SPAMMER, float(interval));
					}
				}
			}
		}
		SendClientMessagef(playerid, -1, "Cálmate."); 
		return 0; 
	}
	pTemp(playerid)[pt_ANTIFLOOD_TALK] = GetTickCount();
	
	if(pTemp(playerid)[pt_POLICE_CALL_NAME])
	{
		format(pTemp(playerid)[pt_POLICE_CALL_NAME_STR], 24, "%s", text);
		SendClientMessagef(playerid, -1, "Operadora: de acuerdo, describe brevemente lo que sucede para enviar una patrulla.");
		pTemp(playerid)[pt_POLICE_CALL_NAME] = false;
		pTemp(playerid)[pt_POLICE_CALL_DESCRIPTION] = true;
		return 0;
	}
	if(pTemp(playerid)[pt_POLICE_CALL_DESCRIPTION])
	{
		pTemp(playerid)[pt_PLAYER_IN_CALL] = false;
		pTemp(playerid)[pt_POLICE_CALL_NAME] = false;
		pTemp(playerid)[pt_POLICE_CALL_DESCRIPTION] = false;
		
		
		new city[45], zone[45];
		GetPlayerZones(playerid, city, zone);
			
		new message[145];
		format(message, sizeof message, "{"#POLICE_COLOR"}[Central policía] {FFFFFF}Reporte {"#SILVER_COLOR"}[%s (%d), gps: %s, %s]: {FFFFFF}%s", pTemp(playerid)[pt_POLICE_CALL_NAME_STR], playerid, city, zone, text);
		SendPoliceRadioMessage(-1, -1, message);

		SendClientMessagef(playerid, -1, "Operadora: su petición fue enviada, en breve una patrulla acudirá.");
		SendClientMessagef(playerid, -1, "{"#PRIMARY_COLOR"}Llamada finalizada.");
		return 0;
	}
	
	new str_text[190], str_text2[256];
	if(text[0] == '!')
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] == WORK_POLICE)
		{
			if(text[1] == '!')
			{
				format(str_text, sizeof str_text, "** [Radio] (( %s: %s ))", pTemp(playerid)[pt_NAME], text[2]);
				format(str_text2, sizeof str_text2, "ID: %d | %s (por radio): (( %s ))", playerid, pTemp(playerid)[pt_NAME], str_text2[2]);
			}
			else 
			{
				format(str_text, sizeof str_text, "{"#BLUE_COLOR"}** [Radio]{ffffff} %s %s: %s", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], pTemp(playerid)[pt_NAME], text[1]);
				format(str_text2, 145, "%s dice (por radio): %s", pTemp(playerid)[pt_NAME], text[1]);
			}

			SendPoliceRadioMessage(pTemp(playerid)[pt_POLICE_RADIO], 0xCCCCCCCC, str_text, playerid);
			ProxDetector(playerid, 10.0, str_text2, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
			return 0;
		}

		if(PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] == WORK_MECHANIC)
		{
			if(text[1] == '!')
			{
				format(str_text, sizeof str_text, "** [Radio] (( %s: %s ))", pTemp(playerid)[pt_NAME], text[2]);
				format(str_text2, sizeof str_text2, "ID: %d | %s (por radio): (( %s ))", playerid, pTemp(playerid)[pt_NAME], str_text2[2]);
			}
			else 
			{
				format(str_text, sizeof str_text, "{"#BLUE_COLOR"}** [Radio]{ffffff} %s %s: %s", MECHANIC_RANKS[ PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL] ], pTemp(playerid)[pt_NAME], text[1]);
				format(str_text2, 145, "%s dice (por radio): %s", pTemp(playerid)[pt_NAME], text[1]);
			}

			SendMechanicRadioMessage(0xCCCCCCCC, str_text, playerid);
			ProxDetector(playerid, 10.0, str_text2, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
			return 0;
		}
		
		if(PI[playerid][pi_CREW])
		{
			if(text[1] == '!')
			{
				format(str_text, sizeof str_text, "** [Radio] (( %s: %s ))", pTemp(playerid)[pt_NAME], text[2]);
				format(str_text2, sizeof str_text2, "ID: %d | %s (por radio): (( %s ))", playerid, pTemp(playerid)[pt_NAME], str_text2[2]);
			}
			else
			{
				format(str_text, sizeof str_text, "{%06x}** [Radio] %s %s{%06x}: %s", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, text[1]);
				format(str_text2, 145, "%s dice (por radio): %s", pTemp(playerid)[pt_NAME], text[1]);
			}

			SendMessageToCrewMembers(PI[playerid][pi_CREW], 0xCCCCCCCC, str_text, playerid);
			ProxDetector(playerid, 10.0, str_text2, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
			return 0;
		}
	}
	
	if(pTemp(playerid)[pt_PLAYER_PHONE_CALL_STATE] == CALL_STATE_ESTABLISHED)
	{
		format(str_text, 145, "%s dice (por teléfono): %s", pTemp(playerid)[pt_NAME], text);
		SendClientMessagef(pTemp(playerid)[pt_PLAYER_PHONE_CALL_PLAYERID], -1, "{"#SILVER_COLOR"}Teléfono: %s: %s", convertPhoneNumber(pTemp(playerid)[pt_PLAYER_PHONE_CALL_PLAYERID], PI[playerid][pi_PHONE_NUMBER]), text);
	}
	else if(pTemp(playerid)[pt_ADMIN_SERVICE]) format(str_text, sizeof(str_text), "ID: %d | %s: (( %s ))", playerid, pTemp(playerid)[pt_NAME], text);
	else
	{
		/*if(GetPlayerDrunkLevel(playerid) > 2000) format(str_text, 145, "%s dice (ebrio): %s", pTemp(playerid)[pt_NAME], text);
		else*/ 
		format(str_text, 145, "%s dice: %s", pTemp(playerid)[pt_NAME], text);
	}
	ProxDetector(playerid, 15.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 0;
}

#define MIN_TIME_BETWEEN_DOUBT	60
#define IP_SPAM_MUTE_TIME		5 //minutos
CMD:duda(playerid, params[])
{
	if(!PI[playerid][pi_DOUBT_CHANNEL]) return SendClientMessagef(playerid, -1, "Para enviar una duda primero debes activar el canal de dudas desde el panel");
	if(isnull(params)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/duda [DUDA]");
	if(PI[playerid][pi_MUTE] > gettime())
	{
		new seconds = PI[playerid][pi_MUTE] - gettime();
		SendClientMessagef(playerid, -1, "Estás silenciado en el canal de dudas por %s minutos.", TimeConvert(seconds));
		return 1;
	}

	if(!PI[playerid][pi_ADMIN_LEVEL])
	{
		if(gettime() < pTemp(playerid)[pt_DOUBT_CHANNEL_TIME] + MIN_TIME_BETWEEN_DOUBT)
		{
			new time = (MIN_TIME_BETWEEN_DOUBT-(gettime()-pTemp(playerid)[pt_DOUBT_CHANNEL_TIME]));
			SendClientMessagef(playerid, -1, "Tienes que esperar %s minutos para volver a realizar otra consulta.", TimeConvert(time));
			return 1;
		}
	}
	
 	SendMessageToDoubtChannel(playerid, params);
	return 1;
}

CMD:g(playerid, params[])
{
	if(isnull(params)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/gritar [TEXTO]");
	
	new str_text[190];
	format(str_text, 190, "%s grita: ¡%s!", pTemp(playerid)[pt_NAME], params);
	ProxDetector(playerid, 25.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 1;
}
alias:g("gritar");

CMD:s(playerid, params[])
{
	if(isnull(params)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/susurrar [TEXTO]");
	
	new str_text[190];
	format(str_text, sizeof(str_text), "%s susurra: %s", pTemp(playerid)[pt_NAME], params);
	ProxDetector(playerid, 5.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 1;
}
alias:s("susurrar");

CMD:b(playerid, params[])
{
	if(isnull(params)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/b [TEXTO]");
	
    new str_text[190];
    format(str_text, sizeof(str_text), "ID: %d | %s: (( %s ))", playerid, pTemp(playerid)[pt_NAME], params);
	ProxDetector(playerid, 15.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 1;
}

CMD:do(playerid, params[])
{
	if(isnull(params)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/do [TEXTO]");

    new str_text[190];
    format(str_text, sizeof(str_text), "* %s (( %s ))", pTemp(playerid)[pt_NAME], params);
	ProxDetector(playerid, 15.0, str_text, PLAYER_ENVIROMENT_COLOR, PLAYER_ENVIROMENT_COLOR, PLAYER_ENVIROMENT_COLOR, PLAYER_ENVIROMENT_COLOR, PLAYER_ENVIROMENT_COLOR, 85);
	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/me [TEXTO]");
	
	SendPlayerAction(playerid, params);
	return 1;
}
alias:me("y");

CMD:experiencia(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ShowPlayerSkills(playerid, playerid);
	return 1;
}
alias:experiencia("exp", "skills");

CMD:est(playerid, params[])
{
	ShowPlayerStats(playerid, playerid);
	return 1;
}
alias:est("estadisticas", "cuenta");

CMD:inv(playerid, params[])
{
	ShowPlayerInventory(playerid, playerid);
	return 1;
}

CMD:web(playerid, params[])
{
	SendClientMessage(playerid, -1, "Web: {a7f442}"SERVER_WEBSITE"");
	return 1;
}

ptask AutoSavePlayerData[30000](playerid)
{
	if(pTemp(playerid)[pt_USER_LOGGED])
	{
		SavePlayerData(playerid);
		SavePlayerVehicles(playerid, false);
		SavePlayerToys(playerid);
		SavePlayerWeaponsData(playerid);
		SavePlayerWorkLevels(playerid);
	}
}

#define TIP_MESSAGES_INTERVAL	5 * 60000 //5 minutos
ptask TipMessages[TIP_MESSAGES_INTERVAL](playerid)
{
	if(pTemp(playerid)[pt_USER_LOGGED])
	{
		SendClientMessagef(playerid, ORANGE_COLOR2, "[Consejo] {d1d1d1}%s.", RandomTipsMessages[ random(sizeof(RandomTipsMessages)) ]);
	}
}

CMD:ayuda(playerid, params[])
{
	switch(YHash(params, false))
	{
		case _I<general>: ShowDialog(playerid, DIALOG_HELP_GENERAL);
		case _I<informacion>: ShowDialog(playerid, DIALOG_HELP_INFO);
		case _I<personaje>: ShowDialog(playerid, DIALOG_HELP_CHARACTER);
		case _I<propiedades>: ShowDialog(playerid, DIALOG_HELP_PROPERTIES);
		case _I<reportar>: ShowDialog(playerid, DIALOG_HELP_REPORT);
		case _I<trabajos>: ShowDialog(playerid, DIALOG_HELP_WORKS);
		case _I<vehiculos>: ShowDialog(playerid, DIALOG_HELP_VEHICLES);
		case _I<bandas>: ShowDialog(playerid, DIALOG_HELP_CREWS);
		case _I<vip>: ShowDialog(playerid, DIALOG_HELP_VIP);

		default: ShowDialog(playerid, DIALOG_HELP);
	}
	return 1;
}

CMD:accesorios(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_TOYS);
	return 1;
}

CMD:armas(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_WEAPONS);
	return 1;
}

CMD:ropa(playerid, params[])
{
	if(pTemp(playerid)[pt_INTERIOR_INDEX] == -1) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	pTemp(playerid)[pt_CLOTHING_SHOP] = GetClothingShopIndexByIntType(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(pTemp(playerid)[pt_CLOTHING_SHOP] == -1) return SendMessage(playerid, "No estás en el lugar adecuado.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[pTemp(playerid)[pt_CLOTHING_SHOP]][clothing_shop_X], Clothing_Shop_Positions[pTemp(playerid)[pt_CLOTHING_SHOP]][clothing_shop_Y], Clothing_Shop_Positions[pTemp(playerid)[pt_CLOTHING_SHOP]][clothing_shop_Z])) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
	SetPlayerPosEx(playerid, 257.251373, -40.797775, 1002.023437, 135.0, 14, playerid + MAX_PLAYERS, false); // World = Playerid + Max_players
	TogglePlayerControllableEx(playerid, false);
	
	SetPlayerCameraPos(playerid, 254.988632, -43.060516, 1002.9131);
	SetPlayerCameraLookAt(playerid, 257.251373, -40.797775, 1002.023437);
	
	UpdateClothingShop(playerid);
	ShowClothingShopTextdraws(playerid);
	
	SendClientMessagef(playerid, -1, "Pulsa 'ESCAPE' para dejar de probarte ropa.");
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

CMD:toys(playerid, params[])
{
	if(pTemp(playerid)[pt_INTERIOR_INDEX] == -1) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	new shop = GetClothingShopIndexByIntType(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(shop == -1) return SendMessage(playerid, "No estás en el lugar adecuado.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[shop][clothing_shop_X], Clothing_Shop_Positions[shop][clothing_shop_Y], Clothing_Shop_Positions[shop][clothing_shop_Z])) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	pTemp(playerid)[pt_TOYS_SHOP] = true;
	
	SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS);
	TogglePlayerControllableEx(playerid, false);
	
	UpdateToysShop(playerid);
	ShowToysShopTextdraws(playerid);
	
	SendClientMessagef(playerid, -1, "Pulsa 'ESCAPE' para salir del menú.");
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

CMD:pedir(playerid, params[])
{
	new index = GetPlayerFastFoodIndex(playerid);
	if(index == -10) return SendMessage(playerid, "No estás en el lugar adecuado.");

	switch(Fast_Food_Positions[index][fast_food_INTERIOR_TYPE])
	{
		case INTERIOR_BURGER_SHOT: ShowDialog(playerid, DIALOG_FOOD_BURGER);
		case INTERIOR_PIZZA: ShowDialog(playerid, DIALOG_FOOD_PIZZA);
		case INTERIOR_CLUCKIN_BELL: ShowDialog(playerid, DIALOG_FOOD_CLUCKIN);
		case -1: ShowDialog(playerid, DIALOG_FOOD_BURGER);
	}
	return 1;
}

CMD:productos(playerid, params[])
{
	if(pTemp(playerid)[pt_INTERIOR_INDEX] == -1) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_247) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -27.964675, -89.948631, 1003.546875)) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	ShowDialog(playerid, DIALOG_247_LIST);
	return 1;
}

CMD:gps(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_GPS])
	{
		SendClientMessagef(playerid, -1, "No tienes ningún GPS, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	
	Auto_SendPlayerAction(playerid, "mira su GPS.");
	ShowDialog(playerid, DIALOG_PLAYER_GPS);
	return 1;
}

CMD:gtp(playerid)
{
	if(pTemp(playerid)[pt_GPS_TELEPORT])
	{
		SendMessage(playerid, "Desactivaste el movimiento rapido via ~r~/gps");
		pTemp(playerid)[pt_GPS_TELEPORT] = false;
	}
	else
	{
		SendMessage(playerid, "Activaste el movimiento rapido via ~g~/gps");
		pTemp(playerid)[pt_GPS_TELEPORT] = true;
	}
	return 1;
}

CMD:tiempo(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL)
	{
		new time = PI[playerid][pi_POLICE_JAIL_TIME] - (gettime() - pTemp(playerid)[pt_ENTER_JAIL_TIME]);
		if(time <= 0)
		{
			UnjailPlayer(playerid);
			return 1;
		}
		SendClientMessagef(playerid, -1, "Te quedan %s minutos de condena.", TimeConvert(time));
	}
	else SendClientMessagef(playerid, -1, "No estás en la cárcel.");
	return 1;
}

CMD:mapa(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_GPS])
	{
		SendClientMessagef(playerid, -1, "No tienes ningún GPS, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	
	if(pTemp(playerid)[pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	else ShowPlayerGpsMap(playerid);
	return 1;
}

CMD:mp3(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_MP3])
	{
		SendClientMessagef(playerid, -1, "No tienes ningún MP3, puedes ir a cualquier 24/7 para comprar uno.");
		PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	if(pTemp(playerid)[pt_PLAYER_WAITING_MP3_HTTP]) return SendClientMessagef(playerid, -1, "Espera que termine la búsqueda actual.");
	
	pTemp(playerid)[pt_MUSIC_FOR_PROPERTY] = false;
	pTemp(playerid)[pt_MUSIC_FOR_VEHICLE] = false;
	pTemp(playerid)[pt_MUSIC_FOR_SPEAKERS] = false;
	Auto_SendPlayerAction(playerid, "busca música en su MP3.");
	ShowDialog(playerid, DIALOG_PLAYER_MP3);
	return 1;
}

CMD:amp3(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	//if(GetPlayerInterior(playerid)) return SendClientMessagef(playerid, -1, "No puedes hacer esto en un interior");
	if(!PI[playerid][pi_SPEAKERS])
	{
		SendClientMessagef(playerid, -1, "No tienes altavoces, puedes ir a cualquier 24/7 para comprarlos.");
		PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	if(pTemp(playerid)[pt_PLAYER_WAITING_MP3_HTTP]) return SendClientMessagef(playerid, -1, "Espera que termine la búsqueda actual.");
	
	if(gettime() < pTemp(playerid)[pt_SPEAKERS_TIME] + 120)
	{
		new time = (120-(gettime()-pTemp(playerid)[pt_SPEAKERS_TIME]));
		SendClientMessagef(playerid, -1, "Tienes que esperar %s minutos para volver a utilizar los altavoces.", TimeConvert(time));
		return 1;
	}

	pTemp(playerid)[pt_MUSIC_FOR_SPEAKERS] = true;
	Auto_SendPlayerAction(playerid, "busca música en su MP3.");
	ShowDialog(playerid, DIALOG_PLAYER_MP3);
	return 1;
}

CMD:vmp3(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessagef(playerid, -1, "No conduces ningún vehículo.");
	if(!PI[playerid][pi_MP3])
	{
		SendClientMessagef(playerid, -1, "No tienes ningún MP3, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(pTemp(playerid)[pt_PLAYER_WAITING_MP3_HTTP]) return SendClientMessagef(playerid, -1, "Espera que termine la búsqueda actual.");
	
	pTemp(playerid)[pt_MUSIC_FOR_VEHICLE] = true;
	Auto_SendPlayerAction(playerid, "busca música en su MP3.");
	ShowDialog(playerid, DIALOG_PLAYER_MP3);
	return 1;
}

CMD:stop(playerid, params[])
{
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:pass(playerid, params[])
{
	ShowDialog(playerid, DIALOG_CHANGE_PASSWORD);
	return 1;
}
alias:pass("contra", "cpass");

CMD:gcp(playerid, params[])
{
	if(IsValidDynamicCP(pTemp(playerid)[pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(pTemp(playerid)[pt_GPS_CHECKPOINT]);
		pTemp(playerid)[pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
		
		SendClientMessagef(playerid, -1, "Has cancelado la ruta antigua de tu GPS.");
	}
	else SendClientMessagef(playerid, -1, "No tienes ningún punto marcado en tu GPS.");
	return 1;
}

CMD:movil(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER])
	{
		SendClientMessagef(playerid, -1, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(pTemp(playerid)[pt_PLAYER_IN_CALL]) SendClientMessagef(playerid, -1, "Estás en una llamada.");
	
	if(!pTemp(playerid)[pt_PHONE_COMMANDS_MESSAGE])
	{
		pTemp(playerid)[pt_PHONE_COMMANDS_MESSAGE] = true;
		SendClientMessagef(playerid, -1, "Recuerda que también puedes usar /agenda, /llamar, /sms, /tienda.");
	}
	
	Auto_SendPlayerAction(playerid, "mira su teléfono.");
	ShowDialog(playerid, DIALOG_PHONE);
	return 1;
}
alias:movil("celular", "telefono", "tlf");

CMD:guia(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_RESOLVER])
	{
		SendClientMessagef(playerid, -1, "No tienes una guía telefónica, puedes ir a cualquier 24/7 para comprar una.");
		return 1;
	}
	
	if(sscanf(params, "u", params[0])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/guia [PlayerID/Nombre]");
	if(!IsPlayerConnected(params[0])) return SendClientMessagef(playerid, -1, "Jugador desconectado.");
	
	if(!PI[params[0]][pi_PHONE_NUMBER]) return SendClientMessagef(playerid, -1, "Este jugador no tiene teléfono.");
	if(!PI[params[0]][pi_PHONE_VISIBLE_NUMBER]) return SendClientMessagef(playerid, -1, "Este jugador ha decidido no mostrar su número en la guía.");
	
	SendClientMessagef(playerid, -1, "Persona encontrada:Nombre: %sTeléfono: %d.", PlayerTemp[params[0]][pt_NAME], PI[params[0]][pi_PHONE_NUMBER]);
	return 1;
}

CMD:sguia(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER])
	{
		SendClientMessagef(playerid, -1, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	
	if(PI[playerid][pi_PHONE_VISIBLE_NUMBER])
	{
		PI[playerid][pi_PHONE_VISIBLE_NUMBER] = false;
		SendClientMessagef(playerid, -1, "Tu número no aparecerá ahora en la guía telefónica.");
	}
	else
	{
		PI[playerid][pi_PHONE_VISIBLE_NUMBER] = true;
		SendClientMessagef(playerid, -1, "Tu número aparecerá en la guía telefónica.");
	}
	return 1;
}

CMD:sms(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER])
	{
		SendClientMessagef(playerid, -1, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "Tu teléfono está apagado, para encenderlo usa /movil.");
	if(pTemp(playerid)[pt_PLAYER_IN_CALL]) return SendClientMessagef(playerid, -1, "Estás en una llamada.");
	
	new params_message[64], params_number, params_contact[24];
	if(!sscanf(params, "ds[64]", params_number, params_message))
	{
		if(params_number <= 0) SendClientMessagef(playerid, -1, "El número destino no es válido.");
		else
		{
			inline OnPhoneChecked()
			{
				new rows;
				if(get_rows(rows))
				{
					if(rows)
					{
						new id, connected, pid;
						reg_int(0, "id", id);
						reg_int(0, "connected", connected);
						reg_int(0, "playerid", pid);

						if(connected) RegisterPhoneMessage(PI[playerid][pi_ID], id, params_message, 0);
						else RegisterPhoneMessage(PI[playerid][pi_ID], id, params_message, 1);
						if(connected)
						{
							if(PI[pid][pi_PHONE_STATE] == PHONE_STATE_ON)
							{
								SendClientMessagef(pid, -1, "{"#BLUE_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(pid, PI[playerid][pi_PHONE_NUMBER]), params_message);
							}
						}
						SendClientMessagef(playerid, -1, "Mensaje enviado a %s.", convertPhoneNumber(playerid, params_number));
					}
					else SendClientMessagef(playerid, -1, "El número destino no es válido.");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, connected, playerid FROM player WHERE phone_number = %d;", params_number);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPhoneChecked);
		}
	}
	else if(!sscanf(params, "s[24]s[64]", params_contact, params_message))
	{
		inline OnPhoneChecked()
		{
			new rows;
			if(get_rows(rows))
			{
				if(rows)
				{
					new number, id, connected, pid, bool:isnull_id;
					cache_is_value_name_null(0, "id", isnull_id);
					if(!isnull_id) {
						reg_int(0, "number", number);
						reg_int(0, "id", id);
						reg_int(0, "connected", connected);
						reg_int(0, "playerid", pid);

						if(connected) RegisterPhoneMessage(PI[playerid][pi_ID], id, params_message, 0);
						else RegisterPhoneMessage(PI[playerid][pi_ID], id, params_message, 1);

						if(connected)
						{
							if(PI[pid][pi_PHONE_STATE] == PHONE_STATE_ON)
							{
								SendClientMessagef(pid, -1, "{"#BLUE_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(pid, PI[playerid][pi_PHONE_NUMBER]), params_message);
							}
						}
						SendClientMessagef(playerid, -1, "Mensaje enviado a %s.", convertPhoneNumber(playerid, number));
					}
					else SendClientMessagef(playerid, -1, "El número destino no es válido.");
				}
				else SendClientMessagef(playerid, -1, "El número destino no es válido.");
			}
		}
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pbook.number, player.id, player.connected, player.playerid FROM pbook LEFT JOIN player ON pbook.number = player.phone_number WHERE pbook.id_player = %d AND pbook.name LIKE '%%%e%%' LIMIT 1;", PI[playerid][pi_ID], params_contact);
		mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPhoneChecked);
	}
	else SendClientMessagef(playerid, -1, "Usa /sms [numero o contacto]");
	return 1;
}

CMD:agenda(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER])
	{
		SendClientMessagef(playerid, -1, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "Tu teléfono está apagado, para encenderlo usa /movil.");
	if(pTemp(playerid)[pt_PLAYER_IN_CALL]) return SendClientMessagef(playerid, -1, "Estás en una llamada.");
	
	ShowDialog(playerid, DIALOG_PHONE_BOOK);
	return 1;
}

CMD:tienda(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER])
	{
		SendClientMessagef(playerid, -1, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "Tu teléfono está apagado, para encenderlo usa /movil.");
	ShowPlayerShop(playerid);
	return 1;
}

HandleStaticPhoneNumbers(playerid, call_number)
{
	switch(call_number)
	{
		case 911:
		{
			if(PI[playerid][pi_LEVEL] < 2) return SendClientMessagef(playerid, -1, "Debes ser al menos nivel 2 para llamar a la policía.");
			pTemp(playerid)[pt_PLAYER_IN_CALL] = true;
			pTemp(playerid)[pt_POLICE_CALL_NAME] = true;
			pTemp(playerid)[pt_POLICE_CALL_DESCRIPTION] = false;
			
			SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Operadora: ha llamado a la central de policía, indícanos su nombre por favor.");
			return 1;
		}
		case 450: //Uber
		{
			if(pTemp(playerid)[pt_WANT_TAXI])
			{
				pTemp(playerid)[pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);
				SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Has cancelado el uber.");
			}
			else
			{
				pTemp(playerid)[pt_WANT_TAXI] = true;
				SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Tu llamada se ha enviado a los Ubers disponibles, espera a que llegue un uber.");
				SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Vuelve a llamar a este número si ya no necesitas un uber.");
				SendAlertToTaxiDrivers(playerid);
			}
			return 1;
		}
		case 6740:
		{
			SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}No vuelvas a llamar al banco, cuidado.");
			return 1;
		}
		case 38350:
		{
			SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Aseguradora que asegura tus vehículos de mierda.");
			return 1;
		}
		case 666:
		{
			SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Mirar a las estrellas es mirar al pasado, no mires.");
			return 1;
		}
	}
	return 0;
}

CMD:llamar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER])
	{
		SendClientMessagef(playerid, -1, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "Tu teléfono está apagado, para encenderlo usa /movil.");
	if(pTemp(playerid)[pt_PLAYER_IN_CALL]) return SendClientMessagef(playerid, -1, "Estás en una llamada.");

	new params_number, params_contact[24];
	if(!sscanf(params, "d", params_number))
	{
		if(params_number <= 0) SendClientMessagef(playerid, -1, "El número destino no es válido.");
		else
		{
			if(!HandleStaticPhoneNumbers(playerid, params_number))
			{
				inline OnPhoneChecked()
				{
					new rows;
					if(get_rows(rows))
					{
						if(rows)
						{
							new id, connected, pid;
							reg_int(0, "id", id);
							reg_int(0, "connected", connected);
							reg_int(0, "playerid", pid);

							if(!connected) SendClientMessagef(playerid, -1, "El número al que intentas llamar está fuera de cobertura (desconectado).");
							else
							{
								if(pid == playerid) return SendClientMessagef(playerid, -1, "El número al que intentas llamar es el tuyo.");
								if(PI[pid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "El número al que intentas llamar está apagado o fuera de cobertura.");
								if(PlayerTemp[pid][pt_PLAYER_IN_CALL]) return SendClientMessagef(playerid, -1, "El número al que intentas llamar está en otra llamada.");
								
								SendClientMessagef(pid, -1, "[Llamada entrante] %s te está llamando, para responser usa /responder o /colgar.", convertPhoneNumber(pid, PI[playerid][pi_PHONE_NUMBER]));
								PlayerTemp[pid][pt_PLAYER_IN_CALL] = true;
								PlayerTemp[pid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
								PlayerTemp[pid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;
								
								SendClientMessagef(playerid, -1, "Llamando a %s...", convertPhoneNumber(playerid, params_number));
								pTemp(playerid)[pt_TIMERS][6] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
								pTemp(playerid)[pt_PLAYER_IN_CALL] = true;
								pTemp(playerid)[pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
								pTemp(playerid)[pt_PLAYER_PHONE_CALL_PLAYERID] = pid;
								PlayerPlaySoundEx(playerid, 3600, 0.0, 0.0, 0.0);
							}
						}
						else SendClientMessagef(playerid, -1, "El número destino no es válido.");
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, connected, playerid FROM player WHERE phone_number = %d;", params_number);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPhoneChecked);
			}
		}
	}
	else if(!sscanf(params, "s[24]", params_contact))
	{
		if(!strcmp(params_contact, "policía", true)) HandleStaticPhoneNumbers(playerid, 911);
		else if(!strcmp(params_contact, "uber", true)) HandleStaticPhoneNumbers(playerid, 450);
		else if(!strcmp(params_contact, "mecanico", true)) HandleStaticPhoneNumbers(playerid, 570);
		else
		{
			inline OnPhoneChecked()
			{
				new rows;
				if(get_rows(rows))
				{
					if(rows)
					{
						new number, id, connected, pid, bool:isnull_id;
						cache_is_value_name_null(0, "id", isnull_id);
						if(!isnull_id) {
							reg_int(0, "number", number);
							reg_int(0, "id", id);
							reg_int(0, "connected", connected);
							reg_int(0, "playerid", pid);

							if(!connected) SendClientMessagef(playerid, -1, "El número al que intentas llamar está fuera de cobertura (desconectado).");
							else
							{
								if(pid == playerid) return SendClientMessagef(playerid, -1, "El número al que intentas llamar es el tuyo.");
								if(PI[pid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "El número al que intentas llamar está apagado o fuera de cobertura.");
								if(PlayerTemp[pid][pt_PLAYER_IN_CALL]) return SendClientMessagef(playerid, -1, "El número al que intentas llamar está en otra llamada.");
								
								SendClientMessagef(pid, -1, "[Llamada entrante] %s te está llamando, para responser usa /responder o /colgar.", convertPhoneNumber(pid, PI[playerid][pi_PHONE_NUMBER]));
								PlayerTemp[pid][pt_PLAYER_IN_CALL] = true;
								PlayerTemp[pid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
								PlayerTemp[pid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;
								
								SendClientMessagef(playerid, -1, "Llamando a %s...", convertPhoneNumber(playerid, number));
								pTemp(playerid)[pt_TIMERS][6] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
								pTemp(playerid)[pt_PLAYER_IN_CALL] = true;
								pTemp(playerid)[pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
								pTemp(playerid)[pt_PLAYER_PHONE_CALL_PLAYERID] = pid;
								PlayerPlaySoundEx(playerid, 3600, 0.0, 0.0, 0.0);
							}
						}
						else SendClientMessagef(playerid, -1, "El número destino no es válido.");
					}
					else SendClientMessagef(playerid, -1, "El número destino no es válido.");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pbook.number, player.id, player.connected, player.playerid FROM pbook LEFT JOIN player ON pbook.number = player.phone_number WHERE pbook.id_player = %d AND pbook.name LIKE '%%%e%%' LIMIT 1;", PI[playerid][pi_ID], params_contact);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPhoneChecked);
		}
	}
	else SendClientMessagef(playerid, -1, "Usa /llamar [numero o contacto]");
	return 1;
}

CMD:responder(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER])
	{
		SendClientMessagef(playerid, -1, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "Tu teléfono está apagado, para encenderlo usa /movil.");
	
	if(!pTemp(playerid)[pt_PLAYER_IN_CALL]) return SendClientMessagef(playerid, -1, "No hay ninguna llamada entrante.");
	if(pTemp(playerid)[pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return SendClientMessagef(playerid, -1, "No hay ninguna llamada entrante."); 
	if(pTemp(playerid)[pt_PLAYER_PHONE_CALL_STATE] != CALL_STATE_INCOMING_CALL) return SendClientMessagef(playerid, -1, "No hay ninguna llamada entrante.");
	
	new to_playerid = pTemp(playerid)[pt_PLAYER_PHONE_CALL_PLAYERID];
	
	pTemp(playerid)[pt_PLAYER_IN_CALL] = true;
	pTemp(playerid)[pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_ESTABLISHED;
	pTemp(playerid)[pt_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	
	KillTimer(PlayerTemp[to_playerid][pt_TIMERS][6]);
	PlayerTemp[to_playerid][pt_PLAYER_IN_CALL] = true;
	PlayerTemp[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_ESTABLISHED;
	PlayerTemp[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;
	SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_USECELLPHONE);
	
	SendClientMessagef(playerid, -1, "Llamada establecida, usa /colgar para terminarla.");
	SendClientMessagef(to_playerid, -1, "Llamada establecida, usa /colgar para terminarla.");
	return 1;
}

CMD:colgar(playerid, params[])
{
	if(!PI[playerid][pi_PHONE_NUMBER])
	{
		SendClientMessagef(playerid, -1, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "Tu teléfono está apagado, para encenderlo usa /movil.");
	
	if(!pTemp(playerid)[pt_PLAYER_IN_CALL]) return SendClientMessagef(playerid, -1, "No hay ninguna llamada entrante.");
	
	if(pTemp(playerid)[pt_POLICE_CALL_NAME] || pTemp(playerid)[pt_POLICE_CALL_DESCRIPTION])
	{
		pTemp(playerid)[pt_PLAYER_IN_CALL] = false;
		pTemp(playerid)[pt_POLICE_CALL_NAME] = false;
		pTemp(playerid)[pt_POLICE_CALL_DESCRIPTION] = false;
		SendClientMessagef(playerid, -1, "Llamada finalizada.");
		return 1;
	}
	
	if(pTemp(playerid)[pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return SendClientMessagef(playerid, -1, "No hay ninguna llamada entrante."); 
	
	switch(pTemp(playerid)[pt_PLAYER_PHONE_CALL_STATE])
	{
		case CALL_STATE_WAITING_RESPONSE:
		{
			EndPhoneCall(playerid);
			SendClientMessagef(playerid, -1, "Colgaste.");
		}
		case CALL_STATE_INCOMING_CALL:
		{
			EndPhoneCall(playerid);
			SendClientMessagef(playerid, -1, "No has respondido la llamada.");
		}
		case CALL_STATE_ESTABLISHED:
		{
			EndPhoneCall(playerid);
			SendClientMessagef(playerid, -1, "Llamada finalizada.");
		}
		default: SendClientMessagef(playerid, -1, "No estás en ninguna llamada.");	
	}
	return 1;
}

CMD:panel(playerid, params[])
{
	ShowDialog(playerid, DIALOG_PLAYER_CONFIG);
	return 1;
}
alias:panel("config", "configuracion", "ajustes");

CMD:comprarcasa(playerid, params[])
{
	if(pTemp(playerid)[pt_INTERIOR_INDEX] == -1) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return SendMessage(playerid, "No estás en el lugar adecuado.");

	
	new site_index = GetBuyPropertySiteIndexByIntTyp(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(site_index == -1) return SendMessage(playerid, "No estás en el lugar adecuado.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, BUY_PROPERTIES_SITES[site_index][site_X], BUY_PROPERTIES_SITES[site_index][site_Y], BUY_PROPERTIES_SITES[site_index][site_Z])) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	if(PI[playerid][pi_BANK_ACCOUNT] == 0) return SendClientMessagef(playerid, -1, "No puedes comprar una casa sin tener cuenta bancaria.");

	if(sscanf(params, "d", params[0])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/comprarcasa [ID]");
	if(params[0] <= 0) return SendClientMessagef(playerid, -1, "Error: ID no es válida.");
	
	new player_properties = CountPlayerProperties(playerid);
	if(PI[playerid][pi_VIP])
	{
		if(player_properties >= MAX_SU_PROPERTIES) return SendClientMessagef(playerid, -1, "No puedes comprar más propiedades.");
	}
	else
	{
		if(player_properties >= MAX_NU_PROPERTIES)
		{
			SendClientMessagef(playerid, -1, "¡Los jugadores VIP pueden tener hasta %d propiedades! Usa /ayuda si quieres ser VIP.", MAX_SU_PROPERTIES);
			SendClientMessagef(playerid, -1, "No puedes comprar más propiedades.");
			return 1;
		}
	}
	
	new index = GetPropertyIndexByID(params[0]);
	if(index == -1) return SendClientMessagef(playerid, -1, "Error: ID no es válida.");
	
	if(PROPERTY_INFO[index][property_SOLD]) return SendClientMessagef(playerid, -1, "Está propiedad ya está vendida.");
	if(PROPERTY_INFO[index][property_LEVEL] > PI[playerid][pi_LEVEL]) return SendClientMessagef(playerid, -1, "Necesitas ser como mínimo nivel %d para comprar esta propiedad.", PROPERTY_INFO[index][property_LEVEL]);
	if(PROPERTY_INFO[index][property_VIP_LEVEL] > PI[playerid][pi_VIP]) return SendClientMessagef(playerid, -1, "Necesitas membresía VIP (%d) para comprar esta propiedad.", PROPERTY_INFO[index][property_VIP_LEVEL]);
	if(PROPERTY_INFO[index][property_EXTRA] > PI[playerid][pi_COINS]) return SendClientMessagef(playerid, -1, "Necesitas %d "SERVER_COIN" para comprar esta propiedad.", PROPERTY_INFO[index][property_EXTRA]);
	if(PI[playerid][pi_BANK_MONEY] >= PROPERTY_INFO[index][property_PRICE])
	{
		pTemp(playerid)[pt_BUY_HOUSE_INDEX] = index;
		ShowDialog(playerid, DIALOG_CONFIRM_BUY_PROPERTY);
	}
	else SendClientMessagef(playerid, -1, "No tienes fondos suficientes en tu cuenta, te faltan %s dólares para poder comprar esta propiedad.", number_format_thousand(PROPERTY_INFO[index][property_PRICE] - PI[playerid][pi_BANK_MONEY]));
	return 1;
}

GetPropertyIndexByID(id)
{
	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if(!PROPERTY_INFO[i][property_VALID]) continue;
		if(PROPERTY_INFO[i][property_ID] == id) return i;
	}
	return -1;
}

CMD:banco(playerid, params[])
{
	if(pTemp(playerid)[pt_INTERIOR_INDEX] == -1) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return SendMessage(playerid, "No estás en el lugar adecuado.");

	
	new index = GetBankLocalIndexByIntType(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(index == -1) return SendMessage(playerid, "No estás en el lugar adecuado.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Bank_Interior_Positions[index][bank_X], Bank_Interior_Positions[index][bank_Y], Bank_Interior_Positions[index][bank_Z])) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	if(PI[playerid][pi_BANK_ACCOUNT] == 0) // no tiene cuenta bancaria
	{
		ShowDialog(playerid, DIALOG_CREATE_BANK_ACCOUNT);
		return 1;
	}
	ShowDialog(playerid, DIALOG_BANK);
	return 1;
}

CMD:cajero(playerid, params[])
{
	if(pTemp(playerid)[pt_LAST_PICKUP_ID] == 0) return SendMessage(playerid, "No estás en el lugar adecuado.");

	new info[3];
	new Float:pos[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] != PICKUP_TYPE_ATM) return SendMessage(playerid, "No estás en el lugar adecuado.");

	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendMessage(playerid, "No estás en el lugar adecuado.");

	if(PI[playerid][pi_BANK_ACCOUNT] == 0)
	{
		SendClientMessagef(playerid, -1, "No tienes cuenta bancaria, puedes crearla en cualquier Banco.");
		return 1;
	}
	
	pTemp(playerid)[pt_PLAYER_IN_ATM] = true;
	ShowDialog(playerid, DIALOG_BANK);
	return 1;
}

CMD:alimentos(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_POCKET);
	return 1;
}

#define TIME_BETWEEN_GIVE_CASH	30 // segundos
CMD:dar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(PI[playerid][pi_LEVEL] < 2) return SendClientMessagef(playerid, -1, "Debes ser al menos nivel 2 para usar este comando.");
	
	new option[24], to_playerid, extra;
	if(sscanf(params, "s[24]ud", option, to_playerid, extra)) return SendClientMessagef(playerid, -1, "Error en los parámetros, utilice {"#SILVER_COLOR"}/man dar.");
	
	if(!IsPlayerConnected(to_playerid)) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(to_playerid, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
	if(PlayerTemp[to_playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No puedes darle nada a este jugador ahora.");
	
	switch(YHash(option, false))
	{
		case _I<dinero>:
		{
			if(gettime() < pTemp(playerid)[pt_LAST_GIVE_MONEY_TIME] + TIME_BETWEEN_GIVE_CASH)
			{
				new time = TIME_BETWEEN_GIVE_CASH - (gettime() - pTemp(playerid)[pt_LAST_GIVE_MONEY_TIME]);
				SendClientMessagef(playerid, -1, "Debes de esperar %s minutos para volver a dar dinero.", TimeConvert(time));
				return 1;
			}
			
			if(extra < 0 || extra > PI[playerid][pi_CASH]) return SendClientMessagef(playerid, -1, "Cantidad de dinero incorrecta.");
			if(extra > 30000000) return SendClientMessagef(playerid, -1, "Para dar tanto dinero tienes que hacerlo a través de transferencias bancarias.");
			
			if(GivePlayerCash(playerid, -extra, true, true) && GivePlayerCash(to_playerid, extra, true, false)) {
				SendClientMessagef(playerid, -1, "Le has dado %s dólares a %s.", number_format_thousand(extra), PlayerTemp[to_playerid][pt_NAME]);
				SendClientMessagef(to_playerid, -1, "%s te ha dado %s dólares.", pTemp(playerid)[pt_NAME], number_format_thousand(extra));
				
				new action[64];
				format(action, sizeof action, "le da dinero a %s.", PlayerTemp[to_playerid][pt_NAME]);
				Auto_SendPlayerAction(playerid, action);
				pTemp(playerid)[pt_LAST_GIVE_MONEY_TIME] = gettime();
			}
		}
		case _I<alimento>:
		{
			if(extra < 1 || extra > MAX_PLAYER_POCKET_OBJECTS) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/dar alimento [ID o Nombre] [Slot /alimentos]");
		
			extra --;
			
			if(!PLAYER_POCKET[playerid][extra][player_pocket_VALID]) return SendClientMessagef(playerid, -1, "No tienes nada en ese slot.");
			
			new to_player_slot = GetEmptyPlayerPocketSlot(to_playerid);
			if(to_player_slot == -1)
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessagef(playerid, -1, "El jugador no tiene más espacio entre sus alimentos.");
				return 1;
			}
			
			new action[64];
			format(action, sizeof action, "le da su %s a %s.", PLAYER_POCKET[playerid][extra][player_pocket_object_NAME], PlayerTemp[to_playerid][pt_NAME]);
			Auto_SendPlayerAction(playerid, action);
			
			TransferPlayerPocketObject(playerid, extra, to_playerid, to_player_slot);
		}
		case _I<medicamentos>:
		{
			if(extra <= 0 || extra > 10000000) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_MEDICINE]) return SendClientMessagef(playerid, -1, "No tienes esa cantidad.");
			
			PI[playerid][pi_MEDICINE] -= extra;
			PI[to_playerid][pi_MEDICINE] += extra;
			
			SendClientMessagef(playerid, -1, "Le has dado %d gramos de medicamentos a %s.", extra, PlayerTemp[to_playerid][pt_NAME]);
			SendClientMessagef(to_playerid, -1, "%s te ha dado %d gramos de medicamentos.", pTemp(playerid)[pt_NAME], extra);
	
			new action[64];
			format(action, sizeof action, "le da algo a %s.", PlayerTemp[to_playerid][pt_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		case _I<marihuana>:
		{
			if(extra <= 0 || extra > 10000000) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_CANNABIS]) return SendClientMessagef(playerid, -1, "No tienes esa cantidad.");
			
			PI[playerid][pi_CANNABIS] -= extra;
			PI[to_playerid][pi_CANNABIS] += extra;
			
			SendClientMessagef(playerid, -1, "Le has dado %dg de marihuana a %s.", extra, PlayerTemp[to_playerid][pt_NAME]);
			SendClientMessagef(to_playerid, -1, "%s te ha dado %dg de marihuana.", pTemp(playerid)[pt_NAME], extra);
			
			new action[64];
			format(action, sizeof action, "le da algo a %s.", PlayerTemp[to_playerid][pt_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		case _I<crack>:
		{
			if(extra <= 0 || extra > 10000000) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_CRACK]) return SendClientMessagef(playerid, -1, "No tienes esa cantidad.");
			
			PI[playerid][pi_CRACK] -= extra;
			PI[to_playerid][pi_CRACK] += extra;
			
			SendClientMessagef(playerid, -1, "Le has dado %d gramos de crack a %s.", extra, PlayerTemp[to_playerid][pt_NAME]);
			SendClientMessagef(to_playerid, -1, "%s te ha dado %d gramos de crack.", pTemp(playerid)[pt_NAME], extra);
			
			new action[64];
			format(action, sizeof action, "le da algo a %s.", PlayerTemp[to_playerid][pt_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		case _I<arma>:
		{
			if(GetPlayerWork(playerid, WORK_POLICE)) return SendMessage(playerid, "~r~No puedes hacer esto.");
			if(extra < 0 || extra >= sizeof PLAYER_WEAPONS[]) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/dar arma [ID o Nombre] [Slot /armas]");
		
			if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID]) return SendClientMessagef(playerid, -1, "No tienes nigún arma en ese slot.");
			
			if(PI[to_playerid][pi_LEVEL] < 2) return SendClientMessagef(playerid, -1, "La otra persona tiene que ser al menos nivel 2.");
			if(PLAYER_WEAPONS[to_playerid][extra][player_weapon_VALID])
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessagef(playerid, -1, "El jugador ya tiene un arma en ese slot.");
				return 1;
			}
			
			SendClientMessagef(playerid, -1, "Le has dado tu '%s' a %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME], PlayerTemp[to_playerid][pt_NAME]);
			SendClientMessagef(to_playerid, -1, "%s te ha dado su '%s'.", pTemp(playerid)[pt_NAME], WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
			
			new action[64];
			format(action, sizeof action, "le da un arma a %s.", PlayerTemp[to_playerid][pt_NAME]);
			Auto_SendPlayerAction(playerid, action);
			
			TransferPlayerWeapon(playerid, extra, to_playerid);
		}
		case _I<kit>:
		{
			if(extra <= 0 || extra > 10000000) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_MECHANIC_KITS]) return SendClientMessagef(playerid, -1, "No tienes esa cantidad.");
			
			PI[playerid][pi_MECHANIC_KITS] -= extra;
			PI[to_playerid][pi_MECHANIC_KITS] += extra;
			
			SendClientMessagef(playerid, -1, "Le has dado %d kits de reparación a %s.", extra, PlayerTemp[to_playerid][pt_NAME]);
			SendClientMessagef(to_playerid, -1, "%s te ha dado %d kits de reparación.", pTemp(playerid)[pt_NAME], extra);
			
			new action[64];
			format(action, sizeof action, "le da algo a %s.", PlayerTemp[to_playerid][pt_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		case _I<botiquin>:
		{
			if(extra <= 0 || extra > 10000000) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_MEDICAL_KITS]) return SendClientMessagef(playerid, -1, "No tienes esa cantidad.");
			
			PI[playerid][pi_MEDICAL_KITS] -= extra;
			PI[to_playerid][pi_MEDICAL_KITS] += extra;
			
			SendClientMessagef(playerid, -1, "Le has dado %d botiquines a %s.", extra, PlayerTemp[to_playerid][pt_NAME]);
			SendClientMessagef(to_playerid, -1, "%s te ha dado %d botiquines.", pTemp(playerid)[pt_NAME], extra);
			
			new action[64];
			format(action, sizeof action, "le da algo a %s.", PlayerTemp[to_playerid][pt_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		default: SendClientMessagef(playerid, -1, "Error en los parámetros, utilice /manual dar.");
	}
	return 1;
}

CMD:vender(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(PI[playerid][pi_LEVEL] < 2) return SendClientMessagef(playerid, -1, "Debes ser al menos nivel 2 para usar este comando.");
	
	new option[24], to_playerid, extra, price;
	if(sscanf(params, "s[24]udd", option, to_playerid, extra, price)) return SendClientMessagef(playerid, -1, "Error en los parámetros, utilice /manual vender.");
	
	if(price <= 0 || price > 10000000) return SendClientMessagef(playerid, -1, "El precio no es válido.");
	if(!IsPlayerConnected(to_playerid)) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(to_playerid, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
	if(PlayerTemp[to_playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No puedes venderle nada a este jugador ahora.");
	
	if(price > PI[to_playerid][pi_CASH])
	{
		SendClientMessagef(playerid, -1, "Esta persona no tiene el dinero que pides.");
		return 1;
	}
	
	PlayerTemp[to_playerid][pt_TRICK_SELLER_PID] = playerid;
	PlayerTemp[to_playerid][pt_TRICK_SELLER_AID] = PI[playerid][pi_ID];
	PlayerTemp[to_playerid][pt_TRICK_PRICE] = price;
	PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] = extra;
	PlayerTemp[to_playerid][pt_TRICK_TIME] = gettime();

	switch(YHash(option, false))
	{
		case _I<alimento>:
		{
			if(PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] < 1 || PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] > MAX_PLAYER_POCKET_OBJECTS) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/vender alimento [ID o Nombre] [Slot /alimentos] [precio]");
			PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] --;
			
			if(!PLAYER_POCKET[playerid][ PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] ][player_pocket_VALID]) return SendClientMessagef(playerid, -1, "No tienes nada en ese slot.");
			
			SendClientMessagef(playerid, -1, "Le has ofrecido una venta a %s, espera a ver si la acepta.", PlayerTemp[to_playerid][pt_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_FOOD);
		}
		case _I<medicamentos>:
		{
			if(PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
			if(PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] > PI[playerid][pi_MEDICINE]) return SendClientMessagef(playerid, -1, "No tienes esa cantidad.");
			
			SendClientMessagef(playerid, -1, "Le has ofrecido una venta a %s, espera a ver si la acepta.", PlayerTemp[to_playerid][pt_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_MEDICINE);
		}
		case _I<marihuana>:
		{
			if(PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
			if(PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] > PI[playerid][pi_CANNABIS]) return SendClientMessagef(playerid, -1, "No tienes esa cantidad.");
			
			SendClientMessagef(playerid, -1, "Le has ofrecido una venta a %s, espera a ver si la acepta.", PlayerTemp[to_playerid][pt_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_CANNABIS);
		}
		case _I<crack>:
		{
			if(PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
			if(PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] > PI[playerid][pi_CRACK]) return SendClientMessagef(playerid, -1, "No tienes esa cantidad.");
			
			SendClientMessagef(playerid, -1, "Le has ofrecido una venta a %s, espera a ver si la acepta.", PlayerTemp[to_playerid][pt_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_CRACK);
		}
		case _I<arma>:
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendClientMessagef(playerid, -1, "Los policías no pueden vender armas.");
			if(PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] < 0 || PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] >= sizeof PLAYER_WEAPONS[]) return SendClientMessagef(playerid, -1, "Error en slot de /armas.");
		
			if(!PLAYER_WEAPONS[playerid][ PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_VALID]) return SendClientMessagef(playerid, -1, "No tienes nigún arma en ese slot.");
			
			if(PI[to_playerid][pi_LEVEL] < 2) return SendClientMessagef(playerid, -1, "La otra persona tiene que ser al menos nivel 2.");
			
			SendClientMessagef(playerid, -1, "Le has ofrecido una venta a %s, espera a ver si la acepta.", PlayerTemp[to_playerid][pt_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_WEAPON);
		}
		case _I<coins>:
		{
			if(PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
			if(PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] > PI[playerid][pi_COINS]) return SendClientMessagef(playerid, -1, "No tienes esa cantidad de "SERVER_COIN".");
			
			SendClientMessagef(playerid, -1, "Le has ofrecido una venta a %s, espera a ver si la acepta.", PlayerTemp[to_playerid][pt_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_SU);
		}
		case _I<kit>:
		{
			if(to_playerid == playerid) return SendMessage(playerid, "No puedes venderte ati mismo.");
			if(!GetPlayerWork(playerid, WORK_MECHANIC)) return SendMessage(playerid, "No eres mecanico.");
			if(!IsPlayerWorking(playerid, WORK_MECHANIC)) return SendMessage(playerid, "No estas de servicio como mecanico.");
			if(PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA] > 3) return SendMessage(playerid, "Cantidad incorrecta (Solo puedes vender 3 kits maximo).");
			if(PlayerTemp[to_playerid][pt_TRICK_PRICE] > 5000) return SendMessage(playerid, "No puedes vender tan caro.");

			new result = PI[to_playerid][pi_MECHANIC_KITS] + PlayerTemp[to_playerid][pt_TRICK_SELLER_EXTRA];
			if(result > 3) return SendMessage(playerid, "Esta persona solo puede tener 3 kits de reparacion.");

			SendClientMessagef(playerid, -1, "Le has ofrecido una venta a %s, espera a ver si la acepta.", PlayerTemp[to_playerid][pt_NAME]);
			ShowDialog(to_playerid, DIALOG_SELL_KIT);
		}
		default: SendClientMessagef(playerid, -1, "Error en los parámetros, utilice /manual vender.");
	}
	return 1;
}

CMD:consumir(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	new option[24], slot;
	if(!sscanf(params, "s[24]d", option, slot))	
	{
		if(!strcmp(option, "alimento", true))
		{
			if(slot < 1 || slot > MAX_PLAYER_POCKET_OBJECTS) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/consumir alimento [SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);
		
			slot --;
			
			if(!PLAYER_POCKET[playerid][slot][player_pocket_VALID]) return SendClientMessagef(playerid, -1, "No tienes nada en ese slot.");
			if(PI[playerid][pi_HUNGRY] >= 99.0 && PI[playerid][pi_THIRST] >= 99.0) return SendClientMessagef(playerid, -1, "¿Es que quieres reventar?");

			Add_Hungry_Thirst(playerid, PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST]);
			GivePlayerDrunkLevel(playerid, PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK]);
			
			new action[64];
			format(action, sizeof action, "consume %s.", PLAYER_POCKET[playerid][slot][player_pocket_object_NAME]);
			Auto_SendPlayerAction(playerid, action);
			
			DeletePlayerPocketObject(playerid, slot);

			ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
			ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
		}
		else SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/consumir [medicamento - marihuana - crack - alimento]");
	}
	else if(!sscanf(params, "s[24]", option))
	{
		switch(YHash(option, false))
		{
			case _I<medicamento>:
			{
				if(pTemp(playerid)[pt_COOLDOWN_MEDICINE] > gettime()) return SendClientMessagef(playerid, -1, "Debes esperar %d segundos para volver a poder consumir medicamentos", pTemp(playerid)[pt_COOLDOWN_MEDICINE] - gettime());

				if(PI[playerid][pi_MEDICINE] <= 0) return SendClientMessagef(playerid, -1, "No tienes medicamentos.");
				
				pTemp(playerid)[pt_COOLDOWN_MEDICINE] = gettime() + 30;
				PI[playerid][pi_MEDICINE] --;
				GivePlayerHealthEx(playerid, 25.0);
				Auto_SendPlayerAction(playerid, "se toma un medicamento.");
			}
			case _I<marihuana>:
			{
				if(pTemp(playerid)[pt_COOLDOWN_WEED] > gettime()) return SendClientMessagef(playerid, -1, "Debes esperar %d segundos para volver a poder consumir marihuana", pTemp(playerid)[pt_COOLDOWN_WEED] - gettime());

				if(PI[playerid][pi_CANNABIS] <= 0) return SendClientMessagef(playerid, -1, "No tienes marihuana.");

				pTemp(playerid)[pt_COOLDOWN_WEED] = gettime() + 30;
				
				PI[playerid][pi_CANNABIS] --;
				GivePlayerHealthEx(playerid, 30.0);
				Auto_SendPlayerAction(playerid, "consume marihuana.");
				GivePlayerDrunkLevel(playerid, 1000);
			}
			case _I<crack>:
			{
				if(pTemp(playerid)[pt_COOLDOWN_CRACK] > gettime()) return SendClientMessagef(playerid, -1, "Debes esperar %d segundos para volver a poder consumir crack", pTemp(playerid)[pt_COOLDOWN_CRACK] - gettime());

				if(PI[playerid][pi_CRACK] <= 0) return SendClientMessagef(playerid, -1, "No tienes crack.");

				pTemp(playerid)[pt_COOLDOWN_CRACK] = gettime() + 30;
				PI[playerid][pi_CRACK] --;
				GivePlayerArmourEx(playerid, 20.0);
				Auto_SendPlayerAction(playerid, "consume crack.");
				GivePlayerDrunkLevel(playerid, 2000);
			}
			case _I<alimento>: SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/consumir alimento [SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);
			
			default: SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/consumir [medicamento - marihuana - crack - alimento]");
		}
	}
	else SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/consumir [medicamento - marihuana - crack - alimento]");
	return 1;
}

CMD:manual(playerid, params[])
{
	switch(YHash(params, false))
	{
		case _I<dar>:
		{
			ShowPlayerDialog
			(
				playerid,
				DIALOG_INFO,
				DIALOG_STYLE_MSGBOX,
				
					"Manual",
						"\
							Comando: dar\n\
							Sintaxis: dar <opcion> <playerid o nombre> <extra>\n\
							\n\
							Este comando sirve para dar algo a otro jugador cercano.\n\
							Para comprobar que tiene el objeto y la cantidad utilice /inv.\n\
							\n\
							Esta es la lista de opciones:\n\
							    - arma <playerid o nombre> <slot de /armas>\n\
							    - dinero <playerid o nombre> <cantidad>\n\
							    - alimento <playerid o nombre> <slot de /alimentos>\n\
							    - medicamentos <playerid o nombre> <cantidad>\n\
							    - marihuana <playerid o nombre> <cantidad>\n\
							    - crack <playerid o nombre> <cantidad>\n\
							    - kit <playerid o nombre> <cantidad>\n\
							\n\
							Para obtener ayuda diferente use /ayuda.\
						",
					"Cerrar", ""
					
			);
			return 1;
		}
		case _I<tirar>:
		{
			ShowPlayerDialog
			(
				playerid,
				DIALOG_INFO,
				DIALOG_STYLE_MSGBOX,
				
					"Manual",
						"\
							Comando: tirar\n\
							Sintaxis: tirar <opcion> <extra>\n\
							\n\
							Este comando sirve para deshacerte de algún objeto.\n\
							\n\
							Esta es la lista de opciones:\n\
							    - arma\n\
							\n\
							Para obtener ayuda diferente use /ayuda.\
						",
					"Cerrar", ""
					
			);
			return 1;
		}
		case _I<vender>:
		{
			ShowPlayerDialog
			(
				playerid,
				DIALOG_INFO,
				DIALOG_STYLE_MSGBOX,
				
					"Manual",
						"\
							{"#SILVER_COLOR"}Comando: vender\n\
							{"#SILVER_COLOR"}Sintaxis: vender <opcion> <playerid o nombre> <extra> <precio>\n\
							\n\
							{"#SILVER_COLOR"}Este comando sirve para vender algo a otro jugador cercano.\n\
							{"#SILVER_COLOR"}Para comprobar que tiene el objeto y la cantidad utilice /inv.\n\
							\n\
							{"#SILVER_COLOR"}Esta es la lista de opciones:\n\
							    {"#SILVER_COLOR"}- arma <playerid o nombre> <slot de /armas> <precio>\n\
							    {"#SILVER_COLOR"}- alimento <playerid o nombre> <slot de /alimentos> <precio>\n\
							    {"#SILVER_COLOR"}- medicamentos <playerid o nombre> <cantidad> <precio>\n\
							    {"#SILVER_COLOR"}- marihuana <playerid o nombre> <cantidad> <precio>\n\
							    {"#SILVER_COLOR"}- crack <playerid o nombre> <cantidad> <precio>\n\
							    {"#SILVER_COLOR"}- coins <playerid o nombre> <cantidad> <precio>\n\
							    {"#SILVER_COLOR"}- kit <playerid o nombre> <cantidad> <precio>\n\
							\n\
							{"#SILVER_COLOR"}Para obtener ayuda diferente use /ayuda.\
						",
					"Cerrar", ""
					
			);
			return 1;
		}
		case _I<guardar>:
		{
			ShowPlayerDialog
			(
				playerid,
				DIALOG_INFO,
				DIALOG_STYLE_MSGBOX,
				
					"Manual",
						"\
							Comando: guardar\n\
							Sintaxis: dar <opcion> <extra>\n\
							\n\
							Este comando sirve para dar algo a otro jugador cercano.\n\
							Para comprobar que tiene el objeto y la cantidad utilice /inv.\n\
							\n\
							Esta es la lista de opciones:\n\
							    - arma <slot de /armas>\n\
							    - medicamentos <cantidad>\n\
							    - marihuana <cantidad>\n\
							    - crack <cantidad>\n\
							\n\
							Para obtener ayuda diferente use /ayuda.\
						",
					"Cerrar", ""
					
			);
			return 1;
		}
		default: SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/man [dar-tirar-vender-guardar]");
	}
	return 1;
}

CMD:tirar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(gettime() < pTemp(playerid)[pt_DROP_ITEM_TIMER] + 5) return SendMessage(playerid, "Espera para volver a tirar otro objeto.");
	
	new option[24];
	if(sscanf(params, "s[24]d", option)) return SendClientMessagef(playerid, -1, "Error en los parámetros, utilice /manual tirar.");

	switch(YHash(option, false))
	{
		case _I<arma>:
		{
			if(GetPlayerWork(playerid, WORK_POLICE)) return SendMessage(playerid, "~r~No puedes hacer esto.");

			pTemp(playerid)[pt_DROP_ITEM_TIMER] = gettime();
			DropPlayerHandWeapon(playerid, true);
			return 1;
		}
	}
	return 1;
}

CMD:hotdog(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	vehicleid = GetNearVehicle(playerid);
	
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return SendMessage(playerid, "No estas de pie.");
	if(vehicleid == INVALID_VEHICLE_ID) return SendMessage(playerid, "No estás cerca de un carrito hotdog.");
	if(!HOTDOG_VEHICLES[vehicleid][hotdog_vehicle_VALID]) return SendMessage(playerid, "No estás cerca de un carrito hotdog.");
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_HOTDOG || GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_HOTDOG_INGAME)
	{
		if(PI[playerid][pi_HUNGRY] >= 99.0 && PI[playerid][pi_THIRST] >= 99.0) return SendClientMessagef(playerid, -1, "¿Es que quieres reventar?");

		if(GivePlayerCash(playerid, -120, true, true))
		{
			Add_Hungry_Thirst(playerid, 3.1, 0.1);
			ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
			ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

			SendMessage(playerid, "Has consumido un ~r~Hotdog~w~ por ~g~120$~w~.");
			return 1;
		}
		else SendMessage(playerid, "~r~No tienes dinero suficiente para alimentarte aqui.");
	}
	else SendMessage(playerid, "No estás cerca de un carrito hotdog.");
	return 1;
}

CMD:agua(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	vehicleid = GetNearVehicle(playerid);
	
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return SendMessage(playerid, "No estas de pie.");
	if(vehicleid == INVALID_VEHICLE_ID) return SendMessage(playerid, "No estás cerca de un carrito hotdog.");
	if(!HOTDOG_VEHICLES[vehicleid][hotdog_vehicle_VALID]) return SendMessage(playerid, "No estás cerca de un carrito hotdog.");

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_HOTDOG || GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_HOTDOG_INGAME)
	{
		if(PI[playerid][pi_HUNGRY] >= 99.0 && PI[playerid][pi_THIRST] >= 99.0) return SendClientMessagef(playerid, -1, "¿Es que quieres reventar?");

		if(GivePlayerCash(playerid, -100, true, true))
		{
			Add_Hungry_Thirst(playerid, 0.0, 4.3);
			ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
			ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

			SendMessage(playerid, "Has consumido una bottella de ~b~agua~w~ por ~g~100$~w~.");
			return 1;
		}
		else SendMessage(playerid, "~r~No tienes dinero suficiente para hidratarte aqui.");
	}
	else SendMessage(playerid, "No estás cerca de un carrito hotdog.");
	return 1;
}

CMD:entrar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(pTemp(playerid)[pt_LAST_PICKUP_ID] == 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
		
	new info[3];
	
	new Float:pos[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] == PICKUP_TYPE_NONE) return SendMessage(playerid, "No estás en el lugar adecuado.");

	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return SendMessage(playerid, "No estás en el lugar adecuado.");

	switch(info[0])
	{
		case PICKUP_TYPE_ENTER_EXIT:
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] == WORK_POLICE) pTemp(playerid)[pt_DISPENSARY] = GetNearestDispensaryForPlayer(playerid);
			else pTemp(playerid)[pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
	
			if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
			{
				if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == 0 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == 0) // 24 horas
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_INTERIOR;
					PI[playerid][pi_LOCAL_INTERIOR] = ENTER_EXIT[info[1]][ee_ID];
					pTemp(playerid)[pt_INTERIOR_INDEX] = info[1];
					SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
					FreezePlayer(playerid);
					CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);
				}
				else
				{
					if(is_open(GetMyWorldHour(), ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]))
					{
						PI[playerid][pi_STATE] = ROLEPLAY_STATE_INTERIOR;
						PI[playerid][pi_LOCAL_INTERIOR] = ENTER_EXIT[info[1]][ee_ID];
						pTemp(playerid)[pt_INTERIOR_INDEX] = info[1];
						SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
						FreezePlayer(playerid);
						CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);
					}
					else 
					{
						if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == -1 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == -1) SendClientMessagef(playerid, -1, "%s abrirá próximamente.", ENTER_EXIT[info[1]][ee_NAME]);
						else SendClientMessagef(playerid, -1, "%s está cerrado, su horario es: %02d:00h - %02d:00h.", ENTER_EXIT[info[1]][ee_NAME], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]);
					}
				}
			}
			else SendMessage(playerid, "No estás en el lugar adecuado.");
		}
		case PICKUP_TYPE_PROPERTY:
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] == WORK_POLICE) pTemp(playerid)[pt_DISPENSARY] = GetNearestDispensaryForPlayer(playerid);
			else pTemp(playerid)[pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
			
			if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
			{
				if(PROPERTY_INFO[info[1]][property_POLICE_FORCED] && (PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] == WORK_POLICE)) {
					
					SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
					FreezePlayer(playerid);
					return 1;
				}
				if(!PROPERTY_INFO[info[1]][property_SOLD]) return SendClientMessagef(playerid, -1, "Esta propiedad está en venta.");
				if(PROPERTY_INFO[info[1]][property_CREW])
				{
					if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "Solo miembros de la banda pueden entrar.");
					if(PI[playerid][pi_CREW] != PROPERTY_INFO[info[1]][property_CREW_ID]) return SendClientMessagef(playerid, -1, "Solo miembros de la banda pueden entrar.");
					
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
					PI[playerid][pi_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
					pTemp(playerid)[pt_PROPERTY_INDEX] = info[1];

					
					SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
					FreezePlayer(playerid);
				}
				else
				{
					if(PROPERTY_INFO[info[1]][property_OWNER_ID] == PI[playerid][pi_ID])
					{
						PI[playerid][pi_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
						PI[playerid][pi_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
						pTemp(playerid)[pt_PROPERTY_INDEX] = info[1];

						
						SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
						FreezePlayer(playerid);
					}
					else
					{
						if(gettime() < pTemp(playerid)[pt_ANTIFLOOD_KNOCK_PROPERTY] + 10) return SendClientMessagef(playerid, -1, "Espera para volver a tocar, si no te quieren abrir, vete.");
						
						new owner_playerid = GetOwnerIntProperty(PROPERTY_INFO[info[1]][property_ID]);
						if(owner_playerid == -1) return SendClientMessagef(playerid, -1, "Esta no es tu propiedad y el dueño no está dentro para dejarte entrar.");
						
						pTemp(playerid)[pt_ANTIFLOOD_KNOCK_PROPERTY] = gettime();
						PlayerTemp[owner_playerid][pt_KNOCK_PLAYER_ID] = playerid;
						SendClientMessagef(owner_playerid, -1, "%s está tocando la puerta, para dejarle entrar ve a la puerta y usa /puerta.", pTemp(playerid)[pt_NAME]);
						SendClientMessagef(playerid, -1, "Has tocado en la puerta, espera para que te abran o vete.");
					}
				}
			}
			else SendMessage(playerid, "No estás en el lugar adecuado.");
		}
		default: SendMessage(playerid, "No estás en el lugar adecuado.");
	}
	return 1;
}

CMD:puerta(playerid, params[])
{
	if(PI[playerid][pi_STATE] != ROLEPLAY_STATE_OWN_PROPERTY) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(pTemp(playerid)[pt_LAST_PICKUP_ID] == 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
		
	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] != PICKUP_TYPE_PROPERTY) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	new Float:pos[3]; 
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);
	
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	if(info[2] == 1) // Está en el Pickup Interior
	{
		if(PROPERTY_INFO[info[1]][property_OWNER_ID] == PI[playerid][pi_ID])
		{
			if(pTemp(playerid)[pt_KNOCK_PLAYER_ID] == INVALID_PLAYER_ID) return SendClientMessagef(playerid, -1, "Nadie ha tocado en la puerta.");
			if(!IsPlayerConnected(pTemp(playerid)[pt_KNOCK_PLAYER_ID])) return SendClientMessagef(playerid, -1, "Nadie ha tocado en la puerta o ya se ha ido.");
			if(!IsPlayerInRangeOfPoint(pTemp(playerid)[pt_KNOCK_PLAYER_ID], 3.0, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z])) return SendClientMessagef(playerid, -1, "Nadie ha tocado en la puerta o ya se ha ido.");
			if(pTemp(playerid)[pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "Este jugador no puede entrar ahora.");
			
			if(PLAYER_WORKS[ pTemp(playerid)[pt_KNOCK_PLAYER_ID] ][WORK_POLICE][pwork_SET] && PlayerTemp[ pTemp(playerid)[pt_KNOCK_PLAYER_ID] ][pt_WORKING_IN] == WORK_POLICE) pTemp(playerid)[pt_DISPENSARY] = GetNearestDispensaryForPlayer(pTemp(playerid)[pt_KNOCK_PLAYER_ID]);
			else PlayerTemp[ pTemp(playerid)[pt_KNOCK_PLAYER_ID] ][pt_HOSPITAL] = GetNearestHospitalForPlayer(pTemp(playerid)[pt_KNOCK_PLAYER_ID]);
			
			PI[pTemp(playerid)[pt_KNOCK_PLAYER_ID]][pi_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
			PI[pTemp(playerid)[pt_KNOCK_PLAYER_ID]][pi_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
			PlayerTemp[pTemp(playerid)[pt_KNOCK_PLAYER_ID]][pt_PROPERTY_INDEX] = info[1];

			
			SetPlayerPosEx(pTemp(playerid)[pt_KNOCK_PLAYER_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
			FreezePlayer(pTemp(playerid)[pt_KNOCK_PLAYER_ID]);
		}
		else SendMessage(playerid, "No estás en el lugar adecuado.");
	}
	else SendMessage(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:pvender(playerid, params[])
{
	if(pTemp(playerid)[pt_INTERIOR_INDEX] == -1 || ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -474.596282, 289.679107, 2004.584960)) return 1;
	if(PI[playerid][pi_LEVEL] < 2) return SendClientMessagef(playerid, -1, "Debes ser al menos nivel 2 para usar este comando.");
	if(PI[playerid][pi_BANK_ACCOUNT] == 0) return SendClientMessagef(playerid, -1, "Necesitas tener una cuenta bancaria para poder realizar estas operaciones.");
	
	ShowDialog(playerid, DIALOG_NOTARY);
	return 1;
}

CMD:grua(playerid, params[])
{
	if(pTemp(playerid)[pt_INTERIOR_INDEX] == -1 || ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -508.645385, 322.147644, 2004.585937)) return 1;

	ShowDialog(playerid, DIALOG_CRANE_SELECT_VEHICLE);
	return 1;
}

CMD:casa(playerid, params[])
{
	if(pTemp(playerid)[pt_LAST_PICKUP_ID] == 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY || PI[playerid][pi_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY) {
		new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
		if(index == -1) return SendMessage(playerid, "No estás en el lugar adecuado.");

		if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
		{	
			if(PROPERTY_INFO[index][property_OWNER_ID] == PI[playerid][pi_ID])
			{
				pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] = index;
				ShowDialog(playerid, DIALOG_PROPERTY_OPTIONS);
			}
			else SendMessage(playerid, "No estás en el lugar adecuado.");
		}
		else if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY)
		{
			if(PROPERTY_INFO[index][property_CREW])
			{
				if(PROPERTY_INFO[index][property_CREW_ID] != PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "Esta no es una propiedad de tu banda.");
				if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
				if(CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_FIGHTING]) return SendClientMessagef(playerid, -1, "No puedes liberar una propiedad cuando tu banda está en combate."); 
				
				pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] = index;
				ShowDialog(playerid, DIALOG_CREW_LEAVE_PROPERTY);
			}
			else SendMessage(playerid, "No estás en el lugar adecuado.");
		}
	}
	else SendMessage(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:armario(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
	{
		new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
		if(index == -1) return SendClientMessagef(playerid, -1, "BUG: CMD /armario, Tome captura y contacte con administrador.");
		if(PROPERTY_INFO[index][property_OWNER_ID] != PI[playerid][pi_ID]) return SendClientMessagef(playerid, -1, "Esta no es tu casa");

		if(IsPlayerInRangeOfPoint(playerid, 1.0, PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_X], PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Y], PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Z]))
		{
			pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] = index;
			ShowDialog(playerid, DIALOG_PROPERTY_CLOSET);
		}
		else SendClientMessagef(playerid, -1, "No estás cerca del armario.");
	}
	else SendClientMessagef(playerid, -1, "No estás en tu casa.");
	return 1;
}

CMD:echar(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/echar [PlayerID/Nombre]");
	if(!IsPlayerConnected(params[0])) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	if(playerid == params[0]) return SendClientMessagef(playerid, -1, "No te eches a ti mismo.");
	
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
	{
		if( PI[params[0]][pi_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY && PI[params[0]][pi_LOCAL_INTERIOR] == PI[playerid][pi_LOCAL_INTERIOR])
		{		
			new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
			if(index == -1) return SendClientMessagef(playerid, -1, "BUG: CMD /ECHAR, Tome captura y contacte con administrador.");
				
			PI[params[0]][pi_STATE] = ROLEPLAY_STATE_NORMAL;
			PI[params[0]][pi_LOCAL_INTERIOR] = 0;
			PlayerTemp[params[0]][pt_PROPERTY_INDEX] = -1;
			SetPlayerPosEx(params[0], PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], PROPERTY_INFO[ index ][property_EXT_ANGLE], PROPERTY_INFO[ index ][property_EXT_INTERIOR], 0, false /*PROPERTY_INFO[ index ][property_EXT_FREEZE]*/, false);
			StopAudioStreamForPlayer(params[0]);
			FreezePlayer(params[0]);
			
			SendClientMessagef(params[0], -1, "%s te ha echado de su propiedad.", pTemp(playerid)[pt_NAME]);
			SendClientMessagef(playerid, -1, "Has echado a %s de tu propiedad.", PlayerTemp[params[0]][pt_NAME]);
		}
		else SendClientMessagef(playerid, -1, "Este jugador no está en tu propiedad.");
		return 1;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		
		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendMessage(playerid, "~r~Este no es tú vehículo.");
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendMessage(playerid, "~r~Este no es tú vehículo.");
		if(GetPlayerVehicleID(params[0]) != vehicleid) return SendClientMessagef(playerid, -1, "Este jugador no está en tu vehículo.");
		
		RemovePlayerFromVehicle(params[0]);
		
		new action[64];
		format(action, sizeof action, "ha echado a %s de su vehículo.", PlayerTemp[ params[0] ][pt_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	
	SendClientMessagef(playerid, -1, "No estás en tu propiedad o en tu vehículo.");
	return 1;
}

CMD:contador(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendMessage(playerid, "No estás conduciendo.");
	if(!PLAYER_WORKS[playerid][WORK_TAXI][pwork_SET]) return SendMessage(playerid, "~r~No eres Uber.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_TAXI) return SendClientMessagef(playerid, -1, "No estás de servicio como Uber.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED]) return SendClientMessagef(playerid, -1, "Solo puedes cambiar el contador cuando no haya ningún pasajero.");
	
	if(sscanf(params, "d", params[0])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/contador [0-14]");
	if(params[0] < 0 || params[0] > 14) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/contador [0-14]");
	
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_PRICE] = params[0];
	Auto_SendPlayerAction(playerid, "ajusta el contador.");
	UpdatePlayerTaxiMeterTextdraws(playerid);
	return 1;
}

CMD:vuber(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendMessage(playerid, "No estás conduciendo.");
	if(!PLAYER_WORKS[playerid][WORK_TAXI][pwork_SET]) return SendMessage(playerid, "~r~No eres Uber.");
	if(PLAYER_WORKS[playerid][WORK_TAXI][pwork_LEVEL] < 50) return SendMessagef(playerid, "Te faltan ~r~%d~w~ Viajes para poder usar esta funcion.", 50 - PLAYER_WORKS[playerid][WORK_TAXI][pwork_LEVEL]);
	
	new vehicleid = GetPlayerVehicleID(playerid);	
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendMessagef(playerid, "Este no es tú vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendMessage(playerid, "~r~Este no es tú vehículo.");

	if(!pTemp(playerid)[pt_OWN_VEHICLE_TAXI])
	{
		pTemp(playerid)[pt_OWN_VEHICLE_TAXI] = true;
		CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_TAXI, vehicleid);
		SendMessage(playerid, "Estas trabajando de uber con tu vehiculo.");
		return 1;
	}

	SendClientMessagef(playerid, ORANGE_COLOR2, "Si quieres dejar de trabajar, baja del vehiculo y sube cuando quieras.");
	return 1;
}

CMD:salir(playerid, params[])
{	
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(pTemp(playerid)[pt_LAST_PICKUP_ID] == 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
		
	new info[3];
	
	new Float:pos[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] == PICKUP_TYPE_NONE) return SendMessage(playerid, "No estás en el lugar adecuado.");

	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return SendMessage(playerid, "No estás en el lugar adecuado.");

	switch(info[0])
	{
		case PICKUP_TYPE_ENTER_EXIT:
		{
			if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
			{
				PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
				PI[playerid][pi_LOCAL_INTERIOR] = 0;
				pTemp(playerid)[pt_INTERIOR_INDEX] = -1;
				SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_EXT_X], ENTER_EXIT[info[1]][ee_EXT_Y], ENTER_EXIT[info[1]][ee_EXT_Z], ENTER_EXIT[info[1]][ee_EXT_ANGLE], ENTER_EXIT[info[1]][ee_EXT_INTERIOR], ENTER_EXIT[info[1]][ee_EXT_WORLD], false /*ENTER_EXIT[info[1]][ee_EXT_FREEZE]*/);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				StopAudioStreamForPlayer(playerid);
				FreezePlayer(playerid);
				CallLocalFunction("OnPlayerExitInterior", "ii", playerid, info[1]);
			}
			else SendMessage(playerid, "No estás en el lugar adecuado.");
		}
		case PICKUP_TYPE_PROPERTY:
		{
			if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
			{
				PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
				PI[playerid][pi_LOCAL_INTERIOR] = 0;
				pTemp(playerid)[pt_PROPERTY_INDEX] = -1;
				SetPlayerPosEx(playerid, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z], PROPERTY_INFO[info[1]][property_EXT_ANGLE], PROPERTY_INFO[info[1]][property_EXT_INTERIOR], 0, false /*PROPERTY_INFO[info[1]][property_EXT_FREEZE]*/, false);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				StopAudioStreamForPlayer(playerid);
				FreezePlayer(playerid);
			}
			else SendMessage(playerid, "No estás en el lugar adecuado.");
		}
		default: SendMessage(playerid, "No estás en el lugar adecuado.");
	}
	return 1;
}

CMD:gasolina(playerid, params[])
{
	if(GetPlayerInterior(playerid) != 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessagef(playerid, -1, "No estás en nigún vehículo.");
	
	new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);
	if(!VEHICLE_INFO[modelid - 400][vehicle_info_NORMAL_SPEEDO]) return SendClientMessagef(playerid, -1, "No puedes repostar este vehículo.");
	
	new fuel_station = -1;
	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Fuel_Stations[i][fs_X], Fuel_Stations[i][fs_Y], Fuel_Stations[i][fs_Z]))
		{
			fuel_station = i;
			break;
		}
	}
	if(fuel_station == -1) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) return SendClientMessagef(playerid, -1, "Este vehículo no tiene depósito de gasolina.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
		SendClientMessagef(playerid, -1, "Por favor, para primero el motor del vehículo.");
		return 1;
	}
	
	if(!sscanf(params, "d", params[0]))
	{
		new Float:amount = float(params[0]);
		if(amount < 0.0) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/gasolina [litros / lleno]");
		if(amount + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) amount = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] - GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS];
		
		new price = floatround( floatmul(amount, 15.0) );

		if(GetVehicleWork(vehicleid) == WORK_TRAILER)
		{
			if(IsRentedTrailer(vehicleid))
			{
				if(IsVehicleTrailer_Truck(vehicleid))
				{
					SendInfoMessage(playerid, "Trailero~n~~n~el trailer de la compañia cubrira los gastos de la gasolina.~n~~n~");
					price = 0;
				}
			}
		}

		if(PI[playerid][pi_CASH] >= price)
		{
			if(GivePlayerCash(playerid, -price, true, true)) 
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] += amount;
				
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendInfoMessagef(playerid, "Repostado~n~~n~Cantidad: %.1f litros~n~Precio: %s dólares~n~~n~", amount, number_format_thousand(price));
				Auto_SendPlayerAction(playerid, "ha repostado el vehículo.");
			}
		}
		else
		{
			PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
			SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan {ff0000}%s${ffffff} para poder repostar {588dc9}%.1f.", number_format_thousand(price - PI[playerid][pi_CASH]), amount);
		}
		return 1;
	}
	
	new text[24];
	if(!sscanf(params, "s[24]", text))
	{
		if(!strcmp(text, "lleno", true))
		{
			new Float:amount = floatsub(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);

			new price = floatround( floatmul(amount, 15.0) );

			if(GetVehicleWork(vehicleid) == WORK_TRAILER)
			{
				if(IsRentedTrailer(vehicleid))
				{
					if(IsVehicleTrailer_Truck(vehicleid))
					{
						SendInfoMessage(playerid, "Trailero~n~~n~el trailer de la compañia cubrira los gastos de la gasolina.~n~~n~");
						price = 0;
					}
				}
			}

			if(PI[playerid][pi_CASH] >= price)
			{
				if(GivePlayerCash(playerid, -price, true, true)) 
				{
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];
					
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					SendInfoMessagef(playerid, "Repostado~n~~n~Cantidad: %.1f litros~n~Precio: %s dólares~n~~n~", amount, number_format_thousand(price));
					Auto_SendPlayerAction(playerid, "ha repostado el vehículo.");
				}
			}
			else
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %s$ para poder repostar {588dc9}%.1f.", number_format_thousand(price - PI[playerid][pi_CASH]), amount);
			}
		}
		else SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/gasolina [litros / lleno]");
		return 1;
	}
	
	SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/gasolina [litros / lleno]");
	return 1;
}

CMD:bidon(playerid, params[])
{
	if(GetPlayerInterior(playerid) != 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	new fuel_station = -1;
	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Fuel_Stations[i][fs_X], Fuel_Stations[i][fs_Y], Fuel_Stations[i][fs_Z]))
		{
			fuel_station = i;
			break;
		}
	}
	if(fuel_station == -1) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	if(PI[playerid][pi_FUEL_DRUM] <= 0)
	{
		PI[playerid][pi_FUEL_DRUM] = 0;
		if(GivePlayerCash(playerid, -300, true, true)) {
			PI[playerid][pi_FUEL_DRUM] = 20;
			SendClientMessagef(playerid, -1, "Has comprado un bidón de gasolina de 20 litros por 300$, usa /vertir para repostar un vehículo.");
		}
		else SendClientMessagef(playerid, -1, "No tienes suficiente dinero para comprar el bidón.");
	}
	else
	{
		if(PI[playerid][pi_FUEL_DRUM] >= 20) return SendClientMessagef(playerid, -1, "Tu bidón de gasolina está lleno.");
		
		new amount = (20 - PI[playerid][pi_FUEL_DRUM]);
		new price = (13 * amount);
		
		if(PI[playerid][pi_CASH] >= price)
		{
			if(GivePlayerCash(playerid, -price, true, true)) {
				PI[playerid][pi_FUEL_DRUM] += amount;
				SendClientMessagef(playerid, -1, "Has llenado tu bidón de gasolina con 20 litros por %d$, usa /vertir para repostar un vehículo.", price);
			}
		}
		else SendClientMessagef(playerid, -1, "No tienes suficiente dinero para comprar el bidón.");
	}
	return 1;
}

CMD:vertir(playerid, params[])
{	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "Tienes que estar fuera del vehículo para vertir el bidón.");
	
	new vehicleid = GetNearVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessagef(playerid, -1, "No estás cerca de ningún vehículo.");

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_SELL) return SendMessage(playerid, "~r~Aca no existe bug gasolina...");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])return SendClientMessagef(playerid, -1, "Por favor, para primero el motor del vehículo.");

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) return SendClientMessagef(playerid, -1, "Este vehículo no tiene depósito de gasolina.");

	if(sscanf(params, "d", params[0])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/vetir [Cantidad de litros]");
	if(params[0] <= 0) return SendClientMessagef(playerid, -1, "Cantidad de litros no válida.");
	if(params[0] > PI[playerid][pi_FUEL_DRUM]) return SendClientMessagef(playerid, -1, "Solo tienes %d.0 litros en el bidón.", PI[playerid][pi_FUEL_DRUM]);
	
	new Float:amount = float(params[0]);
	if(amount + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) amount = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] - GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS];
	
	PI[playerid][pi_FUEL_DRUM] -= floatround(amount);
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] += amount;
	SendClientMessagef(playerid, -1, "Has vertido %.1f litros del bidón, te quedan %d.0 litros.", amount, PI[playerid][pi_FUEL_DRUM]);
	Auto_SendPlayerAction(playerid, "ha repostado el vehículo.");
	return 1;
}

CMD:setfdrum(playerid, params[])
{
	new to_player, amount;
	if(sscanf(params, "ud", to_player, amount)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setfdrum <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	
	PI[to_player][pi_FUEL_DRUM] = amount;
	
	SendCmdLogToAdmins(playerid, "setfdrum", params);
	return 1;
}

SendPlayerAction(playerid, const action[])
{
	new str_text[190];
	format(str_text, sizeof str_text, "* %s %s", pTemp(playerid)[pt_NAME], action);
	ProxDetector(playerid, 15.0, str_text, PLAYER_ACTION_COLOR, PLAYER_ACTION_COLOR, PLAYER_ACTION_COLOR, PLAYER_ACTION_COLOR, PLAYER_ACTION_COLOR, 85);
	return 1;
}

Auto_SendPlayerAction(playerid, const action[])
{
	new str_text[145];
	format(str_text, 145, "** %s %s", pTemp(playerid)[pt_NAME], action);
	ProxDetector(playerid, 15.0, str_text, PLAYER_ACTION_COLOR, PLAYER_ACTION_COLOR, PLAYER_ACTION_COLOR, PLAYER_ACTION_COLOR, PLAYER_ACTION_COLOR);
	return 1;
}

ShowMenu(playerid, extraid)
{
	switch(extraid)
	{
		case MENU_VOBJECTS_SHOP:
		{
			new List:Tuning_Objects = list_new();

			LoopEx(i, sizeof(Tuning_Shop_Objects), 0)
			{
				new price[145]; format(price, 145, "%s$", number_format_thousand(Tuning_Shop_Objects[i][tuning_object_PRICE]));
				AddModelMenuItem(Tuning_Objects, Tuning_Shop_Objects[i][tuning_object_MODELID], price);
			}

			ShowModelSelectionMenu(playerid, "Objetos Tuning", extraid, Tuning_Objects);
		}
	}
}

ShowDialog(playerid, dialogid)
{
	pTemp(playerid)[pt_PLAYER_WAITING_MP3_HTTP] = false;
	pTemp(playerid)[pt_DIALOG_RESPONDED] = false;
	pTemp(playerid)[pt_DIALOG_ID] = dialogid;
	
	switch(dialogid)
	{
		case DIALOG_REGISTER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Registrarse", "{"#SILVER_COLOR"}Bienvenido, escribe una contraseña para registrarte:", "Continuar", "Cerrar");
		case DIALOG_GENDER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Genero", "{"#SILVER_COLOR"}Por ultimo, debes elegir tu genero, solo puede ser masculino, o femenino.\n\nPuedes definirte como quieras dentro de rol.\nTambien podras cambiarlo luego.", "Masculino", "Femenino");
		case DIALOG_PASSWORD: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "{"#PRIMARY_COLOR"}Ingresar", "{"#SILVER_COLOR"}Ingrese su clave para autenticarse:", ">>", "X");
		case DIALOG_REGISTER_EMAIL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Correo electrónico", "{"#SILVER_COLOR"}Ingresa tu correo electronico para continuar:\n\nEl correo electronico se usa para poder recuperar tu cuenta en caso de perdidas\nTambien para confirmar que eres el dueño de dicha cuenta.", "Continuar", "Cerrar");
		case DIALOG_CLOTHES: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{"#PRIMARY_COLOR"}¿Qué quieres comprar?", "Ropa\nAccesorios", ">>", "Salir");
		case DIALOG_FOOD_PIZZA: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Comida rápida", DIALOG_FOOD_PIZZA_String, "Pedir", "Cerrar");
		case DIALOG_FOOD_CLUCKIN: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Comida rápida", DIALOG_FOOD_CLUCKIN_String, "Pedir", "Cerrar");
		case DIALOG_FOOD_BURGER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Comida rápida", DIALOG_FOOD_BURGER_String, "Pedir", "Cerrar");
		case DIALOG_PLAYER_TOYS:
		{
			new dialog[96 * (MAX_SU_TOYS + 2)], line_str[64];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Accesorio\t{"#BLUE_COLOR"}Colocado\n");
			for(new i; i != MAX_SU_TOYS; i ++)
			{
				if(PI[playerid][pi_VIP])
				{
					if(PLAYER_TOYS[playerid][i][player_toy_VALID])
					{
						if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}Sí\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
					}
					else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
				}
				else
				{
					if(i >= MAX_NU_TOYS)
					{
						if(PLAYER_TOYS[playerid][i][player_toy_VALID]) format(line_str, sizeof line_str, "{666666}%d. %s\t{"#BLUE_COLOR"}No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					}
					else
					{
						if(PLAYER_TOYS[playerid][i][player_toy_VALID])
						{
							if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}Sí\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
							else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						}
						else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					}
				}
				strcat(dialog, line_str);
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Mis accesorios", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_TOY_MENU:
		{
			if(!PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_VALID])
			{
				SendClientMessagef(playerid, -1, "Este slot está vacío, puedes comprar accesorios en cualquier tienda de ropa.");
				return 1;
			}
			
			new caption[48];
			format(caption, sizeof caption, "{"#SILVER_COLOR"}Accesorio '%s'", PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			
			new dialog[256];
			if(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Guardar este accesorio\n{"#SILVER_COLOR"}Cambiar el nombre del accesorio\n{"#SILVER_COLOR"}Configurar el accesorio\n{"#SILVER_COLOR"}Color primario\n{"#SILVER_COLOR"}Color secundario\n{"#SILVER_COLOR"}Eliminar este accesorio");
			else
			{
				if(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1)
				{
					SendClientMessagef(playerid, -1, "Este accesorio es nuevo y aún no ha sido configurado, configuralo desde 'Configurar el accesorio'.");
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Colocarte el accesorio\n{"#SILVER_COLOR"}Cambiar el nombre del accesorio\n{"#SILVER_COLOR"}Configurar el accesorio\n{"#SILVER_COLOR"}Color primario\n{"#SILVER_COLOR"}Color secundario\n{"#SILVER_COLOR"}Eliminar este accesorio");
				}
				else format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Colocarte el accesorio\n{"#SILVER_COLOR"}Cambiar el nombre del accesorio\n{"#SILVER_COLOR"}Configurar el accesorio\n{"#SILVER_COLOR"}Color primario\n{"#SILVER_COLOR"}Color secundario\n{"#SILVER_COLOR"}Eliminar este accesorio");
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_NAME:
		{		
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual: \"%s\"\nIndica el nuevo nombre:", PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{"#SILVER_COLOR"}Accesorio - Modificar nombre", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_CONFIRMDELETE:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "¿Estás seguro que quieres borrar el siguiente accesorio?\n\t\"%s\"", PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{"#SILVER_COLOR"}Accesorio - Eliminar accesorio", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_SELECT_BONE:
		{
			SendClientMessagef(playerid, -1, "Selecciona en que parte del cuerpo quieres colocar este accesorio.");
			
			new caption[48];
			format(caption, sizeof caption, "{"#SILVER_COLOR"}Accesorio '%s'", PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			
			new dialog[45 * sizeof Toys_Bones], line_str[45];
			for(new i = 0; i != sizeof Toys_Bones; i ++)
			{
				format(line_str, sizeof(line_str), "{"#BLUE_COLOR"}%d. %s\n", i + 1, Toys_Bones[i]);
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_BONE:
		{
			new caption[48];
			format(caption, sizeof caption, "{"#SILVER_COLOR"}Accesorio '%s'", PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			
			new dialog[145];
			format(dialog, sizeof(dialog), "¿Quieres cambiar la parte del cuerpo donde se coloca este accesorio?\nActualmente está colocado en: %s", Toys_Bones[ PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_BONE] - 1 ]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Sí", "No");
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_1:
		{
			SendClientMessagef(playerid, -1, "Selecciona el color 0 para poner el color original del accesorio.");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_2:
		{
			SendClientMessagef(playerid, -1, "Selecciona el color 0 para poner el color original del accesorio.");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Accesorios - Eliminar todo", "¿Estás seguro de que quiere eliminar todos sus accesorios?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");	
		case DIALOG_BANK:
		{
			if(PI[playerid][pi_BANK_ACCOUNT] == 0) return SendClientMessagef(playerid, -1, "No tienes cuenta bancaria.");
			
			new caption[80];
			format(caption, sizeof caption, "Mi cuenta bancaria: {"#BLUE_COLOR"}%s {FFFFFF}- Balance actual: {"#BLUE_COLOR"}%s$", number_format_thousand(PI[playerid][pi_BANK_ACCOUNT]), number_format_thousand(PI[playerid][pi_BANK_MONEY]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, 
				"{"#SILVER_COLOR"}1. Retirar dinero\n{"#SILVER_COLOR"}2. Depositar dinero\n{"#SILVER_COLOR"}3. Transferir dinero\n{"#SILVER_COLOR"}4. Últimas transacciones", 
			"Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CREATE_BANK_ACCOUNT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Crear cuenta bancaria", 
				"{"#SILVER_COLOR"}Bienvenido, actualmente no tienes una cuenta bancaria.\n\nPara disfrutar de los beneficios de una cuenta bancaria\npuedes crearla ahora mismo con un depósito minimo de 500$.", 
			"Crear", "Cerrar");
			return 1;
		}
		case DIALOG_BANK_WITHDRAW:
		{
			new dialog[100];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Balance actual: {"#BLUE_COLOR"}%s$\n{"#SILVER_COLOR"}¿Cuánto quiere retirar?", number_format_thousand(PI[playerid][pi_BANK_MONEY]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Retirar", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_BANK_DEPOSIT:
		{
			new dialog[100];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Dinero actual: {"#BLUE_COLOR"}%s$\n{"#SILVER_COLOR"}¿Cuánto quiere depositar?", number_format_thousand(PI[playerid][pi_CASH]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Depositar", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_BANK_TRANSFER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Transferir", "Indica a que número de cuenta quiere transferir dinero.", "Continuar", "Atrás");
		case DIALOG_BANK_TRANSFER_SEND:
		{
			new dialog[170];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Transferir a cuenta: {"#BLUE_COLOR"}%s\n{"#SILVER_COLOR"}Balance actual: {"#BLUE_COLOR"}%s$\n\n{"#SILVER_COLOR"}¿Cuánto quiere transferir?", number_format_thousand(pTemp(playerid)[pt_SELECT_BANK_TRANSFER_ACCOUNT]), number_format_thousand(PI[playerid][pi_BANK_MONEY]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Transferir", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_BANK_TRANSACTIONS:
		{
			inline OnBankMovementsLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new dialog[2675], caption[40], line_str[128];
					format(caption, sizeof caption, "Banco - Últimas %d transacciones", rows);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Fecha\t{"#BLUE_COLOR"}Concepto\t{"#SILVER_COLOR"}Importe\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							new date[24], type, from_id, to_id, amount, from_bankid, to_bankid, bool:insull_from_id, bool:isnull_to_id;
							reg_name(i, "date", date);
							reg_int(i, "type", type);
							cache_is_value_name_null(i, "from_id", insull_from_id);
							if(!insull_from_id) reg_int(i, "from_id", from_id);
							cache_is_value_name_null(i, "to_id", isnull_to_id);
							if(!isnull_to_id) reg_int(i, "to_id", to_id);
							reg_int(i, "amount", amount);
							reg_int(i, "from_bankid", from_bankid);
							reg_int(i, "to_bankid", to_bankid);

							switch(type)
							{
								case BANK_TRANSACTION_WITHDRAW:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Retirada efectivo\t{"#SILVER_COLOR"}-%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_DEPOSIT:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Ingreso efectivo\t{"#SILVER_COLOR"}%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_TRANSFER:
								{
									if(from_id == PI[playerid][pi_ID]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Transferencia a %d\t{"#SILVER_COLOR"}-%s$\n", date, to_bankid, number_format_thousand(amount));
									else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Transferencia de %d\t{"#SILVER_COLOR"}%s$\n", date, from_bankid, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_CREATE_ACCOUNT:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Apertura cuenta\t{"#SILVER_COLOR"}-%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_BUY_PROPERTY:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Compra de propiedad\t{"#SILVER_COLOR"}-%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_SOLD_PROPERTY:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Venta de propiedad\t{"#SILVER_COLOR"}%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_BUY_VEHICLE:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Compra de vehículo\t{"#SILVER_COLOR"}-%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_SOLD_VEHICLE:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Venta de vehículo\t{"#SILVER_COLOR"}%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
							}
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No hay transacciones en tu cuenta.");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cerrar", "Atrás");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT bank_movements.*, player.bank_account AS from_bankid, player2.bank_account AS to_bankid FROM bank_movements LEFT JOIN player ON bank_movements.from_id = player.id LEFT JOIN player AS player2 ON bank_movements.to_id = player2.id WHERE bank_movements.from_id = %d OR bank_movements.to_id = %d ORDER BY date DESC LIMIT %d;", PI[playerid][pi_ID], PI[playerid][pi_ID], MAX_BANK_TRANSACTIONS_DIALOG);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnBankMovementsLoad);
			return 1;
		}
		case DIALOG_247_LIST: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "24/7", DIALOG_247_LIST_String, "Continuar", "Cerrar");
		case DIALOG_PLAYER_POCKET:
		{
			new dialog[50 * (MAX_PLAYER_POCKET_OBJECTS + 2)], line_str[50];
			for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
			{
				if(PLAYER_POCKET[playerid][i][player_pocket_VALID])
				{
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", i + 1, PLAYER_POCKET[playerid][i][player_pocket_object_NAME]);
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					strcat(dialog, line_str);
				}
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Alimentos", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_POCKET_OPTIONS:
		{
			new caption[64];
			format(caption, sizeof caption, "Alimento - %s", PLAYER_POCKET[playerid][pTemp(playerid)[pt_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "- Consumir\n- Eliminar", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_OPTIONS:
		{
			new caption[64];
			format(caption, sizeof caption, "Arma - %s", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ pTemp(playerid)[pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);

			new dialog_body[1024] = "- Eliminar\n";

			if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_NORMAL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK) 
			{
				new vehicleid = GetNearVehicle(playerid);
				if(vehicleid != INVALID_VEHICLE_ID && PLAYER_VEHICLES[vehicleid][player_vehicle_VALID] && PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) {
					strcat(dialog_body, "- Guardar en el maletero");
				}
			}
			else if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY) {
				new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);

				if(index != -1) 
				{
					if(PROPERTY_INFO[index][property_OWNER_ID] == PI[playerid][pi_ID] && IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_X], PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Y], PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Z])) {
						strcat(dialog_body, "- Guardar en el armario");
					}
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog_body, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_POCKET_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Alimentos - Eliminar todo", "¿Estás seguro de que quiere eliminar todos sus alimentos?\nEsta opción no se puede deshacer y perderás todos lo que haya.", "Eliminar", "Atrás");	
		case DIALOG_PHONE:
		{
			new caption[50];
			format(caption, sizeof caption, "Mi teléfono - %d", PI[playerid][pi_PHONE_NUMBER]);
			
			new dialog[200];
			if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON) format(dialog, sizeof dialog, "{"#SILVER_COLOR"}1. Agenda\n{"#SILVER_COLOR"}2. Llamar\n{"#SILVER_COLOR"}3. Enviar mensaje\n{"#SILVER_COLOR"}4. Ver mensajes recibidos\n{"#SILVER_COLOR"}5. Ver mensajes enviados\n{"#SILVER_COLOR"}6. Tienda de compra y venta\n{"#SILVER_COLOR"}7. Apagar teléfono");
			else format(dialog, sizeof dialog, "{"#SILVER_COLOR"}1. Encender teléfono\n{"#SILVER_COLOR"}2. Agenda\n{"#SILVER_COLOR"}3. Llamar\n{"#SILVER_COLOR"}4. Enviar mensaje\n{"#SILVER_COLOR"}5. Ver mensajes recibidos\n{"#SILVER_COLOR"}6. Ver mensajes enviados\n{"#SILVER_COLOR"}7. Tienda de compra y venta");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PHONE_BOOK:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[80 * (MAX_PHONE_CONTACTS + 3)];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#BLUE_COLOR"}Número\n");

			new line_str[80], contacts, listitem;
			for(new i = 0; i != MAX_PHONE_CONTACTS; i++ )
			{
				if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;
				
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}%d\n", listitem + 1, PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER]);
				strcat(dialog, line_str);
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = i;
				
				contacts ++; listitem ++;
			}
			if(contacts < MAX_PHONE_CONTACTS)
			{
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 10;
				strcat(dialog, "{"#SILVER_COLOR"}+ Añadir contacto\n"); listitem ++;
			}
			if(contacts > 0)
			{
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 20;
				strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Mi teléfono - Agenda", dialog, "Continuar", "Atrás");		
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "Está añadiendo un nuevo contacto en su agenda.\nIndique el número de teléfono del nuevo contacto.", "Continuar", "Atrás");
		case DIALOG_PHONE_BOOK_ADD_NAME: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "Está añadiendo un nuevo contacto en su agenda.\nIndique el nombre del nuevo contacto.", "Continuar", "Atrás");
		case DIALOG_PHONE_BOOK_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{"#SILVER_COLOR"}1. Llamar\n{"#SILVER_COLOR"}2. Enviar mensaje\n{"#SILVER_COLOR"}3. Cambiar nombre del contacto\n{"#SILVER_COLOR"}4. Eliminar este contacto", "Continuar", "Atrás");			
			return 1;
		}
		case DIALOG_PHONE_BOOK_CHANGE_NAME:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
			
			new dialog[140];
			format(dialog, sizeof dialog, "Nombre actual: %s\nTeléfono: %d\n\nIndica el nuevo nombre de este contacto.", PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Cambiar", "Atrás");	
			return 1;
		}
		case DIALOG_PHONE_BOOK_CONFIRM_DELET:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
			
			new dialog[140];
			format(dialog, sizeof dialog, "¿Estás seguro de que desea eliminar el siguiente contacto?\n\nNombre: %s\nTeléfono: %d", PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Eliminar", "Atrás");	
			return 1;
		}
		case DIALOG_PHONE_BOOK_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Agenda - Eliminar todo", "¿Estás seguro de que quiere eliminar todos sus contactos?\nEsta opción no se puede deshacer y perderás todos los contactos guardados.", "Eliminar", "Atrás");	
		case DIALOG_PHONE_CALL_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Realizar una llamada", "¿A quién quieres llamar?\nIndique el número al que desea llamar.", "Continuar", "Atrás");
		case DIALOG_PHONE_SMS_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "¿A quién quieres enviarle el mensaje?\nIndique el número al que desea enviar el mensaje.", "Continuar", "Atrás");
		case DIALOG_PHONE_SMS_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "Escribe el mensaje que quieres enviar\nCaracteres: 1-64.", "Continuar", "Atrás");
		case DIALOG_PHONE_BOOK_SEND_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "Escribe el mensaje que quieres enviar\nCaracteres: 1-64.", "Continuar", "Atrás");
		case DIALOG_PHONE_SENT_MESSAGES:
		{
			inline OnSentMessagesLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new dialog[1600], caption[40], line_str[128];
					format(caption, sizeof caption, "Últimos %d mensajes enviados", rows);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Fecha\t{"#BLUE_COLOR"}Enviado a\t{"#SILVER_COLOR"}Mensaje\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							new message[64], date[24], phone_number, bool:isnull_phone_number;
							reg_name(i, "message", message);
							reg_name(i, "date", date);
							cache_is_value_name_null(i, "phone_number", isnull_phone_number);
							if(!isnull_phone_number) reg_int(i, "phone_number", phone_number);

							if(!phone_number) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}---\t{"#SILVER_COLOR"}%s\n", date, message);
							else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", date, convertPhoneNumber(playerid, phone_number), message);
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No hay mensajes.");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cerrar", "Atrás");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pmessages.*, player.phone_number FROM pmessages LEFT JOIN player ON pmessages.to_id = player.id WHERE pmessages.from_id = %d ORDER BY pmessages.date DESC LIMIT 10;", PI[playerid][pi_ID]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnSentMessagesLoad);
			return 1;
		}
		case DIALOG_PHONE_RECEIVED_MESSAGES:
		{
			inline OnReceivedMessagesLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new dialog[1600], caption[40], line_str[128];
					format(caption, sizeof caption, "Últimos %d mensajes recibidos", rows);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Fecha\t{"#BLUE_COLOR"}Remitente\t{"#SILVER_COLOR"}Mensaje\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							new message[64], date[24], phone_number, bool:isnull_phone_number;
							reg_name(i, "message", message);
							reg_name(i, "date", date);
							cache_is_value_name_null(i, "phone_number", isnull_phone_number);
							if(!isnull_phone_number) reg_int(i, "phone_number", phone_number);

							if(!phone_number) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}---\t{"#SILVER_COLOR"}%s\n", date, message);
							else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", date, convertPhoneNumber(playerid, phone_number), message);
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No hay mensajes.");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cerrar", "Atrás");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pmessages.*, player.phone_number FROM pmessages LEFT JOIN player ON pmessages.from_id = player.id WHERE pmessages.to_id = %d ORDER BY pmessages.date DESC LIMIT 10;", PI[playerid][pi_ID]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnReceivedMessagesLoad);
			return 1;
		}
		case DIALOG_CONFIRM_BUY_PROPERTY:
		{
			new dialog[220];
			
			if(PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_EXTRA])
			{
				format(dialog, sizeof dialog, "Coste de la propiedad: %d "SERVER_COIN"\nSeguro: NO\nMonedas "SERVER_COIN" actuales: %d "SERVER_COIN"\nMonedas "SERVER_COIN" tras la compra: %d "SERVER_COIN"\n\n¿De verdad desea comprar esta propiedad?", PROPERTY_INFO[ pTemp(playerid)[pt_BUY_HOUSE_INDEX] ][property_EXTRA], PI[playerid][pi_COINS], PI[playerid][pi_COINS] - PROPERTY_INFO[ pTemp(playerid)[pt_BUY_HOUSE_INDEX] ][property_EXTRA]);
			}
			else
			{
				format(dialog, sizeof dialog, "Precio de la propiedad: %s$\nSeguro: %s$\nBalance actual: %s$\nBalance tras la compra: %s$\n\n¿De verdad desea comprar esta propiedad?", number_format_thousand(PROPERTY_INFO[ pTemp(playerid)[pt_BUY_HOUSE_INDEX] ][property_PRICE]), number_format_thousand(PROPERTY_INFO[ pTemp(playerid)[pt_BUY_HOUSE_INDEX] ][property_PRICE] / 200), number_format_thousand(PI[playerid][pi_BANK_MONEY]), number_format_thousand(PI[playerid][pi_BANK_MONEY] - PROPERTY_INFO[ pTemp(playerid)[pt_BUY_HOUSE_INDEX] ][property_PRICE]));
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar propiedad",  dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_GPS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "GPS",  "- Mis lugares\n- Mis propiedades\n- Mis vehículos\n- Lugares de interés\n- Trabajos\n- Ver mapa", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[90 * (MAX_PLAYER_GPS_SAVES + 2)];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Lugar\t{FF846A}Distancia\n");
			
			new line_str[90], sites, listitem;
			for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i++ )
			{
				if(!PLAYER_GPS[playerid][i][player_gps_VALID]) continue;
				
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}%.2f Km\n", listitem + 1, PLAYER_GPS[playerid][listitem][player_gps_NAME], (GetPlayerDistanceFromPoint(playerid, PLAYER_GPS[playerid][listitem][player_gps_X], PLAYER_GPS[playerid][listitem][player_gps_Y], PLAYER_GPS[playerid][listitem][player_gps_Z]) * 0.01));
				strcat(dialog, line_str);
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = i;
				
				sites ++; listitem ++;
			}
			if(sites < MAX_PLAYER_GPS_SAVES)
			{
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = MAX_PLAYER_GPS_SAVES + 10;
				strcat(dialog, "{"#SILVER_COLOR"}+ Añadir lugar actual\n"); listitem ++;
			}
			if(sites > 0)
			{
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = MAX_PLAYER_GPS_SAVES + 20;
				strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Mis lugares", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_ADD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "GPS - Añadir lugar", "Tu posición actual será guardada en este lugar para ir más tarde.\nIndica el nombre de este lugar para guardarlo.", "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mis lugares - Eliminar todo", "¿Estás seguro de que quiere eliminar todos sus lugares?\nEsta opción no se puede deshacer y perderás todos los lugares guardados.", "Eliminar", "Atrás");	
		case DIALOG_PLAYER_GPS_PLAYER_OPTION:
		{
			new caption[40];
			format(caption, sizeof caption, "GPS - %s", PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{"#SILVER_COLOR"}1. Marcar coordenadas en el GPS\n{"#SILVER_COLOR"}2. Cambiar nombre de este lugar\n{"#SILVER_COLOR"}3. Eliminar este lugar del GPS", "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_CHANGE_NAME:
		{
			new dialog[90];
			format(dialog, sizeof dialog, "Nombre del lugar: %s\nIndica el nuevo nombre para este lugar.", PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "GPS - Cambiar nombre de un lugar", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_CONFIRM_DELET:
		{
			new dialog[95];
			format(dialog, sizeof dialog, "Nombre del lugar: %s\n¿Estás seguro de que quiere borrarlo del GPS?", PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "GPS - Eliminar un lugar", dialog, "Eliminar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITES:
		{
			new dialog[1024];
			format(dialog, sizeof dialog, "- Hospitales\n- Tiendas de Ropa\n- Tiendas 24/7\n- Restaurantes\n- Bancos\n- Cajeros\n- Gasolineras\n- Concesionarios\n- Gobierno\n- Policías\n");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "GPS - Lugares de interés", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_WORKS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[85 * (sizeof(work_info) + 1)], listitem;
			format(dialog, sizeof dialog, "Trabajo\tNivel\tDistancia\n");

			for(new i = 1; i != sizeof work_info; i ++)
			{
				if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;
				if(!obtain_work_coords[i][obtain_work_AVAILABLE]) continue;
				
				new line_str[85];
				if(i == WORK_MEDIC)
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s\t{"#SILVER_COLOR"}%d\t{"#SILVER_COLOR"}-\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], work_info[i][work_info_LEVEL]);
				else
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s\t{"#SILVER_COLOR"}%d\t{"#SILVER_COLOR"}%.2f Km\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], work_info[i][work_info_LEVEL], (GetPlayerDistanceFromPoint(playerid, obtain_work_coords[i][obtain_work_MAP_ICON_X], obtain_work_coords[i][obtain_work_MAP_ICON_Y], obtain_work_coords[i][obtain_work_MAP_ICON_Z]) * 0.01));
				strcat(dialog, line_str);
				
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Trabajos", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_WORKS_TELEPORTS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;

			new dialog[85 * (sizeof(work_info) + 1)], listitem;
			format(dialog, sizeof dialog, "Trabajo\tNivel\n");

			for(new i = 1; i != sizeof work_info; i ++)
			{
				new line_str[85];
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s (id: %d)\t{"#SILVER_COLOR"}%d\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], i, work_info[i][work_info_LEVEL]);
				strcat(dialog, line_str);

				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Trabajos", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_0: //Hospitales
		{
			new dialog[90 * (sizeof Hospital_Spawn_Positions)], listitem;

			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Lugar\t{"#BLUE_COLOR"}Zona");
			for(new i = 0; i != sizeof(Hospital_Spawn_Positions); i++ )
			{
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = i;

				new city[45], zone[45];
				GetPointZone(Hospital_Spawn_Positions[i][hspi_X], Hospital_Spawn_Positions[i][hspi_Y], city, zone);
				format(dialog, sizeof dialog, "%s\n{FFFFFF}Hospital %d\t{"#BLUE_COLOR"}%s, %s", dialog, listitem + 1, city, zone);

				listitem++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Hospitales", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_1: //Tiendas de ropa
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BINCO && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_SUBURBAN && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_PROLAPS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_DIDIER_SACHS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_VICTIM && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_ZIP) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				pTemp(playerid)[pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Tiendas de ropa", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_2: //Tiendas 24 horas
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_247) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				pTemp(playerid)[pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Tiendas 24/7", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_3: //Comida rapida
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_PIZZA && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_CLUCKIN_BELL && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BURGER_SHOT) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				pTemp(playerid)[pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Restaurantes", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_4: //Bancos
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_LS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_SF && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_LV) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				pTemp(playerid)[pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Bancos", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_5: //Cajeros
		{
			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");
			new line_str[90], sites;
			for(new i = 0; i != MAX_ATM_BANK; i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(!ATM_BANK[i][atm_valid]) continue;

				format(line_str, sizeof line_str, "{FFFFFF}Cajero %d\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, (GetPlayerDistanceFromPoint(playerid, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z]) * 0.01));
				strcat(dialog, line_str);

				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Cajeros", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_6: //Gasolineras
		{
			new dialog[90 * (sizeof(Fuel_Stations) + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(Fuel_Stations); i++ )
			{
				pTemp(playerid)[pt_PLAYER_LISTITEM][sites] = i;
				format(line_str, sizeof line_str, "{FFFFFF}Gasolinera %d\t%.2f Km\n", sites + 1, (GetPlayerDistanceFromPoint(playerid, Fuel_Stations[i][fs_X], Fuel_Stations[i][fs_Y], Fuel_Stations[i][fs_Z]) * 0.01));
				strcat(dialog, line_str);

				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Gasolineras", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_7: //Concesionarios
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Concesionarios", DIALOG_PLAYER_GPS_SITE_7_String, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_8: //policías
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_LS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_SF && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_LV) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				pTemp(playerid)[pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Policías", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_PROPERTIES:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new dialog[90 * (MAX_SU_PROPERTIES + 2)], line_str[90];
					format(dialog, sizeof dialog, "Propiedad\tDistancia\n");
					for(new i = 0; i != MAX_SU_PROPERTIES; i ++) pTemp(playerid)[pt_PLAYER_GPS_SELECTED_PROPERTY][i] = -1;
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							if(i >= MAX_SU_PROPERTIES) break;
							new property_name[24], Float:pos[3], bool:isnull_name;
							reg_int(i, "id", pTemp(playerid)[pt_PLAYER_GPS_SELECTED_PROPERTY][i]);
							cache_is_value_name_null(i, "name", isnull_name);
							if(!isnull_name) reg_name(i, "name", property_name);
							reg_float(i, "ext_x", pos[0]);
							reg_float(i, "ext_y", pos[1]);
							reg_float(i, "ext_z", pos[2]);
							format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", i + 1, property_name, (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No tienes propiedades");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Mis propiedades", dialog, "Continuar", "Atrás");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM properties WHERE id_player = %d;", PI[playerid][pi_ID]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_PLAYER_GPS_VEHICLES:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;

			new dialog[115 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "Vehículo\tMatrícula\tDistancia\n");
			for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU_VEHICLES) break;

				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					pTemp(playerid)[pt_PLAYER_LISTITEM][total_vehicles] = i;

					new Float:pos[3];
					GetVehiclePos(i, pos[0], pos[1], pos[2]);

					new line_str[115];

					if(!PLAYER_VEHICLES[i][player_vehicle_ACCESSIBLE])
						format(line_str, sizeof line_str, "{666666}%d. %s (%d)\t{666666}%s\t{666666}-\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], i, GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE]);
					else
						format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{"#SILVER_COLOR"}%.2f Km\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));

					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{"#SILVER_COLOR"}No tienes vehículos");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Mis vehículos", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "Propiedad - %s", PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);

			new dialog[512];
			format(dialog, sizeof dialog, "1. Cambiar nombre de la propiedad\n2. Echar a todo del mundo de mi propiedad\n3. Poner música desde tu MP3\n");

			if(PI[playerid][pi_CREW])
			{
				if(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES])
				{
					strcat(dialog, "4. Pasar a propiedad de banda\n");
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_NAME:
		{
			new dialog[85];
			format(dialog, sizeof dialog, "Nombre actual: %s\nIndica el nuevo nombre de la propiedad.", PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Propiedad - Cambiar nombre", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_MP3: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Reproductor MP3", "Indica el URL directo de canción que quieres reproducir.", "Reproducir", "Cerrar");
		case DIALOG_NOTARY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Notaría", "{"#SILVER_COLOR"}Vender una propiedad al banco\n{"#SILVER_COLOR"}Vender un vehículo al banco\n{"#SILVER_COLOR"}Vender una propiedad a una persona\n{"#SILVER_COLOR"}Vender un vehículo a una persona", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_NOTARY_SELECT_PROPERTY:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new dialog[45 * (MAX_SU_PROPERTIES + 2)], line_str[45];
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Propiedad\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							if(i >= MAX_SU_PROPERTIES) break;
							new property_name[24], bool:isnull_name;
							reg_int(i, "id", pTemp(playerid)[pt_PLAYER_LISTITEM][i]);
							cache_is_value_name_null(i, "name", isnull_name);
							if(!isnull_name) reg_name(i, "name", property_name);
							format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", i + 1, property_name);
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No tienes propiedades");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la propiedad que quieres vender", dialog, "Continuar", "Atrás");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name FROM properties WHERE id_player = %d;", PI[playerid][pi_ID]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_PROPERTY_BANK_SELL:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			
			new Float:price, payment;
			price = PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE];
			if(PI[playerid][pi_VIP]) payment = floatround( floatmul(price, 0.50) );
			else payment = floatround( floatmul(price, 0.25) );
			
			new dialog[160];
			format(dialog, sizeof dialog, "Precio en mercado: %s$\nNosotros te pagaremos: %s$\n\n¿Estás seguro de que quiere venderla?", number_format_thousand(PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE]), number_format_thousand(payment));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Vender", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_SELL_PRICE:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			
			new Float:price, min_price, max_price;
			price = PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE];
			min_price = floatround( floatmul(price, 0.15) );
			max_price = floatround( floatmul(price, 6.0) );
			
			new dialog[250];
			format(dialog, sizeof dialog, 
			"Precio en mercado: %s$\n\nPrecio mínimo de venta: %s$\nPrecio máximo de venta: %s$\n\n¿Por cuánto quieres vender esta propiedad?", 
			number_format_thousand(PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE]),
			number_format_thousand(min_price),
			number_format_thousand(max_price));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_SELL_TO_PLAYER:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			
			new dialog[250];
			format(dialog, sizeof dialog, "De acuerdo, quieres vender esta propiedad por %s$.\n\nIndica el nombre o playerid del comprador.\nEl comprador debe estar en la sala y cumplir todos los requisitos.", number_format_thousand(pTemp(playerid)[pt_NOTARY_PRICE]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SELL_CONFIRM_PROPERTY:
		{
			new dialog[240];
			format(dialog, sizeof dialog,
				"%s te quiere vender una propiedad.\n\n\
				Propiedad: %d\n\
				Precio: %s$\n\n\
				Balance tras la compra: %s$\n\n\
				¿Quieres comprar esta propiedad?",
				PlayerTemp[ pTemp(playerid)[pt_NOTARY_TO_PLAYER] ][pt_NAME],
				PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_ID],
				number_format_thousand(pTemp(playerid)[pt_NOTARY_PRICE]),
				number_format_thousand( PI[playerid][pi_BANK_MONEY] - pTemp(playerid)[pt_NOTARY_PRICE] )
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Oferta recibida", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_NOTARY_SELECT_VEHICLE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[95 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Vehículo\t{"#BLUE_COLOR"}Matrícula\n");
			for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU_VEHICLES) break;
				
				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					pTemp(playerid)[pt_PLAYER_LISTITEM][total_vehicles] = i;
					
					new line_str[95];
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}%s\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE]);
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{"#SILVER_COLOR"}No tienes vehículos");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona el vehículo que quieres vender", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_BANK_SELL:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new Float:price, payment;
			price = PLAYER_VEHICLES[pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED]][player_vehicle_PRICE];
			if(PI[playerid][pi_VIP]) payment = floatround( floatmul(price, 0.50) );
			else payment = floatround( floatmul(price, 0.25) );
			
			new dialog[160];
			format(dialog, sizeof dialog, "Precio en mercado: %s$\nNosotros te pagaremos: %s$\n\n¿Estás seguro de que quiere venderlo?", number_format_thousand( PLAYER_VEHICLES[pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED]][player_vehicle_PRICE] ), number_format_thousand(payment));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Vender", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_SELL_PRICE:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new Float:price, min_price, max_price;
			price = PLAYER_VEHICLES[pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED]][player_vehicle_PRICE];
			min_price = floatround( floatmul(price, 0.15) );
			max_price = floatround( floatmul(price, 6.0) );
			
			new dialog[250];
			format(dialog, sizeof dialog, 
			"Precio en mercado: %s$\n\nPrecio mínimo de venta: %s$\nPrecio máximo de venta: %s$\n\n¿Por cuánto quieres vender este vehículo?", 
			number_format_thousand(PLAYER_VEHICLES[pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED]][player_vehicle_PRICE]),
			number_format_thousand(min_price),
			number_format_thousand(max_price));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_SELL_TO_PLAYER:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new dialog[250];
			format(dialog, sizeof dialog, "De acuerdo, quieres vender este vehículo por %s$.\n\nIndica el nombre o playerid del comprador.\nEl comprador debe estar en la sala y cumplir todos los requisitos.", number_format_thousand(pTemp(playerid)[pt_NOTARY_PRICE]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SELL_CONFIRM_VEHICLE:
		{
			new dialog[300];
			format(dialog, sizeof dialog,
				"%s te quiere vender un vehículo.\n\n\
				Vehículo: %s\n\
				Matrícula: %s\n\
				Precio: %s$\n\n\
				Balance tras la compra: %s$\n\n\
				¿Quieres comprar este vehículo?",
				PlayerTemp[ pTemp(playerid)[pt_NOTARY_TO_PLAYER] ][pt_NAME],
				VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME],
				GLOBAL_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_NUMBER_PLATE],
				number_format_thousand(pTemp(playerid)[pt_NOTARY_PRICE]),
				number_format_thousand( PI[playerid][pi_BANK_MONEY] - pTemp(playerid)[pt_NOTARY_PRICE] )
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Oferta recibida", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_TUNING_MENU_PART:
		{
			inline OnComponentsInfoLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new caption[45], dialog[80 * TOTAL_TUNING_PARTS], line_str[80];
					format(caption, sizeof caption, "Tuning - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Categoría\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							if(i >= TOTAL_TUNING_PARTS)
							{
								printf("---> Límite superado en array 'PLAYER_TUNING_MENU, dialog Parts' al intentar cargar de la base de datos.");
								break;
							}

							cache_get_value_index(i, 0, PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME]);
							format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME]);
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{666666}Este vehículo no se puede tunear");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Atrás");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT vcomponents_info.part FROM vcomponents_info INNER JOIN vcomponents ON vcomponents_info.id = vcomponents.componentid WHERE vcomponents.modelid = %d GROUP BY vcomponents_info.part;", GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnComponentsInfoLoad);
			return 1;
		}
		case DIALOG_TUNING_MENU_COMPONENT:
		{
			inline OnComponentsInfoLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new caption[45], dialog[75 * MAX_TUNING_PARTS_COMPONENTS], line_str[75];
					format(caption, sizeof caption, "%s > %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], pTemp(playerid)[pt_TUNING_SELECTED_PART]);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Categoría\t{"#BLUE_COLOR"}Piezas necesarias\t{"#SILVER_COLOR"}Estimación\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							if(i >= MAX_TUNING_PARTS_COMPONENTS)
							{
								printf("---> Límite superado en array 'PLAYER_TUNING_MENU, dialog Partsnames' al intentar cargar de la base de datos.");
								break;
							}

							reg_int(i, "id", PLAYER_TUNING_MENU[playerid][i][tuning_menu_ID]);
							reg_name(i, "name", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME]);
							reg_int(i, "pieces", PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES]);
							format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%d\t{"#SILVER_COLOR"}%s$\n", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME], PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES], number_format_thousand(PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES] * 50));
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{666666}No se puede tunear");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Atrás");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT vcomponents_info.id, vcomponents_info.name, vcomponents_info.pieces FROM vcomponents_info INNER JOIN vcomponents ON vcomponents_info.id = vcomponents.componentid WHERE vcomponents_info.part = '%e' AND vcomponents.modelid = %d;", pTemp(playerid)[pt_TUNING_SELECTED_PART], GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnComponentsInfoLoad);
			return 1;
		}
		case DIALOG_GRAFFITI_EDIT: {
			ShowPlayerDialog(playerid, DIALOG_GRAFFITI_EDIT, DIALOG_STYLE_LIST, "Graffiti", "1. Cambiar posición\n2. Editar texto\n3. Borrar", "Continuar", "Cerrar");
		}
		case DIALOG_MECHANIC_MENU:
		{
			new caption[60];
			format(caption, sizeof caption, "%s piezas disponibles - %s", number_format_thousand(PI[playerid][pi_MECHANIC_PIECES]), VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new dialog[450];
			format(dialog, sizeof dialog, 
			"\
				{"#SILVER_COLOR"}Opción\t{"#BLUE_COLOR"}Piezas necesarias\t{"#SILVER_COLOR"}Estimación\n\
				{"#SILVER_COLOR"}Reparación completa\t{"#BLUE_COLOR"}10\t{"#SILVER_COLOR"}500$\n\
			");
			
			for(new i; i != sizeof Mechanic_Areas; i++)
			{
				if(IsPlayerInDynamicArea(playerid, Mechanic_Areas[i]))
				{
					new paintjobs = VehiclePaintjob( GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] );
					strcat(dialog, "{"#SILVER_COLOR"}Pintar vehículo\t{"#BLUE_COLOR"}5\t{"#SILVER_COLOR"}250$\n");
					if(PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL] >= 4)
					{
						strcat(dialog, "{"#SILVER_COLOR"}Eliminar componentes\n");
						strcat(dialog, "{"#SILVER_COLOR"}Tunear vehículo\n");
						if(paintjobs > 0) strcat(dialog, "{"#SILVER_COLOR"}Paintjob\t{"#BLUE_COLOR"}15\t{"#SILVER_COLOR"}750$\n");
					}
					else
					{
						strcat(dialog, "{666666}Eliminar componentes\n");
						strcat(dialog, "{666666}Tunear vehículo\n");
						if(paintjobs > 0) strcat(dialog, "{666666}Paintjob\t{666666}15\t{666666}750$\n");
					}
					break;
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_REPAIR_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Reparar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio de la reparación.\nRango de precio: 0$ - 2.000$", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_COLOR_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para pintar el vehículo.\nRango de precio: 0$ - 1.750$", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_TUNING_PRICE:
		{
			new caption[60], dialog[145];
			format(caption, sizeof caption, "Tunear %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			format(dialog, sizeof dialog, "Indica el precio para tunear el vehículo.\nRango de precio: 0$ - %s$", number_format_thousand((pTemp(playerid)[pt_TUNING_SELECTED_PIECES] * 50) + 2000));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_PAINTJOB_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Paintjob %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			if(pTemp(playerid)[pt_PAINTJOB_SELECTED_ID] == 3)
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para eliminar el paintjob del vehículo.\nRango de precio: 0$ - 2.750$", "Continuar", "Atrás");
			else
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para el paintjob del vehículo.\nRango de precio: 0$ - 2.750$", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_REM_COM_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Eliminar componente de %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para eliminar el componente del vehículo.\nRango de precio: 0$ - 2.750$", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_ACCEPT:
		{
			new dialog[300];
			format(dialog, sizeof dialog,
				
				"\
					{"#SILVER_COLOR"}El mecánico %s te ofrece:\n\
						\t%s\n\
					\n\
					{"#SILVER_COLOR"}Precio: %s$\n\
					¿Quieres aceptarlo?\n\
				",
					PlayerTemp[ pTemp(playerid)[pt_MECHANIC_PID] ][pt_NAME],
					pTemp(playerid)[pt_MECHANIC_TEXT],
					number_format_thousand(pTemp(playerid)[pt_MECHANIC_PRICE])
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mecánico", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COL_SLOT:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{"#SILVER_COLOR"}Pintar color primario\n{"#SILVER_COLOR"}Pintar color secundario", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COLOR, DIALOG_PLANE_SELECT_COLOR, DIALOG_BOAT_SELECT_COLOR:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			
			new dialog[15 * (sizeof(VEHICLE_COLORS) + 1) ];
			for(new i = 0; i != sizeof VEHICLE_COLORS; i++)
			{
				new line_str[15];
				format(line_str, sizeof(line_str), "{%06x}%d\n", VEHICLE_COLORS[i] >>> 8, i);
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_REMOVE_COMPONEN:
		{
			inline OnComponentsInfoLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new caption[60], dialog[80 * (MAX_VEHICLE_COMPONENTS + 2) ], count, line_str[80];
					format(caption, sizeof caption, "Componentes de %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Componente\t{"#BLUE_COLOR"}Piezas\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							new id, part[24], name[24];
							reg_int(i, "id", id);
							PLAYER_TUNING_MENU[playerid][count][tuning_menu_ID] = GetVehicleComponentIndexFromId(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], id);
							if(PLAYER_TUNING_MENU[playerid][count][tuning_menu_ID] != -1) {
								reg_name(i, "part", part);
								reg_name(i, "name", name);
								reg_int(i, "pieces", PLAYER_TUNING_MENU[playerid][count][tuning_menu_PIECES]);
								format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s > %s\t{"#BLUE_COLOR"}+ %d\n", part, name, PLAYER_TUNING_MENU[playerid][count][tuning_menu_PIECES]);
								strcat(dialog, line_str);
								count++;
							}
							else strcat(dialog, "{"#SILVER_COLOR"}Vehículo sin tunear"); 
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}Vehículo sin tunear");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Eliminar", "Atrás");
				}
			}

			new components_query[1024], count;
			format(components_query, sizeof components_query, "SELECT * FROM vcomponents_info WHERE");
			for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
			{
				PLAYER_TUNING_MENU[playerid][i][tuning_menu_ID] = -1;
				if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]) continue;
				if(count == 0) format(components_query, sizeof components_query, "%s id = %d", components_query, GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]);
				else format(components_query, sizeof components_query, "%s OR id = %d", components_query, GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]);
				count ++;
			}
			if(!count) SendClientMessagef(playerid, -1, "Vehículo sin tunear.");
			else mysql_tquery_inline(handle_db, components_query, using inline OnComponentsInfoLoad);
			return 1;
		}
		case DIALOG_TUNING_PAINTJOB:
		{
			new caption[60], dialog[25 * 4];
			format(caption, sizeof caption, "Paintjob - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new paintjobs = VehiclePaintjob( GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] );
			if(paintjobs == 0)
			{
				SendClientMessagef(playerid, -1, "Este vehículo no soporta paintjobs.");
				ShowDialog(playerid, DIALOG_MECHANIC_MENU);
				return 1;
			}
			
			strcat(dialog, "{"#SILVER_COLOR"}Eliminar paintjob (+ 15 piezas)\n");
			for(new i = 0; i != paintjobs; i ++)
			{
				new line_str[25];
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Paintjob %d\n", i + 1);
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SEED_LIST:
		{
			new dialog[64 * (sizeof(seed_info) + 1)];
			format(dialog, sizeof dialog, "Nombre\tPrecio por semilla\n");
			
			for(new i = 0; i != sizeof seed_info; i ++)
			{
				new line_str[64];
				if(PLAYER_WORKS[playerid][WORK_FARMER][pwork_LEVEL] >= seed_info[i][seed_info_EXP])
				{
					if(seed_info[i][seed_info_TYPE] == TYPE_LEGAL) format(line_str, sizeof line_str, "{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d$\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
					else format(line_str, sizeof line_str, "{"#RED_COLOR"}%s\t{"#SILVER_COLOR"}%d$\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
				}
				else format(line_str, sizeof line_str, "{666666}%s\t{666666}%d$\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
				
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Semillas", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_SEED_BUY:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Vale, quieres comprar semillas de %s.\n{"#SILVER_COLOR"}El precio por semilla es de: %d$\n\n{"#SILVER_COLOR"}¿Cuántas semillas quieres comprar?", seed_info[ pTemp(playerid)[pt_SELECTED_BUY_SEED_ID] ][seed_info_NAME], seed_info[ pTemp(playerid)[pt_SELECTED_BUY_SEED_ID] ][seed_info_PRICE]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Semillas", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLANT_PLANTS:
		{
			new dialog[95 * (sizeof(seed_info) + 1)];
			format(dialog, sizeof dialog, "Planta\tSemilla requerida\tSemillas necesarias\n");
			
			for(new i = 0; i != sizeof plant_info; i ++)
			{
				new line_str[95];
				
				if(seed_info[i][seed_info_TYPE] == TYPE_LEGAL) format(line_str, sizeof line_str, "{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", plant_info[i][plant_info_NAME], seed_info[i][seed_info_NAME], plant_info[i][plant_info_SEEDS]);
				else format(line_str, sizeof line_str, "{"#RED_COLOR"}%s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", plant_info[i][plant_info_NAME], seed_info[i][seed_info_NAME], plant_info[i][plant_info_SEEDS]);

				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Plantar", dialog, "Continuar", "Cerrar");
		}
		case DIALOG_PLAYER_WEAPONS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Arma\t{"#BLUE_COLOR"}Munición\t{"#SILVER_COLOR"}Slot\n");
			
			for(new i = 0; i < sizeof PLAYER_WEAPONS[]; i ++)
			{
				if(!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;
				
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);
				
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = i; 
				listitem ++;
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = 13 + 20;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Mis armas", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE_A:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mis armas - Eliminar todo", "¿Estás seguro de que quiere eliminar todas sus armas?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "Arma: %s\nMunición: %s\n\n¿Estás seguro de que quiere eliminar esta arma?\nEsta opción no se puede deshacer.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ pTemp(playerid)[pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][ pTemp(playerid)[pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mis armas - Eliminar arma", dialog, "Eliminar", "Cerrar");	
			return 1;
		}
		case DIALOG_ANIMS: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Animaciones", DIALOG_ANIMS_String, "Continuar", "X");
		case DIALOG_TRICKS_FOOD:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: alimento\nNombre: %s\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_NAME],
									PLAYER_POCKET[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][ pTemp(playerid)[pt_TRICK_SELLER_EXTRA] ][player_pocket_object_NAME],
									number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_MEDICINE:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: medicamento\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_NAME],
									pTemp(playerid)[pt_TRICK_SELLER_EXTRA],
									number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_CANNABIS:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: marihuana\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_NAME],
									pTemp(playerid)[pt_TRICK_SELLER_EXTRA],
									number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_CRACK:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: crack\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_NAME],
									pTemp(playerid)[pt_TRICK_SELLER_EXTRA],
									number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_SU:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender %d "SERVER_COIN"\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_NAME],
									pTemp(playerid)[pt_TRICK_SELLER_EXTRA],
									number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_WEAPON:
		{	
			new dialog[180];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: arma\nNombre: %s\nMunición: %s\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_NAME],
									WEAPON_INFO[ PLAYER_WEAPONS[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][ pTemp(playerid)[pt_TRICK_SELLER_EXTRA] ][player_weapon_ID] ][weapon_info_NAME],
									number_format_thousand(PLAYER_WEAPONS[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][ pTemp(playerid)[pt_TRICK_SELLER_EXTRA] ][player_weapon_AMMO]),
									number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_SELL_KIT:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "{"SILVER_COLOR"}el mecanico %s te quiere vender %d kit(s)\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_NAME],
									pTemp(playerid)[pt_TRICK_SELLER_EXTRA],
									number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Kit de reparacion", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_VEHICLE_BOOT:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
	
			new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
			if(max_slots > MAX_BOOT_SLOTS) max_slots = MAX_BOOT_SLOTS;
			
			new dialog[128 * (MAX_BOOT_SLOTS + 2)], line_str[128], listitem;
			format(dialog, sizeof dialog, "Tipo\tDescripción\n");
			
			for(new i = 0; i != max_slots; i ++)
			{
				if(VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_VALID])
				{
					switch(VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_TYPE])
					{
						case BOOT_TYPE_WEAPON:
						{
							format(line_str, sizeof line_str, "%s\t%s (%s balas)\n", GetBootTypeName(VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_TYPE]), WEAPON_INFO[ VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT] ][weapon_info_NAME], number_format_thousand(VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT_EXTRA]));
							strcat(dialog, line_str);
						}
						case BOOT_TYPE_MEDICINES, BOOT_TYPE_CANNABIS, BOOT_TYPE_CRACK:
						{
							format(line_str, sizeof line_str, "%s\t%s gramos\n", GetBootTypeName(VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_TYPE]), number_format_thousand(VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT]));
							strcat(dialog, line_str);
						}
					}
					
					pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = i;
					listitem ++;
				}
			}
			
			new caption[64];
			format(caption, sizeof caption, "Maletero de %s (%d espacios disponibles)", VEHICLE_INFO[GLOBAL_VEHICLES[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_NAME], max_slots - listitem);
			
			pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = MAX_BOOT_SLOTS + 20;
			strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Cerrar");
		}
		case DIALOG_VEHICLE_BOOT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Maletero - Eliminar todo", "¿Estás seguro de que quiere eliminar todo de su maletero?\nEsta opción no se puede deshacer.", "Eliminar", "Cancelar");	
		case DIALOG_VEHICLE_BOOT_OPTIONS:
		{	
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Opciones", "{"#SILVER_COLOR"}1. Sacar\n{"#SILVER_COLOR"}2. Eliminar", "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_DELETE:
		{
			new dialog[190];

			switch(VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE])
			{
				case BOOT_TYPE_WEAPON: format(dialog, sizeof dialog, "Tipo: %s\nDescripción: %s (%s balas)\n\n¿Estás seguro de que quiere eliminar esto de tu maletero?\nEsta opción no se puede deshacer.", GetBootTypeName(VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE]), WEAPON_INFO[ VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME], number_format_thousand( VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT_EXTRA] ));
				case BOOT_TYPE_MEDICINES, BOOT_TYPE_CANNABIS, BOOT_TYPE_CRACK: format(dialog, sizeof dialog, "Tipo: %s\nDescripción: %s gramos\n\n¿Estás seguro de que quiere eliminar esto de tu maletero?\nEsta opción no se puede deshacer.", GetBootTypeName(VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE]), number_format_thousand( VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ));
			}			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Maletero - Eliminar", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_SELECT_POLICE_SKIN:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[60 * sizeof(POLICE_SKINS)], line_str[60], listitem;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Ropa\t{"#SILVER_COLOR"}Rango necesario\n");
			for(new i = 0; i != sizeof POLICE_SKINS; i ++)
			{
				if(POLICE_SKINS[i][police_skin_TYPE] != PI[playerid][pi_GENDER]) continue;
				
				if(POLICE_SKINS[i][police_skin_RANK] > PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL]) format(line_str, sizeof line_str, "{666666}%d\t{666666}%s\n", POLICE_SKINS[i][police_skin_SKIN], POLICE_RANKS[ POLICE_SKINS[i][police_skin_RANK] ]);
				else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d\t{"#SILVER_COLOR"}%s\n", POLICE_SKINS[i][police_skin_SKIN], POLICE_RANKS[ POLICE_SKINS[i][police_skin_RANK] ]);
				strcat(dialog, line_str);
				
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la ropa", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_RADIOS:
		{
			new dialog[64 * 6];
			for(new i = 0; i != 6; i ++)
			{
				new players = CountPoliceRadioPlayers(i);
				
				if(pTemp(playerid)[pt_POLICE_RADIO] == i) strcat(dialog, "{"#SILVER_COLOR"}");
				else strcat(dialog, "{666666}");
				format(dialog, sizeof dialog, "%sFrecuencia %d:\t%d personas\n", dialog, i, players);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, "Selecciona la frecuencia", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_LIST:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new dialog[128 * 15], line_str[128], count, start_pos = pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}Últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i ++)
					{
						new level, id, name[24], last_connection[24], connected;
						reg_int(i, "level", level);
						reg_int(i, "id", id);
						reg_name(i, "name", name);
						reg_name(i, "last_connection", last_connection);
						reg_int(i, "connected", connected);

						if(connected) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, POLICE_RANKS[level]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, POLICE_RANKS[level], last_connection);
						strcat(dialog, line_str);
						pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = id;
					}

					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "policías", dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pworks.level, player.id, player.name, player.last_connection, player.connected FROM pworks INNER JOIN player ON pworks.id_player = player.id WHERE pworks.id_work = %d AND pworks.`set` = 1 ORDER BY player.connected DESC, pworks.level DESC LIMIT %d, %d;", WORK_POLICE, pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT], pTemp(playerid)[pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_POLICE_MODIFY:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					if(rows)
					{
						new level, name[24];
						reg_int(0, "level", level);
						reg_name(0, "name", name);

						if(level > PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL]) SendClientMessagef(playerid, -1, "No puedes modificar el rango de este policía porque es un rango superior al tuyo.");
						else
						{
							new caption[45], dialog[45 * sizeof(POLICE_RANKS)], line_str[45];
							format(caption, sizeof caption, "policía - %s", name);
							format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Civil (eliminar)\n");
							for(new i = 1; i != sizeof POLICE_RANKS; i ++)
							{
								if(i > PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL])
								{
									if(level == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", POLICE_RANKS[i]);
									else format(line_str, sizeof line_str, "{666666}%s\n", POLICE_RANKS[i]);
								}
								else
								{
									if(level == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", POLICE_RANKS[i]);
									else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", POLICE_RANKS[i]);
								}
								strcat(dialog, line_str);
							}
							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
						}
					}
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pworks.level, player.name FROM pworks INNER JOIN player ON pworks.id_player = player.id WHERE pworks.id_player = %d AND pworks.id_work = %d AND pworks.`set` = 1;", pTemp(playerid)[pt_SELECTED_DB_AC_ID], WORK_POLICE);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_POLICE_EQUIPTMENT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Equiparse", "{"#SILVER_COLOR"}Equipar armas\n{"#SILVER_COLOR"}Equipar chaleco antibalas", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_ARMOUR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Equipar Chaleco", "{"#SILVER_COLOR"}El chaleco antibalas sirve para subir la resistencia.\n¿Lo quieres equipar?", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_WEAPONS:
		{
			new dialog[512 * (sizeof(POLICE_WEAPONS) + 24)];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Armamento\t{"#SILVER_COLOR"}Rango\n");
			
			for(new i = 0; i != sizeof POLICE_WEAPONS; i ++)
			{
				new line_str[512];
				if(POLICE_WEAPONS[i][police_weapon_RANK] > PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL])
				{
					format(line_str, sizeof line_str, "{666666}%s\t{666666}%s\n", POLICE_WEAPONS[i][police_weapon_PACK_NAME], POLICE_RANKS[ POLICE_WEAPONS[i][police_weapon_RANK] ]);
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", POLICE_WEAPONS[i][police_weapon_PACK_NAME], POLICE_RANKS[ POLICE_WEAPONS[i][police_weapon_RANK] ]);
					strcat(dialog, line_str);
				}
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Equipar Armas", dialog, "Comprar", "Atras");
			return 1;
		}
		case DIALOG_MECHANIC_LIST:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new dialog[128 * 15], line_str[128], count, start_pos = pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}Últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i ++)
					{
						new level, id, name[24], last_connection[24], connected;
						reg_int(i, "level", level);
						reg_int(i, "id", id);
						reg_name(i, "name", name);
						reg_name(i, "last_connection", last_connection);
						reg_int(i, "connected", connected);

						if(connected) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Conectado\n", start_pos + i, name, MECHANIC_RANKS[level]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, MECHANIC_RANKS[level], last_connection);
						strcat(dialog, line_str);
						pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = id;
					}

					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Mecanicos", dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pworks.level, player.id, player.name, player.last_connection, player.connected FROM pworks INNER JOIN player ON pworks.id_player = player.id WHERE pworks.id_work = %d AND pworks.`set` = 1 ORDER BY player.connected DESC, pworks.level DESC LIMIT %d, %d;", WORK_MECHANIC, pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT], pTemp(playerid)[pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_MECHANIC_MODIFY:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					if(rows)
					{
						new level, name[24];
						reg_int(0, "level", level);
						reg_name(0, "name", name);

						if(level > PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL]) SendClientMessagef(playerid, -1, "No puedes modificar el rango de este mecanico porque es un rango superior al tuyo.");
						else
						{
							new caption[45], dialog[45 * sizeof(MECHANIC_RANKS)], line_str[45];
							format(caption, sizeof caption, "Mecanico - %s", name);
							format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Civil (eliminar)\n");
							for(new i = 1; i != sizeof MECHANIC_RANKS; i ++)
							{
								if(i > PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL])
								{
									if(level == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", MECHANIC_RANKS[i]);
									else format(line_str, sizeof line_str, "{666666}%s\n", MECHANIC_RANKS[i]);
								}
								else
								{
									if(level == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", MECHANIC_RANKS[i]);
									else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", MECHANIC_RANKS[i]);
								}
								strcat(dialog, line_str);
							}
							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
						}
					}
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pworks.level, player.name FROM pworks INNER JOIN player ON pworks.id_player = player.id WHERE pworks.id_player = %d AND pworks.id_work = %d AND pworks.`set` = 1;", pTemp(playerid)[pt_SELECTED_DB_AC_ID], WORK_MECHANIC);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_HELP:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""SERVER_NAME" v"SERVER_VERSION"",
			
				"\
					{"#SILVER_COLOR"}- General\n\
					{"#SILVER_COLOR"}- Información\n\
					{"#SILVER_COLOR"}- Personaje\n\
					{"#SILVER_COLOR"}- Propiedades\n\
					{"#SILVER_COLOR"}- Reportar\n\
					{"#SILVER_COLOR"}- Trabajos\n\
					{"#SILVER_COLOR"}- Vehículos\n\
					{"#SILVER_COLOR"}- Bandas\n\
					{"#PRIMARY_COLOR"}- Membresía VIP\n\
				"
			
			, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_HELP_GENERAL:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "General",
			
				"\
					{FFFFFF}Un día del juego dura tres horas reales.\n\
					\n\
					Para subir de nivel necesitas rellenar la reputación, puedes verlo gráficamente\n\
					en la barra que aparece en la parte superior derecha que representa tu reputación.\n\
					La reputación se aumenta cada {"#PRIMARY_COLOR"}25 minutos,{FFFFFF} cuando la reputación llegue\n\
					al límite podrás subir al siguiente nivel.\n\
					{FFFFFF}El pago de juego(payday) se recibe cada tres reputaciones {"#PRIMARY_COLOR"}(75 minutos).\n\
					{FFFFFF}Puedes utilizar {"#SILVER_COLOR"}/csave{FFFFFF} para guardar los datos de tu cuenta.\n\
					\n\
					Utiliza {"#SILVER_COLOR"}/estadisticas{FFFFFF} para ver tus estadísticas, utiliza {"#SILVER_COLOR"}/exp{FFFFFF} para ver tus habilidades.\n\
					En el nivel uno no podrás agredir a otros jugadores, tampoco podrás tener armas\n\
					hasta el nivel tres.\n\
					Utiliza {"#SILVER_COLOR"}/nombre{FFFFFF} para cambiar tu nombre.\n\
					Utiliza {"#SILVER_COLOR"}/correo{FFFFFF} para cambiar tu correo electrónico.\n\
					Utiliza {"#SILVER_COLOR"}/pass{FFFFFF} para cambiar la contraseña de tu cuenta.\n\
					Para ver el tiempo que te queda en la cárcel utiliza {"#SILVER_COLOR"}/tiempo.\n\
					\n\
					{FFFFFF}Para utilizar el canal de dudas utiliza el comando {"#SILVER_COLOR"}/duda{FFFFFF} seguido de tu duda.\n\
					Para deshabilitar o volver a habilitar el canal de dudas usa {"#SILVER_COLOR"}/dudas.\n\
					\n\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/panel {FFFFFF}para configuraciones básicas de tu cuenta.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_INFO:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Información", DIALOG_CREDIT_String, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_CHARACTER:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Personaje",
			
				"\
					{FFFFFF}Para poder localizar cualquier punto en San Andreas te recomandamos que compres\n\
					un GPS en cualquier tienda {FF846A}24/7.{FFFFFF} Desde el GPS podrás localizarlo todo, tus vehículos,\n\
					tus propiedades, trabajos, lugares de interés, etc.\n\
					\n\
					Utiliza tu teléfono para llamar a la policía, mecánico, uber... o para hablar con\n\
					alguien, por defecto tendrás varios contactos en la agenda pero puedes eliminarlos\n\
					o añadir más, puedes tener hasta 20 contactos, todo esto se hace desde {"#SILVER_COLOR"}/movil{FFFFFF} o {"#SILVER_COLOR"}/celular.\n\
					\n\
					{FFFFFF}En las tiendas {FF846A}24/7{FFFFFF} puedes comprar guías para saber el número de cualquier jugador.\n\
					Para evitar aparecer en la guía utiliza {"#SILVER_COLOR"}/sguia.\n\
					\n\
					{FFFFFF}Las barras en la esquina superior derecha representan tu nivel de hidratación y de alimentación,\n\
					si los niveles llegan muy abajo tu personaje se empezará a sentir mal y empezarás a perder vida.\n\
					Los niveles bajarán según tu actividad física, corriendo te dará sed más pronto que caminando.\n\
					Para alimentarte ve a un restaurante de cómida rápida o a un {FF846A}24/7{FFFFFF} donde podrás comprar alimentos,\n\
					que podrás consumir el cualquier momento con {"#SILVER_COLOR"}/alimentos{FFFFFF} o {"#SILVER_COLOR"}/consumir.\n\
					\n\
					{FFFFFF}Puedes dar objetos con el comando {"#SILVER_COLOR"}/dar,{FFFFFF} para más información utiliza {"#SILVER_COLOR"}/man dar.\n\
					{FFFFFF}Puedes deshacerte de tus objetos con el comando {"#SILVER_COLOR"}/tirar,{FFFFFF} para más información utiliza {"#SILVER_COLOR"}/man tirar.\n\
					{FFFFFF}Puedes vender objetos con el comando {"#SILVER_COLOR"}/vender, para más información utiliza {"#SILVER_COLOR"}/man vender.\n\
					{FFFFFF}Para consumir consumibles que lleves contigo utiliza {"#SILVER_COLOR"}/consumir.\n\
					\n\
					{FFFFFF}Puedes cambiar la ropa de tu personaje en cualquier tienda de ropa, también\n\
					podrás comprarte accesorios y ponertelos o quitartelos {"#SILVER_COLOR"}(/accesorios).\n\
					\n\
					{FFFFFF}Si tienes nivel de búsqueda o estás arrestado y mueres irás a la cárcel después de recuperarte.\n\
					Cuando te arresten los policías te pueden requisar tus pertenencias ilegales {FF846A}(armas y drogas).\n\
					\n\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/inv{FFFFFF} o pulsa {"#SILVER_COLOR"}N {FFFFFF}para ver todo lo que llevas encima.\n\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/estilo{FFFFFF} para cambiar el estilo de tu personaje.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_PROPERTIES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Propiedades",
			
				"\
					{FFFFFF}Puedes encontrar diferentes propiedades en todo {FF846A}San Andreas,{FFFFFF} para comprarla tendrás que saber la\n\
					ID de la propiedad e ir a cualquier banco para comprarla, el dinero se descuenta de la cuenta bancaria.\n\
					\n\
					Puedes localizar tus propiedades con el GPS.\n\
					Puedes dejar pasar a cualquiera a tu propiedad, solo tiene que tocar el timbre\n\
					y tu elijes si quieres dejarlo pasar o no.\n\
					\n\
					Si quieres echar a alguien que está dentro de tu propiedad utiliza el comando {"#SILVER_COLOR"}/echar.\n\
					{FFFFFF}Dentro de la propiedad sitúate en la puerta interior y pon {"#SILVER_COLOR"}/casa,{FFFFFF} desde ahí podras\n\
					cambiar el nombre de la propiedad para así localizarla más fácilmente en el GPS.\n\
					{FFFFFF}también podrás echar a todos los huéspedes de tu propiedad.\n\
					Si tienes un MP3 podrás poner música en él y hacer que se reproduzca para toda la gente\n\
					que haya dentro de la propiedad.\n\
					\n\
					Si quieres vender tu propiedad puedes hacerlo en {"#PRIMARY_COLOR"}\"Gobierno San Andreas\"{FFFFFF}, localizaló en el GPS.\n\
					Puedes vendersela al banco al instante, pero te darán solo el 25% de lo que te costó {FF846A}(50% VIP).\n\
					{FFFFFF}también se la puedes vender a otro jugador, dentro de un rango de precio pre-establecido.\n\
					Para vender tu propiedad a un jugador puedes ponerla en {"#SILVER_COLOR"}/tienda.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_REPORT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Reportar",
			
				"\
					{FFFFFF}Para un reporte simple utiliza {"#SILVER_COLOR"}/reportar ID{FFFFFF} para reportar a un jugador.\n\
					\n\
					Para reportes más detallado debes publicarlos en el foro aportando imágenes.\n\
					Los reportes de fallos o bugs también deberás hacerlo en el foro junto con imágenes.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_VEHICLES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Vehículos",
			
				"\
					{FF846A}GENERAL\n\
					{FFFFFF}Para arrancar o detener un vehículo presiona {"#SILVER_COLOR"}'Y' {FFFFFF}o utiliza {"#SILVER_COLOR"}/motor.\n\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/luces{FFFFFF} para encender o apagar las luces del vehículos.\n\
					Si tu vehículo se daña tendrás que llamar a un mecánico desde tu móvil para que lo repare.\n\
					\n\
					Cada vehículo tiene su cantidad máxima del depósito de gasolina.\n\
					Para repostar el vehículo debes ir a cualquier gasolinera, puedes localizarlas con el GPS.\n\
					también puedes comprar un bidón de gasolina para {"#SILVER_COLOR"}/vertir{FFFFFF} gasolina en cualquier momento.\n\
					Si tienes un MP3 puedes poner una canción en el vehículo con el comando {"#SILVER_COLOR"}/vmp3.\n\
					\n\
					\n\
					{FF846A}VEHICULOS PERSONALES\n\
					{FFFFFF}Para comprarlos ve a cualquier concesionario.\n\
					El dinero para comprarlo es el de la cuenta bancaria.\n\
					Para localizar tus vehículos utiliza el GPS.\n\
					\n\
					Utiliza {"#SILVER_COLOR"}/abrir{FFFFFF} para abrir las puertes de tu vehículo, utiliza {"#SILVER_COLOR"}/cerrar{FFFFFF} para cerrarlas.\n\
					Puedes estacionar tu vehículo con el comando {"#SILVER_COLOR"}/estacionar.\n\
					{FFFFFF}Cuando tu vehículo sea destruido recibirás uno nuevo en tu último estacionamiento.\n\
					Para pintar, tunear o modificar tu vehículo tendrás que hacerlo en el mecánico.\n\
					\n\
					Puedes guardar cosas en el maletero del vehículo con el comando {"#SILVER_COLOR"}/guardar.\n\
					{FFFFFF}Para sacar cosas del maletero puedes utilizar {"#SILVER_COLOR"}/maletero.\n\
					\n\
					{FFFFFF}Si quieres vender tu vehículo puedes hacerlo en \"Gobierno San Andreas\", localizaló en el GPS.\n\
					Puedes venderselo al banco, pero te darán solo el 25% de lo que te costó (50% VIP).\n\
					también se la puedes vender a otro jugador, dentro de un rango de precio pre-establecido.\n\
					Para vender tu vehículo a un jugador puedes ponerlo en {"#SILVER_COLOR"}/tienda.\n\
					{FFFFFF}Al vender tu vehículo se venderá con todo lo que haya en el maletero.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_WORKS:
		{
			new dialog[45 * sizeof work_info], line_str[45];
			for(new i = 1; i != sizeof work_info; i ++)
			{
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}- %c%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1]);
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Trabajos", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_HELP_CREWS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Bandas",
			
				"\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/banda{FFFFFF} para crear una banda o administrar la tuya.\n\
					{FFFFFF}Al entrar a una banda puedes conquistar territorios por todo San Andreas.\n\
					\n\
					{FFFFFF}Visita {FF846A}"SERVER_WEBSITE" {FFFFFF}para más información.\n\
					\n\
				"
			
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_VIP:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Membresía VIP",
			
				"\
					{"#SILVER_COLOR"}Puedes comprar VIP por 30 días con el comando /vip.\n\
					{"#SILVER_COLOR"}Se compra con "SERVER_COIN", para ver como comprar esta moneda visita nuestra web.\n\
					\n\
					{"#PRIMARY_COLOR"}Ventajas\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_WORKS" trabajos.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_VEHICLES" vehículos.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_TOYS" accesorios.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_PROPERTIES" propiedades.\n\
					{"#SILVER_COLOR"}- No pagas seguro de propiedades ni vehículos en el Payday.\n\
					{"#SILVER_COLOR"}- No pierdes chaleco al morir.\n\
					{"#SILVER_COLOR"}- Al vender un vehículo o propiedad al banco recibes un 50%%.\n\
					{"#SILVER_COLOR"}- Te recuperas el doble de rápido en el hospital.\n\
					{"#SILVER_COLOR"}- Al recuperarte tu vida es del 100%%.\n\
					{"#SILVER_COLOR"}- Reducción de la condena a la mitad.\n\
					{"#SILVER_COLOR"}- Cuando un médico te cura vida al 50%%.\n\
					{"#SILVER_COLOR"}- Comprar armas en mercado negro sin pertenecer a banda.\n\
					{"#SILVER_COLOR"}- Comprar armas sin esperar 5 minutos por cada compra.\n\
					{"#SILVER_COLOR"}- Pagas extras de "#VIP_WORK_EXTRA_PAY"$ en algunos trabajos.\n\
					{"#SILVER_COLOR"}- Poder obtener trabajos sin experar un lapso de tiempo.\n\
					\n\
					{"#SILVER_COLOR"}Recuerda que puedes visitar nuestra web/discord: {"#GREEN_COLOR"}"SERVER_WEBSITE" {"#SILVER_COLOR"}para mas información.\n\
					\n\
				"
			
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_ADMIN_LIST:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new dialog[128 * 15], line_str[128], count, start_pos = pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}Últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i++)
					{
						new id, name[24], last_connection[24], connected, pid, admin_level;
						reg_int(i, "id", id);
						reg_name(i, "name", name);
						reg_name(i, "last_connection", last_connection);
						reg_int(i, "connected", connected);
						reg_int(i, "playerid", pid);
						reg_int(i, "admin_level", admin_level);

						if(connected)
						{
							if(PlayerTemp[pid][pt_ADMIN_SERVICE]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#PRIMARY_COLOR"}En Servicio (%d)\n", start_pos + i, name, ADMIN_LEVELS[admin_level], pid);
							else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado (%d)\n", start_pos + i, name, ADMIN_LEVELS[admin_level], pid);
						}
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, ADMIN_LEVELS[admin_level], last_connection);
						strcat(dialog, line_str);
						pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = id;
					}

					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Administradores", dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, last_connection, connected, playerid, admin_level FROM player WHERE admin_level > 0 ORDER BY connected DESC, admin_level DESC LIMIT %d, %d;", pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT], pTemp(playerid)[pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_ADMIN_MODIFY:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					if(rows)
					{
						new name[24], admin_level;
						reg_name(0, "name", name);
						reg_int(0, "admin_level", admin_level);

						if(admin_level > PI[playerid][pi_ADMIN_LEVEL]) SendClientMessagef(playerid, -1, "No puedes modificar el rango de este admin porque es un rango superior al tuyo.");
						else
						{
							new caption[45], dialog[45 * sizeof(ADMIN_LEVELS)], line_str[45];
							format(caption, sizeof caption, "Admin - %s", name);
							format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Normal (eliminar)\n");

							for(new i = 1; i != sizeof ADMIN_LEVELS; i ++)
							{
								if(i > PI[playerid][pi_ADMIN_LEVEL])
								{
									if(admin_level == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", ADMIN_LEVELS[i]);
									else format(line_str, sizeof line_str, "{666666}%s\n", ADMIN_LEVELS[i]);
								}
								else
								{
									if(admin_level == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", ADMIN_LEVELS[i]);
									else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", ADMIN_LEVELS[i]);
								}
								strcat(dialog, line_str);
							}
							
							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
						}
					}
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, admin_level FROM player WHERE id = %d;", pTemp(playerid)[pt_SELECTED_DB_AC_ID]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar contraseña", "Introduce tu contraseña actual.", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD_PASS:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Introduce tu nueva contraseña.\nLa contraseña debe contener entre %d-%d caracteres.", MIN_PASS_LENGTH, MAX_PASS_LENGTH);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar contraseña", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_ANTI_CHEAT:
		{
			new dialog[115 * sizeof(ac_Info) + 1], line_str[115];
			dialog = "Tipo\tEstado\tAccionar\tAcción\n";
			
			for(new i = 0; i != sizeof(ac_Info); i ++)
			{
				format(line_str, sizeof line_str, "%02d %s\t%s\t%d:%d\t%s\n", i, ac_Info[i][ac_Name], ac_Info[i][ac_Enabled] ? "Activado" : "Desactivado", ac_Info[i][ac_Detections], ac_Info[i][ac_Interval], ac_Info[i][ac_Kick] ? "Kick" : "Aviso");
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Anticheat", dialog, "Continuar", "X");
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY:
		{
			new caption[45], dialog[90];
			
			format(caption, sizeof caption, "ac %02d %s", pTemp(playerid)[pt_SELECTED_AC_LISTITEM], ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Name]);
			format(dialog, sizeof dialog, "Estado\t%s\nAccionar\t(%d:%d)\nAccion\t%s", ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Enabled] ? "Activado" : "Desactivado", ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Detections], ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Interval], ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Kick] ? "Kick" : "Aviso");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY_DETECT:
		{
			new caption[45], dialog[200];
			
			format(caption, sizeof caption, "ac %02d %s", pTemp(playerid)[pt_SELECTED_AC_LISTITEM], ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Name]);
			format(dialog, sizeof dialog, "Estado actual de accioner en: (%d:%d)\n\nSintaxis: <detecciones>:<segundos>\nDeja segundos en 0 para que sea instantáneo.\n\nEjemplo de 2 detecciones en 10 segundos: 2:10", ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Detections], ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Interval]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_MODIFY: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi anuncio", "Inserta el nuevo precio de tu artículo:\n", "Continuar", "Atrás");
		case DIALOG_SHOP_ARTICLE_REMOVE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar anuncio", "¿Estás seguro de que quiere eliminar este anuncio?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");	
		case DIALOG_SHOP_ADD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Añadir anuncio", "{"#SILVER_COLOR"}Propiedad\n{"#SILVER_COLOR"}Vehículo\n{"#SILVER_COLOR"}Otros", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_SHOP_ADD_TEXT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Añadir anuncio", "Introduce una breve descripción para tu anuncio.\nCaracteres: 1-24 [A-Z a-z 0-9]", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_SHOP_ADD_PRICE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Añadir anuncio", "Introduce el precio para tu anuncio.\nAl publicar tu anuncio se te cobrará 500$.", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CRANE_SELECT_VEHICLE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[95 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Vehículo\t{"#BLUE_COLOR"}Matrícula\t{"#SILVER_COLOR"}Precio\n");
			for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU_VEHICLES) break;
				
				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					pTemp(playerid)[pt_PLAYER_LISTITEM][total_vehicles] = i;
					
					new line_str[95], veh_money = (PLAYER_VEHICLES[i][player_vehicle_PRICE] / 100) + 350;
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%s$\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], number_format_thousand(veh_money));
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{"#SILVER_COLOR"}No tienes vehículos");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona el vehículo que quieres remolcar", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CREATE_CREW:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Banda", "No perteneces a ninguna banda.\n\n¿Quieres crear una?\nPara crear una banda necesitas ser nivel 5, además cuesta 600.000$.", "Sí", "No");
			return 1;
		}
		case DIALOG_CREATE_CREW_NAME:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Crear banda", "Introduce el nombre de tu banda.\nHasta 32 caracteres.", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CREATE_CREW_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona un color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREATE_CREW_CONFIRM:
		{
			new dialog[360];
			format(dialog, sizeof dialog,
					
					"\
						{"#SILVER_COLOR"}Nombre de la banda: %s\n\
						{"#SILVER_COLOR"}Color de la banda: {%06x}color %d\n\
						{"#SILVER_COLOR"}Coste de creación: 600.000$\n\
						\n\
						{"#SILVER_COLOR"}¿Quieres crear esta banda?\n\
						{"#SILVER_COLOR"}Una vez creada podrás crear rangos, modificarlos y mucho más.\n\
						\n\
					", 
						pTemp(playerid)[pt_CREATE_CREW_NAME],
						RandomColors[ pTemp(playerid)[pt_CREATE_CREW_COLOR] ] >>> 8, pTemp(playerid)[pt_CREATE_CREW_COLOR] + 1
			);
					
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Crear banda", dialog, "Crear", "Cerrar");
			return 1;
		}
		case DIALOG_CREW_MENU:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
			
			new caption[64], dialog[360], listitem;
			format(caption, sizeof caption, "Mi banda -  {%06x}'%s'", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_NAME]);
			
			format(dialog, sizeof dialog, "Ver miembros\n");
			pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = CREW_RANK_SIZE;
			listitem ++;

			if(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME])
			{
				strcat(dialog, "Cambiar nombre de la banda\n");
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CHANGE_NAME;
				listitem ++;
			}
			if(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS])
			{
				strcat(dialog, "Echar a un miembro\n");
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CAST_MEMBERS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS])
			{
				strcat(dialog, "Cambiar rango de un miembro\n");
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = CREW_RANK_MODIFY_MEMBERS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS])
			{
				strcat(dialog, "Crear rangos o modificarlos\n");
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = CREW_RANK_MODIFY_RANKS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR])
			{
				strcat(dialog, "Cambiar color de la banda\n");
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CHANGE_COLOR;
				listitem ++;
			}
			if(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE])
			{
				strcat(dialog, "Eliminar la banda\n");
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = CREW_RANK_DELETE;
				listitem ++;
			}
			
			strcat(dialog, "Abandonar banda\n");
			pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = CREW_RANK_SIZE + 1;
			listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new dialog[128 * 15], caption[64], line_str[128], count, start_pos = pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT] + 1;
					format(caption, sizeof caption, "Miembros de la banda '%s'", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_NAME]);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}Últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i++)
					{
						new name[24], last_connection[24], connected, crew_rank;
						reg_name(i, "name", name);
						reg_name(i, "last_connection", last_connection);
						reg_int(i, "connected", connected);
						reg_int(i, "crew_rank", crew_rank);

						if(connected) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME], last_connection);
						strcat(dialog, line_str);
						count++;
					}

					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, last_connection, connected, crew_rank FROM player WHERE crew = %d ORDER BY connected DESC, crew_rank ASC LIMIT %d, %d;", PI[playerid][pi_CREW], pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT], pTemp(playerid)[pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_CREW_CHANGE_NAME:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Nombre actual de la banda:\n\t\"%s{FFFFFF}\"\n\nIndica el nuevo nombre.\nMáximo 32 caracteres.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Cambiar nombre de la banda", dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST_DELETE:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new dialog[128 * 15], line_str[128], count, start_pos = pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}Últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i++)
					{
						new id, name[24], last_connection[24], connected, crew_rank;
						reg_int(i, "id", id);
						reg_name(i, "name", name);
						reg_name(i, "last_connection", last_connection);
						reg_int(i, "connected", connected);
						reg_int(i, "crew_rank", crew_rank);

						if(connected) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME], last_connection);
						strcat(dialog, line_str);
						pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = id;
					}

					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Echar a un miembro", dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, last_connection, connected, crew_rank FROM player WHERE crew = %d ORDER BY connected DESC, crew_rank ASC LIMIT %d, %d;", PI[playerid][pi_CREW], pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT], pTemp(playerid)[pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_CREW_CAST_MEMBER_CONFIRM:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Echar a un miembro", "¿Estás seguro de que quieres echar a este miembro de la banda?", "Echar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_INVITE_RANK:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[64 * MAX_CREW_RANKS], line_str[64], listitem;
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_VALID]) continue;
				
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = i;
				if(i < PI[playerid][pi_CREW_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", listitem + 1, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", listitem + 1, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
				strcat(dialog, line_str);
				
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Invitar", dialog, "Invitar", "Cerrar");
			return 1;
		}
		case DIALOG_CREW_INVITE_ACCEPT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Te han ofrecio unirte a una banda.\n\nBanda: %s\nRango: %s\n", CREW_INFO[ pTemp(playerid)[pt_CREW_INVITE_INFO][1] ][crew_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INVITE_INFO][1] ][ pTemp(playerid)[pt_CREW_INVITE_INFO][2] ][crew_rank_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Invitación", dialog, "Unirme", "Cerrar");
			return 1;
		}
		case DIALOG_CREW_RANKS:
		{
			new dialog[64 * MAX_CREW_RANKS], line_str[64];
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_VALID])
				{
					if(i < PI[playerid][pi_CREW_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", i + 1, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", i + 1, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
				}
				else
				{
					if(i < PI[playerid][pi_CREW_RANK]) format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{FFFFFF}%d. Slot vacío\n", i + 1, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
				}
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Rangos", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Modificar rango", "Cambiar nombre del rango\nModificar permisos\nEliminar rango", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_NAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual del rango:\n\t\"%s\"\n\nIndica el nuevo nombre del rango.\nMáximo 32 caracteres.", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar rango", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_PERMISS:
		{
			new caption[70];
			format(caption, sizeof caption, "Modificar permisos del rango '%s'", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
			
			new dialog[64 * (CREW_RANK_SIZE + 1)], line_str[64];
			format(dialog, sizeof dialog, "Permiso\tActivado\n");
			
			for(new i = 0; i != CREW_RANK_SIZE; i ++)
			{
				if(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][i]) format(line_str, sizeof line_str, "%s\t%s\n", CREW_RANKS_PERMISSIONS[i], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] ? "Sí" : "No");
				else format(line_str, sizeof line_str, "{666666}%s\t{666666}%s\n", CREW_RANKS_PERMISSIONS[i], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] ? "Sí" : "No");
				
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_CREATE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Crear nuevo rango", "Indica el nombre del rango.\nMáximo 32 caracteres.", "Crear", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[64 * MAX_CREW_RANKS], line_str[64], listitem;
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_VALID]) continue;
				if(i == pTemp(playerid)[pt_CREW_SELECTED_RANK]) continue;
				
				pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = i;
				if(i < PI[playerid][pi_CREW_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", listitem + 1, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", listitem + 1, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
				strcat(dialog, line_str);
				
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Seleccionar nuevo rango", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE_CONFIRM:
		{
			inline OnCrewInfoLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					if(rows)
					{
						new affected_members;
						cache_get_value_index_int(0, 0, affected_members);
						
						new dialog[400];
						format(dialog, sizeof dialog, 
								
							"\
								Rango que se eliminará:\n\
									\t'%s'\n\
								\n\
								Miembros afectados: %d\n\
								El nuevo rango de estos miembros será:\n\
									\t'%s'\n\
								\n\
								¿Seguro que quieres eliminar el rango? Esta opción no se puede deshacer.\n\
								\n\
							",
								CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_NAME],
								affected_members,
								CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_NEW_RANK] ][crew_rank_NAME]
						);
						ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar rango", dialog, "Eliminar", "Cancelar");

					}
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = %d;", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_ID], pTemp(playerid)[pt_CREW_SELECTED_RANK]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
			return 1;
		}
		case DIALOG_CREW_MODIFY_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona el nuevo color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_DELETE:
		{
			inline OnCrewInfoLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					if(rows)
					{
						new affected_members, crew_territories;
						cache_get_value_index_int(0, 0, affected_members);
						cache_get_value_index_int(0, 0, crew_territories);

						new dialog[450];
						format(dialog, sizeof dialog, 
								
							"\
								Banda: %s\n\
								Miembros: %d\n\
								Territorios: %d\n\
								\n\
								¿De verdad quieres borrar la banda?\n\
								\n\
							",
								CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_NAME],
								affected_members,
								crew_territories
						);
						ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar banda", dialog, "Eliminar", "Cancelar");
					}
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(player.id), COUNT(territories.id) FROM player, territories WHERE player.crew = %d AND territories.id_crew = %d;", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_ID], CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_ID]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
			return 1;
		}
		case DIALOG_CREW_LEAVE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Abandonar banda", "¿Quieres abandonar la banda?\nEsta opción no se puede deshacer.", "Abandonar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBERS:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new dialog[128 * 15], line_str[128], count, start_pos = pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}Últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i++)
					{
						new id, name[24], last_connection[24], connected, crew_rank;
						reg_int(i, "id", id);
						reg_name(i, "name", name);
						reg_name(i, "last_connection", last_connection);
						reg_int(i, "connected", connected);
						reg_int(i, "crew_rank", crew_rank);

						if(connected) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME], last_connection);
						strcat(dialog, line_str);
						pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = id;
					}

					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Modificar rango de un miembro", dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, last_connection, connected, crew_rank FROM player WHERE crew = %d ORDER BY connected DESC, crew_rank ASC LIMIT %d, %d;", PI[playerid][pi_CREW], pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT], pTemp(playerid)[pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBER:
		{
			inline OnCrewInfoLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					if(rows)
					{
						new name[24], crew_rank;
						reg_name(0, "name", name);
						reg_int(0, "crew_rank", crew_rank);

						if(crew_rank < PI[playerid][pi_CREW_RANK]) SendClientMessagef(playerid, -1, "No puedes modificar el rango de este miembro porque es un rango superior al tuyo.");
						else
						{
							if(crew_rank == 0)
							{
								inline OnCountQueryLoad()
								{
									if(get_rows(rows))
									{
										if(rows)
										{
											new total;
											cache_get_value_index_int(0, 0, total);
											if(total <= 1) SendClientMessagef(playerid, -1, "No se puede modificar el rango de este miembro ya que es el único miembro con el rango fundador.");
											else
											{
												new caption[45], dialog[45 * CREW_RANK_SIZE], line_str[45], count;
												format(caption, sizeof caption, "Miembro - %s", name);
												for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
												for(new i = 0; i != CREW_RANK_SIZE; i ++)
												{
													if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_VALID]) continue;
													
													if(i < PI[playerid][pi_CREW_RANK])
													{
														if(crew_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
														else format(line_str, sizeof line_str, "{666666}%s\n", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
													}
													else
													{
														if(crew_rank == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
														else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
													}
													strcat(dialog, line_str);
													pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = i;
												}
												ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
											}
										}
									}
								}
								mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = 0;", PI[playerid][pi_CREW]);
								mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
							}
							else
							{
								new caption[45], dialog[45 * CREW_RANK_SIZE], line_str[45], count;
								format(caption, sizeof caption, "Miembro - %s", name);
								for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
								for(new i = 0; i != CREW_RANK_SIZE; i ++)
								{
									if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_VALID]) continue;
									
									if(i < PI[playerid][pi_CREW_RANK])
									{
										if(crew_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
										else format(line_str, sizeof line_str, "{666666}%s\n", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
									}
									else
									{
										if(crew_rank == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
										else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i][crew_rank_NAME]);
									}
									strcat(dialog, line_str);
									pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = i;
								}
								ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
							}
						}
					}
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, crew_rank FROM player WHERE id = %d;",  pTemp(playerid)[pt_SELECTED_DB_AC_ID]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
			return 1;
		}
		case DIALOG_CREW_PROPERTY_CONFIRM:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Propiedad de banda", "¿Estás seguro que quieres pasar esta propiedad a banda?\nEsta opción no se puede deshacer.", "Continuar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE_TERRITORY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Abandonar territorio", "¿Estás seguro que quieres abandonar este territorio?\nEsta opción no se puede deshacer.", "Continuar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE_PROPERTY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Propiedad de banda", "¿Estás seguro que quieres liberar esta propiedad?\nEsta opción no se puede deshacer.", "Continuar", "Cancelar");
			return 1;
		}
		case DIALOG_POLICE_PENALTY:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "El policía %s te ha puesto una multa.\nImporte: %s$\n", PlayerTemp[ pTemp(playerid)[pt_POLICE_PEN_PID] ][pt_NAME], number_format_thousand(pTemp(playerid)[pt_POLICE_PEN_IM]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Multa", dialog, "Pagar", "Cerrar");
			return 1;
		}
		case DIALOG_VIP_BUY:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "El coste del VIP es de %d "SERVER_COIN"\nDuración: 30 días\n\n¿Comprar?", VIP_COINS_PRICE);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "VIP", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_VIP:
		{
			new dialog[256], current_date[24];
			getDateTime(current_date);
			format(dialog, sizeof dialog, 
				
				"\
					Fecha actual: %s\n\
					Fecha caducidad: %s\n\
					\n\
					Renuevalo 30 días más por %d "SERVER_COIN".\n\
					\n\
				",
					current_date,
					PI[playerid][pi_VIP_EXPIRE_DATE],
					VIP_COINS_PRICE
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "VIP", dialog, "Cerrar", "Renovar");
			return 1;
		}
		case DIALOG_VOBJECT_MENU:
		{
			new caption[45];
			format(caption, sizeof caption, "STC - '%s'", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "1. Mis objetos\n2. Comprar objeto\n", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			new caption[45], dialog[145 * (MAX_SU_VOBJECTS + 2)], line_str[145];
			format(caption, sizeof caption, "STC - '%s'", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Objeto\t{"#BLUE_COLOR"}Colocado\n");
			for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
			{
				if(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_VALID])
				{
					if(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_ATTACHED]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}Sí\n", i + 1, VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_NAME]);
					else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}No\n", i + 1, VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_NAME]);
				}
				else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
				strcat(dialog, line_str);
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			new caption[45], dialog[256];
			format(caption, sizeof caption, "Objeto '%s'", VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			
			switch(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					if(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Guardar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{"#SILVER_COLOR"}Editar posición del objeto\n{"#SILVER_COLOR"}Colores\n{"#SILVER_COLOR"}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Colocar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{666666}Colores\n{"#SILVER_COLOR"}Eliminar este objeto");
				}
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{		
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual: \"%s\"\nIndica el nuevo nombre:", VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Objeto - Modificar nombre", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			new caption[64];
			format(caption, sizeof caption, "Colores de '%s'", VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			
			new dialog[45 * MAX_VEHICLE_OBJECTS_INDEXS], line_str[45];
			for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++)
			{
				if(!VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) format(line_str, sizeof line_str, "{FFFFFF}Color #%d (original)\n", i + 1);
				else format(line_str, sizeof line_str, "{%06x}Color #%d\n", ARGBToRGBA(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) >>> 8, i + 1);
				
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			new caption[64];
			format(caption, sizeof caption, "Color (%d) de '%s'", pTemp(playerid)[pt_TUNING_EDIT_COLOR_SLOT], VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			
			new dialog[145];
			format(dialog, sizeof dialog, 
					
					"\
						Color original\n\
						{%06x}Veh Color 1\n\
						{%06x}Veh Color 2\n\
						{FFFFFF}Otro (ARGB)\n\
					",
					VEHICLE_COLORS[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_1] ] >>> 8,
					VEHICLE_COLORS[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_2] ] >>> 8
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			new caption[64];
			format(caption, sizeof caption, "Color (%d) de '%s'", pTemp(playerid)[pt_TUNING_EDIT_COLOR_SLOT], VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Introduce el color en formato AARRGGBB\nPor ejemplo: FFCCCCCC", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "¿Estás seguro que quieres borrar el siguiente objeto?\n\t\"%s\"", VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Objeto - Eliminar Objeto", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Objeto - Eliminar todo", "¿Estás seguro de que quiere eliminar todos los objetos de este vehículo?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");	
		case DIALOG_PLAYER_CONFIG:
		{
			new dialog[512];
			format(dialog, sizeof dialog, 
				
				"\
					Audios del servidor\t%s\n\
					Barras indicadoras (hud)\t%s\n\
					Ver sanciones, kicks, baneos\t%s\n\
					Número en guía telefónica\t%s\n\
					Sonidos del servidor\t%s\n\
					Mostrar hora del servidor\t%s\n\
					Canal de dudas\t%s\n\
				",
					(PI[playerid][pi_CONFIG_AUDIO] ? "Sí" : "No"),
					(PI[playerid][pi_CONFIG_HUD] ? "Sí" : "No"),
					(PI[playerid][pi_CONFIG_ADMIN] ? "Sí" : "No"),
					(PI[playerid][pi_PHONE_VISIBLE_NUMBER] ? "Sí" : "No"),
					(PI[playerid][pi_CONFIG_SOUNDS] ? "Sí" : "No"),
					(PI[playerid][pi_CONFIG_TIME] ? "Sí" : "No"),
					(PI[playerid][pi_DOUBT_CHANNEL] ? "Sí" : "No")
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, "Panel de configuración del usuario", dialog, "Cambiar", "Cerrar");	
			return 1;
		}
		case DIALOG_POLICE_BYC:
		{
			new caption[128];
			format(caption, sizeof caption, "Placa Nº%d | %c. %s", PI[playerid][pi_PLACA_PD], pTemp(playerid)[pt_FIRST_NAME][0], pTemp(playerid)[pt_SUB_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, caption, "Ver Últimos registros a BYC\nBuscar BYC de una persona", "Continuar", "Cerrar");	
			return 1;
		}
		case DIALOG_POLICE_BYC_NAME_FIND:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Búsqueda", "Introduce el nombre completo del sospechoso.\n\nUsa el guión bajo para separar nombre y apellido\nPor ejemplo: Nombre_Apellido.", "Buscar", "Cerrar");	
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_ALL:
		{
			inline OnPoliceHistoryLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
					new dialog[256 * 15], line_str[256], count, start_pos = pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Sospechoso\t{"#SILVER_COLOR"}Añadido por\t{"#SILVER_COLOR"}Fecha\t{"#SILVER_COLOR"}Razón\n");
					for(new i = 0; i != rows; i ++)
					{
						new id, id_player, text[128], date[24], toname[24], fromname[24], bool:isnull_fromname;
						reg_int(i, "id_player", id);
						reg_int(i, "id_player", id_player);
						reg_name(i, "text", text);
						reg_name(i, "date", date);
						reg_name(i, "toname", toname);
						cache_is_value_name_null(i, "fromname", isnull_fromname);
						if(!isnull_fromname) reg_name(i, "fromname", fromname);

						format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, toname, fromname, date, text);
						strcat(dialog, line_str);
						pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = id;
					}

					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					
					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "BYC", dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT police_history.*, player.name AS toname, player2.name AS fromname FROM police_history INNER JOIN player ON police_history.id_player = player.id LEFT JOIN player AS player2 ON police_history.by_id = player2.id ORDER BY police_history.date DESC LIMIT %d, %d;", pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT], pTemp(playerid)[pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPoliceHistoryLoad);
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_PLAYER:
		{
			inline OnPoliceHistoryLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;
					new dialog[256 * 15], line_str[256], count, start_pos = pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Sospechoso\t{"#SILVER_COLOR"}Añadido por\t{"#SILVER_COLOR"}Fecha\t{"#SILVER_COLOR"}Razón\n");
					for(new i = 0; i != rows; i ++)
					{
						new id, id_player, text[128], date[24], toname[24], fromname[24], bool:isnull_fromname;
						reg_int(i, "id", id);
						reg_int(i, "id_player", id_player);
						reg_name(i, "text", text);
						reg_name(i, "date", date);
						reg_name(i, "toname", toname);
						cache_is_value_name_null(i, "fromname", isnull_fromname);
						if(!isnull_fromname) reg_name(i, "fromname", fromname);

						format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, toname, fromname, date, text);
						strcat(dialog, line_str);
						pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = id;
					}

					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					
					pTemp(playerid)[pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "BYC", dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT police_history.*, player.name AS toname, player2.name AS fromname FROM police_history INNER JOIN player ON police_history.id_player = player.id LEFT JOIN player AS player2 ON police_history.by_id = player2.id WHERE police_history.id_player = %d ORDER BY police_history.date LIMIT %d, %d;", pTemp(playerid)[pt_SELECTED_BYC_USER_ID], pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT], pTemp(playerid)[pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPoliceHistoryLoad);
			return 1;
		}
		case DIALOG_POLICE_DELETE_BYC:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "BYC", "¿Borrar esto del historial?", "Borrar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_NAME:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar nombre", "Introduce tu contraseña actual.", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_NAME_NAME:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Introduce tu nuevo nombre.\nEl nombre debe respear el formato Nombre_Apellido.\n\nEl coste por el cambio de nombre es de %d "SERVER_COIN"", CHANGE_NAME_COINS_PRICE);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Cambiar nombre", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_EMAIL:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar correo electrónico", "Introduce tu contraseña actual.", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_EMAIL_EMAIL:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Cambiar correo electrónico", "Introduce tu nuevo correo electrónico.", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;

			new max_slots = MAX_CLOSET_SLOTS,
				dialog[128 * (MAX_CLOSET_SLOTS + 2)], line_str[128], listitem;

			format(dialog, sizeof dialog, "Tipo\tDescripción\n");
			
			for(new i = 0; i != max_slots; i ++)
			{
				if(PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_VALID])
				{
					switch(PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_TYPE])
					{
						case CLOSET_TYPE_WEAPON:
						{
							format(line_str, sizeof line_str, "%s\t%s (%s balas)\n", GetClosetTypeName(PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_TYPE]), WEAPON_INFO[ PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_INT] ][weapon_info_NAME], number_format_thousand(PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_INT_EXTRA]));
							strcat(dialog, line_str);
						}
						case CLOSET_TYPE_MEDICINES, CLOSET_TYPE_CANNABIS, CLOSET_TYPE_CRACK:
						{
							format(line_str, sizeof line_str, "%s\t%s gramos\n", GetClosetTypeName(PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_TYPE]), number_format_thousand(PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_INT]));
							strcat(dialog, line_str);
						}
					}
					
					pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = i;
					listitem ++;
				}
			}

			new caption[64];
			format(caption, sizeof caption, "Armario (%d espacios disponibles)", max_slots - listitem);
			
			pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = MAX_CLOSET_SLOTS + 20;
			strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Cerrar");
		}
		case DIALOG_PROPERTY_CLOSET_DLT_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Armario - Eliminar todo", "¿Estás seguro de que quiere eliminar todo de su armario?\nEsta opción no se puede deshacer.", "Eliminar", "Cancelar");	
		case DIALOG_PROPERTY_CLOSET_OPTIONS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Armario", "{"#SILVER_COLOR"}1. Sacar\n{"#SILVER_COLOR"}2. Eliminar", "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET_DELETE:
		{
			new dialog[190];
			switch(PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_TYPE])
			{
				case CLOSET_TYPE_WEAPON: format(dialog, sizeof dialog, "Tipo: %s\nDescripción: %s (%s balas)\n\n¿Estás seguro de que quiere eliminar esto de tu maletero?\nEsta opción no se puede deshacer.", GetClosetTypeName(PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_TYPE]), WEAPON_INFO[ PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT] ][weapon_info_NAME], number_format_thousand( PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT_EXTRA] ));
				case CLOSET_TYPE_MEDICINES, CLOSET_TYPE_CANNABIS, CLOSET_TYPE_CRACK: format(dialog, sizeof dialog, "Tipo: %s\nDescripción: %s gramos\n\n¿Estás seguro de que quiere eliminar esto de tu maletero?\nEsta opción no se puede deshacer.", GetClosetTypeName(PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_TYPE]), number_format_thousand( PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT] ));
			}			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Armario - Eliminar", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_CONFIRM_HOTDOG:
		{
			return ShowPlayerDialog(
				playerid, dialogid,
				DIALOG_STYLE_MSGBOX,
				"Confirmar", 
				"{d1d1d1}Quieres agregar este vehiculo a la base de datos?\nAl agregarlo se quedara en la posicion actual todo el tiempo.",
				"Si", "No"
			);
		}
		case DIALOG_KEYS_SELECT_PLAYER:
		{
			return ShowPlayerDialog(
				playerid, dialogid,
				DIALOG_STYLE_INPUT,
				"Seleccionar Usuario", 
				"{d1d1d1}Escribe la ID del usuario al que quieres prestarle tus llaves\nEste debe estar conectado y cerca de ti.",
				"Continuar", "Cancelar"
			);
		}
		case DIALOG_KEYS_SELECT_VEHICLE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) pTemp(playerid)[pt_PLAYER_LISTITEM][i] = -1;

			new dialog[115 * (MAX_SU_VEHICLES + 2)], total_vehicles, listitem;
			for(new i = 0; i != MAX_VEHICLES; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU_VEHICLES) break;
				
				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					new Float:pos[3];
					GetVehiclePos(i, pos[0], pos[1], pos[2]);
					
					new line_str[115];
					format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{"#SILVER_COLOR"}[ID: %d]\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], i);
					strcat(dialog, line_str);

					pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] = i;
					total_vehicles ++; listitem ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{"#SILVER_COLOR"}No tienes vehiculos");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, "Mis vehiculos", dialog, "Seleccionar", "Cerrar");
		}
		default: return 0;
	}
	return 1;
}

public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
	switch(extraid)
	{
		case MENU_VOBJECTS_SHOP:
		{
			if(response == MODEL_RESPONSE_SELECT)
			{
				new slot = GetVehicleFreeObjectSlot(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID]);
				if(!PI[playerid][pi_VIP] && slot >= MAX_NU_VOBJECTS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendInfoMessagef(playerid, "~y~Membresia VIP~w~~n~~n~¡Los jugadores ~y~VIP ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.~n~~n~", MAX_SU_VOBJECTS);
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}
				if(slot == -1)
				{
					SendMessage(playerid, "No hay más espacio para objetos en este vehículo.");
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}

				if(Tuning_Shop_Objects[index][tuning_object_PRICE] > PI[playerid][pi_CASH])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendInfoMessagef(playerid, "Aviso~n~~n~No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar este objeto.", number_format_thousand(Tuning_Shop_Objects[index][tuning_object_PRICE] - PI[playerid][pi_CASH]));
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}

				if(GivePlayerCash(playerid, -Tuning_Shop_Objects[index][tuning_object_PRICE], true, true)) 
				{
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = Tuning_Shop_Objects[index][tuning_object_MODELID];
					format(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "%s", Tuning_Shop_Objects[index][tuning_object_NAME]);
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;
					UpdateVehicleAttachedObject(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], slot);
					
					RegisterNewVehicleObject(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], slot);
					
					SendInfoMessage(playerid, "Tuning de Objetos~n~~n~Ajusta el objeto y haz clic en el icono de guardar, si pulsas ~r~'ESCAPE' ~w~no se guardará la configuración.~n~~n~");
					SendInfoMessage(playerid, "Tuning de Objetos~n~~n~Mantén presionado ~r~'W' ~w~para mover la cámara en caso de que lo necesites.~n~");
					EditVehicleObject(playerid, pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], slot);
				}
			}
			else
			{
				ShowDialog(playerid, DIALOG_VOBJECT_MENU);
			}
			return 1;
		}
	}
	return 0;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(pTemp(playerid)[pt_DIALOG_RESPONDED] || pTemp(playerid)[pt_DIALOG_ID] != dialogid) return Y_HOOKS_BREAK_RETURN_0;
	pTemp(playerid)[pt_DIALOG_RESPONDED] = true;
	pTemp(playerid)[pt_DIALOG_ID] = -1;
 
	if(!isnull(inputtext))
	{
		for(new i = 0; i != strlen(inputtext); i ++)
		{
			if(inputtext[i] == '%') inputtext[i] = '#';
		}

		RemoveHexColours(inputtext);
	}
	
	switch(dialogid)
	{
		case DIALOG_INFO: return 1;
		case DIALOG_REGISTER:
		{
			if(response)
			{
				if(strlen(inputtext) < MIN_PASS_LENGTH || strlen(inputtext) > MAX_PASS_LENGTH) return ShowDialog(playerid, dialogid);
				format(pTemp(playerid)[pt_PASSWD], 24, "%s", inputtext);
				
				new salt[16];
				getRandomSalt(salt);
				format(PI[playerid][pi_SALT], 16, "%s", salt);
				SHA256_PassHash(inputtext, PI[playerid][pi_SALT], PI[playerid][pi_PASS], 64 + 1);
				ShowDialog(playerid, DIALOG_REGISTER_EMAIL);
			}
			else Kick(playerid);
			return 1;
		}
		case DIALOG_REGISTER_EMAIL:
		{
			if(!response) return Kick(playerid);

			new mail[32];
			format(mail, 32, "%s", inputtext);
			if(!IsValidEmail(mail))
			{
				SendClientMessagef(playerid, -1, "Correo no válido.");
				ShowDialog(playerid, DIALOG_REGISTER_EMAIL);
				return 1;	
			}

			inline OnCheckEmail()
			{
				new rows;
				if(get_rows(rows))
				{
					if(rows)
					{
						SendClientMessagef(playerid, -1, "Este correco electrónico ya está en uso, use otro distinto.");
						ShowDialog(playerid, dialogid);
					}
					else
					{
						format(PI[playerid][pi_EMAIL], 32, "%s", mail);
						ShowDialog(playerid, DIALOG_GENDER);
					}
				}
				else Kick(playerid);
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE email = '%e';", mail);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCheckEmail);
			return 1;
		}
		case DIALOG_GENDER:
		{
			if(response)
			{
				PI[playerid][pi_GENDER] = SEX_MALE;
				PI[playerid][pi_SKIN] = 15;
			}
			else
			{
				PI[playerid][pi_GENDER] = SEX_FEMALE;
				PI[playerid][pi_SKIN] = 11;
			}

            SetPlayerScore(playerid, PI[playerid][pi_LEVEL]);
            pTemp(playerid)[pt_DOUBT_CHANNEL_TIME] = gettime();
            ResetPlayerWeapons(playerid);
            ResetPlayerMoney(playerid);
            GivePlayerMoney(playerid, PI[playerid][pi_CASH]);
            SetPlayerFightingStyle(playerid, PI[playerid][pi_FIGHT_STYLE]);
            SetPlayerHealthEx(playerid, PI[playerid][pi_HEALTH]);
            SetPlayerArmourEx(playerid, PI[playerid][pi_ARMOUR]);
            SetPlayerVirtualWorld(playerid, 0);
            SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], 0, 0, 0, 0, 0, 0);
            SetPlayerInterior(playerid, PI[playerid][pi_INTERIOR]);
            
            RegisterNewPlayer(playerid);
		}
		case DIALOG_PASSWORD:
		{
			if(!response)
			{
				SendMessage(playerid, "Has cancelado el inicio de sesion.");
				KickEx(playerid);
				return 1;
			}
			if(!strlen(inputtext)) return ShowDialog(playerid, dialogid);

			new password[64 + 1];
			SHA256_PassHash(inputtext, PI[playerid][pi_SALT], password, sizeof password);

			if(!strcmp(password, PI[playerid][pi_PASS], false)) OnPlayerInputPassword(playerid, true);
			else OnPlayerInputPassword(playerid, false);
			return 1;
		}
		case DIALOG_CLOTHES:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_INTERIOR_INDEX] == -1 && ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return 1;
				
				switch(listitem)
				{
					case 0:
					{
						PC_EmulateCommand(playerid, "/ropa");
					}
					case 1:
					{
						PC_EmulateCommand(playerid, "/toys");
					}
				}
			}
			return 1;
		}
		case DIALOG_FOOD_PIZZA:
		{
			if(response)
			{
				if(PI[playerid][pi_CASH] >= PIZZA_FOOD[listitem][food_PRICE])
				{
					if(PI[playerid][pi_HUNGRY] >= 99.0 && PI[playerid][pi_THIRST] >= 99.0) return SendClientMessagef(playerid, -1, "¿Es que quieres reventar?");
					
					if(GivePlayerCash(playerid, -PIZZA_FOOD[listitem][food_PRICE], true, true)) {
						Add_Hungry_Thirst(playerid, PIZZA_FOOD[listitem][food_HUNGRY], PIZZA_FOOD[listitem][food_THIRST]);
						
						PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
						
						new action[64];
						format(action, sizeof action, "compra %s y lo consume.", PIZZA_FOOD[listitem][food_NAME]);
						Auto_SendPlayerAction(playerid, action);
						
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
						
						ShowDialog(playerid, dialogid);
					}
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %d dólares para poder comprarlo.", PIZZA_FOOD[listitem][food_PRICE] - PI[playerid][pi_CASH]);
				}
			}
			else SendClientMessagef(playerid, -1, "Gracias por su visita a %s vuelva pronto.", ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_FOOD_BURGER:
		{
			if(response)
			{
				if(PI[playerid][pi_CASH] >= BURGER_SHOT_FOOD[listitem][food_PRICE])
				{
					if(PI[playerid][pi_HUNGRY] >= 99.0 && PI[playerid][pi_THIRST] >= 99.0) return SendClientMessagef(playerid, -1, "¿Es que quieres reventar?");
					
					if(GivePlayerCash(playerid, -BURGER_SHOT_FOOD[listitem][food_PRICE], true, true)) {
						Add_Hungry_Thirst(playerid, BURGER_SHOT_FOOD[listitem][food_HUNGRY], BURGER_SHOT_FOOD[listitem][food_THIRST]);
						
						PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
						
						new action[64];
						format(action, sizeof action, "compra %s y lo consume.", BURGER_SHOT_FOOD[listitem][food_NAME]);
						Auto_SendPlayerAction(playerid, action);
						
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
						
						ShowDialog(playerid, dialogid);
					}
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %d dólares para poder comprarlo.", BURGER_SHOT_FOOD[listitem][food_PRICE] - PI[playerid][pi_CASH]);
				}
			}
			else SendClientMessagef(playerid, -1, "Gracias por su visita a %s vuelva pronto.", ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_FOOD_CLUCKIN:
		{
			if(response)
			{
				if(PI[playerid][pi_CASH] >= CLUCKIN_BELL_FOOD[listitem][food_PRICE])
				{
					if(PI[playerid][pi_HUNGRY] >= 99.0 && PI[playerid][pi_THIRST] >= 99.0) return SendClientMessagef(playerid, -1, "¿Es que quieres reventar?");
					
					if(GivePlayerCash(playerid, -CLUCKIN_BELL_FOOD[listitem][food_PRICE], true, true)) {
						Add_Hungry_Thirst(playerid, CLUCKIN_BELL_FOOD[listitem][food_HUNGRY], CLUCKIN_BELL_FOOD[listitem][food_THIRST]);
						
						PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
						
						new action[64];
						format(action, sizeof action, "compra %s y lo consume.", CLUCKIN_BELL_FOOD[listitem][food_NAME]);
						Auto_SendPlayerAction(playerid, action);
						
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
						
						ShowDialog(playerid, dialogid);
					}
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %d dólares para poder comprarlo.", CLUCKIN_BELL_FOOD[listitem][food_PRICE] - PI[playerid][pi_CASH]);
				}
			}
			else SendClientMessagef(playerid, -1, "Gracias por su visita a %s vuelva pronto.", ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_PLAYER_TOYS:
		{
			if(response)
			{	
				if(listitem == MAX_SU_TOYS) return ShowDialog(playerid, DIALOG_PLAYER_TOY_DELETE_ALL);
				if(!PI[playerid][pi_VIP] && listitem >= MAX_NU_TOYS)
				{
					SendClientMessagef(playerid, -1, "¡Los jugadores VIP pueden tener hasta %d accesorios! Usa /ayuda si quieres ser VIP.", MAX_SU_TOYS);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				pTemp(playerid)[pt_SELECTED_TOY_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			return 1;
		}
		case DIALOG_PLAYER_TOY_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //colocar / quitar
					{
						if(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) // tiene accesorio puesto
						{
							PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = false;
							RemovePlayerAttachedObject(playerid, pTemp(playerid)[pt_SELECTED_TOY_SLOT]);
							
							new action[45]; format(action, sizeof action, "se quita su \"%s\"", PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
							Auto_SendPlayerAction(playerid, action);
						}
						else // No lo tiene puesto
						{
							if(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1) return ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
							
							PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = true;
							RemovePlayerAttachedObject(playerid, pTemp(playerid)[pt_SELECTED_TOY_SLOT]);
							
							SetPlayerAttachedObject
							(
								playerid, 
								pTemp(playerid)[pt_SELECTED_TOY_SLOT],
								PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
								PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
								PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
								PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
								PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
								PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
								PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
								PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
								PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
								PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
								PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
								PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
								PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
							);
							
							new action[45]; format(action, sizeof action, "se coloca su \"%s\"", PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
							Auto_SendPlayerAction(playerid, action);
						}
					}
					case 1: ShowDialog(playerid, DIALOG_PLAYER_TOY_EDIT_NAME);
					case 2: //Configurar
					{
						if(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1)
						{
							ShowDialog(playerid, DIALOG_PLAYER_TOY_SELECT_BONE);
							return 1;
						}
						ShowDialog(playerid, DIALOG_PLAYER_TOY_EDIT_BONE);
					}
					case 3: ShowDialog(playerid, DIALOG_PLAYER_TOY_COLOR_1);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_TOY_COLOR_2);
					case 5: ShowDialog(playerid, DIALOG_PLAYER_TOY_CONFIRMDELETE);
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_NAME:
		{
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 24)
				{
					SendClientMessagef(playerid, -1, "El nombre del accesorio debe contener de 1 a 24 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				RemoveHexColours(inputtext);

				format(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_NAME], 24, "%s", inputtext);
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_CONFIRMDELETE:
		{
			if(response)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM ptoys WHERE id = %d;", PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				if(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) RemovePlayerAttachedObject(playerid, pTemp(playerid)[pt_SELECTED_TOY_SLOT]);
				
				SendClientMessagef(playerid, -1, "Accesorio \"%s\" eliminado.", PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
				
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_VALID] = false;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ID] = 0;
				format(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_NAME], 24, "");
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = false;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_MODELID] = 0;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_BONE] = 0;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X] = 0.0;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y] = 0.0;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z] = 0.0;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X] = 0.0;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y] = 0.0;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z] = 0.0;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X] = 0.0;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y] = 0.0;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z] = 0.0;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = 0;
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = 0;
				pTemp(playerid)[pt_SELECTED_TOY_SLOT] = 0;
				
				ShowDialog(playerid, DIALOG_PLAYER_TOYS);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_SELECT_BONE:
		{
			if(response)
			{
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_BONE] = listitem + 1;
				EditPlayerToy(playerid);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_BONE:
		{
			if(response) ShowDialog(playerid, DIALOG_PLAYER_TOY_SELECT_BONE);
			else EditPlayerToy(playerid);
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_1:
		{
			if(response)
			{
				if(listitem == 0) PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = 0;
				else PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = RGBAToARGB(RandomColors[listitem]);
				
				if(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) UpdatePlayerToy(playerid, pTemp(playerid)[pt_SELECTED_TOY_SLOT]);
				SendClientMessagef(playerid, -1, "Color del accesorio actualizado.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_2:
		{
			if(response)
			{
				if(listitem == 0) PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = 0;
				else PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = RGBAToARGB(RandomColors[listitem]);
				
				if(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) UpdatePlayerToy(playerid, pTemp(playerid)[pt_SELECTED_TOY_SLOT]);
				SendClientMessagef(playerid, -1, "Color del accesorio actualizado.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_DELETE_ALL:
		{
			if(response)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM ptoys WHERE id_player = %d;", PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				new temp_PLAYER_TOYS[Player_Toys_Info];
				for(new i = 0; i != MAX_SU_TOYS; i ++)
				{
					RemovePlayerAttachedObject(playerid, i);
					PLAYER_TOYS[playerid][i] = temp_PLAYER_TOYS;
				}
		
				SendClientMessagef(playerid, -1, "Has eliminado todos tus accesorios.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOYS);
			return 1;
		}
		case DIALOG_BANK:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_BANK_WITHDRAW);
					case 1: ShowDialog(playerid, DIALOG_BANK_DEPOSIT);
					case 2: ShowDialog(playerid, DIALOG_BANK_TRANSFER);
					case 3: ShowDialog(playerid, DIALOG_BANK_TRANSACTIONS);
				}
			}
			else pTemp(playerid)[pt_PLAYER_IN_ATM] = false;
			return 1;
		}
		case DIALOG_BANK_WITHDRAW:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > PI[playerid][pi_BANK_MONEY])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Saldo insuficiente.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(pTemp(playerid)[pt_PLAYER_IN_ATM])
				{
					if(inputtext[0] > 10000)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						SendClientMessagef(playerid, -1, "Las operaciones de más de 10.000$ no se pueden realizar desde un cajero, solo en el banco.");
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}
				
				if(GivePlayerCash(playerid, inputtext[0], true, false)) {
					PI[playerid][pi_BANK_MONEY] -= inputtext[0];
					
					RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[playerid][pi_ID], BANK_TRANSACTION_WITHDRAW, inputtext[0]);
					
					SendClientMessagef(playerid, -1, "Operación realizada con éxito, has retirado %s dólares.", number_format_thousand(inputtext[0]));
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				}
				pTemp(playerid)[pt_PLAYER_IN_ATM] = false;
			}
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_BANK_DEPOSIT:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > PI[playerid][pi_CASH])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Dinero insuficiente.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(pTemp(playerid)[pt_PLAYER_IN_ATM])
				{
					if(inputtext[0] > 10000)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						SendClientMessagef(playerid, -1, "Las operaciones de más de 10.000$ no se pueden realizar desde un cajero, solo en el banco.");
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}
				
				if(GivePlayerCash(playerid, -inputtext[0], true, true)) {
					PI[playerid][pi_BANK_MONEY] += inputtext[0];
					
					RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[playerid][pi_ID], BANK_TRANSACTION_DEPOSIT, inputtext[0]);
					
					SendClientMessagef(playerid, -1, "Operación realizada con éxito, has depositado %s dólares.", number_format_thousand(inputtext[0]));
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				}
				pTemp(playerid)[pt_PLAYER_IN_ATM] = false;
			}
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_BANK_TRANSFER:
		{
			if(response)
			{
				new to_bank_account;
				if(sscanf(inputtext, "d", to_bank_account))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(to_bank_account <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				inline OnBankAccountChecked()
				{
					new rows;
					if(get_rows(rows))
					{
						if(rows)
						{
							cache_get_value_index_int(0, 0, pTemp(playerid)[pt_SELECT_BANK_TRANSFER_ID]);
							pTemp(playerid)[pt_SELECT_BANK_TRANSFER_ACCOUNT] = to_bank_account;
							ShowDialog(playerid, DIALOG_BANK_TRANSFER_SEND);
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessagef(playerid, -1, "El número de cuenta introducido no existe o no es correcto.");
							pTemp(playerid)[pt_PLAYER_IN_ATM] = false;
						}
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE bank_account = %d;", to_bank_account);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnBankAccountChecked);
			}
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_BANK_TRANSFER_SEND:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > PI[playerid][pi_BANK_MONEY])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Saldo insuficiente.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(pTemp(playerid)[pt_PLAYER_IN_ATM])
				{
					if(inputtext[0] > 10000)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						SendClientMessagef(playerid, -1, "Las operaciones de más de 10.000$ no se pueden realizar desde un cajero, solo en el banco.");
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}
				
				PI[playerid][pi_BANK_MONEY] -= inputtext[0];
				new transfer_player_id = GetPlayerIdByBankAccountId(pTemp(playerid)[pt_SELECT_BANK_TRANSFER_ACCOUNT]);
				
				new message[64];
				format(message, sizeof message, "Tranferencia recibida: +%s$", number_format_thousand(inputtext[0]));
				if(transfer_player_id == -1)
				{
					inline OnPhoneChecked()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new id;
								cache_get_value_index_int(0, 0, id);
								if(id) RegisterPhoneMessage(0, id, message, true);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE bank_account = %d;", pTemp(playerid)[pt_SELECT_BANK_TRANSFER_ACCOUNT]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPhoneChecked);
				}
				else
				{
					PI[transfer_player_id][pi_BANK_MONEY] += inputtext[0];
					
					if(PI[transfer_player_id][pi_PHONE_NUMBER])
					{
						RegisterPhoneMessage(0, PI[transfer_player_id][pi_ID], message);
						if(PI[transfer_player_id][pi_PHONE_STATE] == PHONE_STATE_ON)
						{
							if((PlayerTemp[transfer_player_id][pt_GAME_STATE] == GAME_STATE_NORMAL || PlayerTemp[transfer_player_id][pt_GAME_STATE] == GAME_STATE_DEAD))
							{
								SendClientMessagef(transfer_player_id, -1, "{"#BLUE_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(transfer_player_id, 6740), message);
							}
						}
					}	
				}
				

				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = bank_money + %d WHERE bank_account = %d;", inputtext[0], pTemp(playerid)[pt_SELECT_BANK_TRANSFER_ACCOUNT]);
				mysql_tquery(handle_db, QUERY_BUFFER);

				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				RegisterBankAccountTransaction(PI[playerid][pi_ID], pTemp(playerid)[pt_SELECT_BANK_TRANSFER_ID], BANK_TRANSACTION_TRANSFER, inputtext[0]);
				
				SendClientMessagef(playerid, -1, "Operación realizada con éxito, has transferido %s dólares al número de cuenta %s.", number_format_thousand(inputtext[0]), number_format_thousand(pTemp(playerid)[pt_SELECT_BANK_TRANSFER_ACCOUNT]));
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				pTemp(playerid)[pt_SELECT_BANK_TRANSFER_ACCOUNT] = 0;
				pTemp(playerid)[pt_PLAYER_IN_ATM] = false;
			}
			else
			{
				pTemp(playerid)[pt_SELECT_BANK_TRANSFER_ACCOUNT] = 0;
				ShowDialog(playerid, DIALOG_BANK_TRANSFER);
			}
			return 1;
		}
		case DIALOG_CREATE_BANK_ACCOUNT:
		{
			if(response)
			{
				if(PI[playerid][pi_CASH] >= 500)
				{
					if(GivePlayerCash(playerid, -500, true, true)) {
						PI[playerid][pi_BANK_MONEY] = 500;
						PI[playerid][pi_BANK_ACCOUNT] = getBankAccountNumber(PI[playerid][pi_ID]);
						mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_account = %d, bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_ACCOUNT], PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
						mysql_tquery(handle_db, QUERY_BUFFER);
						
						RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[playerid][pi_ID], BANK_TRANSACTION_CREATE_ACCOUNT, 500);
						
						PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
						SendClientMessagef(playerid, -1, "Tu cuenta bancaria ha sido creada con éxito, tu número de cuenta es %s.", number_format_thousand(PI[playerid][pi_BANK_ACCOUNT]));
					}
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "No tienes dinero suficiente para crear la cuenta bancaria, te faltan %d dólares.", 500 - PI[playerid][pi_CASH]);
				}
			}
			return 1;
		}
		case DIALOG_BANK_TRANSACTIONS:
		{
			if(response) pTemp(playerid)[pt_PLAYER_IN_ATM] = false;
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_247_LIST:
		{
			if(response)
			{
				switch(Supermarket_Product_List[listitem][product_TYPE])
				{
					case PRODUCT_TYPE_FOOD:
					{
						if(PI[playerid][pi_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							new slot = GetEmptyPlayerPocketSlot(playerid);
							if(slot == -1)
							{
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								SendClientMessagef(playerid, -1, "No tienes más espacio entre tus alimentos, elimina algo con /alimentos.");
								return 1;
							}
							
							if(GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE], true, true)) {
								PLAYER_POCKET[playerid][slot][player_pocket_VALID] = true;
								format(PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], 24, "%s", Supermarket_Product_List[listitem][product_NAME]);
								PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY] = Supermarket_Product_List[listitem][product_HUNGRY];
								PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST] = Supermarket_Product_List[listitem][product_THIRST];
								PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK] = Supermarket_Product_List[listitem][product_DRUNK];
								RegisterNewPlayerPocketObject(playerid, slot);
								
								SendClientMessagef(playerid, -1, "Has comprado %s por %d dólares,para consumirlo usa /alimentos.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
								PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
							}
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %s$ para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - PI[playerid][pi_CASH]));
						}
					}
					case PRODUCT_TYPE_PHONE:
					{						
						if(PI[playerid][pi_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PI[playerid][pi_PHONE_NUMBER])
							{
								SendClientMessagef(playerid, -1, "Ya tienes un teléfono.");
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}
							
							if(GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE], true, true)) {
								PI[playerid][pi_PHONE_NUMBER] = getPhoneNumber(PI[playerid][pi_ID]);
								PI[playerid][pi_PHONE_STATE] = PHONE_STATE_ON;
								PI[playerid][pi_PHONE_VISIBLE_NUMBER] = true;

								mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET phone_number = %d, phone_state = %d, phone_visible_number = %d WHERE id = %d;", PI[playerid][pi_PHONE_NUMBER], PI[playerid][pi_PHONE_STATE], PI[playerid][pi_PHONE_VISIBLE_NUMBER], PI[playerid][pi_ID]);
								mysql_tquery(handle_db, QUERY_BUFFER);
								
								SendClientMessagef(playerid, -1, "Has comprado un %s por %d dólares, tu número es %d.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE], PI[playerid][pi_PHONE_NUMBER]);
								PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
							}
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %s$ para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - PI[playerid][pi_CASH]));
						}
						
					}
					case PRODUCT_TYPE_GPS:
					{
						if(PI[playerid][pi_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PI[playerid][pi_GPS])
							{
								SendClientMessagef(playerid, -1, "Ya tienes un GPS.");
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}
							
							if(GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE], true, true)) {	
								PI[playerid][pi_GPS] = true;
								SendClientMessagef(playerid, -1, "Has comprado un %s por %d dólares, usa /GPS para usarlo.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
								PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
							}
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %s$ para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - PI[playerid][pi_CASH]));
						}
					}
					case PRODUCT_TYPE_MP3:
					{
						if(PI[playerid][pi_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PI[playerid][pi_MP3])
							{
								SendClientMessagef(playerid, -1, "Ya tienes un MP3.");
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}
							
							if(GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE], true, true)) {
								PI[playerid][pi_MP3] = true;
								SendClientMessagef(playerid, -1, "Has comprado un %s por %d dólares, usa /MP3 para usarlo.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
								PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
							}
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %s$ para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - PI[playerid][pi_CASH]));
						}
					}
					case PRODUCT_TYPE_SPEAKERS:
					{
						if(PI[playerid][pi_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PI[playerid][pi_SPEAKERS])
							{
								SendClientMessagef(playerid, -1, "Ya tienes altavoces.");
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}
							
							if(GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE], true, true)) {
								PI[playerid][pi_SPEAKERS] = true;
								SendClientMessagef(playerid, -1, "Has comprado %s por %d dólares, usa /amp3 para usarlo.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
								PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
							}
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %s$ para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - PI[playerid][pi_CASH]));
						}
					}
					case PRODUCT_TYPE_PHONE_RESOLVER:
					{
						if(PI[playerid][pi_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PI[playerid][pi_PHONE_RESOLVER])
							{
								SendClientMessagef(playerid, -1, "Ya tienes una guía telefónica.");
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}
							
							if(GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE], true, true)) {
								PI[playerid][pi_PHONE_RESOLVER] = true;
								SendClientMessagef(playerid, -1, "Has comprado una %s por %d dólares, usa /guia para usarla.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
								PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
							}
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %s$ para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - PI[playerid][pi_CASH]));
						}
					}
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_POCKET:
		{
			if(response)
			{
				if(listitem == MAX_PLAYER_POCKET_OBJECTS) return ShowDialog(playerid, DIALOG_PLAYER_POCKET_DELETE_ALL);
				if(!PLAYER_POCKET[playerid][listitem][player_pocket_VALID])
				{
					SendClientMessagef(playerid, -1, "Este slot está vacío.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				pTemp(playerid)[pt_POCKET_SLOT_SELECTED] = listitem;
				ShowDialog(playerid, DIALOG_PLAYER_POCKET_OPTIONS);
			}
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_OPTIONS: 
		{
			if(response) 
			{
				switch(listitem) 
				{
					case 0: ShowDialog(playerid, DIALOG_PLAYER_WEAPONS_DELETE);
					case 1: 
					{
						//guardar
						new command[128];
						format(command, sizeof command, "/guardar arma %d", pTemp(playerid)[pt_SELECTED_DIALOG_WEAPON_SLOT]);
						PC_EmulateCommand(playerid, command);
					}
				}
			}
		}
		case DIALOG_PLAYER_POCKET_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //Consumir
					{
						if(PI[playerid][pi_HUNGRY] >= 99.0 && PI[playerid][pi_THIRST] >= 99.0) 
						{
							pTemp(playerid)[pt_POCKET_SLOT_SELECTED] = 0;
							SendClientMessagef(playerid, -1, "¿Es que quieres reventar?");
							return 1;
						}
					
						Add_Hungry_Thirst(playerid, PLAYER_POCKET[playerid][pTemp(playerid)[pt_POCKET_SLOT_SELECTED]][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][pTemp(playerid)[pt_POCKET_SLOT_SELECTED]][player_pocket_object_THIRST]);
						GivePlayerDrunkLevel(playerid, PLAYER_POCKET[playerid][pTemp(playerid)[pt_POCKET_SLOT_SELECTED]][player_pocket_object_DRUNK]);
						
						new action[64];
						format(action, sizeof action, "consume %s.", PLAYER_POCKET[playerid][pTemp(playerid)[pt_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
						Auto_SendPlayerAction(playerid, action);
						
						DeletePlayerPocketObject(playerid, pTemp(playerid)[pt_POCKET_SLOT_SELECTED]);
						pTemp(playerid)[pt_POCKET_SLOT_SELECTED] = 0;
					
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
					}
					case 1: //Eliminar
					{
						SendClientMessagef(playerid, -1, "Has eliminado \"%s\" de tus alimentos.", PLAYER_POCKET[playerid][pTemp(playerid)[pt_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
						DeletePlayerPocketObject(playerid, pTemp(playerid)[pt_POCKET_SLOT_SELECTED]);
						pTemp(playerid)[pt_POCKET_SLOT_SELECTED] = 0;
					}
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_POCKET_DELETE_ALL:
		{
			if(response)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pfoods WHERE id_player = %d;", PI[playerid][pi_ID]);
				mysql_query(handle_db, QUERY_BUFFER);
				
				new temp_PLAYER_POCKET[Player_Pocket_Enum];
				for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++) PLAYER_POCKET[playerid][i] = temp_PLAYER_POCKET;
				
				SendClientMessagef(playerid, -1, "Has eliminado todo lo que tenías en tus alimentos.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_POCKET);
			return 1;
		}
		case DIALOG_PHONE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //Agenda
					{
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF)
						{
							PI[playerid][pi_PHONE_STATE] = PHONE_STATE_ON;
							ShowDialog(playerid, dialogid);
							return 1;
						}
						ShowDialog(playerid, DIALOG_PHONE_BOOK);
					}
					case 1: //Llamar
					{
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "Tu teléfono está apagado, enciéndelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_CALL_NUMBER);
					}
					case 2: //Enviar mensaje
					{
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "Tu teléfono está apagado, enciéndelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_SMS_NUMBER);
					}
					case 3: //Ver mensajes recibidos
					{
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "Tu teléfono está apagado, enciéndelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_RECEIVED_MESSAGES);
					}
					case 4: //Ver mensajes enviados
					{
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "Tu teléfono está apagado, enciéndelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_SENT_MESSAGES);
					}
					case 5: //Tienda
					{
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "Tu teléfono está apagado, enciéndelo para usarlo.");
						
						ShowPlayerShop(playerid);
					}
					case 6: //Apagar
					{
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendClientMessagef(playerid, -1, "Tu teléfono está apagado, enciéndelo para usarlo.");
						
						if(pTemp(playerid)[pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
						PI[playerid][pi_PHONE_STATE] = PHONE_STATE_OFF;
						SendClientMessagef(playerid, -1, "Has apagado tu teléfono, ahora no recibirás llamadas.");
					}
				}
			}
			return 1;
		}
		case DIALOG_PHONE_BOOK:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 10) return ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 20) return ShowDialog(playerid, DIALOG_PHONE_BOOK_DELETE_ALL);
				
				pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			}
			else ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NUMBER:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				pTemp(playerid)[pt_PLAYER_PHONE_BOOK_ADD_NUMBER] = inputtext[0];
				ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NAME);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NAME:
		{
			if(response)
			{
				if(isnull(inputtext))
				{ 
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendClientMessagef(playerid, -1, "Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new slot = GetEmptyPlayerPhoneBookSlot(playerid);
				if(slot == -1) return SendClientMessagef(playerid, -1, "Memoria de la agenda llena.");
			
			
				PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
				format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "%s", inputtext);
				PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = pTemp(playerid)[pt_PLAYER_PHONE_BOOK_ADD_NUMBER];
				RegisterNewPlayerPhoneBook(playerid, slot);
				
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessagef(playerid, -1, "Nuevo contacto añadido a la agenda:Nombre: %sTeléfono: %d.", PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER]);
				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
			return 1;
		}
		case DIALOG_PHONE_BOOK_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:  SendClientMessagef(playerid, -1, "Usa /llamar");
					case 1: ShowDialog(playerid, DIALOG_PHONE_BOOK_SEND_MESSAGE);
					case 2: ShowDialog(playerid, DIALOG_PHONE_BOOK_CHANGE_NAME);
					case 3: ShowDialog(playerid, DIALOG_PHONE_BOOK_CONFIRM_DELET);
				}
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_BOOK_CHANGE_NAME:
		{
			if(response)
			{
				if(isnull(inputtext))
				{ 
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendClientMessagef(playerid, -1, "Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				format(PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "%s", inputtext);
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pbook SET name = '%e' WHERE id = %d;", PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				SendClientMessagef(playerid, -1, "Contacto modificado.");
				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_BOOK_CONFIRM_DELET:
		{
			if(response)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pbook WHERE id = %d;", PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				SendClientMessagef(playerid, -1, "Contacto \"%s\" eliminado de tu agenda.", PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
				
				PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_VALID] = false;
				PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID] = 0;
				format(PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "");
				PLAYER_PHONE_BOOK[playerid][ pTemp(playerid)[pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER] = 0;
				
				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_BOOK_DELETE_ALL:
		{
			if(response)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pbook WHERE id_player = %d;", PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				new temp_PLAYER_PHONE_BOOK[Phone_Book_Enum]; 
				for(new i = 0; i != MAX_PHONE_CONTACTS; i ++) PLAYER_PHONE_BOOK[playerid][i] = temp_PLAYER_PHONE_BOOK;
				
				SendClientMessagef(playerid, -1, "Ha eliminado todos sus contactos.");
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_CALL_NUMBER:
		{
			if(response) SendClientMessagef(playerid, -1, "Usa /llamar");
			else ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_SMS_NUMBER:
		{
			if(response) SendClientMessagef(playerid, -1, "Usa /sms");
			else ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_SMS_MESSAGE:
		{
			if(response) SendClientMessagef(playerid, -1, "Usa /sms");
			else ShowDialog(playerid, DIALOG_PHONE_SMS_MESSAGE);
			return 1;
		}
		case DIALOG_PHONE_BOOK_SEND_MESSAGE:
		{
			if(response) SendClientMessagef(playerid, -1, "Usa /sms");
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_SENT_MESSAGES:
		{
			if(!response) ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_RECEIVED_MESSAGES:
		{
			if(!response) ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_CONFIRM_BUY_PROPERTY:
		{
			if(response)
			{
				if(PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_SOLD]) return SendClientMessagef(playerid, -1, "Está propiedad ya está vendida.");
				if(PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_LEVEL] > PI[playerid][pi_LEVEL]) return SendClientMessagef(playerid, -1, "Necesitas ser como mínimo nivel %d para comprar esta propiedad.", PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_LEVEL]);
				if(PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_PRICE] > PI[playerid][pi_BANK_MONEY]) return SendClientMessagef(playerid, -1, "No.");
				if(PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_VIP_LEVEL] > PI[playerid][pi_VIP]) return SendClientMessagef(playerid, -1, "No.");
				if(PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_EXTRA] > PI[playerid][pi_COINS]) return SendClientMessagef(playerid, -1, "No.");
	
				if(!PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_EXTRA])
				{
					if(PI[playerid][pi_PHONE_NUMBER])
					{
						new message[64]; format(message, sizeof message, "PROPIEDAD COMPRADA: -%s$", number_format_thousand(PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_PRICE]));
						RegisterPhoneMessage(0, PI[playerid][pi_ID], message);
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessagef(playerid, -1, "{"#BLUE_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
					}
					
					PI[playerid][pi_BANK_MONEY] -= PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_PRICE];
				
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
					mysql_tquery(handle_db, QUERY_BUFFER);
					RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[playerid][pi_ID], BANK_TRANSACTION_BUY_PROPERTY, PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_PRICE]);
				}
				else
				{
					PI[playerid][pi_COINS] -= PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_EXTRA];
					UpdateReputationTextDraws(playerid);

					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d WHERE id = %d;", PI[playerid][pi_COINS], PI[playerid][pi_ID]);
					mysql_tquery(handle_db, QUERY_BUFFER);
					
					SendClientMessagef(playerid, -1, "Has gastado %d "SERVER_COIN" en la compra de esta propiedad.", PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_EXTRA]);
				}
				
				
				PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_SOLD] = true;
				PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_CREW] = false;
				PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_OWNER_ID] = PI[playerid][pi_ID];
				CreatePropertyInfo(pTemp(playerid)[pt_BUY_HOUSE_INDEX], PI[playerid][pi_ID], PI[playerid][pi_NAME], 0, "");
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = %d, id_territory = NULL WHERE id = %d;", PI[playerid][pi_ID], PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				
				SendClientMessagef(playerid, -1, "¡Propiedad %d comprada! Ahora puedes ir a tu casa, si no sabes donde es puedes marcarla con el /GPS.", PROPERTY_INFO[pTemp(playerid)[pt_BUY_HOUSE_INDEX]][property_ID]);
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_PROPERTIES);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_VEHICLES);
					case 3: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_GPS_WORKS);
					case 5:
					{
						if(pTemp(playerid)[pt_GPS_MAP]) HidePlayerGpsMap(playerid);
						else ShowPlayerGpsMap(playerid);
					}
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == MAX_PLAYER_GPS_SAVES + 10) return ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_ADD);
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == MAX_PLAYER_GPS_SAVES + 20) return ShowDialog(playerid, DIALOG_PLAYER_GPS_DELETE_ALL);
				
				pTemp(playerid)[pt_GPS_PLAYER_SELECTED] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_ADD:
		{
			if(response)
			{
				if(isnull(inputtext))
				{ 
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendClientMessagef(playerid, -1, "Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new slot = GetEmptyPlayer_GPS_Slot(playerid);
				if(slot == -1) return SendClientMessagef(playerid, -1, "Memoria del GPS llena.");
			
				PLAYER_GPS[playerid][slot][player_gps_VALID] = true;
				format(PLAYER_GPS[playerid][slot][player_gps_NAME], 24, "%s", inputtext);
				GetPlayerPos(playerid, PLAYER_GPS[playerid][slot][player_gps_X], PLAYER_GPS[playerid][slot][player_gps_Y], PLAYER_GPS[playerid][slot][player_gps_Z]);
				PLAYER_GPS[playerid][slot][player_gps_WORLD] = GetPlayerVirtualWorld(playerid);
				PLAYER_GPS[playerid][slot][player_gps_INTERIOR] = GetPlayerInterior(playerid);
				RegisterNewPlayer_GPS_Site(playerid, slot);
				
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessagef(playerid, -1, "Nuevo sitio añadido al GPS con el nombre: %s.", PLAYER_GPS[playerid][slot][player_gps_NAME]);
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_OPTION:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: SetPlayer_GPS_Checkpoint(playerid, PLAYER_GPS[playerid][pTemp(playerid)[pt_GPS_PLAYER_SELECTED]][player_gps_X], PLAYER_GPS[playerid][pTemp(playerid)[pt_GPS_PLAYER_SELECTED]][player_gps_Y], PLAYER_GPS[playerid][pTemp(playerid)[pt_GPS_PLAYER_SELECTED]][player_gps_Z], PLAYER_GPS[playerid][pTemp(playerid)[pt_GPS_PLAYER_SELECTED]][player_gps_WORLD], PLAYER_GPS[playerid][pTemp(playerid)[pt_GPS_PLAYER_SELECTED]][player_gps_INTERIOR]);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_CHANGE_NAME);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_CONFIRM_DELET);
				}
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_CHANGE_NAME:
		{
			if(response)
			{
				if(isnull(inputtext))
				{ 
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendClientMessagef(playerid, -1, "Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				format(PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_NAME], 24, "%s", inputtext);
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pgps SET name = '%e' WHERE id = %d;", PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_NAME], PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessagef(playerid, -1, "Has modificado el nombre de este lugar correctamente");
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			return 1;
		}
		case DIALOG_PLAYER_GPS_CONFIRM_DELET:
		{
			if(response)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pgps WHERE id = %d;", PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);

				PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_VALID] = false;
				PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_ID] = 0;
				format(PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_NAME], 24, "");
				PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_X] = 0.0;
				PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_Y] = 0.0;
				PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_Z] = 0.0;
				PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_WORLD] = 0;
				PLAYER_GPS[playerid][ pTemp(playerid)[pt_GPS_PLAYER_SELECTED] ][player_gps_INTERIOR] = 0;
				
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessagef(playerid, -1, "Has eliminado este lugar de tu GPS.");
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			return 1;
		}
		case DIALOG_PLAYER_GPS_DELETE_ALL:
		{
			if(response)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pgps WHERE id_player = %d;", PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				new temp_PLAYER_GPS[Player_GPS_Enum]; 
				for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++) PLAYER_GPS[playerid][i] = temp_PLAYER_GPS;
				
				SendClientMessagef(playerid, -1, "Ha eliminado todos tus lugares guardados.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITES:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_0);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_1);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_2);
					case 3: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_3);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_4);
					case 5: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_5);
					case 6: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_6);
					case 7: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_7);
					case 8: SetPlayer_GPS_Checkpoint(playerid, 1480.966918, -1772.065673, 18.795755, 0, 0);
					case 9: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_8);
					case 10: SetPlayer_GPS_Checkpoint(playerid, 263.592102, 22.960014, 2.170951, 0, 0);
					case 11: SetPlayer_GPS_Checkpoint(playerid, -2026.736938, -101.953544, 35.164062, 0, 0);
					case 12: SetPlayer_GPS_Checkpoint(playerid, 1670.253662, 735.604919, 10.820312, 0, 0);
				}
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_WORKS:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return true;
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == WORK_MEDIC) SendClientMessagef(playerid, -1, "Este trabajo se puede conseguir en cualquier hospital.");
				else SetPlayer_GPS_Checkpoint(playerid, obtain_work_coords[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_X], obtain_work_coords[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Y], obtain_work_coords[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Z], 0, 0);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_0: //Hospitales
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, Hospital_Spawn_Positions[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][hspi_X], Hospital_Spawn_Positions[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][hspi_Y], Hospital_Spawn_Positions[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][hspi_Z], 0, 0);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_1 .. DIALOG_PLAYER_GPS_SITE_4, DIALOG_PLAYER_GPS_SITE_8: //EE
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);
				SetPlayer_GPS_Checkpoint(playerid, ENTER_EXIT[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][ee_EXT_X], ENTER_EXIT[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][ee_EXT_Y], ENTER_EXIT[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][ee_EXT_Z], ENTER_EXIT[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][ee_EXT_WORLD], ENTER_EXIT[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][ee_EXT_INTERIOR]);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_5: //Cajeros
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, ATM_BANK[listitem][atm_X], ATM_BANK[listitem][atm_Y], ATM_BANK[listitem][atm_Z], 0, 0);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_6: //Gasolineras
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, Fuel_Stations[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][fs_X], Fuel_Stations[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][fs_Y], Fuel_Stations[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][fs_Z], 0, 0);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_WORKS_TELEPORTS:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return true;
				else SetPlayerPosEx(playerid, obtain_work_coords[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_X], obtain_work_coords[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Y], obtain_work_coords[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Z], 0.0, 0, 0, true);
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS_PROPERTIES:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_GPS_SELECTED_PROPERTY][listitem] == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);
				
				new index = GetPropertyIndexByID(pTemp(playerid)[pt_PLAYER_GPS_SELECTED_PROPERTY][listitem]);
				if(index != -1) SetPlayer_GPS_Checkpoint(playerid, PROPERTY_INFO[index][property_EXT_X], PROPERTY_INFO[index][property_EXT_Y], PROPERTY_INFO[index][property_EXT_Z], 0, PROPERTY_INFO[index][property_EXT_INTERIOR]);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_VEHICLES:
		{
			if(response)
			{
				new const vehicleid = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];

				if(vehicleid == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);

				if(!PI[playerid][pi_VIP])
				{
					if(!PLAYER_VEHICLES[vehicleid][player_vehicle_ACCESSIBLE])
					{
						SendClientMessagef(playerid, -1, "No podrás usar este vehículo hasta que no consigas VIP.");
					}
				}
				
				new Float:pos[3];
				GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
				SetPlayer_GPS_Checkpoint(playerid, pos[0], pos[1], pos[2], GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD], 0);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PROPERTY_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PROPERTY_NAME);
					case 1:
					{
						new total;
						LoopEx(i, MAX_PLAYERS, 0)
						{
							if(IsPlayerConnected(i))
							{
								if( PI[i][pi_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY && PI[i][pi_LOCAL_INTERIOR] == PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_ID])
								{
									if(PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_POLICE_FORCED] && (PLAYER_WORKS[i][WORK_POLICE][pwork_SET] && PlayerTemp[i][pt_WORKING_IN] == WORK_POLICE)) {
										continue;
									}

									PI[i][pi_STATE] = ROLEPLAY_STATE_NORMAL;
									PI[i][pi_LOCAL_INTERIOR] = 0;
									PlayerTemp[i][pt_PROPERTY_INDEX] = -1;
									SetPlayerPosEx(i, PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_ANGLE], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_INTERIOR], 0, PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_FREEZE], false);
									StopAudioStreamForPlayer(i);
									SendClientMessagef(i, -1, "%s te ha echado de su propiedad.", pTemp(playerid)[pt_NAME]);
									total ++;
								}
							}
						}
						if(total == 0) SendClientMessagef(playerid, -1, "No hay nadie en tu propiedad.");
						else SendClientMessagef(playerid, -1, "Has echado %d personas de tu propiedad.", total);
					}
					case 2:
					{
						if(!PI[playerid][pi_MP3])
						{
							SendClientMessagef(playerid, -1, "No tienes ningún MP3, puedes ir a cualquier 24/7 para comprar uno.");
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							return 1;
						}
						if(pTemp(playerid)[pt_PLAYER_WAITING_MP3_HTTP]) return SendClientMessagef(playerid, -1, "Espera que termine la búsqueda actual.");
						
						pTemp(playerid)[pt_MUSIC_FOR_PROPERTY] = true;
						Auto_SendPlayerAction(playerid, "busca música en su MP3.");
						ShowDialog(playerid, DIALOG_PLAYER_MP3);
					}
					case 3:
					{
						if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
						if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
						
						for(new i = 0; i != MAX_TERRITORIES; i ++)
						{
							if(!TERRITORIES[i][territory_VALID]) continue;
							if(!TERRITORIES[i][territory_OCCUPIED]) continue;
							if(TERRITORIES[i][territory_CREW_ID] != PI[playerid][pi_CREW]) continue;
							
							if(IsPointInDynamicArea(TERRITORIES[i][territory_AREA], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z]))
							{
								pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] = i;
								ShowDialog(playerid, DIALOG_CREW_PROPERTY_CONFIRM);
								return 1;
							}
						}
						SendClientMessagef(playerid, -1, "Esta propiedad no está dentro de un territorio de tu banda.");
					}
				}
			}
			return 1;
		}
		case DIALOG_PROPERTY_NAME:
		{
			if(response)
			{
				if(!PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_VALID]) return 1;
				if(PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != PI[playerid][pi_ID]) return 1;
				
				if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
				if(strlen(inputtext) > 24)
				{
					ShowDialog(playerid, dialogid);
					SendClientMessagef(playerid, -1, "{"#SILVER_COLOR"}Caracteres: 1-24.");
					return 1;
				}
				
				format(PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "%s", inputtext);
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET name = '%e' WHERE id = %d;", PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				SendClientMessagef(playerid, -1, "Nombre de la propiedad actualizado a '%s'.", inputtext);
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_OPTIONS);
			return 1;
		}
		case DIALOG_PLAYER_MP3:
		{
			if(response)
			{
				if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
				PlayMp3(playerid, inputtext, "Cancion Mp3");
			}
			return 1;
		}
		case DIALOG_NOTARY:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						pTemp(playerid)[pt_NOTARY_OPTION] = 0;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
					case 1:
					{
						pTemp(playerid)[pt_NOTARY_OPTION] = 0;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
					case 2:
					{
						pTemp(playerid)[pt_NOTARY_OPTION] = 1;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
					case 3:
					{
						pTemp(playerid)[pt_NOTARY_OPTION] = 1;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
				}
			}
			return 1;
		}
		case DIALOG_NOTARY_SELECT_PROPERTY:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				
				pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] = GetPropertyIndexByID(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem]);
				if(pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] == -1) return SendClientMessagef(playerid, -1, "PROPIEDAD ID no encontrada.");
				
				switch(pTemp(playerid)[pt_NOTARY_OPTION])
				{
					case 0: ShowDialog(playerid, DIALOG_PROPERTY_BANK_SELL);
					case 1: ShowDialog(playerid, DIALOG_PROPERTY_SELL_PRICE);
					case 2:
					{
						pTemp(playerid)[pt_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_PROPERTY;
						pTemp(playerid)[pt_SHOP_ADD_MODELID] = 1273;
						pTemp(playerid)[pt_SHOP_ADD_VCOL1] = 0;
						pTemp(playerid)[pt_SHOP_ADD_VCOL2] = 0;
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			else
			{
				if(pTemp(playerid)[pt_NOTARY_OPTION] == 2) ShowDialog(playerid, DIALOG_SHOP_ADD);
				else ShowDialog(playerid, DIALOG_NOTARY);
			}
			return 1;
		}
		case DIALOG_PROPERTY_BANK_SELL:
		{
			if(response)
			{
				if(!PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_VALID]) return 1;
				if(PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != PI[playerid][pi_ID]) return 1;
				if(PI[playerid][pi_BANK_ACCOUNT] == 0) return SendClientMessagef(playerid, -1, "Necesitas tener una cuenta bancaria para vender la propiedad.");

				PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_SOLD] = false;
				PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_CREW] = false;
				PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = 0;
				format(PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				
				new info[3];
				UpdateUnnocupiedPropertyLabel(pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED]);
				
				DestroyDynamicPickup(PROPERTY_INFO[pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID]);
				PROPERTY_INFO[pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
				
				PROPERTY_INFO[pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED]][property_EXT_X], PROPERTY_INFO[pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED]][property_EXT_Y], PROPERTY_INFO[pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED]][property_EXT_Z], 0, PROPERTY_INFO[pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED]][property_EXT_INTERIOR]);
				info[0] = PICKUP_TYPE_PROPERTY;
				info[1] = pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED]; // Index
				info[2] = 2; // Pickup Exterior
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
				
				new Float:price, payment;
				price = PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE];
				if(PI[playerid][pi_VIP]) payment = floatround( floatmul(price, 0.50) );
				else payment = floatround( floatmul(price, 0.25) );
				
				if(PI[playerid][pi_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "PROPIEDAD VENDIDA: +%s$", number_format_thousand(payment));
					RegisterPhoneMessage(0, PI[playerid][pi_ID], message);
					if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessagef(playerid, -1, "{"#BLUE_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
				}
				
				PI[playerid][pi_BANK_MONEY] += payment;
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);

				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = NULL WHERE id = %d;", PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
						
				RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[playerid][pi_ID], BANK_TRANSACTION_SOLD_PROPERTY, payment);
				SendClientMessagef(playerid, -1, "Has vendido esta propiedad, has recibido %s$ en tu cuenta bancaria.", number_format_thousand(payment));
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
			
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
			return 1;
		}
		case DIALOG_PROPERTY_SELL_PRICE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);
				
				new Float:price, min_price, max_price;
				price = PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE];
				min_price = floatround( floatmul(price, 0.15) );
				max_price = floatround( floatmul(price, 6.0) );
				
				if(inputtext[0] < min_price || inputtext[0] > max_price)
				{
					SendClientMessagef(playerid, -1, "Este precio no está dentro del rango ofrecido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				pTemp(playerid)[pt_NOTARY_PRICE] = inputtext[0];
				ShowDialog(playerid, DIALOG_PROPERTY_SELL_TO_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
			return 1;
		}
		case DIALOG_PROPERTY_SELL_TO_PLAYER:
		{
			if(response)
			{
				if(sscanf(inputtext, "u", inputtext[0])) return ShowDialog(playerid, dialogid);
				
				if(!IsPlayerConnected(inputtext[0])) return SendClientMessagef(playerid, -1, "Error, el comprador está desconectado.");
				if(inputtext[0] == playerid) return SendClientMessagef(playerid, -1, "¿Pero como te vas a vender algo a ti mismo?");
				if(PlayerTemp[inputtext[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "Error, el comprador no está disponible.");
				
				if(ENTER_EXIT[ PlayerTemp[inputtext[0]][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return SendClientMessagef(playerid, -1, "El comprador no está en la sala.");
				if(!IsPlayerInRangeOfPoint(inputtext[0], 3.0, -474.596282, 289.679107, 2004.584960)) return SendClientMessagef(playerid, -1, "El comprador no está en la sala.");
				if(PI[inputtext[0]][pi_BANK_ACCOUNT] == 0) return SendClientMessagef(playerid, -1, "El comprador no tiene cuenta bancaria.");
				
				new player_properties = CountPlayerProperties(inputtext[0]);
				if(player_properties >= MAX_SU_PROPERTIES) return SendClientMessagef(playerid, -1, "El comprador no puede adquirir más propiedades.");
				if(!PI[inputtext[0]][pi_VIP])
				{
					if(player_properties >= MAX_NU_PROPERTIES) return SendClientMessagef(playerid, -1, "El comprador no puede adquirir más propiedades.");
				}
				
				if(PI[inputtext[0]][pi_LEVEL] < 2) return SendClientMessagef(playerid, -1, "Error, el comprador necesita ser al menos nivel 2.");
				if(pTemp(playerid)[pt_NOTARY_PRICE] > PI[inputtext[0]][pi_BANK_MONEY]) return SendClientMessagef(playerid, -1, "Error, el comprador no tiene el dinero que pides.");
				
				SendClientMessagef(playerid, -1, "Tu oferta se ha enviado al comprador, espera para ver si la acepta.");
				
				new action[64]; format(action, sizeof action, "quiere llegar a un acuerdo con %s.", PlayerTemp[inputtext[0]][pt_NAME]);
				Auto_SendPlayerAction(playerid, action);
				
				PlayerTemp[inputtext[0]][pt_PLAYER_PROPERTY_SELECTED] = pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED];
				PlayerTemp[inputtext[0]][pt_NOTARY_PRICE] = pTemp(playerid)[pt_NOTARY_PRICE];
				PlayerTemp[inputtext[0]][pt_NOTARY_TO_PLAYER] = playerid;
				pTemp(playerid)[pt_NOTARY_TO_PLAYER] = inputtext[0];
				
				ShowDialog(inputtext[0], DIALOG_SELL_CONFIRM_PROPERTY);
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_SELL_PRICE);
			return 1;
		}
		case DIALOG_SELL_CONFIRM_PROPERTY:
		{
			if(response)
			{
				if(!IsPlayerConnected(pTemp(playerid)[pt_NOTARY_TO_PLAYER])) return SendClientMessagef(playerid, -1, "El vendedor se ha desconectado.");
				if(PlayerTemp[ pTemp(playerid)[pt_NOTARY_TO_PLAYER] ][pt_NOTARY_TO_PLAYER] != playerid) return SendClientMessagef(playerid, -1, "El vendedor ya no está.");
				if(PlayerTemp[ pTemp(playerid)[pt_NOTARY_TO_PLAYER] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "Error, el vendedor no está disponible.");
				if(ENTER_EXIT[ PlayerTemp[ pTemp(playerid)[pt_NOTARY_TO_PLAYER] ][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return SendClientMessagef(playerid, -1, "El vendedor no está en la sala.");
				if(!IsPlayerInRangeOfPoint(pTemp(playerid)[pt_NOTARY_TO_PLAYER], 3.0, -474.596282, 289.679107, 2004.584960)) return SendClientMessagef(playerid, -1, "El vendedor no está en la sala.");
				if(PI[ pTemp(playerid)[pt_NOTARY_TO_PLAYER] ][pi_BANK_ACCOUNT] == 0) return SendClientMessagef(playerid, -1, "El vendedor no tiene cuenta bancaria.");
				
				// Traspasar
				new label_str[256];
				format
				(
					label_str, 
					sizeof label_str, 
					"\
						Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
						{FFFFFF}Propietario: {"#PRIMARY_COLOR"}%s\n\
						{FFFFFF}Presiona {"#PRIMARY_COLOR"}'Y' {FFFFFF}para entrar.\
					", PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_ID], PI[playerid][pi_NAME]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				
				PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = PI[playerid][pi_ID];
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = %d, id_territory = NULL WHERE id = %d;", PI[playerid][pi_ID], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				// Banco
				new price = pTemp(playerid)[pt_NOTARY_PRICE], seller = pTemp(playerid)[pt_NOTARY_TO_PLAYER];
				
				if(PI[playerid][pi_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "PROPIEDAD COMPRADA: -%s$", number_format_thousand(price));
					RegisterPhoneMessage(0, PI[playerid][pi_ID], message);
					if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessagef(playerid, -1, "{"#BLUE_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
				}
				if(PI[seller][pi_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "PROPIEDAD VENDIDA: +%s$", number_format_thousand(price));
					RegisterPhoneMessage(0, PI[seller][pi_ID], message);
					if(PI[seller][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessagef(seller, -1, "{"#BLUE_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(seller, 6740), message);
				}
				
				PI[playerid][pi_BANK_MONEY] -= price;
				PI[seller][pi_BANK_MONEY] += price;
				RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[seller][pi_ID], BANK_TRANSACTION_TRANSFER, price);
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);

				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[seller][pi_BANK_MONEY], PI[seller][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				SendClientMessagef(playerid, -1, "¡Propiedad %d comprada!Ahora puedes ir a tu casa, si no sabes donde es puedes marcarla con el /GPS.", PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				SendClientMessagef(seller, -1, "¡Propiedad %d vendida!Has recibido %s dólares en tu cuenta bancaria.", PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_ID], number_format_thousand(price));
				
				PlayerPlaySoundEx(seller, 1058, 0.0, 0.0, 0.0);
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				
				new action[64]; format(action, sizeof action, "y %s han llegado a un acuerdo.", PlayerTemp[seller][pt_NAME]);
				Auto_SendPlayerAction(playerid, action);
			}
			return 1;
		}
		case DIALOG_NOTARY_SELECT_VEHICLE:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
				
				switch(pTemp(playerid)[pt_NOTARY_OPTION])
				{
					case 0: ShowDialog(playerid, DIALOG_VEHICLE_BANK_SELL);
					case 1: ShowDialog(playerid, DIALOG_VEHICLE_SELL_PRICE);
					case 2:
					{
						pTemp(playerid)[pt_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_VEHICLE;
						pTemp(playerid)[pt_SHOP_ADD_MODELID] = GLOBAL_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID];
						pTemp(playerid)[pt_SHOP_ADD_VCOL1] = GLOBAL_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_COLOR_1];
						pTemp(playerid)[pt_SHOP_ADD_VCOL2] = GLOBAL_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_COLOR_2];
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			else
			{
				if(pTemp(playerid)[pt_NOTARY_OPTION] == 2) ShowDialog(playerid, DIALOG_SHOP_ADD);
				else ShowDialog(playerid, DIALOG_NOTARY);
			}
			return 1;
		}
		case DIALOG_VEHICLE_BANK_SELL:
		{
			if(response)
			{
				if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_VALID]) return 1;
				if(PLAYER_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return 1;
				if(PI[playerid][pi_BANK_ACCOUNT] == 0) return SendClientMessagef(playerid, -1, "Necesitas tener una cuenta bancaria para vender el vehículo.");

				new Float:price, payment;
				price = PLAYER_VEHICLES[pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED]][player_vehicle_PRICE];
				if(PI[playerid][pi_VIP]) payment = floatround( floatmul(price, 0.50) );
				else payment = floatround( floatmul(price, 0.25) );
				
				//Destruir veh
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pvehicles WHERE id = %d;", PLAYER_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_ID]);
				mysql_query(handle_db, QUERY_BUFFER);
				
				DestroyVehicleEx(pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED]);
				
				
				if(PI[playerid][pi_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "VEHICULO VENDIDO: +%s$", number_format_thousand(payment));
					RegisterPhoneMessage(0, PI[playerid][pi_ID], message);
					if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessagef(playerid, -1, "{"#BLUE_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
				}
				PI[playerid][pi_BANK_MONEY] += payment;
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[playerid][pi_ID], BANK_TRANSACTION_SOLD_VEHICLE, payment);
				
				SendClientMessagef(playerid, -1, "Has vendido este vehículo, has recibido %s$ en tu cuenta bancaria.", number_format_thousand(payment));
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				
				if(!PI[playerid][pi_VIP]) ReLockPlayerVehicles(playerid);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
			return 1;
		}
		case DIALOG_VEHICLE_SELL_PRICE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);
				
				new Float:price, min_price, max_price;
				price = PLAYER_VEHICLES[pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED]][player_vehicle_PRICE];
				min_price = floatround( floatmul(price, 0.15) );
				max_price = floatround( floatmul(price, 6.0) );
				
				if(inputtext[0] < min_price || inputtext[0] > max_price)
				{
					SendClientMessagef(playerid, -1, "Este precio no está dentro del rango ofrecido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				pTemp(playerid)[pt_NOTARY_PRICE] = inputtext[0];
				ShowDialog(playerid, DIALOG_VEHICLE_SELL_TO_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
			return 1;
		}
		case DIALOG_VEHICLE_SELL_TO_PLAYER:
		{
			if(response)
			{
				if(sscanf(inputtext, "u", inputtext[0])) return ShowDialog(playerid, dialogid);
				
				if(!IsPlayerConnected(inputtext[0])) return SendClientMessagef(playerid, -1, "Error, el comprador está desconectado.");
				if(inputtext[0] == playerid) return SendClientMessagef(playerid, -1, "¿Pero como te vas a vender algo a ti mismo?");
				if(PlayerTemp[inputtext[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "Error, el comprador no está disponible.");
				
				if(PlayerTemp[inputtext[0]][pt_INTERIOR_INDEX] == -1 || ENTER_EXIT[ PlayerTemp[inputtext[0]][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return SendClientMessagef(playerid, -1, "El comprador no está en la sala.");
				if(!IsPlayerInRangeOfPoint(inputtext[0], 3.0, -474.596282, 289.679107, 2004.584960)) return SendClientMessagef(playerid, -1, "El comprador no está en la sala.");
				if(PI[inputtext[0]][pi_BANK_ACCOUNT] == 0) return SendClientMessagef(playerid, -1, "El comprador no tiene cuenta bancaria.");
				
				new pvehicles = CountPlayerVehicles(inputtext[0]);
				if(pvehicles >= MAX_SU_VEHICLES) return SendClientMessagef(playerid, -1, "El comprador no puede adquirir más vehículos.");
				if(!PI[inputtext[0]][pi_VIP])
				{
					if(pvehicles >= MAX_NU_VEHICLES) return SendClientMessagef(playerid, -1, "El comprador no puede adquirir más vehículos.");
				}
				
				if(PI[inputtext[0]][pi_LEVEL] < 2) return SendClientMessagef(playerid, -1, "Error, el comprador necesita ser al menos nivel 2.");
				if(pTemp(playerid)[pt_NOTARY_PRICE] > PI[inputtext[0]][pi_BANK_MONEY]) return SendClientMessagef(playerid, -1, "Error, el comprador no tiene el dinero que pides.");
				
				SendClientMessagef(playerid, -1, "Tu oferta se ha enviado al comprador, espera para ver si la acepta.");
				
				new action[64]; format(action, sizeof action, "quiere llegar a un acuerdo con %s.", PlayerTemp[inputtext[0]][pt_NAME]);
				Auto_SendPlayerAction(playerid, action);
				
				PlayerTemp[inputtext[0]][pt_PLAYER_VEHICLE_SELECTED] = pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED];
				PlayerTemp[inputtext[0]][pt_NOTARY_PRICE] = pTemp(playerid)[pt_NOTARY_PRICE];
				PlayerTemp[inputtext[0]][pt_NOTARY_TO_PLAYER] = playerid;
				pTemp(playerid)[pt_NOTARY_TO_PLAYER] = inputtext[0];
				
				ShowDialog(inputtext[0], DIALOG_SELL_CONFIRM_VEHICLE);
			}
			else ShowDialog(playerid, DIALOG_VEHICLE_SELL_PRICE);
			return 1;
		}
		case DIALOG_SELL_CONFIRM_VEHICLE:
		{
			if(response)
			{
				if(!IsPlayerConnected(pTemp(playerid)[pt_NOTARY_TO_PLAYER])) return SendClientMessagef(playerid, -1, "El vendedor se ha desconectado.");
				if(PlayerTemp[ pTemp(playerid)[pt_NOTARY_TO_PLAYER] ][pt_NOTARY_TO_PLAYER] != playerid) return SendClientMessagef(playerid, -1, "El vendedor ya no está.");
				if(PlayerTemp[ pTemp(playerid)[pt_NOTARY_TO_PLAYER] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "Error, el vendedor no está disponible.");
				if(ENTER_EXIT[ PlayerTemp[ pTemp(playerid)[pt_NOTARY_TO_PLAYER] ][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return SendClientMessagef(playerid, -1, "El vendedor no está en la sala.");
				if(!IsPlayerInRangeOfPoint(pTemp(playerid)[pt_NOTARY_TO_PLAYER], 3.0, -474.596282, 289.679107, 2004.584960)) return SendClientMessagef(playerid, -1, "El vendedor no está en la sala.");
				if(PI[ pTemp(playerid)[pt_NOTARY_TO_PLAYER] ][pi_BANK_ACCOUNT] == 0) return SendClientMessagef(playerid, -1, "El vendedor no tiene cuenta bancaria.");
				
				// Traspasar
				PLAYER_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_OWNER_ID] = PI[playerid][pi_ID];
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pvehicles SET id_player = %d WHERE id = %d;", PI[playerid][pi_ID], PLAYER_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				
				// Banco
				new price = pTemp(playerid)[pt_NOTARY_PRICE], seller = pTemp(playerid)[pt_NOTARY_TO_PLAYER];
				
				if(PI[playerid][pi_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "VEHICULO COMPRADO: -%s$", number_format_thousand(price));
					RegisterPhoneMessage(0, PI[playerid][pi_ID], message);
					if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessagef(playerid, -1, "{"#BLUE_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
				}
				if(PI[seller][pi_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "VEHICULO VENDIDO: +%s$", number_format_thousand(price));
					RegisterPhoneMessage(0, PI[seller][pi_ID], message);
					if(PI[seller][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessagef(seller, -1, "{"#BLUE_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(seller, 6740), message);
				}
				
				PI[playerid][pi_BANK_MONEY] -= price;
				PI[seller][pi_BANK_MONEY] += price;
				RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[seller][pi_ID], BANK_TRANSACTION_TRANSFER, price);
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);

				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[seller][pi_BANK_MONEY], PI[seller][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				
				SendClientMessagef(playerid, -1, "¡Vehículo %s comprado!Utiliza /GPS para localizarlo.", VEHICLE_INFO[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
				SendClientMessagef(seller, -1, "¡Vehículo vendido!Has recibido %s dólares en tu cuenta bancaria.", number_format_thousand(price));
				
				PlayerPlaySoundEx(seller, 1058, 0.0, 0.0, 0.0);
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				
				new action[64]; format(action, sizeof action, "y %s han llegado a un acuerdo.", PlayerTemp[seller][pt_NAME]);
				Auto_SendPlayerAction(playerid, action);
				
				if(!PI[seller][pi_VIP]) ReLockPlayerVehicles(seller);
				if(!PI[playerid][pi_VIP]) ReLockPlayerVehicles(playerid);
			}
			return 1;
		}
		case DIALOG_TUNING_MENU_PART:
		{
			if(response)
			{
				if(isnull(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME])) return 1;
				
				if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
				new Float:Vehicle_Pos[3];
				GetVehiclePos(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
				
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessagef(playerid, -1, "El vehículo está demasiado lejos.");
				
				format(pTemp(playerid)[pt_TUNING_SELECTED_PART], 24, "%s", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]);
				
				ShowDialog(playerid, DIALOG_TUNING_MENU_COMPONENT);
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_TUNING_MENU_COMPONENT:
		{
			if(response)
			{
				if(isnull(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]) || !PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID]) return 1;
				
				if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
				new Float:Vehicle_Pos[3];
				GetVehiclePos(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
				
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessagef(playerid, -1, "El vehículo está demasiado lejos.");
				
				if(PI[playerid][pi_MECHANIC_PIECES] < PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES])
				{
					SendClientMessagef(playerid, -1, "No tienes suficientes piezas, puedes comprar más piezas en el taller.");
					return 1;
				}
				
				if(PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					new vehicleid = pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID];
					
					new slot = GetVehicleComponentType( PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] );
					new current_component = GetVehicleComponentInSlot(vehicleid, slot);
					if(current_component) RemoveVehicleComponent(vehicleid, current_component);
					
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][slot] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID];
					AddVehicleComponent(vehicleid, PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID]);
					
					PI[playerid][pi_MECHANIC_PIECES] -= PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES];
					SendClientMessagef(playerid, -1, "Componente '%s' añadido, has necesitado %d piezas.", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME], PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES]);
				}
				else
				{
					format(pTemp(playerid)[pt_TUNING_SELECTED_COMPONENT], 24, "%s", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]);
					pTemp(playerid)[pt_TUNING_SELECTED_COMPONENT_ID] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID];
					
					pTemp(playerid)[pt_TUNING_SELECTED_PIECES] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES];
					ShowDialog(playerid, DIALOG_MECHANIC_TUNING_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_TUNING_MENU_PART);
			return 1;
		}
		case DIALOG_MECHANIC_MENU:
		{
			if(response)
			{
				if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
				new Float:Vehicle_Pos[3];
				GetVehiclePos(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
				
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessagef(playerid, -1, "El vehículo está demasiado lejos.");
				
				switch(listitem)
				{
					case 0: // Reparar
					{
						if(PI[playerid][pi_MECHANIC_PIECES] < 10) return SendClientMessagef(playerid, -1, "No tienes suficientes piezas, puedes comprar más piezas en el taller.");
						
						if(gettime() < GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_REPAIR_TIME] + 300)
						{
							new time = (300-(gettime()-GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_REPAIR_TIME]));
							SendClientMessagef(playerid, -1, "Tienes que esperar %s minutos para volver a reparar este vehículo.", TimeConvert(time));
							return 1;
						}
						
						if(PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
						{
							PI[playerid][pi_MECHANIC_PIECES] -= 10;
							RepairVehicleEx(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], playerid);
							
							SendClientMessagef(playerid, -1, "Este es tu vehículo por lo que no se cobrará.");
							SendClientMessagef(playerid, -1, "Has necesitado 10 piezas para la reparacion.");
							return 1;
						}
						else
						{
							if(!PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
							{
								if(GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_DRIVER] == playerid || GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] == playerid)
								{
									PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
									PI[playerid][pi_MECHANIC_PIECES] -= 10;
									RepairVehicleEx(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], playerid);
									
									SendClientMessagef(playerid, -1, "Eres el conductor o el último conductor de este vehículo por lo que no se cobrará.");
									SendClientMessagef(playerid, -1, "Has necesitado 10 piezas para la reparacion.");
									return 1;
								}
							}
							ShowDialog(playerid, DIALOG_MECHANIC_REPAIR_PRICE);
						}
					}
					case 1:
					{
						if(PI[playerid][pi_MECHANIC_PIECES] < 5)
						{
							ShowDialog(playerid, dialogid);
							SendClientMessagef(playerid, -1, "No tienes suficientes piezas, puedes comprar más piezas en el taller.");
							return 1;
						}
						
						if(!PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							SendClientMessagef(playerid, -1, "Solo los vehículos personales se pueden pintar.");
							return 1;
						}
						
						ShowDialog(playerid, DIALOG_MECHANIC_SELECT_COL_SLOT);
					}
					case 2:
					{
						if(4 > PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL])
						{
							SendMessagef(playerid, "No eres %s.", MECHANIC_RANKS[4]);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						
						ShowDialog(playerid, DIALOG_MECHANIC_REMOVE_COMPONEN);
					}
					case 3:
					{
						if(4 > PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL])
						{
							SendMessagef(playerid, "No eres %s.", MECHANIC_RANKS[4]);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						
						if(!PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							SendClientMessagef(playerid, -1, "Solo los vehículos personales se pueden tunear.");
							return 1;
						}
						
						ShowDialog(playerid, DIALOG_TUNING_MENU_PART);
					}
					case 4:
					{
						if(4 > PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL])
						{
							SendMessagef(playerid, "No eres %s.", MECHANIC_RANKS[4]);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						
						if(!PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							SendClientMessagef(playerid, -1, "Solo los vehículos personales se le pueden cambiar el paintjob.");
							return 1;
						}
						ShowDialog(playerid, DIALOG_TUNING_PAINTJOB);
					}
				}
			}
			return 1;
		}
		case DIALOG_MECHANIC_REPAIR_PRICE:
		{
			if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
			new Float:Vehicle_Pos[3];
			GetVehiclePos(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessagef(playerid, -1, "El vehículo está demasiado lejos.");
			
			if(response)
			{
				new price;
				if(sscanf(inputtext, "d", price))
				{
					SendClientMessagef(playerid, -1, "El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(price < 0 || price > 2000)
				{
					SendClientMessagef(playerid, -1, "El rango del precio es: 0$ - 2.000$.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				if(PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
				{
					new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
					if(buyer == INVALID_PLAYER_ID) return SendClientMessagef(playerid, -1, "El dueño del vehículo no está cerca.");
					
					new Float:mechanic_pos[3];
					GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
					if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessagef(playerid, -1, "El dueño del vehículo está demasiado lejos.");
					
					PlayerTemp[buyer][pt_MECHANIC_PID] = playerid;
					PlayerTemp[buyer][pt_MECHANIC_AID] = PI[playerid][pi_ID];
					PlayerTemp[buyer][pt_MECHANIC_PRICE] = price;
					format(PlayerTemp[buyer][pt_MECHANIC_TEXT], 64, "Reparación completa del vehículo");
					PlayerTemp[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_REPAIR;
					PlayerTemp[buyer][pt_MECHANIC_EXTRA] = 0;
					PlayerTemp[buyer][pt_MECHANIC_VEHICLE_ID] = pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID];
					PlayerTemp[buyer][pt_MECHANIC_PIECES] = 10;
					PlayerTemp[buyer][pt_MECHANIC_TIME] = gettime();
					
					ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
					SendClientMessagef(playerid, -1, "Le has ofrecido a %s reparar su vehículo por %s$.", PlayerTemp[buyer][pt_NAME], number_format_thousand(PlayerTemp[buyer][pt_MECHANIC_PRICE]));
				}
				else
				{
					if(GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_OCCUPIED])
					{
						new buyer = GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_DRIVER];
						if(buyer == INVALID_PLAYER_ID) return SendClientMessagef(playerid, -1, "El conductor del vehículo no está cerca.");
					
						new Float:mechanic_pos[3];
						GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
						if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessagef(playerid, -1, "El conductor del vehículo está demasiado lejos.");
						
						PlayerTemp[buyer][pt_MECHANIC_PID] = playerid;
						PlayerTemp[buyer][pt_MECHANIC_AID] = PI[playerid][pi_ID];
						PlayerTemp[buyer][pt_MECHANIC_PRICE] = price;
						format(PlayerTemp[buyer][pt_MECHANIC_TEXT], 64, "Reparación completa del vehículo");
						PlayerTemp[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_REPAIR;
						PlayerTemp[buyer][pt_MECHANIC_EXTRA] = 0;
						PlayerTemp[buyer][pt_MECHANIC_VEHICLE_ID] = pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID];
						PlayerTemp[buyer][pt_MECHANIC_PIECES] = 10;
						PlayerTemp[buyer][pt_MECHANIC_TIME] = gettime();
						
						ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
						SendClientMessagef(playerid, -1, "Le has ofrecido a %s reparar el vehículo por %s$.", PlayerTemp[buyer][pt_NAME], number_format_thousand(PlayerTemp[buyer][pt_MECHANIC_PRICE]));
					}
					else
					{
						new buyer = GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER];
						if(buyer == INVALID_PLAYER_ID) return SendClientMessagef(playerid, -1, "Este vehículo no tiene conductor.");
					
						new Float:mechanic_pos[3];
						GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
						if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessagef(playerid, -1, "El conductor del vehículo está demasiado lejos.");
						
						PlayerTemp[buyer][pt_MECHANIC_PID] = playerid;
						PlayerTemp[buyer][pt_MECHANIC_AID] = PI[playerid][pi_ID];
						PlayerTemp[buyer][pt_MECHANIC_PRICE] = price;
						format(PlayerTemp[buyer][pt_MECHANIC_TEXT], 64, "Reparación completa del vehículo");
						PlayerTemp[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_REPAIR;
						PlayerTemp[buyer][pt_MECHANIC_EXTRA] = 0;
						PlayerTemp[buyer][pt_MECHANIC_VEHICLE_ID] = pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID];
						PlayerTemp[buyer][pt_MECHANIC_PIECES] = 10;
						PlayerTemp[buyer][pt_MECHANIC_TIME] = gettime();
						
						ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
						SendClientMessagef(playerid, -1, "Le has ofrecido a %s reparar el vehículo por %s$.", PlayerTemp[buyer][pt_NAME], number_format_thousand(PlayerTemp[buyer][pt_MECHANIC_PRICE]));
					}
				}
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_COLOR_PRICE:
		{
			if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
			new Float:Vehicle_Pos[3];
			GetVehiclePos(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessagef(playerid, -1, "El vehículo está demasiado lejos.");
			
			if(response)
			{
				new price;
				if(sscanf(inputtext, "d", price))
				{
					SendClientMessagef(playerid, -1, "El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(price < 0 || price > 1750)
				{
					SendClientMessagef(playerid, -1, "El rango del precio es: 0$ - 1.750$.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendClientMessagef(playerid, -1, "El dueño del vehículo no está cerca.");
				
				new Float:mechanic_pos[3];
				GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessagef(playerid, -1, "El dueño del vehículo está demasiado lejos.");
				
				PlayerTemp[buyer][pt_MECHANIC_PID] = playerid;
				PlayerTemp[buyer][pt_MECHANIC_AID] = PI[playerid][pi_ID];
				PlayerTemp[buyer][pt_MECHANIC_PRICE] = price;
				
				switch(pTemp(playerid)[pt_MECHANIC_COLOR_SLOT])
				{
					case 0:
					{
						format(PlayerTemp[buyer][pt_MECHANIC_TEXT], 64, "Pintar color primario {%06x}(%d)", VEHICLE_COLORS[ pTemp(playerid)[pt_MECHANIC_SELECTED_COLOR] ] >>> 8, pTemp(playerid)[pt_MECHANIC_SELECTED_COLOR]);
						PlayerTemp[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_COLOR_1;
					}
					case 1:
					{
						format(PlayerTemp[buyer][pt_MECHANIC_TEXT], 64, "Pintar color secundario {%06x}(%d)", VEHICLE_COLORS[ pTemp(playerid)[pt_MECHANIC_SELECTED_COLOR] ] >>> 8, pTemp(playerid)[pt_MECHANIC_SELECTED_COLOR]);
						PlayerTemp[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_COLOR_2;
					}
				}
				
				PlayerTemp[buyer][pt_MECHANIC_EXTRA] = pTemp(playerid)[pt_MECHANIC_SELECTED_COLOR];
				PlayerTemp[buyer][pt_MECHANIC_VEHICLE_ID] = pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID];
				PlayerTemp[buyer][pt_MECHANIC_PIECES] = 5;
				PlayerTemp[buyer][pt_MECHANIC_TIME] = gettime();
				
				ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
				
				SendClientMessagef(playerid, -1, "Le has ofrecido a %s pintar su vehículo por %s$.", PlayerTemp[buyer][pt_NAME], number_format_thousand(PlayerTemp[buyer][pt_MECHANIC_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_TUNING_PRICE:
		{
			if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
			new Float:Vehicle_Pos[3];
			GetVehiclePos(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessagef(playerid, -1, "El vehículo está demasiado lejos.");
			
			if(response)
			{
				new price;
				if(sscanf(inputtext, "d", price))
				{
					SendClientMessagef(playerid, -1, "El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(price < 0 || price > ((pTemp(playerid)[pt_TUNING_SELECTED_PIECES] * 50) + 2000))
				{
					SendClientMessagef(playerid, -1, "El rango del precio es: 0$ - %s$.", number_format_thousand((pTemp(playerid)[pt_TUNING_SELECTED_PIECES] * 50) + 2000));
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendClientMessagef(playerid, -1, "El dueño del vehículo no está cerca.");
				
				new Float:mechanic_pos[3];
				GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessagef(playerid, -1, "El dueño del vehículo está demasiado lejos.");
				
				PlayerTemp[buyer][pt_MECHANIC_PID] = playerid;
				PlayerTemp[buyer][pt_MECHANIC_AID] = PI[playerid][pi_ID];
				PlayerTemp[buyer][pt_MECHANIC_PRICE] = price;
				format(PlayerTemp[buyer][pt_MECHANIC_TEXT], 64, "'%s' > '%s'", pTemp(playerid)[pt_TUNING_SELECTED_PART], pTemp(playerid)[pt_TUNING_SELECTED_COMPONENT]);
				PlayerTemp[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_TUNING;
				PlayerTemp[buyer][pt_MECHANIC_EXTRA] = pTemp(playerid)[pt_TUNING_SELECTED_COMPONENT_ID];
				PlayerTemp[buyer][pt_MECHANIC_VEHICLE_ID] = pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID];
				PlayerTemp[buyer][pt_MECHANIC_PIECES] = pTemp(playerid)[pt_TUNING_SELECTED_PIECES];
				PlayerTemp[buyer][pt_MECHANIC_TIME] = gettime();
				
				ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
				
				SendClientMessagef(playerid, -1, "Le has ofrecido a %s tunear su vehículo por %s$.", PlayerTemp[buyer][pt_NAME], number_format_thousand(PlayerTemp[buyer][pt_MECHANIC_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_PAINTJOB_PRICE:
		{
			if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
			new Float:Vehicle_Pos[3];
			GetVehiclePos(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessagef(playerid, -1, "El vehículo está demasiado lejos.");
			
			if(response)
			{
				new price;
				if(sscanf(inputtext, "d", price))
				{
					SendClientMessagef(playerid, -1, "El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(price < 0 || price > 2750)
				{
					SendClientMessagef(playerid, -1, "El rango del precio es: 0$ - 2.750$.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendClientMessagef(playerid, -1, "El dueño del vehículo no está cerca.");
				
				new Float:mechanic_pos[3];
				GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessagef(playerid, -1, "El dueño del vehículo está demasiado lejos.");
				
				PlayerTemp[buyer][pt_MECHANIC_PID] = playerid;
				PlayerTemp[buyer][pt_MECHANIC_AID] = PI[playerid][pi_ID];
				PlayerTemp[buyer][pt_MECHANIC_PRICE] = price;
				if(pTemp(playerid)[pt_PAINTJOB_SELECTED_ID] == 3)
					format(PlayerTemp[buyer][pt_MECHANIC_TEXT], 64, "Eliminar Paintjob", pTemp(playerid)[pt_PAINTJOB_SELECTED_ID]);
				else
					format(PlayerTemp[buyer][pt_MECHANIC_TEXT], 64, "Paintjob (%d)", pTemp(playerid)[pt_PAINTJOB_SELECTED_ID]);
				PlayerTemp[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_PAINTJOB;
				PlayerTemp[buyer][pt_MECHANIC_EXTRA] = pTemp(playerid)[pt_PAINTJOB_SELECTED_ID];
				PlayerTemp[buyer][pt_MECHANIC_VEHICLE_ID] = pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID];
				PlayerTemp[buyer][pt_MECHANIC_PIECES] = 15;
				PlayerTemp[buyer][pt_MECHANIC_TIME] = gettime();
				
				ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
				
				SendClientMessagef(playerid, -1, "Le has ofrecido a %s cambiar el paintjob de su vehículo por %s$.", PlayerTemp[buyer][pt_NAME], number_format_thousand(PlayerTemp[buyer][pt_MECHANIC_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_REM_COM_PRICE:
		{
			if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
			new Float:Vehicle_Pos[3];
			GetVehiclePos(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessagef(playerid, -1, "El vehículo está demasiado lejos.");
			
			if(response)
			{
				new price;
				if(sscanf(inputtext, "d", price))
				{
					SendClientMessagef(playerid, -1, "El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(price < 0 || price > 2750)
				{
					SendClientMessagef(playerid, -1, "El rango del precio es: 0$ - 2.750$.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendClientMessagef(playerid, -1, "El dueño del vehículo no está cerca.");
				
				new Float:mechanic_pos[3];
				GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessagef(playerid, -1, "El dueño del vehículo está demasiado lejos.");

				inline OnComponentsInfoLoad()
				{
					new rows;
					if(get_rows(rows))
					{
						if(rows)
						{
							new part[24], name[24];
							reg_name(0, "part", part);
							reg_name(0, "name", name);

							PlayerTemp[buyer][pt_MECHANIC_PID] = playerid;
							PlayerTemp[buyer][pt_MECHANIC_AID] = PI[playerid][pi_ID];
							PlayerTemp[buyer][pt_MECHANIC_PRICE] = price;
							format(PlayerTemp[buyer][pt_MECHANIC_TEXT], 64, "Eliminar componente (%s > %s)", part, name);
							PlayerTemp[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_REMOVE_COMPONEN;
							PlayerTemp[buyer][pt_MECHANIC_EXTRA] = pTemp(playerid)[pt_MECHANIC_SELECTED_COMPONENT];
							PlayerTemp[buyer][pt_MECHANIC_VEHICLE_ID] = pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID];
							PlayerTemp[buyer][pt_MECHANIC_PIECES] = PLAYER_TUNING_MENU[playerid][ pTemp(playerid)[pt_MECHANIC_SELECTED_COMPONENT] ][tuning_menu_PIECES];
							PlayerTemp[buyer][pt_MECHANIC_TIME] = gettime();
							ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
							SendClientMessagef(playerid, -1, "Le has ofrecido a %s quitar un componente de su vehículo por %s$.", PlayerTemp[buyer][pt_NAME], number_format_thousand(PlayerTemp[buyer][pt_MECHANIC_PRICE]));
						}
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM vcomponents_info WHERE id = %d;", GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][ pTemp(playerid)[pt_MECHANIC_SELECTED_COMPONENT] ][tuning_menu_ID] ]);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnComponentsInfoLoad);
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_ACCEPT:
		{
			if(response)
			{
				if(gettime() > pTemp(playerid)[pt_MECHANIC_TIME] + 20) return SendClientMessagef(playerid, -1, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(pTemp(playerid)[pt_MECHANIC_PID])) return SendClientMessagef(playerid, -1, "El mecánico ya no está en el servidor.");
				if(PI[ pTemp(playerid)[pt_MECHANIC_PID] ][pi_ID] != pTemp(playerid)[pt_MECHANIC_AID]) return SendClientMessagef(playerid, -1, "El mecánico ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(pTemp(playerid)[pt_MECHANIC_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 10.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "El mecánico está demasiado lejos.");
				if(PlayerTemp[ pTemp(playerid)[pt_MECHANIC_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "El mecánico no está disponible.");
				
				if(pTemp(playerid)[pt_MECHANIC_PRICE] > PI[playerid][pi_CASH])
				{
					SendClientMessage(pTemp(playerid)[pt_MECHANIC_PID], -1, "{"#SILVER_COLOR"}La persona no tiene suficiente dinero.");
					SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %s$ para poder aceptarlo.", number_format_thousand(pTemp(playerid)[pt_MECHANIC_PRICE] - PI[playerid][pi_CASH]));
					return 1;
				}
				if(pTemp(playerid)[pt_MECHANIC_PIECES] > PI[ pTemp(playerid)[pt_MECHANIC_PID] ][pi_MECHANIC_PIECES])
				{
					SendClientMessagef(playerid, -1, "Al mecánico no le quedan piezas para el trabajo.");
					SendClientMessage(pTemp(playerid)[pt_MECHANIC_PID], -1, "{"#SILVER_COLOR"}La persona ha aceptado pero no tienes piezas suficientes para el trabajo.");
					return 1;
				}
				
				if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID])
				{
					SendClientMessagef(playerid, -1, "El vehículo está muy lejos.");
					SendClientMessage(pTemp(playerid)[pt_MECHANIC_PID], -1, "{"#SILVER_COLOR"}La persona ha aceptado pero el vehículo está muy lejos.");
					return 1;
				}
				if(GetVehicleDistanceFromPoint(pTemp(playerid)[pt_MECHANIC_VEHICLE_ID], pos[0], pos[1], pos[2]) > 10.0)
				{
					SendClientMessagef(playerid, -1, "El vehículo está muy lejos del mecánico.");
					SendClientMessage(pTemp(playerid)[pt_MECHANIC_PID], -1, "{"#SILVER_COLOR"}La persona ha aceptado pero estás muy lejos del vehículo.");
					return 1;
				}
				
				if(GivePlayerCash(playerid, -pTemp(playerid)[pt_MECHANIC_PRICE], true, true) && GivePlayerCash(pTemp(playerid)[pt_MECHANIC_PID], pTemp(playerid)[pt_MECHANIC_PRICE], true, false)) {
					switch(pTemp(playerid)[pt_MECHANIC_TYPE])
					{
						case MECHANIC_OPTION_REPAIR:
						{
							PI[ pTemp(playerid)[pt_MECHANIC_PID] ][pi_MECHANIC_PIECES] -= pTemp(playerid)[pt_MECHANIC_PIECES];
							PLAYER_WORKS[ pTemp(playerid)[pt_MECHANIC_PID] ][WORK_MECHANIC][pwork_LEVEL] ++;
							
							RepairVehicleEx(pTemp(playerid)[pt_MECHANIC_VEHICLE_ID], playerid);
							SendClientMessage(pTemp(playerid)[pt_MECHANIC_PID], -1, "{"#SILVER_COLOR"}Has necesitado 10 piezas para la reparacion.");
						}
						case MECHANIC_OPTION_COLOR_1:
						{
							PI[ pTemp(playerid)[pt_MECHANIC_PID] ][pi_MECHANIC_PIECES] -= 5;
							GLOBAL_VEHICLES[ pTemp(playerid)[pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1] = pTemp(playerid)[pt_MECHANIC_EXTRA];
							ChangeVehicleColor(pTemp(playerid)[pt_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ pTemp(playerid)[pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ pTemp(playerid)[pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2]);
							
							SendClientMessage(pTemp(playerid)[pt_MECHANIC_PID], -1, "{"#SILVER_COLOR"}Has necesitado 5 piezas para pintar el vehículo.");
						}
						case MECHANIC_OPTION_COLOR_2:
						{
							PI[ pTemp(playerid)[pt_MECHANIC_PID] ][pi_MECHANIC_PIECES] -= 5;
							GLOBAL_VEHICLES[ pTemp(playerid)[pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2] = pTemp(playerid)[pt_MECHANIC_EXTRA];
							ChangeVehicleColor(pTemp(playerid)[pt_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ pTemp(playerid)[pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ pTemp(playerid)[pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2]);
							
							SendClientMessage(pTemp(playerid)[pt_MECHANIC_PID], -1, "{"#SILVER_COLOR"}Has necesitado 5 piezas para pintar el vehículo.");
						}
						case MECHANIC_OPTION_TUNING:
						{
							new slot = GetVehicleComponentType(pTemp(playerid)[pt_MECHANIC_EXTRA]);
							new current_component = GetVehicleComponentInSlot(pTemp(playerid)[pt_MECHANIC_VEHICLE_ID], slot);
							if(current_component) RemoveVehicleComponent(pTemp(playerid)[pt_MECHANIC_VEHICLE_ID], current_component);
							
							GLOBAL_VEHICLES[ pTemp(playerid)[pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][slot] = pTemp(playerid)[pt_MECHANIC_EXTRA];
							AddVehicleComponent(pTemp(playerid)[pt_MECHANIC_VEHICLE_ID], pTemp(playerid)[pt_MECHANIC_EXTRA]);
							
							PI[ pTemp(playerid)[pt_MECHANIC_PID] ][pi_MECHANIC_PIECES] -= pTemp(playerid)[pt_MECHANIC_PIECES];
							SendClientMessagef(pTemp(playerid)[pt_MECHANIC_PID], -1, "Has necesitado %d piezas para tunear el vehículo.", pTemp(playerid)[pt_MECHANIC_PIECES]);
						}
						case MECHANIC_OPTION_PAINTJOB:
						{
							if(pTemp(playerid)[pt_MECHANIC_EXTRA] == 3)
							{
								PI[ pTemp(playerid)[pt_MECHANIC_PID] ][pi_MECHANIC_PIECES] += 15;
								SendClientMessagef(playerid, -1, "Paintjob eliminado, piezas ganadas: 15, piezas totales: %d.", PI[playerid][pi_MECHANIC_PIECES]);
							}
							else
							{
								PI[ pTemp(playerid)[pt_MECHANIC_PID] ][pi_MECHANIC_PIECES] -= 15;
								SendClientMessagef(playerid, -1, "Has necesitado 15 piezas para el paintjob de el vehículo.");
							}
							GLOBAL_VEHICLES[ pTemp(playerid)[pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = pTemp(playerid)[pt_MECHANIC_EXTRA];
							ChangeVehiclePaintjob(pTemp(playerid)[pt_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ pTemp(playerid)[pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);
						}

						case MECHANIC_OPTION_REMOVE_COMPONEN:
						{
							new slot = PLAYER_TUNING_MENU[ pTemp(playerid)[pt_MECHANIC_PID] ][ pTemp(playerid)[pt_MECHANIC_EXTRA] ][tuning_menu_ID];
							RemoveVehicleComponent(pTemp(playerid)[pt_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ pTemp(playerid)[pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][slot]);
							GLOBAL_VEHICLES[ pTemp(playerid)[pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][slot] = 0;
							
							PI[ pTemp(playerid)[pt_MECHANIC_PID] ][pi_MECHANIC_PIECES] += pTemp(playerid)[pt_MECHANIC_PIECES];
							SendClientMessagef(pTemp(playerid)[pt_MECHANIC_PID], -1, "Componente eliminado, piezas ganadas: %d, piezas totales: %d.", pTemp(playerid)[pt_MECHANIC_PIECES], PI[ pTemp(playerid)[pt_MECHANIC_PID] ][pi_MECHANIC_PIECES]);
						}
					}
					
					SendClientMessagef(playerid, -1, "Le has pagado %s$ al mecánico por su trabajo.", number_format_thousand(pTemp(playerid)[pt_MECHANIC_PRICE]));
					SendClientMessagef(pTemp(playerid)[pt_MECHANIC_PID], -1, "%s te ha pagado %s dólares por tu trabajo.", pTemp(playerid)[pt_NAME], number_format_thousand(pTemp(playerid)[pt_MECHANIC_PRICE]));
				}
			}
			else
			{
				if(gettime() > pTemp(playerid)[pt_MECHANIC_TIME] + 30) return 1;
				if(!IsPlayerConnected(pTemp(playerid)[pt_MECHANIC_PID])) return 1;
				if(PI[ pTemp(playerid)[pt_MECHANIC_PID] ][pi_ID] != pTemp(playerid)[pt_MECHANIC_AID]) return 1;

				SendClientMessage(pTemp(playerid)[pt_MECHANIC_PID], -1, "{"#SILVER_COLOR"}La persona no aceptó lo que le ofreciste.");
			}
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COL_SLOT:
		{
			if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
			new Float:Vehicle_Pos[3];
			GetVehiclePos(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessagef(playerid, -1, "El vehículo está demasiado lejos.");
			
			if(response)
			{
				pTemp(playerid)[pt_MECHANIC_COLOR_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_MECHANIC_SELECT_COLOR);
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COLOR:
		{
			if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
			new Float:Vehicle_Pos[3];
			GetVehiclePos(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessagef(playerid, -1, "El vehículo está demasiado lejos.");
			
			if(response)
			{
				if(PI[playerid][pi_MECHANIC_PIECES] < 5) return SendClientMessagef(playerid, -1, "No tienes suficientes piezas, puedes comprar más piezas en el taller.");

				if(PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					PI[playerid][pi_MECHANIC_PIECES] -= 5;
					switch(pTemp(playerid)[pt_MECHANIC_COLOR_SLOT])
					{
						case 0: GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1] = listitem;
						case 1: GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2] = listitem;
					}
					ChangeVehicleColor(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2]);
					
					SendClientMessagef(playerid, -1, "Has necesitado 5 piezas para pintar el vehículo.");
				}
				else
				{
					pTemp(playerid)[pt_MECHANIC_SELECTED_COLOR] = listitem;
					ShowDialog(playerid, DIALOG_MECHANIC_COLOR_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_SELECT_COL_SLOT);
			return 1;
		}
		case DIALOG_MECHANIC_REMOVE_COMPONEN:
		{
			if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
			
			new Float:Vehicle_Pos[3];
			GetVehiclePos(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessagef(playerid, -1, "El vehículo está demasiado lejos.");
		
			if(response)
			{
				if(4 > PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL])
				{
					SendMessagef(playerid, "~r~No eres %s.", MECHANIC_RANKS[4]);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] < 0) return ShowDialog(playerid, dialogid);

				if(PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					RemoveVehicleComponent(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] ]);
					GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] ] = 0;
					
					PI[playerid][pi_MECHANIC_PIECES] += PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES];
					SendClientMessagef(playerid, -1, "Componente eliminado, piezas ganadas: %d, piezas totales: %d.", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES], PI[playerid][pi_MECHANIC_PIECES]);
				}
				else
				{
					pTemp(playerid)[pt_MECHANIC_SELECTED_COMPONENT] = listitem;
					ShowDialog(playerid, DIALOG_MECHANIC_REM_COM_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_TUNING_PAINTJOB:
		{
			if(!GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
			
			new Float:Vehicle_Pos[3];
			GetVehiclePos(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessagef(playerid, -1, "El vehículo está demasiado lejos.");
			
			if(response)
			{
				if(4 > PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL])
				{
					SendMessagef(playerid, "No eres %s.", MECHANIC_RANKS[4]);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PI[playerid][pi_MECHANIC_PIECES] < 15) return SendClientMessagef(playerid, -1, "No tienes suficientes piezas, puedes comprar más piezas en el taller.");
				
				if(listitem == 0)
				{
					if(GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] == 3)
					{
						SendClientMessagef(playerid, -1, "El vehículo no tiene ningún paintjob.");
						return 1;
					}

					if(PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
					{
						GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = 3;
						ChangeVehiclePaintjob(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);
						PI[ pTemp(playerid)[pt_MECHANIC_PID] ][pi_MECHANIC_PIECES] += 15;
						SendClientMessagef(playerid, -1, "Paintjob eliminado, piezas ganadas: 15, piezas totales: %d.", PI[playerid][pi_MECHANIC_PIECES]);
					}
					else
					{
						pTemp(playerid)[pt_PAINTJOB_SELECTED_ID] = 3;
						ShowDialog(playerid, DIALOG_MECHANIC_PAINTJOB_PRICE);
					}
					
					return 1;
				}
				
				if(PLAYER_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = listitem - 1;
					ChangeVehiclePaintjob(pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);
					PI[playerid][pi_MECHANIC_PIECES] -= 15;
					SendClientMessagef(playerid, -1, "Has necesitado 15 piezas para el paintjob de el vehículo.");
				}
				else
				{
					pTemp(playerid)[pt_PAINTJOB_SELECTED_ID] = listitem - 1;
					ShowDialog(playerid, DIALOG_MECHANIC_PAINTJOB_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_SEED_LIST:
		{
			if(response)
			{
				if(seed_info[listitem][seed_info_EXP] > PLAYER_WORKS[playerid][WORK_FARMER][pwork_LEVEL]) return SendClientMessagef(playerid, -1, "Necesitas haber plantado al menos %d plantas como agricultor para poder comprar esta semilla.", seed_info[listitem][seed_info_EXP]);
				
				pTemp(playerid)[pt_SELECTED_BUY_SEED_ID] = listitem;
				ShowDialog(playerid, DIALOG_SEED_BUY);
			}
			return 1;
		}
		case DIALOG_SEED_BUY:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return SendClientMessagef(playerid, -1, "La cantidad de semillas no es correcta.");
				if(inputtext[0] <= 0 || inputtext[0] > 100000) return SendClientMessagef(playerid, -1, "La cantidad de semillas no es correcta.");
				
				new price = seed_info[ pTemp(playerid)[pt_SELECTED_BUY_SEED_ID] ][seed_info_PRICE] * inputtext[0];
				if(price > PI[playerid][pi_CASH]) return SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %s$ para poder comprar las semillas.", number_format_thousand(price - PI[playerid][pi_CASH]));
				
				if(GivePlayerCash(playerid, -price, true, true)) {
					switch(seed_info[ pTemp(playerid)[pt_SELECTED_BUY_SEED_ID] ][seed_info_PLANT_TYPE])
					{
						case PLANT_TYPE_MEDICINE: PI[playerid][pi_SEED_MEDICINE] += inputtext[0];
						case PLANT_TYPE_CANNABIS: PI[playerid][pi_SEED_CANNABIS] += inputtext[0];
						case PLANT_TYPE_CRACK: PI[playerid][pi_SEED_CRACK] += inputtext[0];
					}
					
					SendClientMessagef(playerid, -1, "Has comprado %s semillas de %s por %s$.", number_format_thousand(inputtext[0]), seed_info[ pTemp(playerid)[pt_SELECTED_BUY_SEED_ID] ][seed_info_NAME], number_format_thousand(price));
				}
			}
			else ShowDialog(playerid, DIALOG_SEED_LIST);
			return 1;
		}
		case DIALOG_PLANT_PLANTS:
		{
			if(response)
			{
				if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
				if(!IsPlayerInDynamicArea(playerid, Farmer_Area)) return SendClientMessagef(playerid, -1, "No estás en la zona para plantar, está marcada en el mapa con una bandera.");
				
				for(new i = 0; i != MAX_PLANTS; i ++)
				{
					if(!PLANTS[i][plant_VALID]) continue;
					
					new Float:pos[3];
					GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);

					if(IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2]))
					{
						SendClientMessagef(playerid, -1, "Aquí ya hay una planta, aléjate un poco para plantar.");
						return 1;
					}
				}

				switch(seed_info[listitem][seed_info_PLANT_TYPE])
				{
					case PLANT_TYPE_MEDICINE:
					{
						if(plant_info[listitem][plant_info_SEEDS] > PI[playerid][pi_SEED_MEDICINE])
						{
							SendClientMessagef(playerid, -1, "No tienes las semillas necesarias para plantar esta planta.");
							return 1;
						}
						PI[playerid][pi_SEED_MEDICINE] -= plant_info[listitem][plant_info_SEEDS];
					}
					case PLANT_TYPE_CANNABIS:
					{
						if(plant_info[listitem][plant_info_SEEDS] > PI[playerid][pi_SEED_CANNABIS])
						{
							SendClientMessagef(playerid, -1, "No tienes las semillas necesarias para plantar esta planta.");
							return 1;
						}
						PI[playerid][pi_SEED_CANNABIS] -= plant_info[listitem][plant_info_SEEDS];
					}
					case PLANT_TYPE_CRACK:
					{
						if(plant_info[listitem][plant_info_SEEDS] > PI[playerid][pi_SEED_CRACK])
						{
							SendClientMessagef(playerid, -1, "No tienes las semillas necesarias para plantar esta planta.");
							return 1;
						}
						PI[playerid][pi_SEED_CRACK] -= plant_info[listitem][plant_info_SEEDS];
					}
				}
				
				SendClientMessagef(playerid, -1, "Vas a plantar '%s' y vas a necesitar %d semillas.", plant_info[listitem][plant_info_NAME], plant_info[listitem][plant_info_SEEDS]);
				
				pTemp(playerid)[pt_PLANTING_PLANT_SELECTED] = listitem;
				pTemp(playerid)[pt_PLANTING] = true;
				pTemp(playerid)[pt_WORKING_IN] = WORK_FARMER;
				
				TogglePlayerControllableEx(playerid, false);
				SetCameraBehindPlayer(playerid);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, true, false, false, false, 0);

				SetPlayerKeyPress(playerid, plant_info[listitem][plant_info_SEEDS] * 7);
			}
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == 13 + 20) // Eliminar todo
				{
					ShowDialog(playerid, DIALOG_PLAYER_WEAPONS_DELETE_A);
					return 1;
				}
				
				pTemp(playerid)[pt_SELECTED_DIALOG_WEAPON_SLOT] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PLAYER_WEAPONS_OPTIONS);
			}
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE_A:
		{
			if(response)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id_player = %d;", PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				ResetPlayerWeaponsEx(playerid);
		
				SendClientMessagef(playerid, -1, "Has eliminado todas tus armas.");
				Auto_SendPlayerAction(playerid, "tira todas sus armas al suelo");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_WEAPONS);
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE:
		{
			if(response)
			{
				SendClientMessagef(playerid, -1, "Has eliminado tu '%s' de tus armas.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ pTemp(playerid)[pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);
				new string[64];
				format(string, sizeof string, "tira su %s al suelo", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ pTemp(playerid)[pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);
				Auto_SendPlayerAction(playerid, string);

				RemovePlayerSlotWeapon(playerid, pTemp(playerid)[pt_SELECTED_DIALOG_WEAPON_SLOT], true);
			}
			return 1;
		}
		case DIALOG_ANIMS:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);//rendirse
		            case 1: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 0, 0);//blowjob
		            case 2: ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);//rodar
		            case 3: ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);//borracho
		            case 4: ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);//bomba
		            case 5: ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1,500);//apuntar
		            case 6: ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);//reir
		            case 7: ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);//amenazar
		            case 8: ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);//paja
		            case 9: ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);//herido
		            case 10: ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);//cruzarbrazos
		            case 11: ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);//recostarse
		            case 12: ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);//crubrirse
		            case 13: ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);//vomitar
		            case 14: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);//comer
		            case 15: ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);//despedir
		            case 16: ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);//nalgada
		            case 17: ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);//agonizar
		            case 18: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);//besar
		            case 19: ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);//crack
		            case 20: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);//mear
		            case 21: ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);//sentarse
		            case 22: ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );//fucku
		            case 23: ApplyAnimation(playerid, "ped", "phone_in", 4.000000, 0, 0, 0, 1, 4000);//llamar
		            case 24: ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);//taichi
		            case 25: ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);//beber
		            case 26: ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);//boxear
		            case 27: ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);//saludar
		            case 28: ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);//llorar
		            case 29: ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);//dormir
		            case 30: ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,0,0,0,8000);//rapear
		            case 31: ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,1);//strip
		            case 32: ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,7,5,1,1,1);//bailar
		            case 33: ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);//alentar
		            case 34: ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);//hablar
					case 35: ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 1, 1, 1, 0);//asiento
		        }
				SendClientMessagef(playerid, -1, "Para detener la animacion utiliza /parar.");
			}
			return 1;
		}
		case DIALOG_TRICKS_FOOD:
		{
			if(response)
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return SendClientMessagef(playerid, -1, "Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(pTemp(playerid)[pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "El vendedor está demasiado lejos.");
				if(PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "El vendedor no está disponible.");
				

				new to_player_slot = GetEmptyPlayerPocketSlot(playerid);
				if(to_player_slot == -1)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "No tienes espacio en tus /alimentos para comprar esto.");
					return 1;
				}
				
				if(GivePlayerCash(playerid, -pTemp(playerid)[pt_TRICK_PRICE], true, true) && GivePlayerCash(pTemp(playerid)[pt_TRICK_SELLER_PID], pTemp(playerid)[pt_TRICK_PRICE], true, false)) {
					TransferPlayerPocketObject(pTemp(playerid)[pt_TRICK_SELLER_PID], pTemp(playerid)[pt_TRICK_SELLER_EXTRA], playerid, to_player_slot);
					SendClientMessagef(playerid, -1, "Te has gastado %s$ con esta compra.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "Has ganado %s$ con esta venta.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					
					new action[64];
					format(action, sizeof action, "y %s llegan a un acuerdo.", pTemp(playerid)[pt_NAME]);
					Auto_SendPlayerAction(pTemp(playerid)[pt_TRICK_SELLER_PID], action);
				}
			}
			else
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return 1;
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return 1;

				SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_MEDICINE:
		{
			if(response)
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return SendClientMessagef(playerid, -1, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(pTemp(playerid)[pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "El vendedor está demasiado lejos.");
				if(PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "El vendedor no está disponible.");

				
				if(GivePlayerCash(playerid, -pTemp(playerid)[pt_TRICK_PRICE], true, true) && GivePlayerCash(pTemp(playerid)[pt_TRICK_SELLER_PID], pTemp(playerid)[pt_TRICK_PRICE], true, false)) {
					PI[playerid][pi_MEDICINE] += pTemp(playerid)[pt_TRICK_SELLER_EXTRA];
					PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_MEDICINE] -= pTemp(playerid)[pt_TRICK_SELLER_EXTRA];
				
					SendClientMessagef(playerid, -1, "Has gastado %s$ con esta compra.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "Has ganado %s$ con esta venta.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					
					new action[64];
					format(action, sizeof action, "y %s llegan a un acuerdo.", pTemp(playerid)[pt_NAME]);
					Auto_SendPlayerAction(pTemp(playerid)[pt_TRICK_SELLER_PID], action);
				}
			}
			else
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return 1;
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return 1;

				SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_CANNABIS:
		{
			if(response)
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return SendClientMessagef(playerid, -1, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(pTemp(playerid)[pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "El vendedor está demasiado lejos.");
				if(PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "El vendedor no está disponible.");				
				
				if(GivePlayerCash(playerid, -pTemp(playerid)[pt_TRICK_PRICE], true, true) && GivePlayerCash(pTemp(playerid)[pt_TRICK_SELLER_PID], pTemp(playerid)[pt_TRICK_PRICE], true, false)) {
					PI[playerid][pi_CANNABIS] += pTemp(playerid)[pt_TRICK_SELLER_EXTRA];
					PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_CANNABIS] -= pTemp(playerid)[pt_TRICK_SELLER_EXTRA];
				
					SendClientMessagef(playerid, -1, "Has gastado %s$ con esta compra.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "Has ganado %s$ con esta venta.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					
					new action[64];
					format(action, sizeof action, "y %s llegan a un acuerdo.", pTemp(playerid)[pt_NAME]);
					Auto_SendPlayerAction(pTemp(playerid)[pt_TRICK_SELLER_PID], action);
				}
			}
			else
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return 1;
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return 1;

				SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_CRACK:
		{
			if(response)
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return SendClientMessagef(playerid, -1, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(pTemp(playerid)[pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "El vendedor está demasiado lejos.");
				if(PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "El vendedor no está disponible.");
				
				if(GivePlayerCash(playerid, -pTemp(playerid)[pt_TRICK_PRICE], true, true) && GivePlayerCash(pTemp(playerid)[pt_TRICK_SELLER_PID], pTemp(playerid)[pt_TRICK_PRICE], true, false)) {
					PI[playerid][pi_CRACK] += pTemp(playerid)[pt_TRICK_SELLER_EXTRA];
					PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_CRACK] -= pTemp(playerid)[pt_TRICK_SELLER_EXTRA];
				
					SendClientMessagef(playerid, -1, "Has gastado %s$ con esta compra.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "Has ganado %s$ con esta venta.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					
					new action[64];
					format(action, sizeof action, "y %s llegan a un acuerdo.", pTemp(playerid)[pt_NAME]);
					Auto_SendPlayerAction(pTemp(playerid)[pt_TRICK_SELLER_PID], action);
				}
			}
			else
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return 1;
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return 1;

				SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_SU:
		{
			if(response)
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return SendClientMessagef(playerid, -1, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(pTemp(playerid)[pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "El vendedor está demasiado lejos.");
				if(PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "El vendedor no está disponible.");

				
				PI[playerid][pi_COINS] += pTemp(playerid)[pt_TRICK_SELLER_EXTRA];
				PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_COINS] -= pTemp(playerid)[pt_TRICK_SELLER_EXTRA];
				UpdateReputationTextDraws(playerid);
				UpdateReputationTextDraws(pTemp(playerid)[pt_TRICK_SELLER_PID]);

				if(GivePlayerCash(playerid, -pTemp(playerid)[pt_TRICK_PRICE], true, true) && GivePlayerCash(pTemp(playerid)[pt_TRICK_SELLER_PID], pTemp(playerid)[pt_TRICK_PRICE], true, false)) {
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d WHERE id = %d;", PI[playerid][pi_COINS], PI[playerid][pi_ID]);
					mysql_tquery(handle_db, QUERY_BUFFER);

					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d WHERE id = %d;", PI[pTemp(playerid)[pt_TRICK_SELLER_PID]][pi_COINS], PI[pTemp(playerid)[pt_TRICK_SELLER_PID]][pi_ID]);
					mysql_tquery(handle_db, QUERY_BUFFER);

					SendClientMessagef(playerid, -1, "Has gastado %s$ con esta compra.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "Has ganado %s$ con esta venta.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					
					new action[64];
					format(action, sizeof action, "y %s llegan a un acuerdo.", pTemp(playerid)[pt_NAME]);
					Auto_SendPlayerAction(pTemp(playerid)[pt_TRICK_SELLER_PID], action);
				}
			}
			else
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return 1;
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return 1;

				SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_SELL_KIT:
		{
			if(response)
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return SendClientMessagef(playerid, -1, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(pTemp(playerid)[pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "El vendedor está demasiado lejos.");
				if(PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "El vendedor no está disponible.");

				PI[playerid][pi_MECHANIC_KITS] += pTemp(playerid)[pt_TRICK_SELLER_EXTRA];

				if(GivePlayerCash(playerid, -pTemp(playerid)[pt_TRICK_PRICE], true, true) && GivePlayerCash(pTemp(playerid)[pt_TRICK_SELLER_PID], pTemp(playerid)[pt_TRICK_PRICE], true, false)) 
				{
					mysql_update_int(handle_db, "player", "mechanic_kits", "id", PI[playerid][pi_ID], PI[playerid][pi_MECHANIC_KITS]);
					
					SendClientMessagef(playerid, -1, "Has gastado %s$ con esta compra.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "Has ganado %s$ con esta venta.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					
					new action[64];
					format(action, sizeof action, "le vende un kit de reparacion a %s.", pTemp(playerid)[pt_NAME]);
					Auto_SendPlayerAction(pTemp(playerid)[pt_TRICK_SELLER_PID], action);
				}
			}
			else
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return 1;
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return 1;

				SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "El comprador no ha aceptado tu trato.");
			}
		}
		case DIALOG_TRICKS_WEAPON:
		{
			if(response)
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return SendClientMessagef(playerid, -1, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return SendClientMessagef(playerid, -1, "El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(pTemp(playerid)[pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "El vendedor está demasiado lejos.");
				if(PlayerTemp[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "El vendedor no está disponible.");

				
				if(PLAYER_WEAPONS[playerid][ pTemp(playerid)[pt_TRICK_SELLER_EXTRA] ][player_weapon_VALID])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Para comprar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ pTemp(playerid)[pt_TRICK_SELLER_EXTRA] ][player_weapon_ID] ][weapon_info_NAME], pTemp(playerid)[pt_TRICK_SELLER_EXTRA]);
					return 1;
				}
				
				if(GivePlayerCash(playerid, -pTemp(playerid)[pt_TRICK_PRICE], true, true) && GivePlayerCash(pTemp(playerid)[pt_TRICK_SELLER_PID], pTemp(playerid)[pt_TRICK_PRICE], true, false)) {
					TransferPlayerWeapon(pTemp(playerid)[pt_TRICK_SELLER_PID], pTemp(playerid)[pt_TRICK_SELLER_EXTRA], playerid);

					SendClientMessagef(playerid, -1, "Has gastado %s$ con esta compra.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "Has ganado %s$ con esta venta.", number_format_thousand(pTemp(playerid)[pt_TRICK_PRICE]));
					
					new action[64];
					format(action, sizeof action, "y %s llegan a un acuerdo.", pTemp(playerid)[pt_NAME]);
					Auto_SendPlayerAction(pTemp(playerid)[pt_TRICK_SELLER_PID], action);
				}
			}
			else
			{
				if(gettime() > pTemp(playerid)[pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(pTemp(playerid)[pt_TRICK_SELLER_PID])) return 1;
				if(PI[ pTemp(playerid)[pt_TRICK_SELLER_PID] ][pi_ID] != pTemp(playerid)[pt_TRICK_SELLER_AID]) return 1;

				SendClientMessagef(pTemp(playerid)[pt_TRICK_SELLER_PID], -1, "El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_VEHICLE_BOOT:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == MAX_BOOT_SLOTS + 20)
				{
					ShowDialog(playerid, DIALOG_VEHICLE_BOOT_DELETE_ALL);
					return 1;
				}
				
				pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_VEHICLE_BOOT_OPTIONS);
			}
			
		}
		case DIALOG_VEHICLE_BOOT_DELETE_ALL:
		{
			if(response)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM vboot WHERE id_vehicle = %d;", PLAYER_VEHICLES[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][player_vehicle_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT];
				for(new i = 0; i != MAX_BOOT_SLOTS; i ++) VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][i] = temp_VEHICLE_BOOT;
		
				SendClientMessagef(playerid, -1, "Ha eliminado todo de este maletero.");
				Auto_SendPlayerAction(playerid, "tira todas las armas de su maltero");
			}
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(!VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_VALID]) return SendClientMessagef(playerid, -1, "No hay nada en ese slot.");

						new string[128];
						switch(VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE]) {
							case BOOT_TYPE_WEAPON: 
							{
								new to_slot = WEAPON_INFO[ VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_SLOT];
								if(PLAYER_WEAPONS[playerid][to_slot][player_weapon_VALID])
								{
									PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
									SendClientMessagef(playerid, -1, "Para sacar esta arma tienes que deshacerte de tu \"%s (%d)\" para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ to_slot ][player_weapon_ID] ][weapon_info_NAME], to_slot);
									return 1;
								}

								GivePlayerWeaponEx(playerid, VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT], VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT_EXTRA]);
								RegisterNewPlayerWeapon(playerid, to_slot);

								format(string, sizeof string, "saca un(a) %s del maletero de su vehículo.", WEAPON_INFO[ VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME]);
							}
							case BOOT_TYPE_MEDICINES: {
								PI[playerid][pi_MEDICINE] += VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT];
								format(string, sizeof string, "saca medicamentos del maletero de su vehículo.");
							}
							case BOOT_TYPE_CANNABIS: {
								PI[playerid][pi_CANNABIS] += VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT];
								format(string, sizeof string, "saca marihuana del maletero de su vehículo.");
							}
							case BOOT_TYPE_CRACK: {
								PI[playerid][pi_CRACK] += VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT];
								format(string, sizeof string, "saca crack del maletero de su vehículo.");
							}
						}

						mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM vboot WHERE id = %d;", VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_OBJECT_ID]);
						mysql_tquery(handle_db, QUERY_BUFFER);

						new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT]; VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ] = temp_VEHICLE_BOOT;
						Auto_SendPlayerAction(playerid, string);
					}
					case 1: ShowDialog(playerid, DIALOG_VEHICLE_BOOT_DELETE);
				}
			}
			else ShowDialog(playerid, DIALOG_VEHICLE_BOOT);
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_DELETE:
		{
			if(response)
			{
				SendClientMessagef(playerid, -1, "Eliminado.");
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM vboot WHERE id = %d;", VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_OBJECT_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT]; VEHICLE_BOOT[ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] ][ pTemp(playerid)[pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ] = temp_VEHICLE_BOOT;
			}
			else ShowDialog(playerid, DIALOG_VEHICLE_BOOT_OPTIONS);
			return 1;
		}
		case DIALOG_SELECT_POLICE_SKIN:
		{
			if(response)
			{
				if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return 1;
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(POLICE_SKINS[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][police_skin_RANK] > PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL]) return ShowDialog(playerid, dialogid);

				PI[playerid][pi_POLICE_DUTY] = POLICE_SKINS[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][police_skin_SKIN];
				CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_POLICE, INVALID_VEHICLE_ID);
			}
			return 1;
		}
		case DIALOG_POLICE_RADIOS:
		{
			if(response)
			{
				pTemp(playerid)[pt_POLICE_RADIO] = listitem;
				SendClientMessagef(playerid, -1, "Tu radio ha sido ajustada a la frecuencia %d.", listitem + 1);
			}
			return 1;
		}
		case DIALOG_POLICE_LIST:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] >= pages - 1) pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] ++;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id_player) FROM pworks WHERE pworks.id_work = %d AND pworks.`set` = 1;", WORK_POLICE);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] <= 0) pTemp(playerid)[pt_DIALOG_DB_PAGE] = pages - 1;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] --;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id_player) FROM pworks WHERE pworks.id_work = %d AND pworks.`set` = 1;", WORK_POLICE);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else
				{
					if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] >= 18)
					{
						pTemp(playerid)[pt_SELECTED_DB_AC_ID] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
						ShowDialog(playerid, DIALOG_POLICE_MODIFY);
					}
				}
			}
			return 1;
		}
		case DIALOG_POLICE_MODIFY:
		{
			if(response)
			{
				if(listitem > PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL])
				{
					SendClientMessagef(playerid, -1, "El rango que has seleccionado es superior al tuyo.");
					return 1;
				}

				inline OnDialogQueryLoad()
				{
					new rows;
					if(get_rows(rows))
					{
						if(rows)
						{
							new level, name[24], connected, pid;
							reg_int(0, "level", level);
							reg_name(0, "name", name);
							reg_int(0, "connected", connected);
							reg_int(0, "playerid", pid);

							if(level > PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL]) SendClientMessagef(playerid, -1, "No puedes modificar el rango de este policía porque es un rango superior al tuyo.");
							else
							{
								SendClientMessagef(playerid, -1, "El nuevo rango de %s es: '%s'.", name, POLICE_RANKS[listitem]);
								if(listitem == 0)
								{
									mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0, level = 0 WHERE id_player = %d AND id_work = %d;", pTemp(playerid)[pt_SELECTED_DB_AC_ID], WORK_POLICE);
									mysql_tquery(handle_db, QUERY_BUFFER);

									mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET police_duty = 0, placa_pd = 0 WHERE id = %d;", pTemp(playerid)[pt_SELECTED_DB_AC_ID]);
									mysql_tquery(handle_db, QUERY_BUFFER);

									if(connected)
									{
										if(PlayerTemp[pid][pt_WORKING_IN] == WORK_POLICE) CallLocalFunction("EndPlayerJob", "iib", pid, PlayerTemp[pid][pt_WORKING_IN], true);
										SendClientMessagef(pid, -1, "El %s %s te ha expulsado del cuerpo de policía.", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], pTemp(playerid)[pt_NAME]);

										PLAYER_WORKS[pid][WORK_POLICE][pwork_SET] = 0;
										PLAYER_WORKS[pid][WORK_POLICE][pwork_LEVEL] = 0;
										PI[pid][pi_POLICE_DUTY] = 0;
										PI[pid][pi_PLACA_PD] = 0;
									}
								}
								else
								{
									mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET level = %d WHERE id_player = %d AND id_work = %d;", listitem, pTemp(playerid)[pt_SELECTED_DB_AC_ID], WORK_POLICE);
									mysql_tquery(handle_db, QUERY_BUFFER);

									if(connected)
									{
										PLAYER_WORKS[pid][WORK_POLICE][pwork_LEVEL] = listitem;
										SendClientMessagef(pid, -1, "{"#SILVER_COLOR"}El %s %s ha modificado tu rango del cuerpo de policía a '%s'.", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], pTemp(playerid)[pt_NAME], POLICE_RANKS[listitem]);
									}
								}
							}
						}
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pworks.level, player.name, player.connected, player.playerid FROM pworks INNER JOIN player ON pworks.id_player = player.id WHERE pworks.id_player = %d AND pworks.id_work = %d;", pTemp(playerid)[pt_SELECTED_DB_AC_ID], WORK_POLICE);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			}
			else ShowDialog(playerid, DIALOG_POLICE_LIST);
			return 1;
		}
		case DIALOG_POLICE_EQUIPTMENT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_POLICE_WEAPONS);
					case 1: ShowDialog(playerid, DIALOG_POLICE_ARMOUR);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_ARMOUR:
		{
			if(response)
			{
				GetPlayerArmour(playerid, PI[playerid][pi_ARMOUR]);
				if(PI[playerid][pi_ARMOUR] > 99.5) return SendMessage(playerid, "Ya tienes un chaleco antibalas");
				
				SetPlayerArmourEx(playerid, 100.0);
				SetPlayerHealthEx(playerid, 100.0);
				SendMessage(playerid, "Has equipado un chaleco antibalas.");
			}
			return 1;
		}
		case DIALOG_POLICE_WEAPONS:
		{
			if(response)
			{
				if(POLICE_WEAPONS[listitem][police_weapon_RANK] > PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL])
				{
					SendMessagef(playerid, "Necesitas el rango ~r~%s~w~ para poder equipar estas armas.", POLICE_RANKS[ POLICE_WEAPONS[listitem][police_weapon_RANK] ]);
					return 1;
				}
				
				new player_weapons = CountPlayerWeapons(playerid);
				if(player_weapons > 0)
				{
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id_player = %d;", PI[playerid][pi_ID]);
					mysql_tquery(handle_db, QUERY_BUFFER);
					ResetPlayerWeaponsEx(playerid);
				}
				
				new weapon_slot[5];
				if(POLICE_WEAPONS[listitem][police_weapon_weaponid1] != 0)
				{
					weapon_slot[0] = WEAPON_INFO[ POLICE_WEAPONS[listitem][police_weapon_weaponid1] ][weapon_info_SLOT];
					if(!WEAPON_INFO[ POLICE_WEAPONS[listitem][police_weapon_weaponid1] ][weapon_info_AMMO]) GivePlayerWeaponEx(playerid, POLICE_WEAPONS[listitem][police_weapon_weaponid1], 1);
					else GivePlayerWeaponEx(playerid, POLICE_WEAPONS[listitem][police_weapon_weaponid1], 5000);
					RegisterNewPlayerWeapon(playerid, weapon_slot[0]);
				}

				if(POLICE_WEAPONS[listitem][police_weapon_weaponid2] != 0)
				{
					weapon_slot[1] = WEAPON_INFO[ POLICE_WEAPONS[listitem][police_weapon_weaponid2] ][weapon_info_SLOT];
					if(!WEAPON_INFO[ POLICE_WEAPONS[listitem][police_weapon_weaponid2] ][weapon_info_AMMO]) GivePlayerWeaponEx(playerid, POLICE_WEAPONS[listitem][police_weapon_weaponid2], 1);
					else GivePlayerWeaponEx(playerid, POLICE_WEAPONS[listitem][police_weapon_weaponid2], 5000);
					RegisterNewPlayerWeapon(playerid, weapon_slot[1]);
				}

				if(POLICE_WEAPONS[listitem][police_weapon_weaponid3] != 0)
				{
					weapon_slot[2] = WEAPON_INFO[ POLICE_WEAPONS[listitem][police_weapon_weaponid3] ][weapon_info_SLOT];
					if(!WEAPON_INFO[ POLICE_WEAPONS[listitem][police_weapon_weaponid3] ][weapon_info_AMMO]) GivePlayerWeaponEx(playerid, POLICE_WEAPONS[listitem][police_weapon_weaponid3], 1);
					else GivePlayerWeaponEx(playerid, POLICE_WEAPONS[listitem][police_weapon_weaponid3], 5000);
					RegisterNewPlayerWeapon(playerid, weapon_slot[2]);
				}

				if(POLICE_WEAPONS[listitem][police_weapon_weaponid4] != 0)
				{
					weapon_slot[3] = WEAPON_INFO[ POLICE_WEAPONS[listitem][police_weapon_weaponid4] ][weapon_info_SLOT];
					if(!WEAPON_INFO[ POLICE_WEAPONS[listitem][police_weapon_weaponid4] ][weapon_info_AMMO]) GivePlayerWeaponEx(playerid, POLICE_WEAPONS[listitem][police_weapon_weaponid4], 1);
					else GivePlayerWeaponEx(playerid, POLICE_WEAPONS[listitem][police_weapon_weaponid4], 5000);
					RegisterNewPlayerWeapon(playerid, weapon_slot[3]);
				}

				if(POLICE_WEAPONS[listitem][police_weapon_weaponid5] != 0)
				{
					weapon_slot[4] = WEAPON_INFO[ POLICE_WEAPONS[listitem][police_weapon_weaponid5] ][weapon_info_SLOT];
					if(!WEAPON_INFO[ POLICE_WEAPONS[listitem][police_weapon_weaponid5] ][weapon_info_AMMO]) GivePlayerWeaponEx(playerid, POLICE_WEAPONS[listitem][police_weapon_weaponid5], 1);
					else GivePlayerWeaponEx(playerid, POLICE_WEAPONS[listitem][police_weapon_weaponid5], 5000);
					RegisterNewPlayerWeapon(playerid, weapon_slot[4]);
				}

				SendMessagef(playerid, "Te has equipado el armamento ~b~%s.", POLICE_WEAPONS[listitem][police_weapon_PACK_NAME]);
			}
			else ShowDialog(playerid, DIALOG_POLICE_EQUIPTMENT);
			return 1;
		}
		case DIALOG_MECHANIC_LIST:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] >= pages - 1) pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] ++;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id_player) FROM pworks WHERE pworks.id_work = %d AND pworks.`set` = 1;", WORK_MECHANIC);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] <= 0) pTemp(playerid)[pt_DIALOG_DB_PAGE] = pages - 1;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] --;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id_player) FROM pworks WHERE pworks.id_work = %d AND pworks.`set` = 1;", WORK_MECHANIC);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else
				{
					if(PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL] >= 5)
					{
						pTemp(playerid)[pt_SELECTED_DB_AC_ID] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
						ShowDialog(playerid, DIALOG_MECHANIC_MODIFY);
					}
				}
			}
			return 1;
		}
		case DIALOG_MECHANIC_MODIFY:
		{
			if(response)
			{
				if(listitem > PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL])
				{
					SendClientMessagef(playerid, 0xCCCCCCCC, "El rango que has seleccionado es superior al tuyo.");
					return 1;
				}

				inline OnDialogQueryLoad()
				{
					new rows;
					if(get_rows(rows))
					{
						if(rows)
						{
							new level, name[24], connected, pid;
							reg_int(0, "level", level);
							reg_name(0, "name", name);
							reg_int(0, "connected", connected);
							reg_int(0, "playerid", pid);

							if(level > PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL]) SendClientMessagef(playerid, 0xCCCCCCCC, "No puedes modificar el rango de este mecanico porque es un rango superior al tuyo.");
							else
							{
								SendClientMessagef(playerid, 0xCCCCCCCC, "El nuevo rango de %s es: '%s'.", name, MECHANIC_RANKS[listitem]);
								if(listitem == 0)
								{
									mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0, level = 0 WHERE id_player = %d AND id_work = %d;", pTemp(playerid)[pt_SELECTED_DB_AC_ID], WORK_MECHANIC);
									mysql_tquery(handle_db, QUERY_BUFFER);

									if(connected)
									{
										if(PlayerTemp[pid][pt_WORKING_IN] == WORK_MECHANIC) CallLocalFunction("EndPlayerJob", "iib", pid, PlayerTemp[pid][pt_WORKING_IN], true);
										SendClientMessagef(pid, 0xCCCCCCCC, "El %s %s te ha expulsado del taller de mecanico.", MECHANIC_RANKS[ PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL] ], pTemp(playerid)[pt_NAME]);

										PLAYER_WORKS[pid][WORK_MECHANIC][pwork_SET] = 0;
										PLAYER_WORKS[pid][WORK_MECHANIC][pwork_LEVEL] = 0;
									}
								}
								else
								{
									mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET level = %d WHERE id_player = %d AND id_work = %d;", listitem, pTemp(playerid)[pt_SELECTED_DB_AC_ID], WORK_MECHANIC);
									mysql_tquery(handle_db, QUERY_BUFFER);

									if(connected)
									{
										PLAYER_WORKS[pid][WORK_MECHANIC][pwork_LEVEL] = listitem;
										SendClientMessagef(pid, 0xCCCCCCCC, "El %s %s ha modificado tu rango del taller de mecanico a '%s'.", MECHANIC_RANKS[ PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL] ], pTemp(playerid)[pt_NAME], MECHANIC_RANKS[listitem]);
										SetPlayerMechanicSkin(pid);

										new label_str[128];
										format(label_str, sizeof label_str, "%s", MECHANIC_RANKS[ PLAYER_WORKS[pid][WORK_MECHANIC][pwork_LEVEL] ]);
										
										if(IsValidDynamic3DTextLabel(PlayerTemp[pid][pt_MECHANIC_LABEL]))
										{
											DestroyDynamic3DTextLabel(PlayerTemp[pid][pt_MECHANIC_LABEL]);
											PlayerTemp[pid][pt_MECHANIC_LABEL] = Text3D:INVALID_STREAMER_ID;
										}
										PlayerTemp[pid][pt_MECHANIC_LABEL] = CreateDynamic3DTextLabel(label_str, 0x91C3CDFF, 0.0, 0.0, 0.3, 20.0, pid, .testlos = true);

									}
								}
							}
						}
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pworks.level, player.name, player.connected, player.playerid FROM pworks INNER JOIN player ON pworks.id_player = player.id WHERE pworks.id_player = %d AND pworks.id_work = %d;", pTemp(playerid)[pt_SELECTED_DB_AC_ID], WORK_MECHANIC);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_LIST);
			return 1;
		}
		case DIALOG_HELP:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_HELP_GENERAL);
					case 1: ShowDialog(playerid, DIALOG_HELP_INFO);
					case 2: ShowDialog(playerid, DIALOG_HELP_CHARACTER);
					case 3: ShowDialog(playerid, DIALOG_HELP_PROPERTIES);
					case 4: ShowDialog(playerid, DIALOG_HELP_REPORT);
					case 5: ShowDialog(playerid, DIALOG_HELP_WORKS);
					case 6: ShowDialog(playerid, DIALOG_HELP_VEHICLES);
					case 7: ShowDialog(playerid, DIALOG_HELP_CREWS);
					case 8: ShowDialog(playerid, DIALOG_HELP_VIP);
				}
			}
			return 1;
		}
		case DIALOG_HELP_WORKS:
		{
			if(response)
			{
				new caption[45], dialog[1800], work = listitem + 1;
				format(caption, sizeof caption, "Trabajo - %c%s", toupper(work_info[work][work_info_NAME][0]), work_info[work][work_info_NAME][1]);
			
				new header[350];
				if(work_info[work][work_info_TYPE] != WORK_TYPE_FAMILY)
				{
					if(work_info[work][work_info_EXTRA_PAY] > 0 && work_info[work][work_info_EXTRA_PAY_EXP] > 0) // con paga extra
					{
						if(!work_info[work][work_info_EXTRA_PAY_LIMIT]) // sin limite
						{
							format(header, sizeof header, 
						
								"\
									Trabajo: %s\n\
									Tipo: %s\n\
									Nivel necesario: %d\n\
									Paga extra: por cada %s trabajos realizados recibes %s$ extra.\n\
									Puedes localizar donde adquirir este trabajo desde el GPS.\n\
								",
									work_info[work][work_info_NAME],
									(work_info[work][work_info_TYPE] == WORK_TYPE_NORMAL) ? ("normal") : ("complementario"),
									work_info[work][work_info_LEVEL],
									number_format_thousand(work_info[work][work_info_EXTRA_PAY_EXP]),
									number_format_thousand(work_info[work][work_info_EXTRA_PAY])
							);
						}
						else // con limite
						{
							format(header, sizeof header, 
						
								"\
									Trabajo: %s\n\
									Tipo: %s\n\
									Nivel necesario: %d\n\
									Paga extra: por cada %s trabajos realizados recibes %s$ extra con un límite de %s$.\n\
									Puedes localizar donde adquirir este trabajo desde el GPS.\n\
								",
									work_info[work][work_info_NAME],
									(work_info[work][work_info_TYPE] == WORK_TYPE_NORMAL) ? ("normal") : ("complementario"),
									work_info[work][work_info_LEVEL],
									number_format_thousand(work_info[work][work_info_EXTRA_PAY_EXP]),
									number_format_thousand(work_info[work][work_info_EXTRA_PAY]),
									number_format_thousand(work_info[work][work_info_EXTRA_PAY_LIMIT])
							);
						}
					}
					else
					{
						format(header, sizeof header, 
						
							"\
								Trabajo: %s\n\
								Tipo: %s\n\
								Nivel necesario: %d\n\
								Puedes localizar donde adquirir este trabajo desde el GPS.\n\
							",
								work_info[work][work_info_NAME],
								(work_info[work][work_info_TYPE] == WORK_TYPE_NORMAL) ? ("normal") : ("complementario"),
								work_info[work][work_info_LEVEL]
						);
					}
				}
				
				switch(work)
				{
					case WORK_TAXI:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Solo súbete a un vehiculo uber y empieza a trabajar, recibirás las llamadas de los clientes.\n\
							Las personas que hayan llamado a la central de uber aparecerán marcados de color amarillo.\n\
							Si tienes un GPS puedes utilizar /mapa para ver las personas que necesitan un uber.\n\
							\n\
							El contador se pondrá en marcha para el primer pasajero que se suba al uber, el precio se\n\
							mide en precio por km, puedes ajustarlo con el comando /contador.\n\
							\n\
							Al llegar a cierta experiencia podras trabajar con tu vehiculo personal.\n\
							\n\
							",
								header
						);
					}
					case WORK_TRUCK:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Súbete a cualquier camión de la empresa y ve a cargarlo en cualquier punto de carga.\n\
							Según tu experiencia en el trabajo podrás transportar diferentes productos de más valor.\n\
							\n\
							",
								header
						);
					}
					case WORK_MECHANIC:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Para mas información sobre este trabajo\n\
							Debes ir a nuestra web/discord: "SERVER_WEBSITE"\n\
							\n\
							",
								header
						);
					}
					case WORK_FUMIGATOR:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Súbete a un avión y empieza a fumigar.\n\
							\n\
							",
								header
						);
					}
					case WORK_TRASH:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Para este trabajo se necesitan 2 personas, uno que conduzca el camión y otro que recoja la basura.\n\
							Para empezar a trabajar sube a alguien a un camión y selecciona la ruta que queráis realizar.\n\
							\n\
							Dependiendo de tu experiencia recogerás más rápido la basura.\n\
							\n\
							",
								header
						);
					}
					case WORK_LUMBERJACK:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Para empezar a trabajar ve a los árboles asignados y empieza a talar.\n\
							Dependiendo de tu experiencia tu velocidad talando irá aumentando.\n\
							\n\
							",
								header
						);
					}
					case WORK_FARMER:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Necesitarás semillas para poder plantar que puedes comprar en la granja.\n\
							Dependiendo de tu experiencia tu velocidad plantando irá aumentando.\n\
							\n\
							Después de que la planta crezca tienes 5 minutos para recogerla si no la planta se secará y se destruirá.\n\
							Cuando termines de plantar espera a que la planta termine de crecer, para recogerla.\n\
							Una vez recogida puedes vender el producto adquirido o usarlo para consumo propio.\n\
							\n\
							Cuida tus plantas, la gente puede destuirlas si le disparan.\n\
							\n\
							",
								header
						);
					}
					case WORK_POLICE:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Para mas información sobre este trabajo\n\
							Debes ir a nuestra web/discord: "SERVER_WEBSITE"\n\
							\n\
							",
								header
						);
					}
					case WORK_PIZZA:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Súbete a una moto y empieza a repartir pizzas.\n\
							\n\
							",
								header
						);
					}
					case WORK_MEDIC:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Ponte de servicio en cualquier hospital, tras esto verás a las personas que necesiten un médico\n\
							marcadas en el mapa, ve rápido hasta ellas para poder salvarlos a tiempo.\n\
							Para salvar la vida a alguien que este herido usa /curar.\n\
							\n\
							Cuando estás de servicio solo puedes conducir ambulancias.\n\
							\n\
							",
								header
						);
					}
				}
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");
			}
			return 1;
		}
		case DIALOG_ADMIN_LIST:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] >= pages - 1) pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] ++;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_tquery_inline(handle_db, "SELECT COUNT(id) FROM player WHERE admin_level > 0;", using inline OnCountQueryLoad);
				}
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] <= 0) pTemp(playerid)[pt_DIALOG_DB_PAGE] = pages - 1;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] --;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_tquery_inline(handle_db, "SELECT COUNT(id) FROM player WHERE admin_level > 0;", using inline OnCountQueryLoad);
				}
				else
				{
					if(PI[playerid][pi_ADMIN_LEVEL] >= CMD_ADMINISTRATOR)
					{
						pTemp(playerid)[pt_SELECTED_DB_AC_ID] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
						ShowDialog(playerid, DIALOG_ADMIN_MODIFY);
					}
				}
			}
			return 1;
		}
		case DIALOG_ADMIN_MODIFY:
		{
			if(response)
			{
				if(listitem > PI[playerid][pi_ADMIN_LEVEL])
				{
					SendClientMessagef(playerid, -1, "El rango que has seleccionado es superior al tuyo.");
					return 1;
				}					
				
				inline OnDialogQueryLoad()
				{
					new rows;
					if(get_rows(rows))
					{
						if(rows)
						{
							new name[24], connected, pid, admin_level;
							reg_name(0, "name", name);
							reg_int(0, "connected", connected);
							reg_int(0, "playerid", pid);
							reg_int(0, "admin_level", admin_level);

							if(admin_level > PI[playerid][pi_ADMIN_LEVEL]) SendClientMessagef(playerid, -1, "No puedes modificar el rango de este admin porque es un rango superior al tuyo.");
							else
							{
								mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET admin_level = %d WHERE id = %d;", listitem, pTemp(playerid)[pt_SELECTED_DB_AC_ID]);
								mysql_tquery(handle_db, QUERY_BUFFER);
								SendClientMessagef(playerid, -1, "El nuevo rango de %s es: '%s'.", name, ADMIN_LEVELS[listitem]);
								if(connected)
								{
									if(listitem <= 0)
									{
										pTemp(playerid)[pt_ADMIN_SERVICE] = false;
										pTemp(playerid)[pt_GPS_TELEPORT] = false;
										SetPlayerNormalColor(playerid);
										
										if(IsValidDynamic3DTextLabel(pTemp(playerid)[pt_ADMIN_LABEL]))
										{
											DestroyDynamic3DTextLabel(pTemp(playerid)[pt_ADMIN_LABEL]);
											pTemp(playerid)[pt_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
										}

										for(new i = 0; i != 2; i++) TextDrawHideForPlayer(playerid, Textdraws[textdraw_STAFF_DUTY][i]);
									}

									PI[pid][pi_ADMIN_LEVEL] = listitem;
									SendClientMessagef(pid, -1, "%s cambió tu rango administrativo a: %s.", PI[playerid][pi_NAME], ADMIN_LEVELS[listitem]);
								}
							}
						}
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, connected, playerid, admin_level FROM player WHERE id = %d;", pTemp(playerid)[pt_SELECTED_DB_AC_ID]);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);				
			}
			else ShowDialog(playerid, DIALOG_ADMIN_LIST);
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowDialog(playerid, dialogid);
				
				new password[64 + 1];
				SHA256_PassHash(inputtext, PI[playerid][pi_SALT], password, sizeof password);
			
				if(!strcmp(password, PI[playerid][pi_PASS], false))
				{
					ShowDialog(playerid, DIALOG_CHANGE_PASSWORD_PASS);
					pTemp(playerid)[pt_BAD_LOGIN_ATTEMP] = 0;
				}
				else // Error
				{
					pTemp(playerid)[pt_BAD_LOGIN_ATTEMP] ++;
					if(pTemp(playerid)[pt_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return Kick(playerid);
					SendClientMessagef(playerid, -1, "Contraseña incorrecta, aviso %d/%d.", pTemp(playerid)[pt_BAD_LOGIN_ATTEMP], MAX_BAD_LOGIN_ATTEMPS);
				}
			}
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD_PASS:
		{
			if(response)
			{
				if(strlen(inputtext) < MIN_PASS_LENGTH || strlen(inputtext) > MAX_PASS_LENGTH) return ShowDialog(playerid, dialogid);
				
				new salt[16];
				getRandomSalt(salt);
				format(PI[playerid][pi_SALT], 16, "%s", salt);
				SHA256_PassHash(inputtext, PI[playerid][pi_SALT], PI[playerid][pi_PASS], 64 + 1);
	
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET salt = '%e', pass = '%e' WHERE id = %d;", PI[playerid][pi_SALT], PI[playerid][pi_PASS], PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				SendClientMessagef(playerid, -1, "Tu contraseña ha sido cambiada correctamente.");
			}
			return 1;
		}
		case DIALOG_ANTI_CHEAT:
		{
			if(response)
			{
				pTemp(playerid)[pt_SELECTED_AC_LISTITEM] = listitem;
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Enabled]) ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Enabled] = false;
						else ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Enabled] = true;
					}
					case 1: return ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY_DETECT);
					case 2:
					{
						if(ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Kick]) ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Kick] = false;
						else ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Kick] = true;
					}
				}
				WriteAnticheatRules();
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			else ShowDialog(playerid, DIALOG_ANTI_CHEAT);
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY_DETECT:
		{
			if(response)
			{
				new detections, seconds;
				if(sscanf(inputtext, "p<:>dd", detections, seconds))
				{
					SendClientMessagef(playerid, -1, "Sintaxis no válida.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(detections < 1 || detections > 99999)
				{
					SendClientMessagef(playerid, -1, "El número de detecciones debe ser 1 o mayor.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(seconds < 0 || seconds > 99999)
				{
					SendClientMessagef(playerid, -1, "Los segundos no pueden ser un valor negativo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Detections] = detections;
				ac_Info[ pTemp(playerid)[pt_SELECTED_AC_LISTITEM] ][ac_Interval] = seconds;
				
				WriteAnticheatRules();
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			else ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_MODIFY:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessagef(playerid, -1, "Por favor introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0)
				{
					SendClientMessagef(playerid, -1, "Por favor introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > 1000000000)
				{
					SendClientMessagef(playerid, -1, "El precio es demasiado alto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				inline OnShopUpdated()
				{
					UpdatePlayerShop(playerid);
					SendClientMessagef(playerid, -1, "El precio de tu artículo ha sido actualizado.");
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE shop SET price = %d WHERE id = %d;", inputtext[0], pTemp(playerid)[pt_SHOP_SELECTED_ARTICLE_ID]);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnShopUpdated);
			}
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_REMOVE:
		{
			if(response)
			{
				inline OnShopUpdated()
				{
					if(pTemp(playerid)[pt_SHOP_COME_FROM_MY_ADS])
					{
						pTemp(playerid)[pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
						UpdatePlayerShop(playerid);
					}
					else
					{
						pTemp(playerid)[pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
						UpdatePlayerShop(playerid);
					}
					SendClientMessagef(playerid, -1, "Tu producto se ha eliminado.");
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM shop WHERE id = %d;", pTemp(playerid)[pt_SHOP_SELECTED_ARTICLE_ID]);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnShopUpdated);
			}
			return 1;
		}
		case DIALOG_SHOP_ADD:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						pTemp(playerid)[pt_NOTARY_OPTION] = 2;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
					case 1:
					{
						pTemp(playerid)[pt_NOTARY_OPTION] = 2;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
					case 2:
					{
						pTemp(playerid)[pt_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_OTHER;
						pTemp(playerid)[pt_SHOP_ADD_MODELID] = 1314;
						pTemp(playerid)[pt_SHOP_ADD_VCOL1] = 0;
						pTemp(playerid)[pt_SHOP_ADD_VCOL2] = 0;
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			return 1;
		}
		case DIALOG_SHOP_ADD_TEXT:
		{
			if(response)
			{
				if(strlen(inputtext) > 24) return ShowDialog(playerid, dialogid);
				new text[24];
				if(sscanf(inputtext, "s[24]", text)) return ShowDialog(playerid, dialogid);
				if(!td_str_legal(text)) return ShowDialog(playerid, dialogid);
				
				format(pTemp(playerid)[pt_SHOP_ADD_TEXT], 24, "%s", inputtext);
				ShowDialog(playerid, DIALOG_SHOP_ADD_PRICE);
			}
			return 1;
		}
		case DIALOG_SHOP_ADD_PRICE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessagef(playerid, -1, "Por favor introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0)
				{
					SendClientMessagef(playerid, -1, "Por favor introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > 1000000000)
				{
					SendClientMessagef(playerid, -1, "El precio es demasiado alto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				if(500 > PI[playerid][pi_CASH]) return SendClientMessagef(playerid, -1, "Necesitas 500$ para poner el anuncio.");
				
				if(GivePlayerCash(playerid, -500, true, true)) {
					AddNewAd(playerid, pTemp(playerid)[pt_SHOP_ADD_TYPE], inputtext[0], pTemp(playerid)[pt_SHOP_ADD_TEXT], pTemp(playerid)[pt_SHOP_ADD_MODELID], pTemp(playerid)[pt_SHOP_ADD_VCOL1], pTemp(playerid)[pt_SHOP_ADD_VCOL2]);
					SendClientMessagef(playerid, -1, "Tu anuncio se ha publicado correctamente.");
				}
			}
			return 1;
		}
		case DIALOG_CRANE_SELECT_VEHICLE:
		{
			if(response)
			{
				new const vehicleid = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];

				if(vehicleid == -1) return 1;

				new veh_money = (PLAYER_VEHICLES[vehicleid][player_vehicle_PRICE] / 100) + 350;
				if(veh_money > PI[playerid][pi_CASH])
				{
					SendClientMessagef(playerid, -1, "Necesitas %s$ para remolcar este vehículo al depósito municipal.", veh_money);
					return 1;
				}
				
				if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED])
				{
					SendClientMessagef(playerid, -1, "No podemos remolcar tu vehículo porque hay alguien conduciéndolo.");
					return 1; 
				}
				
				if(GivePlayerCash(playerid, -veh_money, true, true)) {
					new crane_point = random(sizeof(CRANE_POINTS[]));
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X] = CRANE_POINTS[crane_point][0];
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y] = CRANE_POINTS[crane_point][1];
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z] = CRANE_POINTS[crane_point][2];
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE] = CRANE_POINTS[crane_point][3];
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD] = 0;

					GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
					UpdateVehicleParams(vehicleid);
					SetVehicleToRespawnEx(vehicleid);

					SendClientMessagef(playerid, -1, "Tu vehículo %s ha sido remolcado hasta el depósito municipal.", VEHICLE_INFO[GLOBAL_VEHICLES[ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
				}
			}
			return 1;
		}
		case DIALOG_CREATE_CREW:
		{
			if(response)
			{
				if(PI[playerid][pi_LEVEL] < 5) return SendClientMessagef(playerid, -1, "Necesitas ser nivel 5 para poder crear una banda.");
				ShowDialog(playerid, DIALOG_CREATE_CREW_NAME);
			}
			return 1;
		}
		case DIALOG_CREATE_CREW_NAME:
		{
			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendClientMessagef(playerid, -1, "Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new crew_name[32];
				if(sscanf(inputtext, "s[32]", crew_name))
				{
					SendClientMessagef(playerid, -1, "Introduce un nombre para tu banda.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				RemoveHexColours(inputtext);
				
				format(pTemp(playerid)[pt_CREATE_CREW_NAME], 32, "%s", crew_name);
				ShowDialog(playerid, DIALOG_CREATE_CREW_COLOR);
			}
			return 1;
		}
		case DIALOG_CREATE_CREW_COLOR:
		{
			if(response)
			{
				pTemp(playerid)[pt_CREATE_CREW_COLOR] = listitem;
				ShowDialog(playerid, DIALOG_CREATE_CREW_CONFIRM);
			}
			else ShowDialog(playerid, DIALOG_CREATE_CREW_NAME);
			return 1;
		}
		case DIALOG_CREATE_CREW_CONFIRM:
		{
			if(response)
			{
				new index = GetAvaibleCrewIndex();
				if(index == -1)
				{
					SendClientMessagef(playerid, -1, "No se puede crear la banda porque no hay espacio disponible, el límite de bandas es %d.", MAX_CREWS);
					return 1;
				}
				
				if(600000 > PI[playerid][pi_CASH])
				{
					SendClientMessagef(playerid, -1, "Necesitas 600.000$ para crear la banda.");
					return 1;
				}
				
				if(GivePlayerCash(playerid, -600000, true, true)) {
					CREW_INFO[index][crew_VALID] = true;
					format(CREW_INFO[index][crew_NAME], 32, "%s", pTemp(playerid)[pt_CREATE_CREW_NAME]);
					CREW_INFO[index][crew_COLOR] = RandomColors[ pTemp(playerid)[pt_CREATE_CREW_COLOR] ];
		
					CREW_RANK_INFO[index][0][crew_rank_VALID] = true;
					format(CREW_RANK_INFO[index][0][crew_rank_NAME], 32, "Fundador");
					
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_INVITE] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_DELETE] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_GRAFFITI] = 1;
						
					NewCrewRegister(index, playerid);
					SetPlayerGangZones(playerid);				
					SendClientMessagef(playerid, -1, "La banda '%s' se ha creado correctamente, usa /banda para administrarla.", CREW_INFO[index][crew_NAME]);
				}
			}
			return 1;
		}
		case DIALOG_CREW_MENU:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				
				switch(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem])
				{
					case CREW_RANK_SIZE: //Lista de miembros
					{
						pTemp(playerid)[pt_DIALOG_DB_LIMIT] = 10;
						pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST);
					}
					case CREW_RANK_CHANGE_NAME:
					{
						if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
						if(CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_FIGHTING]) return SendClientMessagef(playerid, -1, "No se puede cambiar el nombre de la banda cuando la banda está en combate.");
						ShowDialog(playerid, DIALOG_CREW_CHANGE_NAME);
					}
					case CREW_RANK_CAST_MEMBERS:
					{
						if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
						
						pTemp(playerid)[pt_DIALOG_DB_LIMIT] = 10;
						pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST_DELETE);
					}
					
					case CREW_RANK_MODIFY_RANKS:
					{
						if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
						
						ShowDialog(playerid, DIALOG_CREW_RANKS);
					}
					case CREW_RANK_CHANGE_COLOR:
					{
						if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
						
						if(CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_FIGHTING]) return SendClientMessagef(playerid, -1, "No se puede cambiar el color cuando la banda está en combate.");
						ShowDialog(playerid, DIALOG_CREW_MODIFY_COLOR);
					}
					case CREW_RANK_DELETE:
					{
						if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
						
						ShowDialog(playerid, DIALOG_CREW_DELETE);
					}
					case CREW_RANK_MODIFY_MEMBERS:
					{
						if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
						
						pTemp(playerid)[pt_DIALOG_DB_LIMIT] = 10;
						pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBERS);
					}
					case CREW_RANK_SIZE + 1: //Abandonar banda
					{
						if(PI[playerid][pi_CREW_RANK] == 0)
						{
							inline OnCrewInfoLoad()
							{
								new rows;
								if(get_rows(rows))
								{
									new total;
									cache_get_value_index_int(0, 0, total);
									if(total <= 1) SendClientMessagef(playerid, -1, "No puedes abandonar la banda porque eres el único miembro con el rango fundador.");
									else ShowDialog(playerid, DIALOG_CREW_LEAVE);
								}
							}
							mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = 0;", PI[playerid][pi_CREW]);
							mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
						}
						else ShowDialog(playerid, DIALOG_CREW_LEAVE);
					}
				}
			}
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] >= pages - 1) pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] ++;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d", PI[playerid][pi_CREW]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] <= 0) pTemp(playerid)[pt_DIALOG_DB_PAGE] = pages - 1;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] --;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d", PI[playerid][pi_CREW]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_CHANGE_NAME:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_FIGHTING]) return SendClientMessagef(playerid, -1, "No se puede cambiar el nombre de la banda cuando la banda está en combate.");
				if(strlen(inputtext) >= 32)
				{
					SendClientMessagef(playerid, -1, "Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new crew_name[32];
				if(sscanf(inputtext, "s[32]", crew_name))
				{
					SendClientMessagef(playerid, -1, "Introduce un nombre para tu banda.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				RemoveHexColours(inputtext);
				
				format(CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_NAME], 32, "%s", crew_name);
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE crews SET name = '%e' WHERE id = %d;", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_NAME], CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				//actualizar nombre casas pickups
				
				
				new message[145], label_str[256];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) cambió el nombre de la banda a '{%06x}%s{FFFFFF}'.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_NAME]);
				SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);
				
				
				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(!PROPERTY_INFO[i][property_CREW]) continue;
					if(PROPERTY_INFO[i][property_CREW_ID] != PI[playerid][pi_CREW]) continue;
		
					format
					(
						label_str, 
						sizeof label_str, 
						"\
							Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
							{FFFFFF}Banda: {"#PRIMARY_COLOR"}%s\n\
							{FFFFFF}Presiona {"#PRIMARY_COLOR"}'Y' {FFFFFF}para entrar.\
						", PROPERTY_INFO[i][property_ID], CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_NAME]
					);
					
					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				}
				
				ShowDialog(playerid, DIALOG_CREW_MENU);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST_DELETE:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] >= pages - 1) pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] ++;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d", PI[playerid][pi_CREW]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] <= 0) pTemp(playerid)[pt_DIALOG_DB_PAGE] = pages - 1;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] --;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d", PI[playerid][pi_CREW]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else
				{
					pTemp(playerid)[pt_SELECTED_DB_AC_ID] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
					
					inline OnCrewInfoLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new name[24], crew_rank;
								cache_get_value_index(0, 0, name);
								cache_get_value_index_int(0, 1, crew_rank);

								if(crew_rank < PI[playerid][pi_CREW_RANK]) SendClientMessagef(playerid, -1, "No puedes echar a este miembro porque es un rango superior al tuyo.");
								else
								{
									if(crew_rank == 0)
									{
										inline OnCountQueryLoad()
										{
											if(get_rows(rows))
											{
												if(rows)
												{
													new total;
													cache_get_value_index_int(0, 0, total);
													if(total <= 1) SendClientMessagef(playerid, -1, "No se puede echar a este miembro ya que es el único miembro con el rango fundador.");
													else ShowDialog(playerid, DIALOG_CREW_CAST_MEMBER_CONFIRM);
												}
											}
										}
										mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = 0;", PI[playerid][pi_CREW]);
										mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);										
									}
									else ShowDialog(playerid, DIALOG_CREW_CAST_MEMBER_CONFIRM);
								}
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, crew_rank FROM player WHERE id = %d;", pTemp(playerid)[pt_SELECTED_DB_AC_ID]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_CAST_MEMBER_CONFIRM:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				inline OnCrewInfoLoad()
				{
					new rows;
					if(get_rows(rows))
					{
						new name[24], connected, pid, crew_rank;
						reg_name(0, "name", name);
						reg_int(0, "connected", connected);
						reg_int(0, "playerid", pid);
						reg_int(0, "crew_rank", crew_rank);
						if(crew_rank < PI[playerid][pi_CREW_RANK]) SendClientMessagef(playerid, -1, "No puedes echar a este miembro porque es un rango superior al tuyo.");
						else
						{
							if(crew_rank == 0)
							{
								inline OnCountQueryLoad()
								{
									if(get_rows(rows))
									{
										if(rows)
										{
											new total;
											cache_get_value_index_int(0, 0, total);
											if(total <= 1) SendClientMessagef(playerid, -1, "No se puede echar a este miembro ya que es el único miembro con el rango fundador.");
											else
											{
												new message[145];
												format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha echado a %s de la banda.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], name);
												SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);
											
												mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = NULL, crew_rank = 0 WHERE id = %d;", pTemp(playerid)[pt_SELECTED_DB_AC_ID]);
												mysql_tquery(handle_db, QUERY_BUFFER);
												
												CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_MEMBERS] --;
												if(connected)
												{
													CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] --;
													SetPlayerNormalColor(pid);
													if(pTemp(playerid)[pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
													{
														TextDrawHideForPlayer(pid, Textdraws[textdraw_TERRITORY_BOX]);
														TextDrawHideForPlayer(pid, TERRITORIES[ pTemp(playerid)[pt_LAST_TERRITORY] ][territory_TEXTDRAW]);
													}

													PI[pid][pi_CREW] = 0;
													PI[pid][pi_CREW_RANK] = 0;
													PlayerTemp[pid][pt_CREW_INDEX] = 0;
													HidePlayerGangZones(pid);
												}
											}
										}
									}
								}
								mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = 0;", PI[playerid][pi_CREW]);
								mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
							}
							else
							{
								new message[145];
								format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha echado a %s de la banda.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], name);
								SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);
							
								mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = NULL, crew_rank = 0 WHERE id = %d;", pTemp(playerid)[pt_SELECTED_DB_AC_ID]);
								mysql_tquery(handle_db, QUERY_BUFFER);
								
								CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_MEMBERS] --;
								if(connected)
								{
									CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] --;
									SetPlayerNormalColor(pid);
									if(pTemp(playerid)[pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
									{
										TextDrawHideForPlayer(pid, Textdraws[textdraw_TERRITORY_BOX]);
										TextDrawHideForPlayer(pid, TERRITORIES[ pTemp(playerid)[pt_LAST_TERRITORY] ][territory_TEXTDRAW]);
									}

									PI[pid][pi_CREW] = 0;
									PI[pid][pi_CREW_RANK] = 0;
									PlayerTemp[pid][pt_CREW_INDEX] = 0;
									HidePlayerGangZones(pid);
								}
							}
						}
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, connected, playerid, crew_rank FROM player WHERE id = %d;", pTemp(playerid)[pt_SELECTED_DB_AC_ID]);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
			}
			else ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST_DELETE);
			return 1;
		}
		case DIALOG_CREW_INVITE_RANK:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] < PI[playerid][pi_CREW_RANK])
				{
					SendClientMessagef(playerid, -1, "No puedes invitar con este rango porque es superior al tuyo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				if(!IsPlayerConnected(pTemp(playerid)[pt_CREW_INVITE_PID])) return SendClientMessagef(playerid, -1, "El jugador está desconectado.");
				
				new Float:pos[3]; GetPlayerPos(pTemp(playerid)[pt_CREW_INVITE_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
				if(PLAYER_WORKS[ pTemp(playerid)[pt_CREW_INVITE_PID] ][WORK_POLICE][pwork_SET]) return SendClientMessagef(playerid, -1, "Esta persona es policía y no puede tener banda.");
				if(PI[ pTemp(playerid)[pt_CREW_INVITE_PID] ][pi_CREW]) return SendClientMessagef(playerid, -1, "Esta persona pertenece a otra banda.");
				if(PlayerTemp[ pTemp(playerid)[pt_CREW_INVITE_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No puedes invitar a este jugador ahora.");
				if(PI[ pTemp(playerid)[pt_CREW_INVITE_PID] ][pi_ID] != pTemp(playerid)[pt_CREW_INVITE_AID]) return SendClientMessagef(playerid, -1, "El jugador está desconectado.");
				
				SendClientMessagef(playerid, -1, "Has ofrecido a %s unirse a la banda con el rango %s.", PlayerTemp[ pTemp(playerid)[pt_CREW_INVITE_PID] ][pt_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
				
				PlayerTemp[ pTemp(playerid)[pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][0] = PI[playerid][pi_CREW];
				PlayerTemp[ pTemp(playerid)[pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][1] = pTemp(playerid)[pt_CREW_INDEX];
				PlayerTemp[ pTemp(playerid)[pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][2] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
				PlayerTemp[ pTemp(playerid)[pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][3] = gettime();
				ShowDialog(pTemp(playerid)[pt_CREW_INVITE_PID], DIALOG_CREW_INVITE_ACCEPT);
			}
			return 1;
		}
		case DIALOG_CREW_INVITE_ACCEPT:
		{
			if(response)
			{
				if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INVITE_INFO][1] ][crew_VALID]) return SendClientMessagef(playerid, -1, "Esta banda ya no existe.");
				if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INVITE_INFO][1] ][ pTemp(playerid)[pt_CREW_INVITE_INFO][2] ][crew_rank_VALID]) return SendClientMessagef(playerid, -1, "El rango que te han ofrecio ya no existe.");
				if(gettime() > pTemp(playerid)[pt_CREW_INVITE_INFO][3] + 20) return SendClientMessagef(playerid, -1, "Has tardado mucho en aceptar.");
				if(CREW_INFO[ pTemp(playerid)[pt_CREW_INVITE_INFO][1] ][crew_FIGHTING]) return SendClientMessagef(playerid, -1, "No puedes unirte a la banda cuando la banda está en combate.");
				
				PI[playerid][pi_CREW] = pTemp(playerid)[pt_CREW_INVITE_INFO][0];
				PI[playerid][pi_CREW_RANK] = pTemp(playerid)[pt_CREW_INVITE_INFO][2];
				pTemp(playerid)[pt_CREW_INDEX] = pTemp(playerid)[pt_CREW_INVITE_INFO][1];
				CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_MEMBERS] ++;
				CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] ++;
				pTemp(playerid)[pt_LAST_GOT_CREW] = gettime();
				SetPlayerGangZones(playerid);
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = %d, crew_rank = %d WHERE id = %d;", PI[playerid][pi_CREW], PI[playerid][pi_CREW_RANK], PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s se ha unido a la banda con el rango {%06x}%s.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME], CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME]);
				SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);
			}
			return 1;
		}
		case DIALOG_CREW_RANKS:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(listitem < PI[playerid][pi_CREW_RANK])
				{
					if(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][listitem][crew_rank_VALID]) SendClientMessagef(playerid, -1, "No puedes modificar este rango porque es un rango superior al tuyo.");
					else SendClientMessagef(playerid, -1, "No puedes crear un rango en este puesto porque es superior al tuyo.");
					return 1;
				}
				
				pTemp(playerid)[pt_CREW_SELECTED_RANK] = listitem;
				if(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][listitem][crew_rank_VALID]) ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
				else ShowDialog(playerid, DIALOG_CREW_RANK_CREATE);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY_NAME);
					case 1:
					{
						if(pTemp(playerid)[pt_CREW_SELECTED_RANK] == 0)
						{
							SendClientMessagef(playerid, -1, "No se pueden modificar los permisos de este rango porque es el rango fundador.");
							return 1;
						}
						
						ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY_PERMISS);
					}
					case 2:
					{
						if(pTemp(playerid)[pt_CREW_SELECTED_RANK] == 0)
						{
							SendClientMessagef(playerid, -1, "No se puede eliminar este rango porque es el rango fundador.");
							return 1;
						}
						
						SendClientMessagef(playerid, -1, "[Atención] Selecciona el nuevo rango para los miembros que actualmente tienen el rango '%s'.", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
						ShowDialog(playerid, DIALOG_CREW_RANK_DELETE);
					}
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_NAME:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendClientMessagef(playerid, -1, "Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new rank_name[32];
				if(sscanf(inputtext, "s[32]", rank_name))
				{
					SendClientMessagef(playerid, -1, "Introduce el nuevo nombre para el rango.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				RemoveHexColours(inputtext);
				
				SendClientMessagef(playerid, -1, "Has modificado el nombre del rango '%s' a '%s'.", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_NAME], rank_name);
				format(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_NAME], 32, "%s", rank_name);
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE crew_ranks SET rank_name = '%e' WHERE id = %d;",  CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
			return 1;
		}
		case DIALOG_CREW_RANK_CREATE:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendClientMessagef(playerid, -1, "Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new rank_name[32];
				if(sscanf(inputtext, "s[32]", rank_name))
				{
					SendClientMessagef(playerid, -1, "Introduce un nombre para el rango.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				RemoveHexColours(inputtext);
				
				if(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_VALID])
				{
					SendClientMessagef(playerid, -1, "Parece que alguien ya ha creado un rango en este espacio.");
					return 1;
				}
				
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_VALID] = true;
				format(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_NAME], 32, "%s", rank_name);
				
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME] =
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE] =
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS] =
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS] =
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS] =
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES] =
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES] =
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR] =
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY] =
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE] = 0;
				RegisterNewCrewRank(pTemp(playerid)[pt_CREW_INDEX], pTemp(playerid)[pt_CREW_SELECTED_RANK]);
								
				SendClientMessagef(playerid, -1, "El rango '%s' ha sido creado, ahora puedes editarlo y darle permisos.", rank_name);
				ShowDialog(playerid, DIALOG_CREW_RANKS);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_PERMISS:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][listitem])
				{
					SendClientMessagef(playerid, -1, "No puedes cambiar este permiso porque tu no tienes este permiso.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				if(CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem]) CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem] = false;
				else CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem] = true;
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE crew_ranks SET permission%d = %d WHERE id = %d;", listitem, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				ShowDialog(playerid, dialogid);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] < PI[playerid][pi_CREW_RANK])
				{
					SendClientMessagef(playerid, -1, "No puedes seleccionar este rango porque es superior al tuyo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				pTemp(playerid)[pt_CREW_SELECTED_NEW_RANK] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_CREW_RANK_DELETE_CONFIRM);
			}
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE_CONFIRM:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew_rank = %d WHERE crew = %d AND crew_rank = %d;", pTemp(playerid)[pt_CREW_SELECTED_NEW_RANK], PI[playerid][pi_CREW], pTemp(playerid)[pt_CREW_SELECTED_RANK]);
				mysql_tquery(handle_db, QUERY_BUFFER);

				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM crew_ranks WHERE id = %d;", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
			
				SendClientMessagef(playerid, -1, "Has eliminado el rango '%s'.", CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
			
				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) cambió tu rango al rango '{%06x}%s{ffffff}'.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_NEW_RANK] ][crew_rank_NAME]);
				LoopEx(i, MAX_PLAYERS, 0)
				{
					if(IsPlayerConnected(i))
					{
						if(PI[i][pi_CREW])
						{
							if(PI[i][pi_CREW] == PI[playerid][pi_CREW])
							{
								if(PI[i][pi_CREW_RANK] == pTemp(playerid)[pt_CREW_SELECTED_RANK])
								{
									PI[i][pi_CREW_RANK] = pTemp(playerid)[pt_CREW_SELECTED_NEW_RANK];
									SendClientMessage(i, -1, message);
								}
							}
						}
					}
				}
				
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_VALID] = false;
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_ID] = 0;
				CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_NAME][0] = EOS;
				for(new i = 0; i != CREW_RANK_SIZE; i ++) CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] = 0;
			
			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_MODIFY_COLOR:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_FIGHTING]) return SendClientMessagef(playerid, -1, "No se puede cambiar el color cuando la banda está en combate.");
				
				CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] = RandomColors[listitem];
				
				
				new r, g, b, a,		new_territory_color;
				HexToRGBA(CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR], r, g, b, a);
				new_territory_color = RGBAToHex(r, g, b, 135);
				for(new i = 0; i != MAX_TERRITORIES; i ++)
				{
					if(!TERRITORIES[i][territory_VALID]) continue;
					if(!TERRITORIES[i][territory_OCCUPIED]) continue;
					
					if(TERRITORIES[i][territory_CREW_ID] == PI[playerid][pi_CREW])
					{
						TERRITORIES[i][territory_COLOR] = new_territory_color;
						UpdateGangZoneColor(i);
					}
				}
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE crews SET color = %d WHERE id = %d;", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR], CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				SendClientMessagef(playerid, -1, "El color de la banda se ha cambiado.");
				ShowDialog(playerid, DIALOG_CREW_MENU);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_DELETE:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_FIGHTING]) return SendClientMessagef(playerid, -1, "No se puede borrar la banda cuando está en combate.");
				
				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha eliminado la banda.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME]);

				new tmp_crew_id = PI[playerid][pi_CREW];
				new tmp_CREW_INFO[enum_CREW_INFO], old_crew_id = PI[playerid][pi_CREW];
				CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ] = tmp_CREW_INFO;
				
				new tmp_CREW_RANK_INFO[enum_CREW_RANK_INFO];
				for(new i = 0; i != MAX_CREW_RANKS; i ++) CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][i] = tmp_CREW_RANK_INFO;
				
				LoopEx(i, MAX_PLAYERS, 0)
				{
					if(IsPlayerConnected(i))
					{
						if(PI[i][pi_CREW])
						{
							if(PI[i][pi_CREW] == PI[playerid][pi_CREW])
							{
								SetPlayerNormalColor(i);
								HidePlayerGangZones(i);
								if(PlayerTemp[i][pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
								{
									TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
									TextDrawHideForPlayer(i, TERRITORIES[ PlayerTemp[i][pt_LAST_TERRITORY] ][territory_TEXTDRAW]);
								}
								PI[i][pi_CREW] = 0;
								PI[i][pi_CREW_RANK] = 0;
								PlayerTemp[i][pt_CREW_INDEX] = 0;
								SendClientMessage(i, -1, message);
							}
						}
					}
				}
				
				for(new i = 0; i != MAX_TERRITORIES; i ++)
				{
					if(!TERRITORIES[ i ][territory_VALID]) continue;
					if(!TERRITORIES[ i ][territory_OCCUPIED]) continue;
					if(TERRITORIES[ i ][territory_CREW_ID] != old_crew_id) continue;
					
					TERRITORIES[ i ][territory_OCCUPIED] = false;
					TERRITORIES[ i ][territory_CREW_ID] = 0;
					TERRITORIES[ i ][territory_CREW_INDEX] = 0;
					TERRITORIES[ i ][territory_COLOR] = 0xCCCCCC55;
					UpdateGangZoneColor(i);
				}
				
				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(!PROPERTY_INFO[i][property_CREW]) continue;
					if(PROPERTY_INFO[i][property_CREW_ID] != old_crew_id) continue;
					
					PROPERTY_INFO[ i ][property_SOLD] = false;
					PROPERTY_INFO[ i ][property_CREW] = false;
					PROPERTY_INFO[ i ][property_OWNER_ID] = 0;
					PROPERTY_INFO[ i ][property_CREW_ID] = 0;
					format(PROPERTY_INFO[ i ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ i ][property_ID]);
					
					new info[3];
					UpdateUnnocupiedPropertyLabel(i);
					
					DestroyDynamicPickup(PROPERTY_INFO[ i ][property_EXT_PICKUP_ID]);
					PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
					
					PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
					info[0] = PICKUP_TYPE_PROPERTY;
					info[1] = i; // Index
					info[2] = 2; // Pickup Exterior
					Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ i ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = NULL WHERE id = %d;", PROPERTY_INFO[i][property_ID]);
					mysql_tquery(handle_db, QUERY_BUFFER);
				}

				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM crews WHERE id = %d;", tmp_crew_id);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				CallLocalFunction("OnCrewDeleted", "i", tmp_crew_id);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_LEAVE:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			
			if(response)
			{
				if(PI[playerid][pi_CREW_RANK] == 0)
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new total;
								cache_get_value_index_int(0, 0, total);
								if(total <= 1) SendClientMessagef(playerid, -1, "No puedes abandonar la banda porque eres el único miembro con el rango fundador.");
								else
								{
									new message[145];
									format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha abandonado la banda.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME]);
									SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);
									
									mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = NULL, crew_rank = 0 WHERE id = %d;", PI[playerid][pi_ID]);
									mysql_tquery(handle_db, QUERY_BUFFER);
									
									SetPlayerNormalColor(playerid);
									CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_MEMBERS] --;
									CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] --;
									HidePlayerGangZones(playerid);
									
									PI[playerid][pi_CREW] = 0;
									PI[playerid][pi_CREW_RANK] = 0;
									pTemp(playerid)[pt_CREW_INDEX] = 0;
								}
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = 0;", PI[playerid][pi_CREW]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else
				{
					new message[145];
					format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha abandonado la banda.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME]);
					SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);
					
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = NULL, crew_rank = 0 WHERE id = %d;", PI[playerid][pi_ID]);
					mysql_tquery(handle_db, QUERY_BUFFER);
					
					SetPlayerNormalColor(playerid);
					CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_MEMBERS] --;
					CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] --;
					HidePlayerGangZones(playerid);
					
					PI[playerid][pi_CREW] = 0;
					PI[playerid][pi_CREW_RANK] = 0;
					pTemp(playerid)[pt_CREW_INDEX] = 0;
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBERS:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] >= pages - 1) pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] ++;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d", PI[playerid][pi_CREW]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] <= 0) pTemp(playerid)[pt_DIALOG_DB_PAGE] = pages - 1;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] --;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d", PI[playerid][pi_CREW]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else
				{
					pTemp(playerid)[pt_SELECTED_DB_AC_ID] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBER);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBER:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] < PI[playerid][pi_CREW_RANK])
				{
					SendClientMessagef(playerid, -1, "No puedes dar este rango porque es un rango superior al tuyo.");
					return 1;
				}
				
				inline OnCrewInfoLoad()
				{
					new rows;
					if(get_rows(rows))
					{
						if(rows)
						{
							new name[24], connected, pid, crew_rank;
							reg_name(0, "name", name);
							reg_int(0, "connected", connected);
							reg_int(0, "playerid", pid);
							reg_int(0, "crew_rank", crew_rank);

							if(crew_rank < PI[playerid][pi_CREW_RANK]) SendClientMessagef(playerid, -1, "No puedes modificar el rango de este miembro porque es un rango superior al tuyo.");
							else
							{
								if(crew_rank == 0)
								{
									inline OnCountQueryLoad()
									{
										if(get_rows(rows))
										{
											if(rows)
											{
												new total;
												cache_get_value_index_int(0, 0, total);
												if(total <= 1) SendClientMessagef(playerid, -1, "No se puede modificar el rango de este miembro ya que es el único miembro con el rango fundador.");
												else
												{
													mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew_rank = %d WHERE id = %d;", pTemp(playerid)[pt_PLAYER_LISTITEM][listitem], pTemp(playerid)[pt_SELECTED_DB_AC_ID]);
													mysql_tquery(handle_db, QUERY_BUFFER);

													new message[145];
													if(connected)
													{
														PI[pid][pi_CREW_RANK] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
														format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) cambió tu rango al rango '{%06x}%s{FFFFFF}'.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
														SendClientMessage(pid, -1, message);
													}
													format(message, sizeof message, "Has modificado el rango de '%s' al rango '%s'.", name, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
													SendClientMessage(playerid, -1, message);
												}
											}
										}
									}
									mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = 0;", PI[playerid][pi_CREW]);
									mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
								}
								else
								{
									mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew_rank = %d WHERE id = %d;", pTemp(playerid)[pt_PLAYER_LISTITEM][listitem], pTemp(playerid)[pt_SELECTED_DB_AC_ID]);
									mysql_tquery(handle_db, QUERY_BUFFER);

									new message[145];
									if(connected)
									{
										PI[pid][pi_CREW_RANK] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
										format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) cambió tu rango al rango '{%06x}%s{FFFFFF}'.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
										SendClientMessage(pid, -1, message);
									}
									format(message, sizeof message, "Has modificado el rango de '%s' al rango '%s'.", name, CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
									SendClientMessage(playerid, -1, message);
								}
							}							
						}
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, connected, playerid, crew_rank FROM player WHERE id = %d;", pTemp(playerid)[pt_SELECTED_DB_AC_ID]);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
			}
			else ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBERS);
			return 1;
		}
		case DIALOG_CREW_PROPERTY_CONFIRM:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(!TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_VALID]) return SendClientMessagef(playerid, -1, "La propiedad no está dentro de un territorio de tu banda.");
				if(!TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_OCCUPIED]) return SendClientMessagef(playerid, -1, "La propiedad no está dentro de un territorio de tu banda.");
				if(TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] != PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "La propiedad no está dentro de un territorio de tu banda.");
				if(!IsPointInDynamicArea(TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_AREA], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z])) return SendClientMessagef(playerid, -1, "La propiedad no está dentro de un territorio de tu banda.");
				if(PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != PI[playerid][pi_ID]) return SendClientMessagef(playerid, -1, "Esta no es tu propiedad.");
				
				
				new index = pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED];
				PROPERTY_INFO[ index ][property_CREW] = true;
				PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
				PROPERTY_INFO[ index ][property_CREW_ID] = PI[playerid][pi_CREW];
				format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);
				
				new label_str[256];
				format
				(
					label_str, 
					sizeof label_str, 
					"\
						Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
						{FFFFFF}Banda: {"#PRIMARY_COLOR"}%s\n\
						{FFFFFF}Presiona {"#PRIMARY_COLOR"}'Y' {FFFFFF}para entrar.\
					", PROPERTY_INFO[index][property_ID], CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_NAME]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[ index ][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = %d WHERE id = %d;", TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_ID], PROPERTY_INFO[index][property_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha añadido una nueva propiedad en {%06x}%s.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME], CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_NAME]);
				SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);
			}
			return 1;
		}
		case DIALOG_CREW_LEAVE_TERRITORY:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(!IsPlayerInDynamicArea(playerid, TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_AREA])) return SendClientMessagef(playerid, -1, "No estás en un territorio de tu banda.");
				if(TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] != PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No estás en un territorio de tu banda.");			
				if(CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_FIGHTING]) return SendClientMessagef(playerid, -1, "No puedes abandonar territorios mientras tu banda está en combate.");
				if(TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_WAR]) return SendClientMessagef(playerid, -1, "No se puede abandonar este territorio cuando está siendo conquistado.");

				TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_OCCUPIED] = false;
				TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] = 0;
				TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_CREW_INDEX] = 0;
				TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_COLOR] = 0xCCCCCC55;
				UpdateGangZoneColor(pTemp(playerid)[pt_PLAYER_TERRITORY_PRO]);
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE territories SET id_crew = NULL WHERE id = %d;", TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				CallLocalFunction("OnCrewLeftTerritory", "iiii", PI[playerid][pi_CREW], pTemp(playerid)[pt_CREW_INDEX], TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_ID], pTemp(playerid)[pt_PLAYER_TERRITORY_PRO]);
				
				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(!PROPERTY_INFO[i][property_CREW]) continue;
					if(PROPERTY_INFO[i][property_CREW_ID] != PI[playerid][pi_CREW]) continue;
					
					if(IsPointInDynamicArea(TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_AREA], PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z]))
					{
						PROPERTY_INFO[ i ][property_SOLD] = false;
						PROPERTY_INFO[ i ][property_CREW] = false;
						PROPERTY_INFO[ i ][property_OWNER_ID] = 0;
						PROPERTY_INFO[ i ][property_CREW_ID] = 0;
						format(PROPERTY_INFO[ i ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ i ][property_ID]);
						
						new info[3];
						UpdateUnnocupiedPropertyLabel(i);
						
						DestroyDynamicPickup(PROPERTY_INFO[ i ][property_EXT_PICKUP_ID]);
						PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
						
						PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
						info[0] = PICKUP_TYPE_PROPERTY;
						info[1] = i; // Index
						info[2] = 2; // Pickup Exterior
						Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ i ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
							
						mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = NULL WHERE id = %d;", PROPERTY_INFO[ i ][property_ID]);
						mysql_tquery(handle_db, QUERY_BUFFER);
					}
				}
				
				new message[145];
				format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '{%06x}%s{FFFFFF}' ha abandonado un territorio en {"#PRIMARY_COLOR"}%s.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_NAME], TERRITORIES[ pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] ][territory_NAME]);
				LoopEx(i, MAX_PLAYERS, 0)
				{
					if(IsPlayerConnected(i))
					{
						if(PI[i][pi_CREW])
						{
							SendClientMessage(i, -1, message);
						}
					}
				}
			}
			return 1;
		}
		case DIALOG_CREW_LEAVE_PROPERTY:
		{
			if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_VALID]) return SendClientMessagef(playerid, -1, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES]) return SendClientMessagef(playerid, -1, "No tienes permiso.");
			
			if(response)
			{
				if(!PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_CREW]) return SendClientMessagef(playerid, -1, "Esta no es una propiedad de tu banda.");
				if(PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_CREW_ID] != PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "Esta no es una propiedad de tu banda.");
				if(CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_FIGHTING]) return SendClientMessagef(playerid, -1, "No puedes liberar una propiedad cuando tu banda está en combate.");
			
				PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_SOLD] = false;
				PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_CREW] = false;
				PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = 0;
				PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_CREW_ID] = 0;
				format(PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				
				new info[3];
				UpdateUnnocupiedPropertyLabel(pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED]);
				
				DestroyDynamicPickup(PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID]);
				PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
				
				PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z], 0, PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_INTERIOR]);
				info[0] = PICKUP_TYPE_PROPERTY;
				info[1] = pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED]; // Index
				info[2] = 2; // Pickup Exterior
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
						
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = NULL WHERE id = %d;", PROPERTY_INFO[ pTemp(playerid)[pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				SendClientMessagef(playerid, -1, "La propiedad ha sido liberada.");
			}
			return 1;
		}
		case DIALOG_POLICE_PENALTY:
		{
			if(response)
			{
				if(gettime() > pTemp(playerid)[pt_POLICE_PEN_TIME] + 20) return SendClientMessagef(playerid, -1, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(pTemp(playerid)[pt_POLICE_PEN_PID])) return SendClientMessagef(playerid, -1, "El policía ya no está en el servidor.");
				if(PI[ pTemp(playerid)[pt_POLICE_PEN_PID] ][pi_ID] != pTemp(playerid)[pt_POLICE_PEN_AID]) return SendClientMessagef(playerid, -1, "El policía ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(pTemp(playerid)[pt_POLICE_PEN_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "El policía no está cerca tuya.");
				
				if(pTemp(playerid)[pt_POLICE_PEN_IM] > PI[playerid][pi_CASH])
				{
					SendClientMessagef(playerid, -1, "No tienes dinero para pagar la multa.");
					SendClientMessage(pTemp(playerid)[pt_POLICE_PEN_PID], -1, "{"#SILVER_COLOR"}La persona ha aceptado la multa pero no tiene dinero para pagarla.");
					return 1;
				}
				
				if(GivePlayerCash(playerid, -pTemp(playerid)[pt_POLICE_PEN_IM], true, true) && GivePlayerCash(pTemp(playerid)[pt_POLICE_PEN_PID], pTemp(playerid)[pt_POLICE_PEN_IM]/2, true, false)) {
					SetPlayerWantedLevelEx(playerid, 0);

					SendClientMessagef(playerid, -1, "La multa ha sido pagada.");
					SendClientMessage(pTemp(playerid)[pt_POLICE_PEN_PID], -1, "{"#SILVER_COLOR"}La persona ha pagado la multa, la mitad del importe es para ti.");
				}
			
			}
			else
			{
				if(gettime() > pTemp(playerid)[pt_POLICE_PEN_TIME] + 20) return 1;
				if(!IsPlayerConnected(pTemp(playerid)[pt_POLICE_PEN_PID])) return 1;
				if(PI[ pTemp(playerid)[pt_POLICE_PEN_PID] ][pi_ID] != pTemp(playerid)[pt_POLICE_PEN_AID]) return 1;
				
				SendClientMessage(pTemp(playerid)[pt_POLICE_PEN_PID], -1, "{"#SILVER_COLOR"}La persona se ha negado a pagar la multa.");
				if(PI[playerid][pi_WANTED_LEVEL] < 6) SetPlayerWantedLevelEx(playerid, PI[playerid][pi_WANTED_LEVEL] + 1);
			}
			return 1;
		}
		case DIALOG_VIP_BUY:
		{
			if(response)
			{
				if(PI[playerid][pi_ADMIN_LEVEL] >= CMD_MODERATOR)
				{
					SetPlayerVip(playerid, 1, 0, 30);
					return 1;
				}

				if(VIP_COINS_PRICE > PI[playerid][pi_COINS])
				{
					SendClientMessagef(playerid, -1, "Te faltan %d "SERVER_COIN" para poder comprar VIP.", VIP_COINS_PRICE - PI[playerid][pi_COINS]);
					return 1;
				}
				
				SetPlayerVip(playerid, 1, VIP_COINS_PRICE, 30);
			}
			return 1;
		}
		case DIALOG_VIP:
		{
			if(!response)
			{
				if(VIP_COINS_PRICE > PI[playerid][pi_COINS])
				{
					SendClientMessagef(playerid, -1, "Te faltan %d "SERVER_COIN" para poder comprar VIP.", VIP_COINS_PRICE - PI[playerid][pi_COINS]);
					return 1;
				}
				
				PI[playerid][pi_COINS] -= VIP_COINS_PRICE;

				inline OnInfoQueryLoad()
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								cache_get_value_index(0, 0, PI[playerid][pi_VIP_EXPIRE_DATE]);
								SendClientMessagef(playerid, -1, "{"#PRIMARY_COLOR"}¡Felicidades! {FFFFFF}Has renovado tu VIP (%d) por 30 días, fecha de caducidad: %s.", PI[playerid][pi_VIP], PI[playerid][pi_VIP_EXPIRE_DATE]);
								SendClientMessage(playerid, -1, "Puedes utilizar {"#PRIMARY_COLOR"}/vip {FFFFFF}para ver el tiempo restante o renovar.");
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT vip_expire_date FROM player WHERE id = %d;", PI[playerid][pi_ID]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d, vip = %d, vip_expire_date = DATE_ADD(NOW(), INTERVAL 30 DAY) WHERE id = %d;", PI[playerid][pi_COINS], PI[playerid][pi_VIP], PI[playerid][pi_ID]);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
			}
			return 1;
		}
		case DIALOG_VOBJECT_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
					case 1: //Comprar
					{
						new slot = GetVehicleFreeObjectSlot(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID]);
						if(!PI[playerid][pi_VIP] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendInfoMessagef(playerid, "~y~Membresia VIP~w~~n~~n~¡Los jugadores ~y~VIP ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.~n~~n~", MAX_SU_VOBJECTS);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(slot == -1)
						{
							SendMessage(playerid, "No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						ShowMenu(playerid, MENU_VOBJECTS_SHOP);
					}
				}
			}
			else
			{
				pTemp(playerid)[pt_IN_TUNING_GARAGE] = false;
				SetVehicleVirtualWorldEx(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetVehiclePosEx(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], -610.9049, -515.7297, 27.0);
				SetVehicleZAngle(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], 0.0);
				
				GLOBAL_VEHICLES[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_PARAMS_ENGINE] = 1;
				UpdateVehicleParams(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID]);
				
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) PutPlayerInVehicleEx(playerid, pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], 0);
				
				ShowPlayerSpeedoMeter(playerid);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			if(response)
			{
				if(listitem == MAX_SU_VOBJECTS) return ShowDialog(playerid, DIALOG_VOBJECT_DELETE_ALL);
				if(!VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][listitem][vobject_VALID])
				{
					SendMessage(playerid, "Este slot está vacío, aquí puedes comprar un nuevo objeto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				pTemp(playerid)[pt_TUNING_EDIT_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
						{
							SendMessage(playerid, "Objeto guardado.");
							VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = false;
							UpdateVehicleAttachedObject(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], pTemp(playerid)[pt_TUNING_EDIT_SLOT]);
							ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
						}
						else
						{
							SendMessage(playerid, "Objeto colocado.");
							VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = true;
							UpdateVehicleAttachedObject(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], pTemp(playerid)[pt_TUNING_EDIT_SLOT], true);
							ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
						}
					}
					case 1: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CNAME);
					case 2:
					{
						if(!VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
						{
							SendMessage(playerid, "Debes colocar el objeto primero.");
							ShowDialog(playerid, dialogid);
							return 1;
						}
							
						EditVehicleObject(playerid, pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], pTemp(playerid)[pt_TUNING_EDIT_SLOT]);
					}
					case 3:
					{
						switch(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_TYPE])
						{
							case VOBJECT_TYPE_OBJECT:
							{
								if(!VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
								{
									SendMessage(playerid, "Debes colocar el objeto primero.");
									ShowDialog(playerid, dialogid);
									return 1;
								}
								ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
							}
						}
					}
					case 4: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CDELETE);
				}
			
			}
			else
			{
				UpdateVehicleObject(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], pTemp(playerid)[pt_TUNING_EDIT_SLOT]);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 32)
				{
					SendMessage(playerid, "El nombre del objeto debe contener de 1 a 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				format(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_NAME], 32, "%s", inputtext);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			if(response)
			{
				pTemp(playerid)[pt_TUNING_EDIT_COLOR_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ pTemp(playerid)[pt_TUNING_EDIT_COLOR_SLOT] ] = 0;
						UpdateVehicleAttachedObject(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], pTemp(playerid)[pt_TUNING_EDIT_SLOT], true);
						SendMessage(playerid, "Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 1:
					{
						VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ pTemp(playerid)[pt_TUNING_EDIT_COLOR_SLOT] ] = RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_1] ]);
						UpdateVehicleAttachedObject(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], pTemp(playerid)[pt_TUNING_EDIT_SLOT], true);
						SendMessage(playerid, "Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 2:
					{
						VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ pTemp(playerid)[pt_TUNING_EDIT_COLOR_SLOT] ] = RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_2] ]);
						UpdateVehicleAttachedObject(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], pTemp(playerid)[pt_TUNING_EDIT_SLOT], true);
						SendMessage(playerid, "Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 3: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR_HEX);
				}
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			if(response)
			{
				if(strlen(inputtext) < 8) return ShowDialog(playerid, dialogid);
				
				new hexcolor;
				if(sscanf(inputtext, "h", hexcolor))
				{
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ pTemp(playerid)[pt_TUNING_EDIT_COLOR_SLOT] ] = hexcolor;
				UpdateVehicleAttachedObject(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], pTemp(playerid)[pt_TUNING_EDIT_SLOT], true);
				SendMessage(playerid, "Color actualizado.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			if(response)
			{
				if(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
				{
					DestroyDynamicObject(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID]);
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
				}
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM vobjects WHERE id = %d;", VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ] = temp_VEHICLE_OBJECTS;
				
				SendMessage(playerid, "Objeto eliminado.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_DELETE_ALL:
		{
			if(response)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM vobjects WHERE id_vehicle = %d;", PLAYER_VEHICLES[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][player_vehicle_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);

				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
				{
					if(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
					{
						DestroyDynamicObject(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID]);
						VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
					}
					
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][i] = temp_VEHICLE_OBJECTS;
				}
				
				SendMessage(playerid, "Todos los objetos de este vehículo han sido eliminados.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_PLAYER_CONFIG:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(PI[playerid][pi_CONFIG_AUDIO])
						{
							PI[playerid][pi_CONFIG_AUDIO] = false;
							StopAudioStreamForPlayer(playerid);
						}
						else PI[playerid][pi_CONFIG_AUDIO] = true;
					}
					case 1:
					{
						if(PI[playerid][pi_CONFIG_HUD])
						{
							PI[playerid][pi_CONFIG_HUD] = false;
							for(new i = 0; i < HUD_TEXTDRAWS_SIZE; i ++) 
							{
								TextDrawHideForPlayer(playerid, Textdraws[textdraw_HUD][i]);
							}
							
							for(new i = 0; i < HUD_PTEXTDRAWS_SIZE; i ++) 
							{
								PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][i]);
							}

							HidePlayerProgressBar(playerid, PLAYER_BARS[playerid][pbar_THIRST]);
							HidePlayerProgressBar(playerid, PLAYER_BARS[playerid][pbar_HUNGRY]);
						}
						else
						{
							PI[playerid][pi_CONFIG_HUD] = true;
							for(new i = 0; i < HUD_TEXTDRAWS_SIZE; i ++) 
							{
								TextDrawShowForPlayer(playerid, Textdraws[textdraw_HUD][i]);	
							}
							
							for(new i = 0; i < HUD_PTEXTDRAWS_SIZE; i ++) 
							{
								PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][i]);
							}

							ShowPlayerProgressBar(playerid, PLAYER_BARS[playerid][pbar_THIRST]);
							ShowPlayerProgressBar(playerid, PLAYER_BARS[playerid][pbar_HUNGRY]);
						}
					}
					case 2:
					{
						if(PI[playerid][pi_CONFIG_ADMIN]) PI[playerid][pi_CONFIG_ADMIN] = false;
						else PI[playerid][pi_CONFIG_ADMIN] = true;
					}
					case 3:
					{
						if(PI[playerid][pi_PHONE_VISIBLE_NUMBER]) PI[playerid][pi_PHONE_VISIBLE_NUMBER] = false;
						else PI[playerid][pi_PHONE_VISIBLE_NUMBER] = true;
					}
					case 4:
					{
						if(PI[playerid][pi_CONFIG_SOUNDS]) PI[playerid][pi_CONFIG_SOUNDS] = false;
						else PI[playerid][pi_CONFIG_SOUNDS] = true;
					}
					case 5:
					{
						if(PI[playerid][pi_CONFIG_TIME])
						{
							PI[playerid][pi_CONFIG_TIME] = false;
							TextDrawHideForPlayer(playerid, Textdraws[textdraw_SERVER_TIME]);
						}
						else
						{
							PI[playerid][pi_CONFIG_TIME] = true;
							TextDrawShowForPlayer(playerid, Textdraws[textdraw_SERVER_TIME]);
						}
					}
					case 6:
					{
						if(PI[playerid][pi_DOUBT_CHANNEL]) PI[playerid][pi_DOUBT_CHANNEL] = false;
						else PI[playerid][pi_DOUBT_CHANNEL] = true;
					}
				}
				ShowDialog(playerid, dialogid);
			}
			return 1;
		}
		case DIALOG_POLICE_BYC:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						pTemp(playerid)[pt_DIALOG_DB_LIMIT] = 10;
						pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_POLICE_BYC_LAST_ALL);
					}
					case 1: ShowDialog(playerid, DIALOG_POLICE_BYC_NAME_FIND);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_BYC_NAME_FIND:
		{
			if(response)
			{
				new name[24];
				if(sscanf(inputtext, "s[24]", name)) return ShowDialog(playerid, dialogid);
				
				inline OnDialogQueryLoad()
				{
					new rows;
					if(get_rows(rows))
					{
						if(rows)
						{
							cache_get_value_index_int(0, 0, pTemp(playerid)[pt_SELECTED_BYC_USER_ID]);
							pTemp(playerid)[pt_DIALOG_DB_LIMIT] = 10;
							pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
							ShowDialog(playerid, DIALOG_POLICE_BYC_LAST_PLAYER);
						}
						else SendClientMessagef(playerid, -1, "No se ha encontrado a esa persona.");
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE name = '%e';", name);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			}
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_ALL:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] >= pages - 1) pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] ++;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_tquery_inline(handle_db, "SELECT COUNT(id) FROM police_history;", using inline OnCountQueryLoad);
				}
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] <= 0) pTemp(playerid)[pt_DIALOG_DB_PAGE] = pages - 1;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] --;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_tquery_inline(handle_db, "SELECT COUNT(id) FROM police_history;", using inline OnCountQueryLoad);
				}
				else
				{
					pTemp(playerid)[pt_SELECTED_BYC_ID] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_POLICE_DELETE_BYC);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_PLAYER:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] >= pages - 1) pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] ++;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM police_history WHERE id_player = %d;", pTemp(playerid)[pt_SELECTED_BYC_USER_ID]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] <= 0) pTemp(playerid)[pt_DIALOG_DB_PAGE] = pages - 1;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] --;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM police_history WHERE id_player = %d;", pTemp(playerid)[pt_SELECTED_BYC_USER_ID]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else
				{
					pTemp(playerid)[pt_SELECTED_BYC_ID] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_POLICE_DELETE_BYC);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_DELETE_BYC:
		{
			if(response)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM police_history WHERE id = %d;", pTemp(playerid)[pt_SELECTED_BYC_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				SendClientMessagef(playerid, -1, "Registro borrado del historial policíal.");
			}
			return 1;
		}
		case DIALOG_CHANGE_NAME:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowDialog(playerid, dialogid);
				
				new password[64 + 1];
				SHA256_PassHash(inputtext, PI[playerid][pi_SALT], password, sizeof password);
			
				if(!strcmp(password, PI[playerid][pi_PASS], false))
				{
					ShowDialog(playerid, DIALOG_CHANGE_NAME_NAME);
					pTemp(playerid)[pt_BAD_LOGIN_ATTEMP] = 0;
				}
				else // Error
				{
					pTemp(playerid)[pt_BAD_LOGIN_ATTEMP] ++;
					if(pTemp(playerid)[pt_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return Kick(playerid);
					SendClientMessagef(playerid, -1, "Contraseña incorrecta, aviso %d/%d.", pTemp(playerid)[pt_BAD_LOGIN_ATTEMP], MAX_BAD_LOGIN_ATTEMPS);
				}
			}
			return 1;
		}
		case DIALOG_CHANGE_NAME_NAME:
		{
			if(response)
			{
				new length = strlen(inputtext);
				if(length < 3 || length > 20) return ShowDialog(playerid, dialogid);

				new name[24];
				format(name, 24, "%s", inputtext);
				if(!IsValidRPName(name)) return SendClientMessagef(playerid, -1, "El nombre '%s' no cumple con el formato Nombre_Apellido.", name);
	
				inline OnDialogQueryLoad(newName[])
				{
					new rows;
					if(get_rows(rows))
					{
						if(rows) SendClientMessagef(playerid, -1, "El nombre '%s' está en uso.", newName);
						else
						{
							printf("/cname: %d, '%s'", PI[playerid][pi_ID], newName);
							if(SetPlayerName(playerid, newName) == 1) {
								format(pTemp(playerid)[pt_NAME], 24, "%s", newName);
								format(PI[playerid][pi_NAME], 24, "%s", newName);
								
								for(new i = 0; i != MAX_PROPERTIES; i ++)
								{
									if(!PROPERTY_INFO[i][property_VALID]) continue;
									if(PROPERTY_INFO[i][property_OWNER_ID] != PI[playerid][pi_ID]) continue;
									
									new label_str[256];
									format
									(
										label_str, 
										sizeof label_str, 
										"\
											Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
											{FFFFFF}Propietario: {"#PRIMARY_COLOR"}%s\n\
											{FFFFFF}Presiona {"#PRIMARY_COLOR"}'Y' {FFFFFF}para entrar.\
										", PROPERTY_INFO[i][property_ID], PI[playerid][pi_NAME]
									);
									UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
								}

								PI[playerid][pi_COINS] -= CHANGE_NAME_COINS_PRICE;
								UpdateReputationTextDraws(playerid);

								mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET name = '%e', coins = %d WHERE id = %d;", PI[playerid][pi_NAME], PI[playerid][pi_COINS], PI[playerid][pi_ID]);
								printf(QUERY_BUFFER);
								mysql_tquery(handle_db, QUERY_BUFFER);
								SendClientMessagef(playerid, -1, "Tu nombre ha sido cambiado a '%s' por %d "SERVER_COIN"", name, CHANGE_NAME_COINS_PRICE);
							}
							else SendClientMessagef(playerid, -1, "No se ha podido cambiar tu nombre.");
						}
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE name = '%e';", name);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad, "s", name);
			}
			return 1;
		}
		case DIALOG_CHANGE_EMAIL:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowDialog(playerid, dialogid);
				
				new password[64 + 1];
				SHA256_PassHash(inputtext, PI[playerid][pi_SALT], password, sizeof password);
			
				if(!strcmp(password, PI[playerid][pi_PASS], false))
				{
					ShowDialog(playerid, DIALOG_CHANGE_EMAIL_EMAIL);
					pTemp(playerid)[pt_BAD_LOGIN_ATTEMP] = 0;
				}
				else // Error
				{
					pTemp(playerid)[pt_BAD_LOGIN_ATTEMP] ++;
					if(pTemp(playerid)[pt_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return Kick(playerid);
					SendClientMessagef(playerid, -1, "Contraseña incorrecta, aviso %d/%d.", pTemp(playerid)[pt_BAD_LOGIN_ATTEMP], MAX_BAD_LOGIN_ATTEMPS);
				}
			}
			return 1;
		}
		case DIALOG_CHANGE_EMAIL_EMAIL:
		{
			if(response)
			{
				new length = strlen(inputtext);
				if(length > 32) return ShowDialog(playerid, dialogid);

				new email[32];
				format(email, 32, "%s", inputtext);
				if(!IsValidEmail(email)) return SendClientMessagef(playerid, -1, "Correo no válido.");
	
				inline OnDialogQueryLoad(newEmail[])
				{
					new rows;
					if(get_rows(rows))
					{
						if(rows) SendClientMessagef(playerid, -1, "El correo electrónico introducido está en uso.");
						else
						{
							format(PI[playerid][pi_EMAIL], 32, "%s", newEmail);
							
							mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET email = '%e' WHERE id = %d;", PI[playerid][pi_EMAIL], PI[playerid][pi_ID]);
							mysql_tquery(handle_db, QUERY_BUFFER);
							SendClientMessagef(playerid, -1, "Tu correo electrónico ha sido cambiado correctamente.");
						}
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE email = '%e';", email);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnDialogQueryLoad, "s", email);
			}
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET:
		{
			if(response)
			{
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] == MAX_CLOSET_SLOTS + 20)
				{
					ShowDialog(playerid, DIALOG_PROPERTY_CLOSET_DLT_ALL);
					return 1;
				}
				
				pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PROPERTY_CLOSET_OPTIONS);
			}
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET_DLT_ALL:
		{
			if(response)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM property_closet WHERE id_property = %d;", PROPERTY_INFO[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][property_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				new tmp_PROPERTY_CLOSET[enum_PROPERTY_CLOSET];
				for(new i = 0; i != MAX_CLOSET_SLOTS; i ++) PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][i] = tmp_PROPERTY_CLOSET;
		
				SendClientMessagef(playerid, -1, "Ha eliminado todo de este armario.");
				Auto_SendPlayerAction(playerid, "tira todas las armas de su armario");
			}
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(!PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_VALID]) return SendClientMessagef(playerid, -1, "No hay nada en ese slot.");
						
						new string[128];
						switch(PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_TYPE]) {
							case BOOT_TYPE_WEAPON: {
								new to_slot = WEAPON_INFO[ PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT] ][weapon_info_SLOT];
								if(PLAYER_WEAPONS[playerid][to_slot][player_weapon_VALID])
								{
									PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
									SendClientMessagef(playerid, -1, "Para sacar esta arma tienes que deshacerte de tu \"%s (%d\" para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ to_slot ][player_weapon_ID] ][weapon_info_NAME], to_slot);
									return 1;
								}
								GivePlayerWeaponEx(playerid, PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT], PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT_EXTRA]);
								RegisterNewPlayerWeapon(playerid, to_slot);
								format(string, sizeof string, "saca un(a) %s del armario.", WEAPON_INFO[ PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT] ][weapon_info_NAME]);
							}
							case BOOT_TYPE_MEDICINES: {
								PI[playerid][pi_MEDICINE] += PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT];
								format(string, sizeof string, "saca medicamentos del armario.");
							}
							case BOOT_TYPE_CANNABIS: {
								PI[playerid][pi_CANNABIS] += PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT];
								format(string, sizeof string, "saca marihuana del armario.");
							}
							case BOOT_TYPE_CRACK: {
								PI[playerid][pi_CRACK] += PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT];
								format(string, sizeof string, "saca crack del armario.");
							}
						}

						mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM property_closet WHERE id = %d;", PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_OBJECT_ID]);
						mysql_tquery(handle_db, QUERY_BUFFER);

						new tmp_PROPERTY_CLOSET[enum_PROPERTY_CLOSET];
						PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ] = tmp_PROPERTY_CLOSET;
						Auto_SendPlayerAction(playerid, string);
					}
					case 1: ShowDialog(playerid, DIALOG_PROPERTY_CLOSET_DELETE);
				}
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_CLOSET);
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET_DELETE:
		{
			if(response)
			{
				SendClientMessagef(playerid, -1, "Eliminado.");
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM property_closet WHERE id = %d;", PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_OBJECT_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				new tmp_PROPERTY_CLOSET[enum_PROPERTY_CLOSET];
				PROPERTY_CLOSET[ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY] ][ pTemp(playerid)[pt_DIALOG_CLOSET_PROPERTY_SLOT] ] = tmp_PROPERTY_CLOSET;
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_CLOSET_OPTIONS);
			return 1;
		}
		case DIALOG_CONFIRM_HOTDOG:
		{
			if(response)
			{
				if(GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_TYPE] == VEHICLE_TYPE_HOTDOG_INGAME)
				{
					new Float:x, Float:y, Float:z, Float:angle;
					GetVehiclePos(pTemp(playerid)[pt_LAST_VEHICLE_ID], x, y, z);
					GetVehicleZAngle(pTemp(playerid)[pt_LAST_VEHICLE_ID], angle);

					inline OnHotdogVehicleInserted()
					{
						new tmp_id;
						tmp_id = cache_insert_id();

						DestroyVehicleEx(pTemp(playerid)[pt_LAST_VEHICLE_ID]);
						new vid = AddHotdogVehicle(x, y, z, angle, HOTDOG_VEHICLES[pTemp(playerid)[pt_LAST_VEHICLE_ID]][hotdog_vehicle_LABEL_COLOUR], tmp_id, true);

						GLOBAL_VEHICLES[vid][gb_vehicle_PARAMS_DOORS] = 1;
						GLOBAL_VEHICLES[vid][gb_vehicle_PARAMS_ENGINE] = 0;
						UpdateVehicleParams(vid);
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO hotdog_vehicles (label_colour, x, y, z, angle) VALUES('%e', %f, %f, %f, %f);",
					HOTDOG_VEHICLES[pTemp(playerid)[pt_LAST_VEHICLE_ID]][hotdog_vehicle_LABEL_COLOUR], x, y, z, angle);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnHotdogVehicleInserted);
				}
				else SendMessage(playerid, "Error en el vehiculo, vuelve a intentarlo.");
			}
		}
		case DIALOG_KEYS_SELECT_PLAYER:
		{
			if(response)
			{
				if(sscanf(inputtext, "u", inputtext[0])) return SendMessage(playerid, "Parametros invalidos.");

				pTemp(playerid)[pt_SELECTED_PLAYER] = inputtext[0];

				if(pTemp(playerid)[pt_SELECTED_PLAYER] == playerid) return SendMessage(playerid, "No puedes ser tu mismo.");

				if(!IsPlayerConnected(pTemp(playerid)[pt_SELECTED_PLAYER])) return SendMessage(playerid, "Jugador Desconectado.");

				if(PI[pTemp(playerid)[pt_SELECTED_PLAYER]][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[pTemp(playerid)[pt_SELECTED_PLAYER]][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendMessage(playerid, "No puedes prestar nada a este jugador");
				
				new Float:pos[3]; GetPlayerPos(pTemp(playerid)[pt_SELECTED_PLAYER], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
				
				if(PlayerTemp[ pTemp(playerid)[pt_SELECTED_PLAYER] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No puedes darle nada a este jugador ahora.");
			
				ShowDialog(playerid, DIALOG_KEYS_SELECT_VEHICLE);
			}
		}
		case DIALOG_KEYS_SELECT_VEHICLE:
		{
			if(response)
			{
				new bool:valid;
				LoopEx(i, MAX_PLAYERS, 0) 					
				{
					if(!IsPlayerConnected(i)) continue;
					if(!PlayerTemp[i][pt_USER_LOGGED]) continue;

					if(PlayerTemp[i][pt_PLAYER_KEYS] == pTemp(playerid)[pt_PLAYER_LISTITEM][listitem] && PlayerTemp[i][pt_PLAYER_KEYS_OWNER] == PI[playerid][pi_ID])
					{
						valid = false;
						break;
					}

					valid = true;
					break;
				}

				if(!valid) return SendMessage(playerid, "Ya prestaste tus llaves a otra persona.");

				PlayerTemp[ pTemp(playerid)[pt_SELECTED_PLAYER] ][pt_PLAYER_KEYS_OWNER] = PI[playerid][pi_ID];
				PlayerTemp[ pTemp(playerid)[pt_SELECTED_PLAYER] ][pt_PLAYER_KEYS] = pTemp(playerid)[pt_PLAYER_LISTITEM][listitem];
				SendMessagef(playerid, "Has prestado tus llaves a %s, Usa /llaves [ID] para quitarselas.", PlayerTemp[  pTemp(playerid)[pt_SELECTED_PLAYER]  ][pt_NAME]);
			}
		}
	}
	return 0;
}//ondialogresponse

GetDatabasePages(count, limit)
{
	return floatround(floatdiv(count, limit), floatround_ceil);
}

AddNewAd(playerid, type, price, text[], modelid, vcol1 = 0, vcol2 = 0)
{
	new Float:rots[4], date[24];
	getDateTime(date);
	switch(type)
	{
		case SHOP_ARTICLE_TYPE_PROPERTY: rots = Float:{345.0, 0.0, 30.0, 1.20};
		case SHOP_ARTICLE_TYPE_VEHICLE: rots = Float:{345.0, 0.0, 330.0, 1.0};
		case SHOP_ARTICLE_TYPE_OTHER: rots = Float:{0.0, 0.0, 330.0, 1.20};
	}
	
	mysql_format
	(
		handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO shop (id_player, type, price, text, modelid, rx, ry, rz, zoom, vcol1, vcol2, date)\
			VALUES (%d, %d, %d, '%e', %d, %f, %f, %f, %f, %d, %d, '%e');\
		",
			PI[playerid][pi_ID], type, price, text, modelid, rots[0], rots[1], rots[2], rots[3], vcol1, vcol2, date
	);
	mysql_tquery(handle_db, QUERY_BUFFER);
	return 1;
}

GetEmptyPlayer_GPS_Slot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++)
	{
		if(!PLAYER_GPS[playerid][i][player_gps_VALID]) return i;
	}
	return -1;
}

stock ReturnPlayerAngle(playerid)
{
	new Float:Angle;
	GetPlayerFacingAngle(playerid, Angle);
	return floatround(Angle);
}

SetPlayer_GPS_Checkpoint(playerid, Float:x, Float:y, Float:z, world, interior)
{
	if(IsValidDynamicCP(pTemp(playerid)[pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(pTemp(playerid)[pt_GPS_CHECKPOINT]);
		pTemp(playerid)[pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	pTemp(playerid)[pt_GPS_CHECKPOINT] = CreateDynamicCP(x, y, z, 5.0, world, interior, playerid, 9999999999.0);
	if(pTemp(playerid)[pt_GPS_TELEPORT]) SetPlayerPosEx(playerid, x, y, z, ReturnPlayerAngle(playerid), interior, world);
	
	new info[1];
	info[0] = CHECKPOINT_TYPE_GPS;
	Streamer_SetArrayData(STREAMER_TYPE_CP, pTemp(playerid)[pt_GPS_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	Streamer_Update(playerid, STREAMER_TYPE_CP);

	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(WORK_VEHICLES[vehicleid][work_vehicle_VALID])
		{
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TAXI)
			{
				if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED])
				{
					if(IsPlayerConnected(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER]))
					{
						if(IsValidDynamicCP(PlayerTemp[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT]))
						{
							DestroyDynamicCP(PlayerTemp[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT]);
							PlayerTemp[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
						}
						PlayerTemp[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT] = CreateDynamicCP(x, y, z, 5.0, world, interior, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], 9999999999.0);
						
						new taxi_info[1];
						taxi_info[0] = CHECKPOINT_TYPE_GPS;
						Streamer_SetArrayData(STREAMER_TYPE_CP, PlayerTemp[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT], E_STREAMER_EXTRA_ID, taxi_info);
						
						Streamer_Update(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], STREAMER_TYPE_CP);
						Auto_SendPlayerAction(playerid, "configura su GPS y se lo muestra al Uber.");
						return 1;
					}
				}
			}
		}
		else if(PlayerTemp[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_OWN_VEHICLE_TAXI])
		{
			if(IsPlayerConnected(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER]))
			{
				if(IsValidDynamicCP(PlayerTemp[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT]))
				{
					DestroyDynamicCP(PlayerTemp[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT]);
					PlayerTemp[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
				}
				PlayerTemp[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT] = CreateDynamicCP(x, y, z, 5.0, world, interior, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], 9999999999.0);
						
				new taxi_info[1];
				taxi_info[0] = CHECKPOINT_TYPE_GPS;
				Streamer_SetArrayData(STREAMER_TYPE_CP, PlayerTemp[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT], E_STREAMER_EXTRA_ID, taxi_info);
						
				Streamer_Update(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], STREAMER_TYPE_CP);

				new driveraction[128]; format(driveraction, 128, "configura su GPS y se lo muestra a %s.", PlayerTemp[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_NAME]);
				Auto_SendPlayerAction(playerid, driveraction);
				return 1;
			}
		}
	}
	
	Auto_SendPlayerAction(playerid, "configura su GPS.");
	return 1;
}
	
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	pTemp(playerid)[pt_LAST_AREA_ID] = areaid;

	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);
	switch(info[0])
	{
		case AREA_TYPE_GANGZONE:
		{
			new index = info[1];
			
			if(TERRITORIES[index][territory_VALID])
			{
				pTemp(playerid)[pt_LAST_TERRITORY] = index;
				if(PI[playerid][pi_CREW])
				{
					if(TERRITORIES[index][territory_WAR])
					{
						SendClientMessagef(playerid, -1, "Este territorio está siendo atacado por la banda '%s'.",CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);
						
						new r, g, b, a;
						HexToRGBA(CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR], r, g, b, a);
						SetPlayerColorEx(playerid, RGBAToHex(r, g, b, 0));
						
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawShowForPlayer(playerid, TERRITORIES[index][territory_TEXTDRAW]);
					}
				}
			}
		}
	}

	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);
	
	switch(info[0])
	{
		case AREA_TYPE_NONE:
		{
			if(areaid == Lumberjack_Area)
			{
				if(pTemp(playerid)[pt_WORKING_IN] == WORK_LUMBERJACK)
				{
					SendClientMessagef(playerid, -1, "Has abandonado el trabajo de leñador porque te has alejado demasiado de la zona.");
					CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
				}
			}
			else if(areaid == Farmer_Area)
			{
				if(pTemp(playerid)[pt_WORKING_IN] == WORK_FARMER) CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
			}
			else if(areaid == Farmer_Vehicles_Area)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
					{
						if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_FARMER)
						{
							SetVehicleToRespawnEx(vehicleid);
							SendMessage(playerid, "Este vehiculo no puede salir de la zona de agricultores.");
						}
					}
				}
			}
			
			if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL)
			{
				if(areaid == Jail_Areas[0] || areaid == Jail_Areas[1] || areaid == Jail_Areas[2] || areaid == Jail_Areas[3] )
				{
					SetPlayerPosEx(playerid, JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);
				}
			}
		}
		case AREA_TYPE_GANGZONE:
		{
			new index = info[1];
			
			if(TERRITORIES[index][territory_VALID])
			{
				if(PI[playerid][pi_CREW])
				{
					SetPlayerNormalColor(playerid);
					TextDrawHideForPlayer(playerid, Textdraws[textdraw_TERRITORY_BOX]);
					TextDrawHideForPlayer(playerid, TERRITORIES[index][territory_TEXTDRAW]);
				}
			}
		}
	}
	return 1;
}

hook OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	new info[1];
	Streamer_GetArrayData(STREAMER_TYPE_CP, checkpointid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case CHECKPOINT_TYPE_GPS:
		{
			DestroyDynamicCP(pTemp(playerid)[pt_GPS_CHECKPOINT]);
			pTemp(playerid)[pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
		}
		case CHECKPOINT_TYPE_UNLOAD_TRUCK:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRUCK][pwork_SET]) return 1;
			if(pTemp(playerid)[pt_WORKING_IN] != WORK_TRUCK) return 1;
	
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != PI[playerid][pi_ID]) return SendClientMessagef(playerid, -1, "Solo aceptaremos la carga del conductor de este camión.");
			
			DestroyDynamicCP(pTemp(playerid)[pt_TRUCK_CHECKPOINT]);
			pTemp(playerid)[pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
			
			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
				
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);
			
			TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING] = true;
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], "");
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
				
			pTemp(playerid)[pt_TRUCK_LOADING_VALUE] = 40.0;
			UpdatePlayerLoadingTruckSize(playerid);
			KillTimer(pTemp(playerid)[pt_TIMERS][7]);
			KillTimer(pTemp(playerid)[pt_TIMERS][9]);
			pTemp(playerid)[pt_TIMERS][9] = SetTimerEx("TruckUnLoadUp", 1000, false, "ii", playerid, vehicleid);
		}
		case CHECKPOINT_TYPE_FINISH_TRUCK:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRUCK][pwork_SET]) return 1;
			if(pTemp(playerid)[pt_WORKING_IN] != WORK_TRUCK) return 1;
	
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return 1;
			if(!TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != PI[playerid][pi_ID]) return SendClientMessagef(playerid, -1, "Solo le pagaremos al conductor que entregó la mercancía.");
			
			DestroyDynamicCP(pTemp(playerid)[pt_TRUCK_CHECKPOINT]);
			pTemp(playerid)[pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
			
			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
			
			new work_extra_payment;
			if(work_info[WORK_TRUCK][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TRUCK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_TRUCK][pwork_LEVEL], work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT];
			
				if(PI[playerid][pi_VIP]) work_extra_payment += VIP_WORK_EXTRA_PAY;
			}
			
			if(GivePlayerCash(playerid, Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment, true, false)) 
			{
				PLAYER_WORKS[playerid][WORK_TRUCK][pwork_LEVEL] ++;
				PI[playerid][pi_TRUCK_BONUS] ++;

				if(PI[playerid][pi_TRUCK_BONUS] >= 15)
				{
					SendMessagef(playerid, "~y~!Felicidades¡ ~w~Has recibido un bono de ~g~%s$~w~ por tu gran trabajo.", number_format_dash(TRUCK_BONUS_PRICE));
					GivePlayerCash(playerid, TRUCK_BONUS_PRICE, true, false);

					PI[playerid][pi_TRUCK_BONUS] = 0;
				}
				else SendMessagef(playerid, "Te faltan ~r~%d~w~ Recorridos para obtener la bonificacion.", 15 - PI[playerid][pi_TRUCK_BONUS]);
				
				new string[64];
				format(string, sizeof string, "+%s$", number_format_thousand(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment));
				GameTextForPlayer(playerid, string, 5000, 1);
				SetVehicleToRespawnEx(vehicleid);
			}
		}
		case CHECKPOINT_TYPE_TRASH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET]) return DestroyPlayerTrashCheckpoint(playerid);
			if(pTemp(playerid)[pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
			if(!pTemp(playerid)[pt_TRASH_PASSENGER]) return 1;
			
			new driver = TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
			SendClientMessage(driver, -1, "{"#SILVER_COLOR"}Espera mientras tu compañero recoge la basura.");
			
			new Float:offset = floatdiv(PLAYER_WORKS[playerid][WORK_TRASH][pwork_LEVEL], 10);
			if(offset > 30.0) offset = 30.0;
			
			pTemp(playerid)[pt_RECYCLE_BIN_VALUE] = 10.0 + offset;
			UpdatePlayerTrashRecycleSize(playerid);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
			
			TogglePlayerControllableEx(playerid, false);
			SetCameraBehindPlayer(playerid);
			ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);
			
			KillTimer(pTemp(playerid)[pt_TIMERS][10]);
			pTemp(playerid)[pt_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
		}
		case CHECKPOINT_TYPE_FINISH_TRASH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET]) return DestroyPlayerTrashCheckpoint(playerid);
			if(pTemp(playerid)[pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
			if(!pTemp(playerid)[pt_TRASH_DRIVER]) return 1;
			
			new route = TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
			new money = TRASH_OBJECTS[route][trash_route_MONEY];
			
			new driver_work_extra_payment, passenger_work_extra_payment;
			if(work_info[WORK_TRASH][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP] > 0)
			{
				driver_work_extra_payment = (work_info[WORK_TRASH][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_TRASH][pwork_LEVEL], work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT] != 0) if(driver_work_extra_payment > work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT]) driver_work_extra_payment = work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT];
				if(PI[playerid][pi_VIP]) driver_work_extra_payment += VIP_WORK_EXTRA_PAY;
				
				passenger_work_extra_payment = (work_info[WORK_TRASH][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[ TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][WORK_TRASH][pwork_LEVEL], work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT] != 0) if(passenger_work_extra_payment > work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT]) passenger_work_extra_payment = work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT];
				if(PI[ TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][pi_VIP]) passenger_work_extra_payment += VIP_WORK_EXTRA_PAY;
			}
			
			GivePlayerCash(playerid, money + driver_work_extra_payment, true, false);
			SendClientMessagef(playerid, -1, "Trabajo finalizado, has ganado %s dólares.", number_format_thousand(money + driver_work_extra_payment));
			PLAYER_WORKS[playerid][WORK_TRASH][pwork_LEVEL] ++;
			
			GivePlayerCash(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], money + passenger_work_extra_payment, true, false);
			SendClientMessagef(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "Trabajo finalizado, has ganado %s dólares.", number_format_thousand(money + passenger_work_extra_payment));
			PLAYER_WORKS[ TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][WORK_TRASH][pwork_LEVEL] ++;
			
			CancelTrashWork(playerid, TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], pTemp(playerid)[pt_TRASH_VEHICLE_ID]);
		}
		case CHECKPOINT_TYPE_LUMBERJACK:
		{
			if(pTemp(playerid)[pt_WORKING_IN] == WORK_LUMBERJACK)
			{
				DestroyDynamicCP(pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT]);
				pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
				
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid, 8);
				pTemp(playerid)[pt_PLAYER_CARRYING_TREE] = false;
				ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
				
				new work_extra_payment;
				if(work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY] > 0 && work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_LUMBERJACK][pwork_LEVEL], work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT];
					
					if(PI[playerid][pi_VIP]) work_extra_payment += VIP_WORK_EXTRA_PAY;
				}
				PLAYER_WORKS[playerid][WORK_LUMBERJACK][pwork_LEVEL] ++;
				
				new amount = minrand(40, 50) + work_extra_payment;
				GivePlayerCash(playerid, amount, true, false);
				
				new string[64];
				format(string, sizeof string, "+%d$", amount);
				GameTextForPlayer(playerid, string, 5000, 1);
			}
			else
			{
				DestroyDynamicCP(pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT]);
				pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
			}
		}
		case CHECKPOINT_TYPE_PIZZA_DEL:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
			pTemp(playerid)[pt_PIZZA_PROCCESS] --;
			pTemp(playerid)[pt_DELIVERED_PIZZAS] ++;
			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			ApplyDynamicActorAnimation(pTemp(playerid)[pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
			ApplyDynamicActorAnimation(pTemp(playerid)[pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
			DestroyDynamicCP(pTemp(playerid)[pt_PIZZA_CHECKPOINT]);
			PIZZA_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT_DELI] = true;
			pTemp(playerid)[pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
			
			SendClientMessagef(playerid, -1, "Genial, vuelve a subir a la moto para continuar.");
		}
		case CHECKPOINT_TYPE_PIZZA_FINISH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED]) return 1;
			if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] != PI[playerid][pi_ID]) return SendClientMessagef(playerid, -1, "Solo le pagaremos al conductor que realizó el trabajo.");
		
			new work_extra_payment;
			if(work_info[WORK_PIZZA][work_info_EXTRA_PAY] > 0 && work_info[WORK_PIZZA][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_PIZZA][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_PIZZA][pwork_LEVEL], work_info[WORK_PIZZA][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT];
			
				if(PI[playerid][pi_VIP]) work_extra_payment += VIP_WORK_EXTRA_PAY;
			}
			
			PLAYER_WORKS[playerid][WORK_PIZZA][pwork_LEVEL] ++;
			new money = (pTemp(playerid)[pt_DELIVERED_PIZZAS] * 200) + work_extra_payment;
			GivePlayerCash(playerid, money, true, false);
			SendClientMessagef(playerid, -1, "Gracias por tu trabajo, has repartido %d pizzas y has ganado %s dólares.", pTemp(playerid)[pt_DELIVERED_PIZZAS], number_format_thousand(money));
			
			CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
		}
		default: return 1;
	}
	return 1;
}

RegisterNewPlayer_GPS_Site(playerid, slot)
{
	inline OnPgpsInserted()
	{
		PLAYER_GPS[playerid][slot][player_gps_ID] = cache_insert_id();
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pgps (id_player, name, x, y, z, world, interior) VALUES(%d, '%e', %f, %f, %f, %d, %d);", PI[playerid][pi_ID], PLAYER_GPS[playerid][slot][player_gps_NAME], PLAYER_GPS[playerid][slot][player_gps_X], PLAYER_GPS[playerid][slot][player_gps_Y], PLAYER_GPS[playerid][slot][player_gps_Z], PLAYER_GPS[playerid][slot][player_gps_WORLD], PLAYER_GPS[playerid][slot][player_gps_INTERIOR]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPgpsInserted);
	return 1;
}

SetPlayerToys(playerid)
{
	for(new i = 0; i != MAX_SU_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
		
	for(new i = 0; i != MAX_SU_TOYS; i ++)
	{
		if(i >= MAX_NU_TOYS && !PI[playerid][pi_VIP]) break;

		if(PLAYER_TOYS[playerid][i][player_toy_VALID])
		{
			if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid, 
					i,
					PLAYER_TOYS[playerid][ i ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ i ][player_toy_BONE],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ i ][player_toy_COLOR_2]
				);
			}
		}
	}
	
	return 1;
}

UpdatePlayerToy(playerid, index)
{
	RemovePlayerAttachedObject(playerid, index);
	SetPlayerAttachedObject
	(
		playerid, 
		index,
		PLAYER_TOYS[playerid][ index ][player_toy_MODELID],
		PLAYER_TOYS[playerid][ index ][player_toy_BONE],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_X],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_X],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_X],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_COLOR_1],
		PLAYER_TOYS[playerid][ index ][player_toy_COLOR_2]
	);
	return 1;
}

EditPlayerToy(playerid)
{
	if(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) RemovePlayerAttachedObject(playerid, pTemp(playerid)[pt_SELECTED_TOY_SLOT]);
				
	SetPlayerAttachedObject
	(
		playerid, 
		pTemp(playerid)[pt_SELECTED_TOY_SLOT],
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
	);
	
	SendClientMessagef(playerid, -1, "Ajusta el accesorio y haz clic en el icono de guardar, si pulsas 'ESCAPE' no se guardará la configuración.");
	SendClientMessagef(playerid, -1, "Mantén presionado 'ESPACIO' para mover la cámara.");
	EditAttachedObject(playerid, pTemp(playerid)[pt_SELECTED_TOY_SLOT]);
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(index != pTemp(playerid)[pt_SELECTED_TOY_SLOT]) return 0;
	
    if(response)
    {
        if(fScaleX >= 1.5 || fScaleY >= 1.5 || fScaleZ >= 1.5)
	    {
	        SendClientMessagef(playerid, -1, "El tamaño del accesorio es demasiado grande.");
			
			RemovePlayerAttachedObject(playerid, pTemp(playerid)[pt_SELECTED_TOY_SLOT]);
			if(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid, 
					pTemp(playerid)[pt_SELECTED_TOY_SLOT],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
				);
			}
			return 1;
	    }
        if((fOffsetX >= 0.6 || -0.6 >= fOffsetX) || (fOffsetY >= 0.6 || -0.6 >= fOffsetY) || (fOffsetZ >= 0.6 || -0.6 >= fOffsetZ))
        {
            SendClientMessagef(playerid, -1, "La posición del objeto está demasiado lejos de ti.");
			
			RemovePlayerAttachedObject(playerid, pTemp(playerid)[pt_SELECTED_TOY_SLOT]);
			if(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid, 
					pTemp(playerid)[pt_SELECTED_TOY_SLOT],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
				);
			}
			return 1;
        }
        
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X] = fOffsetX;
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y] = fOffsetY;
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z] = fOffsetZ;
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X] = fRotX;
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y] = fRotY;
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z] = fRotZ;
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X] = fScaleX;
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y] = fScaleY;
		PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z] = fScaleZ;
		
		if(!PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = true;
		
        SendClientMessagef(playerid, -1, "Accesorio '%s' actualizado.", PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
    }
    else
    {
        RemovePlayerAttachedObject(playerid, pTemp(playerid)[pt_SELECTED_TOY_SLOT]);
		if(PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
		{
			SetPlayerAttachedObject
			(
				playerid, 
				pTemp(playerid)[pt_SELECTED_TOY_SLOT],
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
				PLAYER_TOYS[playerid][ pTemp(playerid)[pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
			);
		}
		
        SendClientMessagef(playerid, -1, "Has cancelado la edición.");
    }
    return 1;
}

forward ConnectDatabase();
public ConnectDatabase()
{
	new MySQLOpt:option_id = mysql_init_options();
	mysql_set_option(option_id, AUTO_RECONNECT, true);
	mysql_set_option(option_id, SERVER_PORT, 3306);
	handle_db = mysql_connect(IP_DB, USER_DB, PASS_DB, NAME_DB, option_id);
	mysql_set_charset("latin1", handle_db);

	if(mysql_errno(handle_db) == 0)
	{
		print("BASE DE DATOS CARGADA CORRECTAMENTE");
		OnDatabaseConnected();
	}
	else
	{
		print("CONEXION >>FALLIDA<< CON LA BASE DE DATOS");
		SetTimer("CloseServer", 3 * 1000, false);
	}
	return 1;
}

forward OnDatabaseConnected();
stock OnDatabaseConnected() 
{
	SanAndreas();
	LoadServerInfo();
}

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	switch(errorid) 
	{
		case CR_SERVER_GONE_ERROR: printf("[MySQL] [ERROR]: Se ha perdido la conexión con el servidor (%d)", _:handle);
		case ER_SYNTAX_ERROR: printf("[MySQL] [ERROR]: Syntax error, query: %s (%d)", query, _:handle);
		default: printf("[MySQL] [ERROR] errorid: %d, error: %s, callback: %s, query: %s, handle: %d", errorid, error, callback, query, _:handle);
	}
	return 1;
}

ClearPlayerChat(playerid)
{
	for(new i = 0; i != 32; i++) SendClientMessage(playerid, -1, " ");
	return 1;
}

RegisterBankAccountTransaction(from_id, to_id, transaction_type, amount)
{
	new date[24];
	getDateTime(date);
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bank_movements (date, type, from_id, to_id, amount) VALUES('%e', %d, %d, %d, %d);", date, transaction_type, from_id, to_id, amount);
	mysql_tquery(handle_db, QUERY_BUFFER);
	return 1;
}

RegisterNewPlayer(playerid)
{
	if(pTemp(playerid)[pt_USER_EXIST]) return 0;
	
	inline OnPlayerInserted()
	{
		PI[playerid][pi_ID] = cache_insert_id();
		if(PI[playerid][pi_ID])
		{
			pTemp(playerid)[pt_USER_EXIST] = true;
			PI[playerid][pi_PHONE_NUMBER] = getPhoneNumber(PI[playerid][pi_ID]);
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET phone_number = %d WHERE id = %d;", PI[playerid][pi_PHONE_NUMBER], PI[playerid][pi_ID]);
			mysql_tquery(handle_db, QUERY_BUFFER);
			CreateDefaultContacts(playerid);
			CallLocalFunction("OnPlayerRegister", "i", playerid);
		}
		else Kick(playerid);
		return 1;
	}

	mysql_format
	(
		handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, 
		"\
			INSERT INTO player\
			(\
				name,\
				ip,\
				email,\
				salt,\
				pass,\
				reg_date,\
				last_connection,\
				last_connection_timestamp,\
				level,\
				rep,\
				connected,\
				playerid,\
				time_for_rep,\
				skin,\
				cash,\
				pos_x,\
				pos_y,\
				pos_z,\
				angle,\
				state,\
				fight_style,\
				health,\
				hungry,\
				thirst,\
				config_sounds,\
				config_audio,\
				config_time,\
				config_hud,\
				config_admin,\
				phone_visible_number,\
				doubt_channel,\
				vip_expire_date\
			) \
			VALUES\
			(\
				'%e', '%e', '%e', '%e', '%e', '%e', '%e', %d, %d, %d, %d, %d, %d, %d, %d, %f, %f, %f, %f, %d, %d, %f, %f, %f, %d, %d, %d, %d, %d, %d, %d, '0000-00-00 00:00:00'\
			);\
		",
			PI[playerid][pi_NAME], PI[playerid][pi_IP], PI[playerid][pi_EMAIL], PI[playerid][pi_SALT],
			PI[playerid][pi_PASS], PI[playerid][pi_REG_DATE], PI[playerid][pi_LAST_CONNECTION], PI[playerid][pi_LAST_CONNECTION_TIMESTAMP],
			PI[playerid][pi_LEVEL], PI[playerid][pi_REP], PI[playerid][pi_CONNECTED], PI[playerid][pi_PLAYERID],
			PI[playerid][pi_TIME_FOR_REP], PI[playerid][pi_SKIN], PI[playerid][pi_CASH], PI[playerid][pi_POS_X],
			PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], PI[playerid][pi_STATE],
			PI[playerid][pi_FIGHT_STYLE], PI[playerid][pi_HEALTH], PI[playerid][pi_HUNGRY], PI[playerid][pi_THIRST],
			PI[playerid][pi_CONFIG_SOUNDS], PI[playerid][pi_CONFIG_AUDIO], PI[playerid][pi_CONFIG_TIME],
			PI[playerid][pi_CONFIG_HUD], PI[playerid][pi_CONFIG_ADMIN], PI[playerid][pi_PHONE_VISIBLE_NUMBER], PI[playerid][pi_DOUBT_CHANNEL]
	);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPlayerInserted);
	return 1;
}

CreateDefaultContacts(playerid)
{
	new slot;
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "policía");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 911;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Banco");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 6740;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Aseguradora");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 38350;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Uber");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 450;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	return 1;
}

stock TimeConvert(seconds)
{
	new tmp[16];
 	new minutes = floatround(seconds/60);
  	seconds -= minutes*60;
   	format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
   	return tmp;
}

stock TimeConvertEx(sec, &days, &hours, &minutes, &seconds)
{
	days = floatround(sec / 86400);
	hours = floatround((sec - (days * 86400)) / 3600);
	minutes = floatround((sec - (days * 86400) - (hours * 3600)) / 60);
	seconds = sec % 60;
   	return 1;
}

stock TimeConvertExAsText(sec, bool:lastMinute = false)
{
	new string[128] = "", auxString[32];
	
	if(lastMinute && sec < 60) {
		string = "menos de 1 minuto";
		return string;
	}

	if(sec <= 0) {
		string = "nada";
		return string;
	}

	new days, hours, minutes, seconds;
	TimeConvertEx(sec, days, hours, minutes, seconds);

	if(days) {
		format(auxString, sizeof auxString, "%d días", days);
		strcat(string, auxString);
	}

	if(hours) {
		if(strlen(string) > 0) strcat(string, " ");
		format(auxString, sizeof auxString, "%d horas", hours);
		strcat(string, auxString);
	}

	if(minutes) {
		if(strlen(string) > 0) strcat(string, " ");
		format(auxString, sizeof auxString, "%d minutos", minutes);
		strcat(string, auxString);
	}

	if(seconds) {
		if(strlen(string) > 0) strcat(string, " ");
		format(auxString, sizeof auxString, "%d segundos", seconds);
		strcat(string, auxString);
	}
   	return string;
}

ProxDetector(playerid, Float:radi, string[], col1, col2, col3, col4, col5, div = 0)
{
	new line1_str[165], line2_str[165], bool:line2_used;
	
	if(div)
	{
		format(line1_str, div + 1, "%s", string);
		if(strlen(string) > div)
		{
			format(line2_str, sizeof line2_str, " %s", string[div]);
			line2_used = true;
		}
	}
	else format(line1_str, sizeof line1_str, "%s", string);
	
	new Float:oldposx, Float:oldposy, Float:oldposz, current_vw = GetPlayerVirtualWorld(playerid), current_int = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	
	LoopEx(i, MAX_PLAYERS, 0) 					
	{
		if(!IsPlayerConnected(i)) continue;
		if(!PlayerTemp[i][pt_USER_LOGGED]) continue;
		if(GetPlayerVirtualWorld(i) != current_vw) continue;
		if(GetPlayerInterior(i) != current_int) continue;
		
		if(IsPlayerInRangeOfPoint(i, radi/16, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col1, line1_str);
			if(div && line2_used) SendClientMessage(i, col1, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi/8, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col2, line1_str);
			if(div && line2_used) SendClientMessage(i, col2, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi/4, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col3, line1_str);			
			if(div && line2_used) SendClientMessage(i, col3, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi/2, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col4, line1_str);	
			if(div && line2_used) SendClientMessage(i, col4, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col5, line1_str);
			if(div && line2_used) SendClientMessage(i, col5, line2_str);
		}
	}
	return 1;
}

NearbyMessage(Float:pos_x, Float:pos_y, Float:pos_z, current_int, current_vw, Float:radi, col, const string[])
{
	LoopEx(i, MAX_PLAYERS, 0) 					
	{
		if(!IsPlayerConnected(i)) continue;
		if(!PlayerTemp[i][pt_USER_LOGGED]) continue;
		if(GetPlayerVirtualWorld(i) != current_vw) continue;
		if(GetPlayerInterior(i) != current_int) continue;
		
		if(IsPlayerInRangeOfPoint(i, radi, pos_x, pos_y, pos_z)) SendClientMessage(i, col, string);
	}
	return 1;
}

IsValidRPName(const string[])
{
	new Regex:reg_exp = Regex_New("[A-Z][a-z]+_[A-Z][a-z]{1,3}[A-Z]?[a-z]*");
	new result = Regex_Check(string, reg_exp);
	Regex_Delete(reg_exp);
	return result;
}

IsValidEmail(const string[])
{
	new Regex:reg_exp = Regex_New("[a-zA-Z0-9_\\.]+@([a-zA-Z0-9\\-]+\\.)+[a-zA-Z]{2,4}"); 
	new result = Regex_Check(string, reg_exp); 
	Regex_Delete(reg_exp); 
	return result; 
}

KickEx(playerid, time = 0)
{
	pTemp(playerid)[pt_KICKED] = true;
	if(!time) Kick(playerid);
	else
	{
		KillTimer(pTemp(playerid)[pt_TIMERS][0]);
		pTemp(playerid)[pt_TIMERS][0] = SetTimerEx("KickPlayer", time, false, "i", playerid);
	}
	return 1;
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
	return Kick(playerid);
}

SetRolePlayNames(playerid)
{
	if(isnull(pTemp(playerid)[pt_NAME])) return 0;
	
	new name[24], bool:underscore;
	format(name, 24, "%s", pTemp(playerid)[pt_NAME]);

	for(new i = 0; i < 24; i++) 
	{
		if(name[i] == '_')
		{
			if(!underscore)
			{
				strmid(pTemp(playerid)[pt_FIRST_NAME], name, 0, i);
				strmid(pTemp(playerid)[pt_SUB_NAME], name, i + 1, 24);
				underscore = true;
			}
		}
	}

	UpdateReputationTextDraws(playerid);
	return 1;
}

stock CheckPlayerSanctions(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;
	
	inline OnJailsDataLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new autor_name[24], reason[32], autor_id, time;
				reg_int(i, "autor_id", autor_id);
				reg_name(i, "autor_name", autor_name);
				reg_name(i, "reason", reason);
				reg_int(i, "time", time);

				SavePlayerLastPos(playerid);
				StopAudioStreamForPlayer(playerid);
				CancelEdit(playerid);
				HidePlayerDialog(playerid);
				CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
				pTemp(playerid)[pt_HUNGRY_MESSAGE] = false;
				pTemp(playerid)[pt_THIRST_MESSAGE] = false;
				pTemp(playerid)[pt_PLAYER_IN_ATM] = false;
				pTemp(playerid)[pt_CUFFED] = false;
				pTemp(playerid)[pt_CUFFING] = false;
				pTemp(playerid)[pt_PLAYER_WAITING_MP3_HTTP] = false;
				if(pTemp(playerid)[pt_WANT_TAXI])
				{
					pTemp(playerid)[pt_WANT_TAXI] = false;
					DisablePlayerTaxiMark(playerid);
				}
				if(pTemp(playerid)[pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
				if(pTemp(playerid)[pt_GPS_MAP]) HidePlayerGpsMap(playerid);

				PI[playerid][pi_POLICE_JAIL_ID] = 0;
				JailPlayer(playerid, time * 60);
				SendClientMessagef(playerid, -1, "{"#SILVER_COLOR"}Te quedan %s minutos de sanción, razón: %s.", TimeConvert(time * 60), reason);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				new str[145]; format(str, 145, "{"#RED_COLOR"}el %s (DB_ID: %d) sancionó a %s (%d).", autor_name, autor_id, PI[playerid][pi_NAME], playerid);
				SendAdminAd(-1, str);

				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM jails WHERE id_player = %d;", PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
			}
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM jails WHERE id_player = %d LIMIT 1;", PI[playerid][pi_ID]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnJailsDataLoad);
	return 1;
}

LoadPlayerPhoneBook(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;
	
	inline OnPhoneBookLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new id, name[24], number;
				reg_int(i, "id", id);
				reg_name(i, "name", name);
				reg_int(i, "number", number);
				
				PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID] = true;
				PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_ID] = id;
				format(PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], 24, "%s", name);
				PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER] = number;
			}
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pbook WHERE id_player = %d LIMIT %d;", PI[playerid][pi_ID], MAX_PHONE_CONTACTS);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPhoneBookLoad);
	return 1;
}

RegisterNewPlayerPhoneBook(playerid, slot)
{
	inline OnContactInserted()
	{
		PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_ID] = cache_insert_id();
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pbook (id_player, name, number) VALUES (%d, '%e', %d);", PI[playerid][pi_ID], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnContactInserted);
	return 1;
}

RegisterPhoneMessage(from_id, to_id, message[], offline = 0)
{
	new date[24], from_id_insert[24] = "NULL", to_id_insert[24] = "NULL";
	getDateTime(date);
	if(from_id) format(from_id_insert, 24, "%d", from_id);
	if(to_id) format(to_id_insert, 24, "%d", to_id);

	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pmessages (from_id, to_id, message, date, offline) VALUES (%s, %s, '%e', '%e', %d);", from_id_insert, to_id_insert, message, date, offline);
	mysql_tquery(handle_db, QUERY_BUFFER);
	return 1;
}


forward NoCallResponse(playerid);
public NoCallResponse(playerid)
{
	if(!pTemp(playerid)[pt_PLAYER_IN_CALL]) return 0;
	if(pTemp(playerid)[pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 0;
	if(pTemp(playerid)[pt_PLAYER_PHONE_CALL_STATE] != CALL_STATE_WAITING_RESPONSE) return 0;
	
	EndPhoneCall(playerid);
	return 1;
}

EndPhoneCall(playerid)
{
	if(!pTemp(playerid)[pt_PLAYER_IN_CALL]) return 0;
	
	if(pTemp(playerid)[pt_POLICE_CALL_NAME] || pTemp(playerid)[pt_POLICE_CALL_DESCRIPTION])
	{
		pTemp(playerid)[pt_PLAYER_IN_CALL] = false;
		pTemp(playerid)[pt_POLICE_CALL_NAME] = false;
		pTemp(playerid)[pt_POLICE_CALL_DESCRIPTION] = false;
		return 1;
	}
	
	if(pTemp(playerid)[pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 0;
	if(pTemp(playerid)[pt_PLAYER_PHONE_CALL_STATE] == CALL_GAME_STATE_NONE) return 0;
	
	new to_playerid = pTemp(playerid)[pt_PLAYER_PHONE_CALL_PLAYERID];
	switch(pTemp(playerid)[pt_PLAYER_PHONE_CALL_STATE])
	{
		case CALL_STATE_WAITING_RESPONSE:
		{
			KillTimer(pTemp(playerid)[pt_TIMERS][6]);
			
			PlayerTemp[to_playerid][pt_PLAYER_IN_CALL] = false;
			PlayerTemp[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PlayerTemp[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
		}
		case CALL_STATE_INCOMING_CALL:
		{
			SendClientMessage(to_playerid, -1, "{"#SILVER_COLOR"}No respondieron el teléfono...");
			KillTimer(PlayerTemp[to_playerid][pt_TIMERS][6]);
			
			PlayerTemp[to_playerid][pt_PLAYER_IN_CALL] = false;
			PlayerTemp[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PlayerTemp[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
		}
		case CALL_STATE_ESTABLISHED:
		{
			SendClientMessage(to_playerid, -1, "{"#PRIMARY_COLOR"}Llamada finalizada.");
			PlayerTemp[to_playerid][pt_PLAYER_IN_CALL] = false;
			PlayerTemp[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PlayerTemp[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
			
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
	}
	
	pTemp(playerid)[pt_PLAYER_IN_CALL] = false;
	pTemp(playerid)[pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
	pTemp(playerid)[pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
	return 1;
}

convertPhoneNumber(playerid, number)
{
	new f_string[24], bool:exists;
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;
		if(number == PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER])
		{
			exists = true;
			format(f_string, sizeof f_string, "%s", PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME]);
			break;
		}
	}

	if(!exists) format(f_string, sizeof f_string, "%d", number);
	return f_string;
}

GetEmptyPlayerPhoneBookSlot(playerid)
{
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) return i;
	}
	return -1;
}

RegisterNewPlayerPocketObject(playerid, slot)
{
	inline OnPfoodInserted()
	{
		PLAYER_POCKET[playerid][slot][player_pocket_object_ID] = cache_insert_id();
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pfoods (id_player, name, hungry, thirst, drunk) VALUES (%d, '%e', %f, %f, %d);", PI[playerid][pi_ID], PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST], PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPfoodInserted);
	return 1;
}

LoadPlayerPocketData(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;
	
	inline OnPfoodsLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				PLAYER_POCKET[playerid][i][player_pocket_VALID] = true;
				reg_int(i, "id", PLAYER_POCKET[playerid][i][player_pocket_object_ID]);
				reg_name(i, "name", PLAYER_POCKET[playerid][i][player_pocket_object_NAME]);
				reg_float(i, "hungry", PLAYER_POCKET[playerid][i][player_pocket_object_HUNGRY]);
				reg_float(i, "thirst", PLAYER_POCKET[playerid][i][player_pocket_object_THIRST]);
				reg_int(i, "drunk", PLAYER_POCKET[playerid][i][player_pocket_object_DRUNK]);
			}
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pfoods WHERE id_player = %d;", PI[playerid][pi_ID]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPfoodsLoad);
	return 1;
}

TransferPlayerPocketObject(from_playerid, from_slot, to_playerid, to_slot)
{
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pfoods SET id_player = %d WHERE id = %d;", PI[to_playerid][pi_ID], PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);
	
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_VALID] = true;
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_ID] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID];
	format(PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_NAME], 24, "%s", PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_NAME]);
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_HUNGRY] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_HUNGRY];
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_THIRST] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_THIRST];
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_DRUNK] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_DRUNK];
	
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_VALID] = false;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID] = 0;
	format(PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_NAME], 24, "");
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_HUNGRY] = 0.0;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_THIRST] = 0.0;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_DRUNK] = 0;
	return 1;
}

DeletePlayerPocketObject(playerid, slot)
{
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pfoods WHERE id = %d;", PLAYER_POCKET[playerid][slot][player_pocket_object_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);
	
	PLAYER_POCKET[playerid][slot][player_pocket_VALID] = false;
	PLAYER_POCKET[playerid][slot][player_pocket_object_ID] = 0;
	format(PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], 24, "");
	PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY] = 0.0;
	PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST] = 0.0;
	PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK] = 0;
	return 1;
}

GetEmptyPlayerPocketSlot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
	{
		if(!PLAYER_POCKET[playerid][i][player_pocket_VALID]) return i;
	}
	return -1;
}

LoadPlayerGPSData(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;
	
	inline OnPgpsLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				PLAYER_GPS[playerid][i][player_gps_VALID] = true;
				reg_int(i, "id", PLAYER_GPS[playerid][i][player_gps_ID]);
				reg_name(i, "name", PLAYER_GPS[playerid][i][player_gps_NAME]);
				reg_float(i, "x", PLAYER_GPS[playerid][i][player_gps_X]);
				reg_float(i, "y", PLAYER_GPS[playerid][i][player_gps_Y]);
				reg_float(i, "z", PLAYER_GPS[playerid][i][player_gps_Z]);
				reg_int(i, "world", PLAYER_GPS[playerid][i][player_gps_WORLD]);
				reg_int(i, "interior", PLAYER_GPS[playerid][i][player_gps_INTERIOR]);
				
			}
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pgps WHERE id_player = %d;", PI[playerid][pi_ID]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPgpsLoad);
	return 1;
}

LoadPlayerToys(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;
	
	inline OnPlayerToysLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				PLAYER_TOYS[playerid][i][player_toy_VALID] = true;
				reg_int(i, "id", PLAYER_TOYS[playerid][i][player_toy_ID]);
				reg_name(i, "name", PLAYER_TOYS[playerid][i][player_toy_NAME]);
				reg_int(i, "attached", PLAYER_TOYS[playerid][i][player_toy_ATTACHED]);
				reg_int(i, "modelid", PLAYER_TOYS[playerid][i][player_toy_MODELID]);
				reg_int(i, "bone", PLAYER_TOYS[playerid][i][player_toy_BONE]);
				reg_float(i, "offset_x", PLAYER_TOYS[playerid][i][player_toy_OFFSET_X]);
				reg_float(i, "offset_y", PLAYER_TOYS[playerid][i][player_toy_OFFSET_Y]);
				reg_float(i, "offset_z", PLAYER_TOYS[playerid][i][player_toy_OFFSET_Z]);
				reg_float(i, "rot_x", PLAYER_TOYS[playerid][i][player_toy_ROT_X]);
				reg_float(i, "rot_y", PLAYER_TOYS[playerid][i][player_toy_ROT_Y]);
				reg_float(i, "rot_z", PLAYER_TOYS[playerid][i][player_toy_ROT_Z]);
				reg_float(i, "scale_x", PLAYER_TOYS[playerid][i][player_toy_SCALE_X]);
				reg_float(i, "scale_y", PLAYER_TOYS[playerid][i][player_toy_SCALE_Y]);
				reg_float(i, "scale_z", PLAYER_TOYS[playerid][i][player_toy_SCALE_Z]);
				reg_int(i, "color1", PLAYER_TOYS[playerid][i][player_toy_COLOR_1]);
				reg_int(i, "color2", PLAYER_TOYS[playerid][i][player_toy_COLOR_2]);
			}
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM ptoys WHERE id_player = %d;", PI[playerid][pi_ID]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPlayerToysLoad);
	return 1;
}

SavePlayerToys(playerid)
{
	if(!PI[playerid][pi_ID]) return 0;
	
	for(new i = 0; i != MAX_SU_TOYS; i ++)
	{
		if(!PLAYER_TOYS[playerid][i][player_toy_VALID]) continue;
		mysql_format
		(
			handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, 
			"\
				UPDATE ptoys SET \
					name = '%e',\
					attached = %d,\
					modelid = %d,\
					bone = %d,\
					offset_x = %f,\
					offset_y = %f,\
					offset_z = %f,\
					rot_x = %f,\
					rot_y = %f,\
					rot_z = %f,\
					scale_x = %f,\
					scale_y = %f,\
					scale_z = %f,\
					color1 = %d,\
					color2 = %d \
				WHERE id = %d;\
			",
			PLAYER_TOYS[playerid][i][player_toy_NAME], PLAYER_TOYS[playerid][i][player_toy_ATTACHED], PLAYER_TOYS[playerid][i][player_toy_MODELID],
			PLAYER_TOYS[playerid][i][player_toy_BONE], PLAYER_TOYS[playerid][i][player_toy_OFFSET_X], PLAYER_TOYS[playerid][i][player_toy_OFFSET_Y],
			PLAYER_TOYS[playerid][i][player_toy_OFFSET_Z], PLAYER_TOYS[playerid][i][player_toy_ROT_X], PLAYER_TOYS[playerid][i][player_toy_ROT_Y],
			PLAYER_TOYS[playerid][i][player_toy_ROT_Z], PLAYER_TOYS[playerid][i][player_toy_SCALE_X], PLAYER_TOYS[playerid][i][player_toy_SCALE_Y],
			PLAYER_TOYS[playerid][i][player_toy_SCALE_Z], PLAYER_TOYS[playerid][i][player_toy_COLOR_1], PLAYER_TOYS[playerid][i][player_toy_COLOR_2],
			PLAYER_TOYS[playerid][i][player_toy_ID]
		);
		mysql_tquery(handle_db, QUERY_BUFFER);
	}
	return 1;
}

GetEmptyPlayerToySlot(playerid)
{
	for(new i = 0; i != MAX_SU_TOYS; i ++)
	{
		if(!PLAYER_TOYS[playerid][i][player_toy_VALID]) return i;
	}
	return -1;
}

stock minrand(min, max) //By Alex "Y_Less" Cole
{
	return random(max - min) + min;
}

stock ConvertTime_SecondsToHours(sec, &hours, &minutes, &seconds)
{
	hours = floatround(sec / 3600);
	minutes = floatround((sec - (hours * 3600)) / 60);
	seconds = sec % 60;
   	return 1;
}

stock CreatePlayerBars(playerid)
{
    PLAYER_BARS[playerid][pbar_THIRST] = CreatePlayerProgressBar(playerid, 588.000000, 435.000000, 45.000000, 5.500000, 13500415, 100.000000, 0);
    PLAYER_BARS[playerid][pbar_HUNGRY] = CreatePlayerProgressBar(playerid, 514.000000, 435.000000, 45.000000, 5.500000, -4652801, 100.000000, 0);
	return 1;
}

CreatePlayerTextDraws(playerid)
{
	for(new i; i < sizeof(PlayerTextdraws[]); i++) PlayerTextdraws[playerid][Player_Textdraws_Enum:i] = INVALID_TEXT_DRAW;

	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0] = CreatePlayerTextDraw(playerid, 320.000000, 380.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0.000000, 100.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);

	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1] = CreatePlayerTextDraw(playerid, 272.000000, 382.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0.400000, 1.127111);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 368.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], -16777123);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	
	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2] = CreatePlayerTextDraw(playerid, 272.000000, 382.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0.400000, 1.127111);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 270.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], -16777123);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	
	
	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0] = CreatePlayerTextDraw(playerid, 320.000000, 350.000000, "I");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 27.410259, 5.897183);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 145);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1] = CreatePlayerTextDraw(playerid, 320.000000, 358.000000, "Tienda");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0.361666, 1.400889);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 90);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2] = CreatePlayerTextDraw(playerid, 320.000000, 377.000000, "COMPRAR");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0.193666, 0.915556);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 10.000000, 34.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -201); // Money = 9306312   ,  -1459617611  No money
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3] = CreatePlayerTextDraw(playerid, 363.000000, 377.000000, "SIGUIENTE");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0.193666, 0.915556);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 10.000000, 34.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], -132);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4] = CreatePlayerTextDraw(playerid, 277.000000, 377.000000, "ANTERIOR");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0.193666, 0.915556);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 10.000000, 34.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], -132);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5] = CreatePlayerTextDraw(playerid, 320.000000, 398.000000, "Precio:_0$Ropa:_0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0.171666, 0.782815);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], -86);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0] = CreatePlayerTextDraw(playerid, 320.000000, 159.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0.000000, 15.033352);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1869574143);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1] = CreatePlayerTextDraw(playerid, 320.000000, 156.000000, "Tienda");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], -1633916417);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2] = CreatePlayerTextDraw(playerid, 215.000000, 184.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 80.000000, 85.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], -19201);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 18864);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 344.000000, 0.000000, 109.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3] = CreatePlayerTextDraw(playerid, 217.000000, 186.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 76.000000, 81.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], -926365441);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop[0][shop_toy_model]);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 344.000000, 0.000000, 109.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4] = CreatePlayerTextDraw(playerid, 311.000000, 207.000000, "Modelo:__~n~Precio:__$");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0.219000, 1.081481);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5] = CreatePlayerTextDraw(playerid, 363.000000, 233.000000, "Comprar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 13.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775); // sin dinero color = -900267777
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6] = CreatePlayerTextDraw(playerid, 404.000000, 233.000000, ">>");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 13.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], -1094795521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7] = CreatePlayerTextDraw(playerid, 322.000000, 233.000000, "<<");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 13.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], -1094795521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8] = CreatePlayerTextDraw(playerid, 255.000000, 271.000000, "0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0.163666, 0.832593);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], -66);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9] = CreatePlayerTextDraw(playerid, 320.000000, 284.000000, "Accesorios");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], -1633916417);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	
	
	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0] = CreatePlayerTextDraw(playerid, 553.000000, 176.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0.000000, 8.766664);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0.000000, 108.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1] = CreatePlayerTextDraw(playerid, 505.000000, 181.000000, "Interior:_0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0.300000, 1.438221);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2] = CreatePlayerTextDraw(playerid, 505.000000, 206.000000, "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 546.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3] = CreatePlayerTextDraw(playerid, 555.000000, 206.000000, "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 600.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4] = CreatePlayerTextDraw(playerid, 505.000000, 230.000000, "Crear");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 533.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5] = CreatePlayerTextDraw(playerid, 542.000000, 230.000000, "Cancelar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 583.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], true);
	
	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0] = CreatePlayerTextDraw(playerid, 320.000000, 317.000000, "Cargando_camión...");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0.255666, 1.176888);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1] = CreatePlayerTextDraw(playerid, 250.000000, 332.000000, "Borde");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0.000000, 3.766666);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 390.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2] = CreatePlayerTextDraw(playerid, 253.000000, 336.000000, "Abajo");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0.000000, 2.866667);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 387.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], -594542436);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3] = CreatePlayerTextDraw(playerid, 253.000000, 336.000000, "Sellena");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0.000000, 2.866667);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 250.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], -594542357);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	
	
	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0] = CreatePlayerTextDraw(playerid, 320.000000, 315.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0.298999, 1.483852);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], -161);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);

	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1] = CreatePlayerTextDraw(playerid, 320.000000, 333.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0.000000, 0.766669);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0.000000, 130.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 2021161125);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);

	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2] = CreatePlayerTextDraw(playerid, 320.000000, 333.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.000000, 0.766669);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1988896255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0] = CreatePlayerTextDraw(playerid, 275.000000, 325.000000, "+_Publicar_anuncio");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 10.000000, 80.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1] = CreatePlayerTextDraw(playerid, 365.000000, 325.000000, "-_Mis_anuncios");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 10.000000, 80.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2] = CreatePlayerTextDraw(playerid, 320.000000, 307.000000, "Cerrar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3] = CreatePlayerTextDraw(playerid, 380.000000, 307.000000, "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4] = CreatePlayerTextDraw(playerid, 260.000000, 307.000000, "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], true);
	
	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE] = CreatePlayerTextDraw(playerid, 320.000000, 134.000000, "-_0/0_-");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0.169000, 0.766222);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);
	
	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER] = CreatePlayerTextDraw(playerid, 320.000000, 152.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0.214666, 0.936296);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);

	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO] = CreatePlayerTextDraw(playerid, 321.000000, 181.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0.259333, 1.181036);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], -36);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);
	
    PlayerTextdraws[playerid][ptextdraw_HUD][0] = CreatePlayerTextDraw(playerid, 4.000000, 429.000000, "Nombre_Apellido_(0)");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 2);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0.300000, 1.500000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1000000.000000, 1000000.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0);

    PlayerTextdraws[playerid][ptextdraw_HUD][1] = CreatePlayerTextDraw(playerid, 400.000000, 429.000000, "Nivel_0_____Exp_0/0");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 2);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0.300000, 1.500000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0.000000, 1000.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0);
	return 1;
}

DestroyPlayerTextDraws(playerid)
{
	for(new i; i < sizeof(PlayerTextdraws[]); i++)
	{
		if(PlayerTextdraws[playerid][Player_Textdraws_Enum:i] == INVALID_TEXT_DRAW) continue;
		PlayerTextDrawDestroy(playerid, PlayerText:PlayerTextdraws[playerid][Player_Textdraws_Enum:i]);
		PlayerTextdraws[playerid][Player_Textdraws_Enum:i] = INVALID_TEXT_DRAW;
	}
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(clickedid == Text:INVALID_TEXT_DRAW)
    {
		pTemp(playerid)[pt_SELECT_TEXTDRAW] = false;

		if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED])
		{
			ExitPlayerPropertyConstructor(playerid);
			return 1;
		}
		
		if(pTemp(playerid)[pt_CLOTHING_SHOP] != -1) // Tiene abierto el menú de ropa
		{
			ClosePlayerClothingMenu(playerid);
			ExitPlayerWardrobe(playerid);
		}

		if(pTemp(playerid)[pt_PAYDAY_NOTIFICATION])
		{
			ClosePaydayNotf(playerid);
		}

		if(pTemp(playerid)[pt_LOGGINING])
		{
			Kick(playerid);
		}
		
		if(pTemp(playerid)[pt_TOYS_SHOP]) ClosePlayerToysMenu(playerid);
		if(pTemp(playerid)[pt_SHOP]) HidePlayerShop(playerid);
		return 1;
	}

	if(pTemp(playerid)[pt_SHOP] && (pTemp(playerid)[pt_SHOP_STATE] == PLAYER_SHOP_STATE_ALL || pTemp(playerid)[pt_SHOP_STATE] == PLAYER_SHOP_STATE_MY_ADS))
	{
		for(new i = 0; i != 6; i ++)
		{
			if(clickedid == Textdraws[textdraw_SHOP_ARTICLES_BOX][i])
			{
				if(!pTemp(playerid)[pt_SHOP_ARTICLE_ID][i]) return SendClientMessagef(playerid, -1, "Este anuncio ya no está disponible.");
				
				inline OnShopChecked()
				{
					new rows;
					if(get_rows(rows))
					{
						if(rows)
						{
							pTemp(playerid)[pt_SHOP_SELECTED_ARTICLE_ID] = pTemp(playerid)[pt_SHOP_ARTICLE_ID][i];
							pTemp(playerid)[pt_SHOP_STATE] = PLAYER_SHOP_STATE_AD;
							UpdatePlayerShop(playerid);
						}
						else SendClientMessagef(playerid, -1, "Este anuncio ya no está disponible.");
					}
					else SendClientMessagef(playerid, -1, "Este anuncio ya no está disponible.");
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM shop WHERE id = %d;", pTemp(playerid)[pt_SHOP_ARTICLE_ID][i]);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnShopChecked);
				break;
			}
		}
		return 1;
	}
	return 1;
}

#define OnPlayerClickPlayerTD OnPlayerClickPlayerTextDraw
hook OnPlayerClickPlayerTD(playerid, PlayerText:playertextid)
{
	if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2]) //Anterior
		{
			if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] == 0) PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] = sizeof(PROPERTY_INTERIORS) - 1;
			else PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] --;
			UpdatePlayerPropertyContructor(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3]) //Siguiente
		{
			if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] == (sizeof(PROPERTY_INTERIORS) - 1)) PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] = 0;			
			else PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ++;
			UpdatePlayerPropertyContructor(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4]) //Crear
		{
			Create_PlayerPropertyConstructo(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5]) //Cancelar
		{
			ExitPlayerPropertyConstructor(playerid);
			return 1;
		}
		return 1;
	}
	
	if(pTemp(playerid)[pt_GAME_STATE] != GAME_STATE_NORMAL) return 0;
	
	if(pTemp(playerid)[pt_CLOTHING_SHOP] != -1)
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]) // Comprar
		{
			new clothe_info[3];
			switch(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE: clothe_info = Binco_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Binco_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE: clothe_info = Suburban_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Suburban_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE: clothe_info = Prolaps_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Prolaps_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE: clothe_info = Didier_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Didier_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE: clothe_info = Victim_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Victim_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_ZIP:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE: clothe_info = Zip_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Zip_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
			}
			
			if(PI[playerid][pi_CASH] >= clothe_info[2])
			{
				if(GivePlayerCash(playerid, -clothe_info[2], true, true)) {
					PI[playerid][pi_SKIN] = clothe_info[0];
					
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Gracias por comprar ropa en %s, vuelva pronto.", Clothing_Shop_Positions[pTemp(playerid)[pt_CLOTHING_SHOP]][clothing_shop_NAME]);
					
					ClosePlayerClothingMenu(playerid);
					ExitPlayerWardrobe(playerid);
				}
			}
			else
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %s$ para poder comprar esta ropa.", number_format_thousand(clothe_info[2] - PI[playerid][pi_CASH]));
			}
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]) // Siguiente
		{
			PlayerPlaySoundEx(playerid, 1052, 0.0, 0.0, 0.0);
			
			switch(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Binco_Shop_Male_Skins) - 1)) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Binco_Shop_Female_Skins) - 1)) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Suburban_Shop_Male_Skins) - 1)) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Suburban_Shop_Female_Skins) - 1)) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Prolaps_Shop_Male_Skins) - 1)) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Prolaps_Shop_Female_Skins) - 1)) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Didier_Shop_Male_Skins) - 1)) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Didier_Shop_Female_Skins) - 1)) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Victim_Shop_Male_Skins) - 1)) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Victim_Shop_Female_Skins) - 1)) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_ZIP:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Zip_Shop_Male_Skins) - 1)) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Zip_Shop_Female_Skins) - 1)) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
			}
			
			UpdateClothingShop(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]) // Anterior
		{
			PlayerPlaySoundEx(playerid, 1053, 0.0, 0.0, 0.0);
			
			switch(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Binco_Shop_Male_Skins) - 1;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Binco_Shop_Female_Skins) - 1;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Suburban_Shop_Male_Skins) - 1;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Suburban_Shop_Female_Skins) - 1;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Prolaps_Shop_Male_Skins) - 1;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Prolaps_Shop_Female_Skins) - 1;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Didier_Shop_Male_Skins) - 1;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Didier_Shop_Female_Skins) - 1;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Victim_Shop_Male_Skins) - 1;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Victim_Shop_Female_Skins) - 1;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_ZIP:
				{
					switch(PI[playerid][pi_GENDER])
					{
						case SEX_MALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Zip_Shop_Male_Skins) - 1;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Zip_Shop_Female_Skins) - 1;
							else pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
			}
			
			UpdateClothingShop(playerid);
			return 1;
		}
	}
	
	if(pTemp(playerid)[pt_TOYS_SHOP])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]) //Comprar
		{		
			if(PI[playerid][pi_CASH] >= Toys_Shop[ pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price])
			{
				new slot = GetEmptyPlayerToySlot(playerid);
				if(!PI[playerid][pi_VIP] && slot >= MAX_NU_TOYS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "¡Los jugadores VIP pueden tener hasta %d accesorios! Usa /ayuda si quieres ser VIP.", MAX_SU_TOYS);
					return 1;
				}
				if(slot == -1)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "No tienes más espacio para accesorios, elimina alguno si quieres comprar otro.");
					ClosePlayerToysMenu(playerid);
					return 1;
				}
				
				if(GivePlayerCash(playerid, -Toys_Shop[ pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price], true, true)) {
					PLAYER_TOYS[playerid][slot][player_toy_VALID] = true;
					format(PLAYER_TOYS[playerid][slot][player_toy_NAME], 24, "%s", Toys_Shop[ pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model]);
					PLAYER_TOYS[playerid][slot][player_toy_ATTACHED] = false;
					PLAYER_TOYS[playerid][slot][player_toy_MODELID] = Toys_Shop[ pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid];
					PLAYER_TOYS[playerid][slot][player_toy_BONE] = -1; // Sin utilizar aún
					PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_ROT_X] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_ROT_Y] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_ROT_Z] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_SCALE_X] = 1.0;
					PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y] = 1.0;
					PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z] = 1.0;
					PLAYER_TOYS[playerid][slot][player_toy_COLOR_1] = 0;
					PLAYER_TOYS[playerid][slot][player_toy_COLOR_2] = 0;
					RegisterNewPlayerToy(playerid, slot);

					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "Gracias por comprar accesorios en %s, para ponertelo usa /accesorios.", ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_NAME]);
					
					ClosePlayerToysMenu(playerid);
				}
			}
			else
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessagef(playerid, -1, "No tienes dinero suficiente, te faltan %s$ para poder comprar esta ropa.", number_format_thousand(Toys_Shop[ pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] - PI[playerid][pi_CASH]));
			}
			
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]) // Siguiente
		{
			PlayerPlaySoundEx(playerid, 1052, 0.0, 0.0, 0.0);
			
			if(pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] == (sizeof(Toys_Shop) - 1)) pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] = 0;
			else pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] ++;
			
			UpdateToysShop(playerid);
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]) // Anterior
		{
			PlayerPlaySoundEx(playerid, 1053, 0.0, 0.0, 0.0);
			
			if(pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] == 0) pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] = sizeof(Toys_Shop) - 1;
			else pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] --;
			
			UpdateToysShop(playerid);
		}
		
	}
	
	if(pTemp(playerid)[pt_SHOP])
	{
		HidePlayerDialog(playerid);
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0])
		{
			switch(pTemp(playerid)[pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL:
				{
					if(PI[playerid][pi_LEVEL] < 2) return SendClientMessagef(playerid, -1, "Debes ser al menos nivel 2 para publicar anuncios.");
					
					new interval = GetTickDiff(GetTickCount(), pTemp(playerid)[pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendClientMessagef(playerid, -1, "Cálmate.");
					pTemp(playerid)[pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					inline OnShopChecked()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new total_ads;
								cache_get_value_index_int(0, 0, total_ads);

								if(total_ads >= MAX_ADS_PER_PLAYER) SendClientMessagef(playerid, -1, "No puedes publicar más de %d anuncios, borra alguno.", MAX_ADS_PER_PLAYER);
								else
								{
									HidePlayerShop(playerid);
									ShowDialog(playerid, DIALOG_SHOP_ADD);
								}
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM shop WHERE id_player = %d;", PI[playerid][pi_ID]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnShopChecked);
				}
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1])
		{
			switch(pTemp(playerid)[pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL:
				{
					pTemp(playerid)[pt_SHOP_COME_FROM_MY_ADS] = true;
					pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
					pTemp(playerid)[pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
					UpdatePlayerShop(playerid);
				}
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2])
		{
			switch(pTemp(playerid)[pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: HidePlayerShop(playerid);
				case PLAYER_SHOP_STATE_MY_ADS: // Atras
				{
					new interval = GetTickDiff(GetTickCount(), pTemp(playerid)[pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendClientMessagef(playerid, -1, "Cálmate.");
					pTemp(playerid)[pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
					pTemp(playerid)[pt_SHOP_COME_FROM_MY_ADS] = false;
					pTemp(playerid)[pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_AD: ShowDialog(playerid, DIALOG_SHOP_ARTICLE_MODIFY);
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3])
		{
			switch(pTemp(playerid)[pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: // Siguiente
				{
					new interval = GetTickDiff(GetTickCount(), pTemp(playerid)[pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendClientMessagef(playerid, -1, "Cálmate.");
					pTemp(playerid)[pt_ANTIFLOOD_SHOP] = GetTickCount();

					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] >= pages - 1) pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] ++;
								UpdatePlayerShop(playerid);
							}
						}
					}
					mysql_tquery_inline(handle_db, "SELECT COUNT(id) FROM shop;", using inline OnCountQueryLoad);
				}
				case PLAYER_SHOP_STATE_MY_ADS: // Siguiente
				{
					new interval = GetTickDiff(GetTickCount(), pTemp(playerid)[pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendClientMessagef(playerid, -1, "Cálmate.");
					pTemp(playerid)[pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] >= pages - 1) pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] ++;
								UpdatePlayerShop(playerid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM shop WHERE id_player = %d;", PI[playerid][pi_ID]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				case PLAYER_SHOP_STATE_AD: ShowDialog(playerid, DIALOG_SHOP_ARTICLE_REMOVE);
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4])
		{
			switch(pTemp(playerid)[pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: // Anterior
				{
					new interval = GetTickDiff(GetTickCount(), pTemp(playerid)[pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendClientMessagef(playerid, -1, "Cálmate.");
					pTemp(playerid)[pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] <= 0) pTemp(playerid)[pt_DIALOG_DB_PAGE] = pages - 1;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] --;
								UpdatePlayerShop(playerid);
							}
						}
					}
					mysql_tquery_inline(handle_db, "SELECT COUNT(id) FROM shop;", using inline OnCountQueryLoad);
				}
				case PLAYER_SHOP_STATE_MY_ADS: // Anterior
				{
					new interval = GetTickDiff(GetTickCount(), pTemp(playerid)[pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendClientMessagef(playerid, -1, "Cálmate.");
					pTemp(playerid)[pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					inline OnCountQueryLoad()
					{
						new rows;
						if(get_rows(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

								if(pTemp(playerid)[pt_DIALOG_DB_PAGE] <= 0) pTemp(playerid)[pt_DIALOG_DB_PAGE] = pages - 1;
								else pTemp(playerid)[pt_DIALOG_DB_PAGE] --;
								UpdatePlayerShop(playerid);
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM shop WHERE id_player = %d;", PI[playerid][pi_ID]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				case PLAYER_SHOP_STATE_AD: // Atrás
				{
					if(pTemp(playerid)[pt_SHOP_COME_FROM_MY_ADS])
					{
						pTemp(playerid)[pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
						UpdatePlayerShop(playerid);
					}
					else
					{
						pTemp(playerid)[pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
						UpdatePlayerShop(playerid);
					}
				}
			}
		}
	}
    return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(PI[playerid][pi_ADMIN_LEVEL] > CMD_ASSISTANT)
	{
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 5;
		PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_IMMUNITY] = gettime() + 5;

		new Float:fA;
		GetPlayerFacingAngle(playerid, fA);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetVehiclePosEx(GetPlayerVehicleID(playerid), fX, fY, fZ);
		else SetPlayerPosEx(playerid, fX, fY, fZ, fA, 0, 0);
	}
	return 1;
}

UpdateReputationTextDraws(playerid)
{
	if(!IsPlayerLoggedIn(playerid)) return 0;
	if(!IsPlayerRegistered(playerid)) return 0;

	new neccessary_rep = PI[playerid][pi_LEVEL] * REP_MULTIPLIER, str[64], str2[64];
	if(PI[playerid][pi_CONFIG_HUD])
	{
		format(str, sizeof str, "%s_(%d)", pTemp(playerid)[pt_NAME], playerid);
		format(str2, sizeof str2, "~w~Nivel_~r~%d_____~w~Exp_~g~%d/%d", PI[playerid][pi_LEVEL], PI[playerid][pi_REP], neccessary_rep);

		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], str);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], str2);
	}
	return 1;
}

forward AddPlayerReputation(playerid);
public AddPlayerReputation(playerid)
{
	new neccessary_rep = PI[playerid][pi_LEVEL] * REP_MULTIPLIER;
	if(PI[playerid][pi_REP] < neccessary_rep)
	{
		PI[playerid][pi_REP] ++;
		UpdateReputationTextDraws(playerid);
		
		if(PI[playerid][pi_REP] >= neccessary_rep)
		{
			PI[playerid][pi_REP] = 1;
			PI[playerid][pi_LEVEL] ++;

			UpdateReputationTextDraws(playerid);
			SetPlayerSkillLevels(playerid);
			
			SendClientMessagef(playerid, -1, "¡Felicidades! Has subido al nivel %d.", PI[playerid][pi_LEVEL]);
			SetPlayerScore(playerid, PI[playerid][pi_LEVEL]);
			PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
			
			PI[playerid][pi_TIME_FOR_REP] = TIME_FOR_REP;
			pTemp(playerid)[pt_TIME_PASSED_LAST_REP] = gettime() * 1000;
			
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET time_playing = %d, level = %d, rep = %d, time_for_rep = %d, payday_rep = %d WHERE id = %d;", PI[playerid][pi_TIME_PLAYING], PI[playerid][pi_LEVEL], PI[playerid][pi_REP], TIME_FOR_REP, PI[playerid][pi_PAYDAY_REP], PI[playerid][pi_ID]);
			mysql_tquery(handle_db, QUERY_BUFFER);
			
			KillTimer(pTemp(playerid)[pt_TIMERS][2]);
			pTemp(playerid)[pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", PI[playerid][pi_TIME_FOR_REP], false, "i", playerid);
			return 1;
		}
		
		PI[playerid][pi_PAYDAY_REP] ++;
		if(PI[playerid][pi_PAYDAY_REP] >= REP_FOR_PAYDAY)
		{
			PlayerPayday(playerid);
			PI[playerid][pi_PAYDAY_REP] = 0;
		}
		
		PI[playerid][pi_TIME_FOR_REP] = TIME_FOR_REP;
		pTemp(playerid)[pt_TIME_PASSED_LAST_REP] = gettime() * 1000;

		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET time_playing = %d, level = %d, rep = %d, time_for_rep = %d, payday_rep = %d WHERE id = %d;", PI[playerid][pi_TIME_PLAYING], PI[playerid][pi_LEVEL], PI[playerid][pi_REP], TIME_FOR_REP, PI[playerid][pi_PAYDAY_REP], PI[playerid][pi_ID]);
		mysql_tquery(handle_db, QUERY_BUFFER);

		KillTimer(pTemp(playerid)[pt_TIMERS][2]);
		pTemp(playerid)[pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", PI[playerid][pi_TIME_FOR_REP], false, "i", playerid);
		return 1;
	}
	KillTimer(pTemp(playerid)[pt_TIMERS][2]);
	return 0;
}

stock SetPlayerCash(playerid, amount, bool:update = true)
{
	PI[playerid][pi_CASH] = amount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PI[playerid][pi_CASH]);
	
	if(update) mysql_update_int(handle_db, "player", "cash", "id", PI[playerid][pi_ID], PI[playerid][pi_CASH]);
	return 1;
}

stock GivePlayerCash(playerid, amount, bool:update = true, bool:negative = false)
{
	if(amount == 0) return 1;
	if(!negative && amount < 0) return 0;
	if(negative && amount > 0) return 0;
	if(negative && (PI[playerid][pi_CASH] + amount) < 0) return 0;

	PI[playerid][pi_CASH] += amount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PI[playerid][pi_CASH]);
	
	if(update) mysql_update_int(handle_db, "player", "cash", "id", PI[playerid][pi_ID], PI[playerid][pi_CASH]);
	return 1;
}

LoadEnterExits()
{
	new total_enterexits, label_str[256], info[3];
		
	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		ENTER_EXIT[total_enterexits][ee_ID] = total_enterexits + 1;

		format(label_str, sizeof label_str, "{"#BLUE_COLOR"}%s\n{FFFFFF}Presiona {"#ORANGE_COLOR"}'Y'{FFFFFF} para entrar", ENTER_EXIT[total_enterexits][ee_NAME]);
		
		ENTER_EXIT[total_enterexits][ee_INT_LABEL_ID] = CreateDynamic3DTextLabel("{"#RED_COLOR"}Salida\n{FFFFFF}Presiona {"#BLUE_COLOR"}'Y' {FFFFFF}para salir", 0xFFFFFFFF, ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z] + 0.25, 10.0, .testlos = true, .worldid = ENTER_EXIT[total_enterexits][ee_INT_WORLD], .interiorid = ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		ENTER_EXIT[total_enterexits][ee_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z] + 0.25, 10.0, .testlos = true, .worldid = ENTER_EXIT[total_enterexits][ee_EXT_WORLD], .interiorid = ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);
		
		if(ENTER_EXIT[total_enterexits][ee_INT_MAPICON] != -1) ENTER_EXIT[total_enterexits][ee_INT_MAPICON_ID] = CreateDynamicMapIcon(ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z], ENTER_EXIT[total_enterexits][ee_INT_MAPICON], -1, ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		if(ENTER_EXIT[total_enterexits][ee_EXT_MAPICON] != -1) ENTER_EXIT[total_enterexits][ee_EXT_MAPICON_ID] = CreateDynamicMapIcon(ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z], ENTER_EXIT[total_enterexits][ee_EXT_MAPICON], -1, ENTER_EXIT[total_enterexits][ee_EXT_WORLD], ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);
		
		ENTER_EXIT[total_enterexits][ee_INT_PICKUP_ID] = CreateDynamicPickup(0, 1, ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z], ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		ENTER_EXIT[total_enterexits][ee_EXT_PICKUP_ID] = CreateDynamicPickup(19133, 1, ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z] + 0.10, ENTER_EXIT[total_enterexits][ee_EXT_WORLD], ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);

		info[0] = PICKUP_TYPE_ENTER_EXIT;
		info[1] = total_enterexits; // Index
		info[2] = 1; // Pickup Interior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ENTER_EXIT[total_enterexits][ee_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

		info[0] = PICKUP_TYPE_ENTER_EXIT;
		info[1] = total_enterexits; // Index
		info[2] = 2; // Pickup Exterior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ENTER_EXIT[total_enterexits][ee_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		ENTER_EXIT[total_enterexits][ee_MAIN_ACTOR] = CreateInteriorActor(ENTER_EXIT[total_enterexits][ee_INTERIOR_TYPE], ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);

		//textdraw intimidación
		if(ENTER_EXIT[total_enterexits][ee_ROBBABLE]) 
		{
			ENTER_EXIT[total_enterexits][ee_TEXTDRAW] = TextDrawCreate(320.000000, 406.000000, "Intimidación:_0.00%%");
			TextDrawLetterSize(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 0.286000, 1.276444);
			TextDrawAlignment(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 2);
			TextDrawColor(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], -76);
			TextDrawSetShadow(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 0);
			TextDrawSetOutline(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 0);
			TextDrawBackgroundColor(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 255);
			TextDrawFont(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 1);
			TextDrawSetProportional(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 1);
			TextDrawSetShadow(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 0);
		}
		
		total_enterexits ++;
	}
	return 1;
}

CreatePropertyInfo(i, pid, const pname[], cid, const cname[])
{
	if(PROPERTY_INFO[i][property_EXT_LABEL_ID] != Text3D:INVALID_STREAMER_ID)
	{
		DestroyDynamic3DTextLabel(PROPERTY_INFO[i][property_EXT_LABEL_ID]);
		PROPERTY_INFO[i][property_EXT_LABEL_ID] = Text3D:INVALID_STREAMER_ID;
	}
	if(PROPERTY_INFO[i][property_INT_LABEL_ID] != Text3D:INVALID_STREAMER_ID)
	{
		DestroyDynamic3DTextLabel(PROPERTY_INFO[i][property_INT_LABEL_ID]);
		PROPERTY_INFO[i][property_INT_LABEL_ID] = Text3D:INVALID_STREAMER_ID;
	}
	if(PROPERTY_INFO[i][property_EXT_PICKUP_ID] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PROPERTY_INFO[i][property_EXT_PICKUP_ID]);
		PROPERTY_INFO[i][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
	}
	if(PROPERTY_INFO[i][property_INT_PICKUP_ID] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PROPERTY_INFO[i][property_INT_PICKUP_ID]);
		PROPERTY_INFO[i][property_INT_PICKUP_ID] = INVALID_STREAMER_ID;
	}

	new info[3], label_str[256], pickup_modelid;
	if(pid)
	{
		pickup_modelid = 0;
		PROPERTY_INFO[i][property_SOLD] = true;
		PROPERTY_INFO[i][property_CREW] = false;
		PROPERTY_INFO[i][property_OWNER_ID] = pid;
		PROPERTY_INFO[i][property_CREW_ID] = 0;
		format(label_str, sizeof label_str, "Propiedad {"#PRIMARY_COLOR"}#%d\n\n{FFFFFF}Propietario: {"#PRIMARY_COLOR"}%s\n{FFFFFF}Presiona {"#PRIMARY_COLOR"}'Y' {FFFFFF}para entrar.", PROPERTY_INFO[i][property_ID], pname);
	}
	else if(cid)
	{
		pickup_modelid = 0;
		PROPERTY_INFO[i][property_SOLD] = true;
		PROPERTY_INFO[i][property_CREW] = true;
		PROPERTY_INFO[i][property_CREW_ID] = cid;
		PROPERTY_INFO[i][property_OWNER_ID] = 0;
		format(PROPERTY_INFO[i][property_NAME], 24, "Propiedad %d", PROPERTY_INFO[i][property_ID]);
		format(label_str, sizeof label_str, "Propiedad {"#PRIMARY_COLOR"}#%d\n\n{FFFFFF}Banda: {"#PRIMARY_COLOR"}%s\n{FFFFFF}Presiona {"#PRIMARY_COLOR"}'Y' {FFFFFF}para entrar.", PROPERTY_INFO[i][property_ID], cname);
	}
	else
	{
		pickup_modelid = 1273;
		PROPERTY_INFO[i][property_SOLD] = false;
		PROPERTY_INFO[i][property_OWNER_ID] = 0;
		format(PROPERTY_INFO[i][property_NAME], 24, "Propiedad %d", PROPERTY_INFO[i][property_ID]);
		if(PROPERTY_INFO[i][property_VIP_LEVEL])
		{
			if(PROPERTY_INFO[i][property_EXTRA]) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Membresía VIP requerida\n\n{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\nInterior: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], PROPERTY_INFO[i][property_EXTRA], PROPERTY_INFO[i][property_LEVEL]);
			else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Membresía VIP requerida\n\n{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\nInterior: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[i][property_PRICE]), PROPERTY_INFO[i][property_LEVEL]);
		}
		else
		{
			if(PROPERTY_INFO[i][property_EXTRA]) format(label_str, sizeof label_str, "{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\nInterior: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], PROPERTY_INFO[i][property_EXTRA], PROPERTY_INFO[i][property_LEVEL]);
			else format(label_str, sizeof label_str, "{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\nInterior: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[i][property_PRICE]), PROPERTY_INFO[i][property_LEVEL]);
		}
	}
	
	PROPERTY_INFO[i][property_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z] + 0.25, 5.0, .testlos = true, .worldid = 0, .interiorid = PROPERTY_INFO[i][property_EXT_INTERIOR]);

	PROPERTY_INFO[i][property_INT_LABEL_ID] = CreateDynamic3DTextLabel("Presiona {"#PRIMARY_COLOR"}'Y' {FFFFFF}para salir\n\nEscribe {"#PRIMARY_COLOR"}/casa {FFFFFF}para más opciones\nEscribe {"#PRIMARY_COLOR"}/garage {FFFFFF}para ir al garage de la propiedad", 0xFFFFFFFF, PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_Z] + 0.25, 3.0, .testlos = true, .worldid = PROPERTY_INFO[i][property_ID], .interiorid = PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_INTERIOR]);

	PROPERTY_INFO[i][property_EXT_PICKUP_ID] = CreateDynamicPickup(pickup_modelid, 1, PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z], 0, PROPERTY_INFO[i][property_EXT_INTERIOR]);
	PROPERTY_INFO[i][property_INT_PICKUP_ID] = CreateDynamicPickup(0, 1, PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INFO[i][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_INTERIOR]);
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = i; // Index
	info[2] = 1; // Pickup Interior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[i][property_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = i; // Index
	info[2] = 2; // Pickup Exterior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[i][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

	PROPERTY_INFO[i][property_POLICE_FORCING] = false;
	PROPERTY_INFO[i][property_POLICE_FORCED] = false;
	PROPERTY_INFO[i][property_POLICE_FORCE_TIMER] = -1;
	return 1;
}

forward OnHotdogLoaded();
LoadHotdogVehicles()
{
	inline OnHotdogsLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new label[16], id, Float:x, Float:y, Float:z, Float:angle;
				reg_int(i, "id", id);
				reg_name(i, "label_colour", label, 16);
				reg_float(i, "x", x);
				reg_float(i, "y", y);
				reg_float(i, "z", z);
				reg_float(i, "angle", angle);

				AddHotdogVehicle(x, y, z, angle, label, id, true);
			}
		}
		CallLocalFunction("OnHotdogLoaded", "");
		LoadGarages();
	}
	mysql_tquery_inline(handle_db, "SELECT * FROM hotdog_vehicles;", using inline OnHotdogsLoad);
}

forward OnPropertiesLoaded();
LoadProperties()
{
	inline OnPropertiesLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_PROPERTIES)
				{
					printf("---> Límite superado en array 'PROPERTY_INFO' al intentar cargar de la base de datos.");
					break;
				}

				TOTAL_PROPERTIES_LOADED ++;

				new bool:isnull_name;
				PROPERTY_INFO[i][property_VALID] = true;
				reg_int(i, "id", PROPERTY_INFO[i][property_ID]);
				cache_is_value_name_null(i, "name", isnull_name);
				if(!isnull_name) reg_name(i, "name", PROPERTY_INFO[i][property_NAME]);
				reg_float(i, "ext_x", PROPERTY_INFO[i][property_EXT_X]);
				reg_float(i, "ext_y", PROPERTY_INFO[i][property_EXT_Y]);
				reg_float(i, "ext_z", PROPERTY_INFO[i][property_EXT_Z]);
				reg_float(i, "ext_angle", PROPERTY_INFO[i][property_EXT_ANGLE]);
				reg_int(i, "ext_interior", PROPERTY_INFO[i][property_EXT_INTERIOR]);
				reg_int(i, "ext_freeze", PROPERTY_INFO[i][property_EXT_FREEZE]);
				reg_int(i, "id_interior", PROPERTY_INFO[i][property_ID_INTERIOR]);
				reg_int(i, "price", PROPERTY_INFO[i][property_PRICE]);
				reg_int(i, "level", PROPERTY_INFO[i][property_LEVEL]);
				reg_int(i, "extra", PROPERTY_INFO[i][property_EXTRA]);
				reg_int(i, "vip_level", PROPERTY_INFO[i][property_VIP_LEVEL]);
				reg_int(i, "garage_id", PROPERTY_INFO[i][property_GARAGE_ID]);

				if(PROPERTY_INFO[i][property_EXTRA]) PROPERTY_INFO[i][property_PRICE] = 0;
				if(PROPERTY_INFO[i][property_VIP_LEVEL]) PROPERTY_INFO[i][property_LEVEL] = 1;

				new id_player, pname[24], tid, bool:isnull_id_player, bool:isnull_pname, bool:isnull_tid;
				cache_is_value_name_null(i, "id_player", isnull_id_player);
				if(!isnull_id_player) reg_int(i, "id_player", id_player);
				cache_is_value_name_null(i, "pname", isnull_pname);
				if(!isnull_pname) reg_name(i, "pname", pname);
				cache_is_value_name_null(i, "tid", isnull_tid);
				if(!isnull_tid) reg_int(i, "tid", tid);
				if(id_player) CreatePropertyInfo(i, id_player, pname, 0, "");
				else if(tid)
				{
					inline OnCrewInfoLoad()
					{
						new crows;
						if(get_rows(crows))
						{
							if(crows)
							{
								new cid, cname[24];
								cache_get_value_index_int(0, 0, cid);
								cache_get_value_index(0, 1, cname);
								if(cid) CreatePropertyInfo(i, 0, "", cid, cname);
								else CreatePropertyInfo(i, 0, "", 0, "");
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT crews.id, crews.name FROM territories INNER JOIN crews ON territories.id_crew = crews.id WHERE territories.id = %d;", tid);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
				}
				else CreatePropertyInfo(i, 0, "", 0, "");

				inline OnPropertyClosetLoad()
				{
					new crows;
					if(get_rows(crows))
					{
						for(new x = 0; x != crows; x ++)
						{
							PROPERTY_CLOSET[i][x][property_closet_VALID] = true;
							reg_int(x, "id", PROPERTY_CLOSET[i][x][property_closet_OBJECT_ID]);
							reg_int(x, "type", PROPERTY_CLOSET[i][x][property_closet_TYPE]);
							reg_int(x, "int", PROPERTY_CLOSET[i][x][property_closet_INT]);
							reg_int(x, "int_extra", PROPERTY_CLOSET[i][x][property_closet_INT_EXTRA]);
						}
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM property_closet WHERE id_property = %d LIMIT %d;", PROPERTY_INFO[i][property_ID], MAX_CLOSET_SLOTS);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPropertyClosetLoad);
			}
			CallLocalFunction("OnPropertiesLoaded", "");
			LoadCrews();
		}
	}
	mysql_tquery_inline(handle_db, "SELECT properties.*, player.id AS pid, player.name AS pname, territories.id AS tid FROM properties LEFT JOIN player ON properties.id_player = player.id LEFT JOIN territories ON properties.id_territory = territories.id;", using inline OnPropertiesLoad);
	return 1;
}

forward OnATMBankLoaded();
LoadATMBank()
{
	inline OnATMBankLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_ATM_BANK)
				{
					printf("---> Límite superado en array 'ATM_BANK' al intentar cargar de la base de datos.");
					break;
				}

				reg_int(i, "id", ATM_BANK[i][atm_id]);
				reg_float(i, "pos_x", ATM_BANK[i][atm_X]);
				reg_float(i, "pos_y", ATM_BANK[i][atm_Y]);
				reg_float(i, "pos_z", ATM_BANK[i][atm_Z]);

				reg_float(i, "pos_rx", ATM_BANK[i][atm_RX]);
				reg_float(i, "pos_ry", ATM_BANK[i][atm_RY]);
				reg_float(i, "pos_rz", ATM_BANK[i][atm_RZ]);

				ATM_BANK[i][atm_X] += (-0.5 * floatsin(-(ATM_BANK[i][atm_RZ] - 90.0), degrees));
				ATM_BANK[i][atm_Y] += (-0.5 * floatcos(-(ATM_BANK[i][atm_RZ] - 90.0), degrees));

				ATM_BANK[i][atm_valid] = true;
				ATM_BANK[i][atm_objectid] = CreateDynamicObject(DEFAULT_ATM_MODELID, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z], ATM_BANK[i][atm_RX], ATM_BANK[i][atm_RY], ATM_BANK[i][atm_RZ]);
				
				new info[3], info2[3];
				info[0] = OBJECT_TYPE_ATM;
				info[1] = i; // Index
				Streamer_SetArrayData(STREAMER_TYPE_OBJECT, ATM_BANK[i][atm_objectid], E_STREAMER_EXTRA_ID, info);
				CreateDynamicMapIcon(ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z], 52, -1, 0, 0);

				new label_str[256]; format(label_str, 256, "{"#PRIMARY_COLOR"}Cajero automático (%d)\n{ffffff}Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para realizar operaciones", ATM_BANK[i][atm_id]);
				CreateATMBankLabel(i, label_str, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z]);

				ATM_BANK[i][atm_pickupid] = CreateDynamicPickup(0, 1, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z] + 0.10, 0, 0);
				info2[0] = PICKUP_TYPE_ATM;
				info2[1] = i; // Index
				info2[2] = 0; // Nada
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ATM_BANK[i][atm_pickupid], E_STREAMER_EXTRA_ID, info2);

			}
			CallLocalFunction("OnATMBankLoaded", "");
			LoadHotdogVehicles();
		}
	}
	mysql_tquery_inline(handle_db, "SELECT * FROM atm_bank;", using inline OnATMBankLoad);
}

CreateATMBankLabel(index, const str[], Float:x, Float:y, Float:z)
{
	ATM_BANK[index][atm_label] = CreateDynamic3DTextLabel(str, -1, x, y, z + 0.25, 3.5, .testlos = false, .worldid = 0, .interiorid = 0);
	return 1;
}

GetOwnerIntProperty(id_house)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
			{
				if(PI[i][pi_LOCAL_INTERIOR] == id_house)
				{
					return i;
				}
			}
		}
	}
	return -1;
}

LoadCrews()
{
	inline OnCrewsLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_CREWS)
				{
					printf("---> Límite superado en array 'CREW_INFO' al intentar cargar de la base de datos.");
					break;
				}

				CREW_INFO[i][crew_VALID] = true;
				reg_int(i, "id", CREW_INFO[i][crew_ID]);
				reg_name(i, "name", CREW_INFO[i][crew_NAME]);
				reg_int(i, "color", CREW_INFO[i][crew_COLOR]);
				CREW_INFO[i][crew_ONLINE_MEMBERS] = 0;

				//count
				inline OnCountQueryLoad()
				{
					new crows;
					if(get_rows(crows))
					{
						if(crows)
						{
							cache_get_value_index_int(0, 0, CREW_INFO[i][crew_MEMBERS]);
						}
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d;", CREW_INFO[i][crew_ID]);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);

				//ranks
				inline OnCrewRanksLoad()
				{
					new crows;
					if(get_rows(crows))
					{
						for(new x = 0; x != crows; x ++)
						{
							new rank_pos;
							reg_int(x, "rank_pos", rank_pos);
							if(rank_pos < 0 || rank_pos > MAX_CREW_RANKS) continue;

							CREW_RANK_INFO[i][rank_pos][crew_rank_VALID] = true;
							reg_int(x, "id", CREW_RANK_INFO[i][rank_pos][crew_rank_ID]);
							reg_name(x, "rank_name", CREW_RANK_INFO[i][rank_pos][crew_rank_NAME]);
							reg_int(x, "permission0", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][0]);
							reg_int(x, "permission1", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][1]);
							reg_int(x, "permission2", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][2]);
							reg_int(x, "permission3", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][3]);
							reg_int(x, "permission4", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][4]);
							reg_int(x, "permission5", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][5]);
							reg_int(x, "permission6", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][6]);
							reg_int(x, "permission7", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][7]);
							reg_int(x, "permission8", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][8]);
							reg_int(x, "permission9", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][9]);
							reg_int(x, "permission10", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][10]);

							if(rank_pos == 0) {
								for(new j = 0; j < CREW_RANK_SIZE; j ++)
								CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][j] = 1;
							}
						}
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM crew_ranks WHERE id_crew = %d;", CREW_INFO[i][crew_ID]);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCrewRanksLoad);
			}
			LoadGangZones();
		}
	}
	mysql_tquery_inline(handle_db, "SELECT * FROM crews;", using inline OnCrewsLoad);
	return 1;
}


LoadGangZones()
{
	inline OnSaZonesLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_TERRITORIES)
				{
					printf("---> Límite superado en array 'TERRITORIES' al intentar cargar de la base de datos.");
					break;
				}

				new crewid, color, bool:isnull_crewid;
				TERRITORIES[i][territory_VALID] = true;
				reg_int(i, "id", TERRITORIES[i][territory_ID]);
				reg_name(i, "name", TERRITORIES[i][territory_NAME]);
				reg_float(i, "min_x", TERRITORIES[i][territory_MIN_X]);
				reg_float(i, "min_y", TERRITORIES[i][territory_MIN_Y]);
				reg_float(i, "min_z", TERRITORIES[i][territory_MIN_Z]);
				reg_float(i, "max_x", TERRITORIES[i][territory_MAX_X]);
				reg_float(i, "max_y", TERRITORIES[i][territory_MAX_Y]);
				reg_float(i, "max_z", TERRITORIES[i][territory_MAX_Z]);
				cache_is_value_name_null(i, "id_crew", isnull_crewid);
				if(!isnull_crewid) {
					reg_int(i, "id_crew", crewid);
					reg_int(i, "color", color);
				}
				TERRITORIES[i][territory_WAR] = false;
				TERRITORIES[i][territory_ATTACKER_CREW_INDEX] = 0;

				if(crewid)
				{
					TERRITORIES[i][territory_OCCUPIED] = true;
					TERRITORIES[i][territory_CREW_ID] = crewid;
					
					new r, g, b, a;
					HexToRGBA(color, r, g, b, a);
					TERRITORIES[i][territory_COLOR] = RGBAToHex(r, g, b, 135);
					TERRITORIES[i][territory_CREW_INDEX] = GetCrewIndexById(crewid);
				}
				else
				{
					TERRITORIES[i][territory_OCCUPIED] = false;
					TERRITORIES[i][territory_CREW_ID] = 0;
					TERRITORIES[i][territory_CREW_INDEX] = 0;
					TERRITORIES[i][territory_COLOR] = 0xCCCCCC55;
				}

				TERRITORIES[i][territory_AREA] = CreateDynamicCube(TERRITORIES[i][territory_MIN_X], TERRITORIES[i][territory_MIN_Y], TERRITORIES[i][territory_MIN_Z], TERRITORIES[i][territory_MAX_X], TERRITORIES[i][territory_MAX_Y], TERRITORIES[i][territory_MAX_Z], 0, 0);

				new info[2];
				info[0] = AREA_TYPE_GANGZONE;
				info[1] = i;
				Streamer_SetArrayData(STREAMER_TYPE_AREA, TERRITORIES[i][territory_AREA], E_STREAMER_EXTRA_ID, info);
				TERRITORIES[i][territory_GANG_ZONE] = GangZoneCreate(TERRITORIES[i][territory_MIN_X], TERRITORIES[i][territory_MIN_Y], TERRITORIES[i][territory_MAX_X], TERRITORIES[i][territory_MAX_Y]);
				
				TERRITORIES[i][territory_TEXTDRAW] = TextDrawCreate(320.000000, 406.000000, "Conquista:_0");
				TextDrawLetterSize(TERRITORIES[i][territory_TEXTDRAW], 0.286000, 1.276444);
				TextDrawAlignment(TERRITORIES[i][territory_TEXTDRAW], 2);
				TextDrawColor(TERRITORIES[i][territory_TEXTDRAW], -76);
				TextDrawSetShadow(TERRITORIES[i][territory_TEXTDRAW], 0);
				TextDrawSetOutline(TERRITORIES[i][territory_TEXTDRAW], 0);
				TextDrawBackgroundColor(TERRITORIES[i][territory_TEXTDRAW], 255);
				TextDrawFont(TERRITORIES[i][territory_TEXTDRAW], 1);
				TextDrawSetProportional(TERRITORIES[i][territory_TEXTDRAW], 1);
				TextDrawSetShadow(TERRITORIES[i][territory_TEXTDRAW], 0);
			}
			CallLocalFunction("OnTerritoriesLoaded", "");
			LoadATMBank();
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT territories.*, crews.id AS crewid, crews.color FROM territories LEFT JOIN crews ON territories.id_crew = crews.id WHERE territories.gangzone = 1 LIMIT %d;", MAX_TERRITORIES);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnSaZonesLoad);
	return 1;
}

forward server_loaded_request();
public server_loaded_request()
{
	server_loaded = true;
	SendRconCommandf("hostname "SERVER_HOSTNAME" !%s¡", HostNames[ random(sizeof(HostNames)) ]);
	SendRconCommand("query 1");
	return 1;
}

task RandomHostname[5000]()
{
	SendRconCommandf("hostname "SERVER_HOSTNAME" !%s¡", HostNames[ random(sizeof(HostNames)) ]);
}

GetCrewIndexById(id)
{
	for(new x = 0; x != MAX_CREWS; x ++)
	{
		if(!CREW_INFO[x][crew_VALID]) continue;
		
		if(CREW_INFO[x][crew_ID] == id)
		{
			return x;
		}
	}
	return -1;
}

#define OnPlayerPickDynPickup OnPlayerPickUpDynamicPickup
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	pTemp(playerid)[pt_LAST_PICKUP_ID] = pickupid;
	return 1;
}

hook OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(pTemp(playerid)[pt_GAME_STATE] != GAME_STATE_NORMAL) return 1;
	
	if(newkeys &  KEY_CTRL_BACK)
	{
		for(new i = 0; i != E_WORKS; i ++)	
		{
			if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;
			
			if(GetPlayerInterior(playerid) == obtain_work_coords[i][obtain_work_INTERIOR])
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z]))
				{
					PC_EmulateCommand(playerid, "/trabajar");
					return 1;
				}
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 1.0, -474.596282, 289.679107, 2004.584960)) return PC_EmulateCommand(playerid, "/pvender");
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -508.645385, 322.147644, 2004.585937)) return PC_EmulateCommand(playerid, "/grua");

		if(IsPlayerInDynamicArea(playerid, Farmer_Area))
		{
			for(new i = 0; i != MAX_PLANTS; i ++)
			{
				new Float:pos[3];
				GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);

				if(IsPlayerInRangeOfPoint(playerid, 1.5, pos[0], pos[1], pos[2]))
				{
					PC_EmulateCommand(playerid, "/recoger");
					return 1;
				}
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 1.0, -1077.4634, -1155.7748, 129.2188) || IsPlayerInRangeOfPoint(playerid, 1.0, -1073.3785, -1155.9309, 129.2188) || IsPlayerInRangeOfPoint(playerid, 1.0, -1069.5953, -1155.9102, 129.2188))
		{
			if(!PLAYER_WORKS[playerid][WORK_FARMER][pwork_SET]) return SendMessage(playerid, "~r~No eres agricultor.");
			if(GetPlayerVirtualWorld(playerid) != 0) return 1;
			if(GetPlayerInterior(playerid) != 0) return 1;
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
			//if(!IsPlayerInRangeOfPoint(playerid, 1.0, -1077.4634, -1155.7748, 129.2188)) return SendMessage(playerid, "No estás en el lugar adecuado.");
			
			ShowDialog(playerid, DIALOG_SEED_LIST);
			return 1;
		}

		for(new i; i != sizeof MechanicStartWorkingCoords; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, MechanicStartWorkingCoords[i][0], MechanicStartWorkingCoords[i][1], MechanicStartWorkingCoords[i][2]))
			{
				if(!pTemp(playerid)[pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_MECHANIC, INVALID_VEHICLE_ID);
				else CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
				return 1;
			}
		}

		if(pTemp(playerid)[pt_INTERIOR_INDEX] != -1 && ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_NO_INFO)
		{
			new index = GetBankLocalIndexByIntType(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
			if(index != -1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, Bank_Interior_Positions[index][bank_X], Bank_Interior_Positions[index][bank_Y], Bank_Interior_Positions[index][bank_Z])) 
				{
					PC_EmulateCommand(playerid, "/banco");
					return 1;
				}
			}
		}

		new info[3];
		new Float:pos[3];
		Streamer_GetArrayData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		if(info[0] == PICKUP_TYPE_ATM)
		{
			Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
			Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
			Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

			if(IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2]))
			{
				PC_EmulateCommand(playerid, "/cajero");
				return 1;
			}
		}

		new indexx = GetPlayerFastFoodIndex(playerid);
		if(indexx != -10) return PC_EmulateCommand(playerid, "/pedir");

		if(pTemp(playerid)[pt_INTERIOR_INDEX] != -1 && ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_NO_INFO)
		{
			pTemp(playerid)[pt_CLOTHING_SHOP] = GetClothingShopIndexByIntType(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
			if(pTemp(playerid)[pt_CLOTHING_SHOP] != -1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[pTemp(playerid)[pt_CLOTHING_SHOP]][clothing_shop_X], Clothing_Shop_Positions[pTemp(playerid)[pt_CLOTHING_SHOP]][clothing_shop_Y], Clothing_Shop_Positions[pTemp(playerid)[pt_CLOTHING_SHOP]][clothing_shop_Z]))
				{
					ShowDialog(playerid, DIALOG_CLOTHES);
					return 1;
				}
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2119.059814, -2001.701904, 7.984375)) 
		{
			PC_EmulateCommand(playerid, "/mercado");
			return 1;
		}
		if(pTemp(playerid)[pt_INTERIOR_INDEX] != -1 && ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_247)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, -27.964675, -89.948631, 1003.546875)) 
			{
				PC_EmulateCommand(playerid, "/productos");
				return 1;
			}
		}
		
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 253.280288, 76.219017, 1003.640625) || IsPlayerInRangeOfPoint(playerid, 1.0, 266.547180, 119.652816, 1004.617187) || IsPlayerInRangeOfPoint(playerid, 1.0, 217.816406, 187.667922, 1003.031250))
		{
			if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
			if(pTemp(playerid)[pt_WORKING_IN] != WORK_NONE && pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE)
			{
				SendClientMessagef(playerid, -1, "Tienes que dejar de estar de servicio como %s primero.", work_info[ pTemp(playerid)[pt_WORKING_IN] ][work_info_NAME]);
				return 1;
			}
			
			if(!pTemp(playerid)[pt_WORKING_IN]) ShowDialog(playerid, DIALOG_SELECT_POLICE_SKIN);
			else
			{
				CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id_player = %d;", PI[playerid][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				ResetPlayerWeaponsEx(playerid);
			}
			return 1;
		}

		if((IsPlayerInRangeOfPoint(playerid, 2.0, 219.244018, 69.982215, 1005.039062) || IsPlayerInRangeOfPoint(playerid, 2.0, 262.945587, 109.785270, 1004.617187) || IsPlayerInRangeOfPoint(playerid, 2.0, 222.683914, 186.956054, 1003.031250)) && PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
		{
			if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
			if(!IsPlayerWorking(playerid, WORK_POLICE)) return SendMessage(playerid, "No estas de servicio como policía.");

			ShowDialog(playerid, DIALOG_POLICE_EQUIPTMENT);
			return 1;
		}
	}
	else if(newkeys & KEY_FIRE)
	{
		if(PI[playerid][pi_LEVEL] == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE) ApplyAnimation(playerid, "PED", "IDLE_tired", 4.1, false, false, false, false, 0);
		return 1;
	}
	else if(newkeys & KEY_CROUCH)
	{
		if(pTemp(playerid)[pt_GAME_STATE] == GAME_STATE_NORMAL)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				VehicleEnterExitGarage(playerid);

				if(IsPlayerInRangeOfPoint(playerid, 5.0, -602.2586, -508.6797, 25.2885))
				{
					PC_EmulateCommand(playerid, "/tuning");
					return 1;
				}

				for(new i = 0; i != sizeof San_Andreas_Barriers; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, San_Andreas_Barriers[i][barrier_DISTANCE], San_Andreas_Barriers[i][barrier_PLAYER_X], San_Andreas_Barriers[i][barrier_PLAYER_Y], San_Andreas_Barriers[i][barrier_PLAYER_Z]))
					{
						if(GetPlayerInterior(playerid) == San_Andreas_Barriers[i][barrier_INTERIOR] && GetPlayerVirtualWorld(playerid) == San_Andreas_Barriers[i][barrier_WORLD])
						{
							if(San_Andreas_Barriers[i][barrier_VEHICLE_TYPE] == VEHICLE_TYPE_WORK)
							{
								if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE)
								{
									if(San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN2] != WORK_NONE)
									{
										if(!PLAYER_WORKS[playerid][ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][pwork_SET] && !PLAYER_WORKS[playerid][ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN2] ][pwork_SET]) break;
									}
									else
									{
										if(!PLAYER_WORKS[playerid][ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][pwork_SET]) break;
									}
								}
							}
							if(IsDynamicObjectMoving(San_Andreas_Barriers[i][barrier_OBJECT_ID]) && !San_Andreas_Barriers[i][barrier_CLOSING]) break;
							if(San_Andreas_Barriers[i][barrier_PRICE] > 0) {
								if(GivePlayerCash(playerid, -San_Andreas_Barriers[i][barrier_PRICE], false, true)) {
									SendClientMessagef(playerid, -1, "Has pagado el peaje por %s dólares.", number_format_thousand(San_Andreas_Barriers[i][barrier_PRICE]));
								}
								else {
									SendClientMessagef(playerid, -1, "No tienes suficiente dinero para pagar el peaje.");
									break;
								}
							}
							
							KillTimer(San_Andreas_Barriers[i][barrier_TIMER]);
							San_Andreas_Barriers[i][barrier_TIMER] = SetTimerEx("CloseBarrier", 5000, false, "i", i);
							MoveDynamicObject(San_Andreas_Barriers[i][barrier_OBJECT_ID], San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967 + 0.01, 0.0065, 0.0, 0.0, San_Andreas_Barriers[i][barrier_ROTATION]);
							San_Andreas_Barriers[i][barrier_CLOSING] = false;
							break;
						}
						else break;
					}
				}
			}

			if(PLAYER_WORKS[playerid][WORK_TRUCK][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] == WORK_TRUCK) 
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendMessage(playerid, "~r~No estás conduciendo un vehiculo de trabajo.");
				if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return SendMessage(playerid, "~r~No estás conduciendo un vehiculo de trabajo.");

				for(new i = 0; i != sizeof LoadTrucksPoints; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2]))
					{
						if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED]) return SendMessage(playerid, "~y~El camión ya está cargado.");
						if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendMessage(playerid, "~y~El camión ya se está cargando.");
				
						TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING] = true;
						TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] = PI[playerid][pi_ID];
							
						SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
							
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
						UpdateVehicleParams(vehicleid);
						
						new index = random(TRUCK_MAX_ROUTES);
						while(!Truck_Contents[index][truck_content_VALID])
						{
							index = random(TRUCK_MAX_ROUTES);
						}

						TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] = index;
						
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], "");
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
						
						pTemp(playerid)[pt_TRUCK_LOADING_VALUE] = 35.0;
						UpdatePlayerLoadingTruckSize(playerid);
						KillTimer(pTemp(playerid)[pt_TIMERS][7]);
						KillTimer(pTemp(playerid)[pt_TIMERS][9]);
						pTemp(playerid)[pt_TIMERS][9] = SetTimerEx("TruckLoadUp", 1000, false, "ii", playerid, vehicleid);
						
						SendMessage(playerid, "~g~El camión se está cargando, si sales de él se cancelará el viaje.");
						return 1;
					}
				}
			}
			
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
			{
				if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
				{
					for(new i = 0; i != sizeof POLICE_GARAGE_DOORS; i ++)
					{
						if(IsPlayerInRangeOfPoint(playerid, 20.0, POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Z]))
						{
							if(IsDynamicObjectMoving(POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID]) && !POLICE_GARAGE_DOORS[i][police_gdoor_CLOSING]) break;
							
							KillTimer(POLICE_GARAGE_DOORS[i][police_gdoor_TIMER]);
							POLICE_GARAGE_DOORS[i][police_gdoor_TIMER] = SetTimerEx("ClosePoliceGarageDoor", 5000, false, "i", i);
							MoveDynamicObject(POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_X], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_Z], POLICE_GARAGE_DOORS[i][police_gdoor_MOVE_SPEED], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RX], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RY], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RZ]);
							POLICE_GARAGE_DOORS[i][police_gdoor_CLOSING] = false;
							break;
						}
					}
				}
			}
		}
		return 1;
	}
	else if(newkeys & KEY_SECONDARY_ATTACK)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
			{
				for(new i = 0; i != sizeof POLICE_DOORS; i ++)
				{
					if(GetPlayerInterior(playerid) != POLICE_DOORS[i][police_door_INTERIOR] || GetPlayerVirtualWorld(playerid) != POLICE_DOORS[i][police_door_WORLD]) continue;
					if(IsDynamicObjectMoving(POLICE_DOORS[i][police_door_OBJECT_ID]) || !POLICE_DOORS[i][police_door_CLOSED]) continue;
					
					new Float:pos[4];
					
					pos[0] = POLICE_DOORS[i][police_door_X] + (1.0 * floatsin(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[1] = POLICE_DOORS[i][police_door_Y] + (1.0 * floatcos(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[2] = POLICE_DOORS[i][police_door_X] + (-1.0 * floatsin(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[3] = POLICE_DOORS[i][police_door_Y] + (-1.0 * floatcos(-POLICE_DOORS[i][police_door_RZ], degrees));
					
					if(IsPlayerInRangeOfPoint(playerid, 1.8, pos[0], pos[1], POLICE_DOORS[i][police_door_Z]))
					{
						KillTimer(POLICE_DOORS[i][police_door_TIMER]);
						POLICE_DOORS[i][police_door_TIMER] = SetTimerEx("ClosePoliceDoor", 3000, false, "i", i);
						MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z] + 0.01, 0.0125, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ] - 85.0);
						POLICE_DOORS[i][police_door_CLOSED] = false;
						break;
					}
					else if(IsPlayerInRangeOfPoint(playerid, 1.8, pos[2], pos[3], POLICE_DOORS[i][police_door_Z]))
					{
						KillTimer(POLICE_DOORS[i][police_door_TIMER]);
						POLICE_DOORS[i][police_door_TIMER] = SetTimerEx("ClosePoliceDoor", 3000, false, "i", i);
						MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z] + 0.01, 0.0125, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ] + 85.0);
						POLICE_DOORS[i][police_door_CLOSED] = false;
						break;
					}
				}
			}
		}
		return 1;
	}
	else if(newkeys & KEY_NO)
	{
		if(IsPlayerInDynamicArea(playerid, Lumberjack_Area))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(pTemp(playerid)[pt_WORKING_IN] == WORK_LUMBERJACK)
				{
					if(pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] == -1)
					{
						if(pTemp(playerid)[pt_PLAYER_CARRYING_TREE]) return SendClientMessage(playerid,-1, "{"#SILVER_COLOR"}Lleva la leña cortada al punto marcado para talar más árboles.");
						
						for(new i = 0; i != sizeof LUMBER_TREES; i ++)
						{
							if(IsPlayerInRangeOfPoint(playerid, 2.0, LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z]))
							{
								if(LUMBER_TREES[i][lumber_tree_STATE] == LUMBER_TREE_STATE_NORMAL)
								{
									TogglePlayerControllableEx(playerid, false);
									SetCameraBehindPlayer(playerid);
									ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, true, false, false, false, 0);
									LUMBER_TREES[i][lumber_tree_STATE] = LUMBER_TREE_STATE_CUTTING;
									pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] = i;
									
									RemovePlayerAttachedObject(playerid, 9);
									SetPlayerAttachedObject(playerid, 9, 341, 6);
									SetPlayerArmedWeapon(playerid, 0);
									
									new label_str[256];
									format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Talando... {"#SILVER_COLOR"}(%.1f%%)", pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE], 0.0);
									UpdateDynamic3DTextLabelText(LUMBER_TREES[ pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_LABEL], -1, label_str);
									SetPlayerKeyPress(playerid, minrand(30, 50));
								}
								return Y_HOOKS_BREAK_RETURN_1;
							}
						}
					}
				}
			}
		}
		return 1;
	}
	else if(newkeys & KEY_YES) 
	{
		switch(GetPlayerState(playerid)) 
		{
			case PLAYER_STATE_DRIVER: 
			{
				PC_EmulateCommand(playerid, "/motor");
			}
			case PLAYER_STATE_ONFOOT: 
			{
				if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return 1;
				if(pTemp(playerid)[pt_LAST_PICKUP_ID] == 0) return 1;
					
				new info[3];
				new Float:pos[3];
				Streamer_GetArrayData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
				if(info[0] == PICKUP_TYPE_NONE) return 1;

				Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
				Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pTemp(playerid)[pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return 1;

				switch(info[0])
				{
					case PICKUP_TYPE_ENTER_EXIT:
					{
						if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] == WORK_POLICE) pTemp(playerid)[pt_DISPENSARY] = GetNearestDispensaryForPlayer(playerid);
						else pTemp(playerid)[pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
				
						if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
						{
							PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
							PI[playerid][pi_LOCAL_INTERIOR] = 0;
							pTemp(playerid)[pt_INTERIOR_INDEX] = -1;
							SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_EXT_X], ENTER_EXIT[info[1]][ee_EXT_Y], ENTER_EXIT[info[1]][ee_EXT_Z], ENTER_EXIT[info[1]][ee_EXT_ANGLE], ENTER_EXIT[info[1]][ee_EXT_INTERIOR], ENTER_EXIT[info[1]][ee_EXT_WORLD], false /*ENTER_EXIT[info[1]][ee_EXT_FREEZE]*/);
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
							StopAudioStreamForPlayer(playerid);
							FreezePlayer(playerid);
							CallLocalFunction("OnPlayerExitInterior", "ii", playerid, info[1]);
						}
						else if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
						{
							if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == 0 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == 0) // 24 horas
							{
								PI[playerid][pi_STATE] = ROLEPLAY_STATE_INTERIOR;
								PI[playerid][pi_LOCAL_INTERIOR] = ENTER_EXIT[info[1]][ee_ID];
								pTemp(playerid)[pt_INTERIOR_INDEX] = info[1];
								SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
								FreezePlayer(playerid);
								CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);
							}
							else
							{
								if(is_open(GetMyWorldHour(), ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]))
								{
									PI[playerid][pi_STATE] = ROLEPLAY_STATE_INTERIOR;
									PI[playerid][pi_LOCAL_INTERIOR] = ENTER_EXIT[info[1]][ee_ID];
									pTemp(playerid)[pt_INTERIOR_INDEX] = info[1];
									SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
									FreezePlayer(playerid);
									CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);							
								}
								else {
									if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == -1 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == -1) SendClientMessagef(playerid, -1, "%s abrirá próximamente.", ENTER_EXIT[info[1]][ee_NAME]);
									else SendClientMessagef(playerid, -1, "%s está cerrado, su horario es: %02d:00h - %02d:00h.", ENTER_EXIT[info[1]][ee_NAME], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]);
								}
							}
						}
						else return 1;
					}
					case PICKUP_TYPE_PROPERTY:
					{
						if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] == WORK_POLICE) pTemp(playerid)[pt_DISPENSARY] = GetNearestDispensaryForPlayer(playerid);
						else pTemp(playerid)[pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
						
						if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
						{
							PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
							PI[playerid][pi_LOCAL_INTERIOR] = 0;
							pTemp(playerid)[pt_PROPERTY_INDEX] = -1;
							SetPlayerPosEx(playerid, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z], PROPERTY_INFO[info[1]][property_EXT_ANGLE], PROPERTY_INFO[info[1]][property_EXT_INTERIOR], 0, false /*PROPERTY_INFO[info[1]][property_EXT_FREEZE]*/, false);
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
							StopAudioStreamForPlayer(playerid);
							FreezePlayer(playerid);
						}
						else if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
						{
							if(PROPERTY_INFO[info[1]][property_POLICE_FORCED] && (PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] == WORK_POLICE)) {
								
								SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
								FreezePlayer(playerid);
								return 1;
							}
							if(!PROPERTY_INFO[info[1]][property_SOLD]) return SendClientMessagef(playerid, -1, "Esta propiedad está en venta.");
							if(PROPERTY_INFO[info[1]][property_CREW])
							{
								if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "Solo miembros de la banda pueden entrar.");
								if(PI[playerid][pi_CREW] != PROPERTY_INFO[info[1]][property_CREW_ID]) return SendClientMessagef(playerid, -1, "Solo miembros de la banda pueden entrar.");
								
								PI[playerid][pi_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
								PI[playerid][pi_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
								pTemp(playerid)[pt_PROPERTY_INDEX] = info[1];

								
								SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
								FreezePlayer(playerid);
							}
							else
							{
								if(PROPERTY_INFO[info[1]][property_OWNER_ID] == PI[playerid][pi_ID])
								{
									PI[playerid][pi_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
									PI[playerid][pi_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
									pTemp(playerid)[pt_PROPERTY_INDEX] = info[1];

									
									SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
									FreezePlayer(playerid);
								}
								else
								{
									if(gettime() < pTemp(playerid)[pt_ANTIFLOOD_KNOCK_PROPERTY] + 10) return SendClientMessagef(playerid, -1, "Espera para volver a tocar, si no te quieren abrir, vete.");
									
									new owner_playerid = GetOwnerIntProperty(PROPERTY_INFO[info[1]][property_ID]);
									if(owner_playerid == -1) return SendClientMessagef(playerid, -1, "Esta no es tu propiedad y el dueño no está dentro para dejarte entrar.");
									
									pTemp(playerid)[pt_ANTIFLOOD_KNOCK_PROPERTY] = gettime();
									PlayerTemp[owner_playerid][pt_KNOCK_PLAYER_ID] = playerid;
									SendClientMessagef(owner_playerid, -1, "%s está tocando la puerta, para dejarle entrar ve a la puerta y usa /puerta.", pTemp(playerid)[pt_NAME]);
									SendClientMessagef(playerid, -1, "Has tocado en la puerta, espera para que te abran o vete.");
								}
							}
						}
						else return 1;
					}
					case PICKUP_TYPE_GARAGE:
					{
						EnterExitGarage(playerid);
					}
					default: return 1;
				}
			}
		}
	}
	return 1;
}

forward ClosePoliceDoor(i);
public ClosePoliceDoor(i)
{
	POLICE_DOORS[i][police_door_CLOSED] = true;
	MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z], 0.0125, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ]);
	return 1;
}

forward ClosePoliceGarageDoor(index);
public ClosePoliceGarageDoor(index)
{
	POLICE_GARAGE_DOORS[index][police_gdoor_CLOSING] = true;
	MoveDynamicObject(POLICE_GARAGE_DOORS[index][police_gdoor_OBJECT_ID], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_Z], POLICE_GARAGE_DOORS[index][police_gdoor_MOVE_SPEED], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RX], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RY], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RZ]);
	return 1;
}

forward CloseBarrier(i);
public CloseBarrier(i)
{
	San_Andreas_Barriers[i][barrier_CLOSING] = true;
	MoveDynamicObject(San_Andreas_Barriers[i][barrier_OBJECT_ID], San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967, 0.0065, 0.0, -90.0, San_Andreas_Barriers[i][barrier_ROTATION]);
	return 1;
}


public OnPlayerUpdate(playerid)
{
	if(pTemp(playerid)[pt_KICKED] || pTemp(playerid)[pt_GAME_STATE] != GAME_STATE_NORMAL || PI[playerid][pi_ID] <= 0 || PI[playerid][pi_LEVEL] <= 0) return 0;
	
	new player_state = GetPlayerState(playerid);
	if(player_state == PLAYER_STATE_SPAWNED || player_state == PLAYER_STATE_SPECTATING) return 1;
	
	new player_action = GetPlayerSpecialAction(playerid), Float:player_health, Float:player_armour, player_weapon = GetPlayerWeapon(playerid), current_gettime = gettime();
	GetPlayerHealth(playerid, player_health);
	GetPlayerArmour(playerid, player_armour);
	if(player_weapon) CheckWeaponAndAmmo(playerid, player_weapon);
	
	if(ac_Info[CHEAT_PLAYER_HEALTH][ac_Enabled])
	{
		if(player_health > PI[playerid][pi_HEALTH] + 5.0)
		{
			if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_PLAYER_HEALTH][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_HEALTH);
				else
				{
					if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_HEALTH][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_LAST_DETECTION] = current_gettime;
					if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_HEALTH][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_HEALTH);
				}
			}
		}
	}

	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK)
	{
		if(GetPlayerDistanceFromPoint(playerid, pTemp(playerid)[pt_INJURED_POS][0], pTemp(playerid)[pt_INJURED_POS][1], pTemp(playerid)[pt_INJURED_POS][2]) > 0.5) SetPlayerPosEx(playerid, pTemp(playerid)[pt_INJURED_POS][0], pTemp(playerid)[pt_INJURED_POS][1], pTemp(playerid)[pt_INJURED_POS][2], pTemp(playerid)[pt_INJURED_POS][3], 0, 0);
		ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, true, 0, 0, 1, 0, 1);
	}
	
	if(ac_Info[CHEAT_PLAYER_ARMOUR][ac_Enabled])
	{
		if(player_armour > PI[playerid][pi_ARMOUR] + 5.0)
		{
			if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_PLAYER_ARMOUR][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_ARMOUR);
				else
				{
					if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_ARMOUR][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_LAST_DETECTION] = current_gettime;
					if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_ARMOUR][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_ARMOUR);
				}
			}
		}
	}
	
	if(ac_Info[CHEAT_JETPACK][ac_Enabled])
	{
		if(player_action == SPECIAL_ACTION_USEJETPACK)
		{
			if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_JETPACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_JETPACK);
				else
				{
					if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_JETPACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_LAST_DETECTION] = current_gettime;
					if(PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_JETPACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_JETPACK);
				}
			}
		}
	}
	
	new Float:dis, Float:vehicle_health, vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) dis = GetPlayerDistanceFromPoint(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z]);
	else
	{
		dis = GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
		GetVehicleHealth(vehicleid, vehicle_health);
	}
	
	if(ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Enabled] && vehicleid && player_state == PLAYER_STATE_PASSENGER)
	{
		if(floatabs(dis) > 20.0)
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID)
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = current_gettime + 5;
			}
		}
	}
	
	if(ac_Info[CHEAT_HIGH_POS][ac_Enabled])
	{
		if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
		{
			if(floatabs(dis) > 80.0 && PI[playerid][pi_POS_Z] > -97.0)
			{
				if(player_state != PLAYER_STATE_PASSENGER)
				{
					if(!ac_Info[CHEAT_HIGH_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
					else
					{
						if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_HIGH_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] = current_gettime;
						if(PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_HIGH_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
					}
				}
			}
		}
	}

	switch(player_state)
	{
		case PLAYER_STATE_ONFOOT:
		{
			if(ac_Info[CHEAT_PLAYER_SPEED][ac_Enabled])
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_IMMUNITY])
				{
					new speed = GetPlayerSpeed(playerid);
					if(speed > 1000)
					{
						if(!ac_Info[CHEAT_PLAYER_SPEED][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_SPEED, speed);
						else
						{
							if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_SPEED][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_LAST_DETECTION] = current_gettime;
							if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_SPEED][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_SPEED, speed);
						}
					}
				}
			}
			
			if(ac_Info[CHEAT_POS][ac_Enabled])
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
				{
					if(GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID && player_action != SPECIAL_ACTION_ENTER_VEHICLE && player_action != SPECIAL_ACTION_EXIT_VEHICLE)
					{
						if(floatabs(dis) > 6.0 && PI[playerid][pi_POS_Z] > -97.0)
						{
							if(!ac_Info[CHEAT_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
							else
							{
								if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] = current_gettime;
								if(PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
							}
						}
					}
				}
			}
		}
		case PLAYER_STATE_DRIVER:
		{	
			new Float:vspeed = GetVehicleSpeed(vehicleid);
			
			if(ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Enabled])
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_IMMUNITY])
				{
					if(vspeed > 1000.0)
					{
						if(!ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
						else
						{
							if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] = current_gettime;
							if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
						}
					}
				}
			}
			
			if(ac_Info[CHEAT_VEHICLE_HEALTH][ac_Enabled])
			{
				if(vehicle_health > (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] + 20.0))
				{
					if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY])
					{						
						if(!ac_Info[CHEAT_VEHICLE_HEALTH][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_HEALTH, (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] + 5.0) - vehicle_health);
						else
						{
							if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_HEALTH][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_LAST_DETECTION] = current_gettime;
							if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_HEALTH][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_HEALTH);
						}
					}
				}
			}
			
			if(ac_Info[CHEAT_POS][ac_Enabled])
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
				{
					if(vspeed < 20.0 && floatabs(dis) >= 10.0 && GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] > -97.0)
					{
						if(!ac_Info[CHEAT_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
						else
						{
							if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] = current_gettime;
							if(PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
						}
					}
				}
			}
			
			if(ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Enabled])
			{
				new Keys, ud, lr;
				GetPlayerKeys(playerid, Keys, ud, lr);
				if(Keys == KEY_SPRINT)
				{
					if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] && vspeed > 60.0 && GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] > -97.0 && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_ENGINE])
					{
						if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_NOFUEL);
							else
							{
								if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_LAST_DETECTION] = current_gettime;
								if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_NOFUEL);
							}
						}
					}
				}
			}
		}
	}
	
	PI[playerid][pi_HEALTH] = player_health;
	PI[playerid][pi_ARMOUR] = player_armour;
	GetPlayerPos(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z]);
	if(vehicleid)
	{
		GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = vehicle_health;
	}
	return 1;
}

stock SavePlayerLastPos(playerid)
{
	GetPlayerPos(playerid, pTemp(playerid)[pt_LAST_PLAYER_POS][0], pTemp(playerid)[pt_LAST_PLAYER_POS][1], pTemp(playerid)[pt_LAST_PLAYER_POS][2]);
	GetPlayerFacingAngle(playerid, pTemp(playerid)[pt_LAST_PLAYER_POS][3]);
	pTemp(playerid)[pt_LAST_PLAYER_WORLD] = GetPlayerVirtualWorld(playerid);
	pTemp(playerid)[pt_LAST_PLAYER_INTERIOR] = GetPlayerInterior(playerid);
	return 1;
}

stock SetPlayerLastPos(playerid)
{
	SetPlayerPosEx(playerid, pTemp(playerid)[pt_LAST_PLAYER_POS][0], pTemp(playerid)[pt_LAST_PLAYER_POS][1], pTemp(playerid)[pt_LAST_PLAYER_POS][2], pTemp(playerid)[pt_LAST_PLAYER_POS][3], pTemp(playerid)[pt_LAST_PLAYER_INTERIOR], pTemp(playerid)[pt_LAST_PLAYER_WORLD]);
	return 1;
}

SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, Float:angle, interior, world, freeze = 0, addoffset = 0)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY] = gettime() + 5;
	
	if(addoffset)
	{
		x += (1.5 * floatsin(-angle, degrees));
		y += (1.5 * floatcos(-angle, degrees));
	}
	
	PI[playerid][pi_POS_X] = x;
	PI[playerid][pi_POS_Y] = y;
	PI[playerid][pi_POS_Z] = z;
	PI[playerid][pi_ANGLE] = angle;
	
	SetPlayerPos(playerid, x, y, z);
	SetPlayerFacingAngle(playerid, angle);
	SetPlayerInterior(playerid, interior);
	SetPlayerVirtualWorld(playerid, world);
	SetCameraBehindPlayer(playerid);
	
	if(freeze)
	{
		TogglePlayerControllableEx(playerid, false);
		KillTimer(pTemp(playerid)[pt_TIMERS][3]);
		pTemp(playerid)[pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	}
	return 1;
}

forward TogglePlayerControl(playerid, bool:controlable);
public TogglePlayerControl(playerid, bool:controlable)
{
	return TogglePlayerControllableEx(playerid, controlable);
}


GetNearestHospitalForPlayer(playerid)
{
	new Float:distance = 99999.0,
        Float:tmp_distance,
        closest = -1; 

    for(new i = 0; i < sizeof Hospital_Spawn_Positions; i++) 
	{
		tmp_distance = GetPlayerDistanceFromPoint(playerid, Hospital_Spawn_Positions[i][hspi_X], Hospital_Spawn_Positions[i][hspi_Y], Hospital_Spawn_Positions[i][hspi_Z]); 
		if (tmp_distance < distance) 
		{ 
			distance = tmp_distance; 
			closest = i;
		}
	}

	if(closest == -1) closest = 1;
	return closest;
}

GetHospitalSpawnPosition(hospital, &Float:x, &Float:y, &Float:z, &Float:angle, &interior, &local_interior, &rp_state)
{
	x = Hospital_Spawn_Positions[hospital][hspi_X];
	y = Hospital_Spawn_Positions[hospital][hspi_Y];
	z = Hospital_Spawn_Positions[hospital][hspi_Z];
	angle = Hospital_Spawn_Positions[hospital][hspi_ANGLE];
	interior = 0;
	local_interior = 0;
	rp_state = ROLEPLAY_STATE_NORMAL;
	return 1;
}

GetNearestDispensaryForPlayer(playerid)
{
	new Float:distance = 99999.0,
        Float:tmp_distance,
        closest = -1; 

    for(new i = 0; i < sizeof Police_Dispensary_Positions; i++) 
	{
		tmp_distance = GetPlayerDistanceFromPoint(playerid, Police_Dispensary_Positions[i][hspi_X], Police_Dispensary_Positions[i][hspi_Y], Police_Dispensary_Positions[i][hspi_Z]); 
		if (tmp_distance < distance) 
		{ 
			distance = tmp_distance; 
			closest = i;
		}
	}

	if(closest == -1) closest = 1;
	return closest;
}

GetDispensarySpawnPosition(dispensary, &Float:x, &Float:y, &Float:z, &Float:angle, &interior, &local_interior, &rp_state)
{
	x = Police_Dispensary_Positions[dispensary][hspi_X];
	y = Police_Dispensary_Positions[dispensary][hspi_Y];
	z = Police_Dispensary_Positions[dispensary][hspi_Z];
	angle = Police_Dispensary_Positions[dispensary][hspi_ANGLE];
	interior = 0;
	local_interior = 0;
	rp_state = ROLEPLAY_STATE_NORMAL;
	return 1;
}

UpdateHospitalSizeTextdrawLife(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 270.0 + ( pTemp(playerid)[pt_HOSPITAL_LIFE] * 0.98), 0.000000);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
	return 1;
}

forward HealthUp(playerid);
public HealthUp(playerid)
{
	if(PI[playerid][pi_STATE] != ROLEPLAY_STATE_HOSPITAL) return 1;
	
	if(pTemp(playerid)[pt_HOSPITAL_LIFE] < 100.0)
	{
		if(PI[playerid][pi_VIP]) pTemp(playerid)[pt_HOSPITAL_LIFE] += 10.0;
		else pTemp(playerid)[pt_HOSPITAL_LIFE] += 5.0;
		
		if(pTemp(playerid)[pt_HOSPITAL_LIFE] > 100.0) pTemp(playerid)[pt_HOSPITAL_LIFE] = 100.0;
		UpdateHospitalSizeTextdrawLife(playerid);
		KillTimer(pTemp(playerid)[pt_TIMERS][4]);
		pTemp(playerid)[pt_TIMERS][4] = SetTimerEx("HealthUp", 1000, false, "i", playerid);
	}
	else
	{
		if(PI[playerid][pi_VIP]) PI[playerid][pi_HEALTH] = 100.0;
		else PI[playerid][pi_HEALTH] = 50.0;
		
		SetPlayerHealthEx(playerid, PI[playerid][pi_HEALTH]);
		
		ClearPlayerChat(playerid);
		SendClientMessagef(playerid, -1, "Te has recuperado.");
		new price = PI[playerid][pi_LEVEL] * 200;
		if(price > 1200) price = 1200;
		price += minrand(100, 200);
		
		if(price > PI[playerid][pi_CASH])
		{
			price = PI[playerid][pi_CASH];
			if(price < 0) price = 0;
		}

		SendClientMessagef(playerid, -1, "El coste de los servicios médicos ofrecidos es de %s dólares.", number_format_thousand(price));
		GivePlayerCash(playerid, -price, false, true);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
		PI[playerid][pi_LOCAL_INTERIOR] = 0;
		pTemp(playerid)[pt_INTERIOR_INDEX] = -1;
		
		if(PI[playerid][pi_WANTED_LEVEL] > 0 || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED)
		{
			PI[playerid][pi_STATE] = ROLEPLAY_STATE_JAIL;
			if(PI[playerid][pi_VIP]) PI[playerid][pi_POLICE_JAIL_TIME] = 150 * PI[playerid][pi_WANTED_LEVEL];
			else PI[playerid][pi_POLICE_JAIL_TIME] = 300 * PI[playerid][pi_WANTED_LEVEL];
			PI[playerid][pi_WANTED_LEVEL] = 0;
			PI[playerid][pi_POLICE_JAIL_ID] = 0;
			pTemp(playerid)[pt_ENTER_JAIL_TIME] = gettime();
			SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_ANGLE], 0, 0, 0, 0, 0, 0);
			PI[playerid][pi_INTERIOR] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR];
			SetPlayerVirtualWorld(playerid, 0);
			
			new time = PI[playerid][pi_POLICE_JAIL_TIME] - (gettime() - pTemp(playerid)[pt_ENTER_JAIL_TIME]);
			SendClientMessagef(playerid, -1, "Te quedan %s minutos de condena.", TimeConvert(time));
		}
		else
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] == WORK_POLICE) GetDispensarySpawnPosition(pTemp(playerid)[pt_DISPENSARY], PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], PI[playerid][pi_INTERIOR], PI[playerid][pi_LOCAL_INTERIOR], PI[playerid][pi_STATE]);
			else GetHospitalSpawnPosition(pTemp(playerid)[pt_HOSPITAL], PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], PI[playerid][pi_INTERIOR], PI[playerid][pi_LOCAL_INTERIOR], PI[playerid][pi_STATE]);

			SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], 0, 0, 0, 0, 0, 0);
		}
		pTemp(playerid)[pt_PLAYER_FINISH_HOSPITAL] = true;
		TogglePlayerSpectatingEx(playerid, false);
	}
	return 1;
}

TogglePlayerSpectatingEx(playerid, bool:spectate)
{
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_IMMUNITY] = gettime() + 3;
	pTemp(playerid)[pt_PLAYER_SPECTATE] = spectate;
	return TogglePlayerSpectating(playerid, spectate);
}

#define MAX_INTERIOR_ACTORS 10
enum Interior_Actor_Enum
{
	bool:ia_VALID,
	ia_SKIN,
	Float:ia_POS_X,
	Float:ia_POS_Y,
	Float:ia_POS_Z,
	Float:ia_POS_A,
}

CreateInteriorActor(interior_type, world, interior)
{
	if(interior_type == INTERIOR_NO_INFO) return INVALID_ACTOR_ID;
	
	new InteriorActorInfo[MAX_INTERIOR_ACTORS][Interior_Actor_Enum];
	
	switch(interior_type)
	{
		/*case INTERIOR_GENERAL_HOSPITAL:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 308;
			InteriorActorInfo[0][ia_POS_X]	= 1969.236572;
			InteriorActorInfo[0][ia_POS_Y]	= 1169.541259;
			InteriorActorInfo[0][ia_POS_Z]	= -5.208700;
			InteriorActorInfo[0][ia_POS_A]	= 178.0;
		}*/
		case INTERIOR_BINCO:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 119;
			InteriorActorInfo[0][ia_POS_X]	= 208.376373;
			InteriorActorInfo[0][ia_POS_Y]	= -98.703956;
			InteriorActorInfo[0][ia_POS_Z]	= 1005.257812;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_SUBURBAN:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 191;
			InteriorActorInfo[0][ia_POS_X]	= 203.826187;
			InteriorActorInfo[0][ia_POS_Y]	= -41.667518;
			InteriorActorInfo[0][ia_POS_Z]	= 1001.804687;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_PROLAPS:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 190;
			InteriorActorInfo[0][ia_POS_X]	= 207.139907;
			InteriorActorInfo[0][ia_POS_Y]	= -127.805473;
			InteriorActorInfo[0][ia_POS_Z]	= 1003.507812;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_DIDIER_SACHS:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 169;
			InteriorActorInfo[0][ia_POS_X]	= 204.275909;
			InteriorActorInfo[0][ia_POS_Y]	= -157.829010;
			InteriorActorInfo[0][ia_POS_Z]	= 1000.523437;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_VICTIM:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 217;
			InteriorActorInfo[0][ia_POS_X]	= 204.853225;
			InteriorActorInfo[0][ia_POS_Y]	= -8.764448;
			InteriorActorInfo[0][ia_POS_Z]	= 1001.210937;
			InteriorActorInfo[0][ia_POS_A]	= 270.0;
		}
		case INTERIOR_ZIP:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 211;
			InteriorActorInfo[0][ia_POS_X]	= 162.226135;
			InteriorActorInfo[0][ia_POS_Y]	= -81.191978;
			InteriorActorInfo[0][ia_POS_Z]	= 1001.804687;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_247:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 184;
			InteriorActorInfo[0][ia_POS_X]	= -27.483411;
			InteriorActorInfo[0][ia_POS_Y]	= -91.628837;
			InteriorActorInfo[0][ia_POS_Z]	= 1003.546875;
			InteriorActorInfo[0][ia_POS_A]	= 0.0;
		}
		case INTERIOR_PIZZA:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 155;
			InteriorActorInfo[0][ia_POS_X] 	= 375.114501;
			InteriorActorInfo[0][ia_POS_Y] 	= -117.272621;
			InteriorActorInfo[0][ia_POS_Z] 	= 1001.492187;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_CLUCKIN_BELL:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 167;
			InteriorActorInfo[0][ia_POS_X] 	= 368.652679;
			InteriorActorInfo[0][ia_POS_Y] 	= -4.492218;
			InteriorActorInfo[0][ia_POS_Z] 	= 1001.851562;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_BURGER_SHOT:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 205;
			InteriorActorInfo[0][ia_POS_X] 	= 376.114227;
			InteriorActorInfo[0][ia_POS_Y] 	= -65.848991;
			InteriorActorInfo[0][ia_POS_Z] 	= 1001.507812;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_BANK_LS:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 59;
			InteriorActorInfo[0][ia_POS_X] 	= 1407.526489;
			InteriorActorInfo[0][ia_POS_Y] 	= 1321.833496;
			InteriorActorInfo[0][ia_POS_Z] 	= 1501.091918;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_BANK_SF:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 59;
			InteriorActorInfo[0][ia_POS_X] 	= 1104.802001;
			InteriorActorInfo[0][ia_POS_Y] 	= 1531.275634;
			InteriorActorInfo[0][ia_POS_Z] 	= 1452.475097;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_BANK_LV:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 59;
			InteriorActorInfo[0][ia_POS_X] 	= 2692.497558;
			InteriorActorInfo[0][ia_POS_Y] 	= -610.933593;
			InteriorActorInfo[0][ia_POS_Z] 	= -71.658203;
			InteriorActorInfo[0][ia_POS_A]	= 90.0;
		}
		case INTERIOR_CITY_HALL_LS:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 186;
			InteriorActorInfo[0][ia_POS_X] 	= -474.572387;
			InteriorActorInfo[0][ia_POS_Y] 	= 287.982879;
			InteriorActorInfo[0][ia_POS_Z] 	= 2004.584960;
			InteriorActorInfo[0][ia_POS_A]	= 0.0;
		}
		case INTERIOR_UNITY_STATION:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 184;
			InteriorActorInfo[0][ia_POS_X] 	= 1489.038818;
			InteriorActorInfo[0][ia_POS_Y] 	= 1305.631591;
			InteriorActorInfo[0][ia_POS_Z] 	= 1093.296386;
			InteriorActorInfo[0][ia_POS_A]	= 270.0;
		}
		default: return INVALID_ACTOR_ID;
	}

	new mainActor = INVALID_ACTOR_ID;
	for(new i; i != sizeof InteriorActorInfo; i++) {
		if(InteriorActorInfo[i][ia_VALID]) {
			new tmp = CreateDynamicActor(InteriorActorInfo[i][ia_SKIN], InteriorActorInfo[i][ia_POS_X], InteriorActorInfo[i][ia_POS_Y], InteriorActorInfo[i][ia_POS_Z], InteriorActorInfo[i][ia_POS_A], true, 100.0, world, interior);
			if(i == 0) {
				mainActor = tmp;
			}
		}
	}

	return mainActor;
}

GetBuyPropertySiteIndexByIntTyp(interior_type)
{
	for(new i = 0; i != sizeof BUY_PROPERTIES_SITES; i ++)
	{
		if(BUY_PROPERTIES_SITES[i][site_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

GetBankLocalIndexByIntType(interior_type)
{
	for(new i = 0; i != sizeof Bank_Interior_Positions; i ++)
	{
		if(Bank_Interior_Positions[i][bank_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

GetPlayerFastFoodIndex(playerid)
{
	for(new i = 0; i != sizeof Fast_Food_Positions; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, Fast_Food_Positions[i][fast_food_X], Fast_Food_Positions[i][fast_food_Y], Fast_Food_Positions[i][fast_food_Z]))
		{
			return i;
		}
	}
	return -10;
}

GetClothingShopIndexByIntType(interior_type)
{
	for(new i = 0; i != sizeof Clothing_Shop_Positions; i ++)
	{
		if(Clothing_Shop_Positions[i][clothing_shop_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

ShowToysShopTextdraws(playerid)
{
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9]);
	return 1;
}

HideToysShopTextdraws(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9]);
	return 1;
}

ClosePlayerToysMenu(playerid)
{
	SetPlayerVirtualWorld(playerid, ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INT_WORLD] );
	TogglePlayerControllableEx(playerid, true);
	
	HideToysShopTextdraws(playerid);
	//pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] = 0;
	pTemp(playerid)[pt_TOYS_SHOP] = false;
	CancelSelectTextDrawEx(playerid);
	return 1;
}

RegisterNewPlayerToy(playerid, slot)
{
	inline OnPlayerToyInserted()
	{
		PLAYER_TOYS[playerid][slot][player_toy_ID] = cache_insert_id();
	}

	mysql_format
	(
		handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO ptoys(id_player, name, attached, modelid, bone, offset_x, offset_y, offset_z, rot_x, rot_y, rot_z, scale_x, scale_y, scale_z, color1, color2)\
			VALUES(%d, '%e', %d, %d, %d, %f, %f, %f, %f, %f, %f, %f, %f, %f, %d, %d);\
		",
			PI[playerid][pi_ID], PLAYER_TOYS[playerid][slot][player_toy_NAME], PLAYER_TOYS[playerid][slot][player_toy_ATTACHED], PLAYER_TOYS[playerid][slot][player_toy_MODELID],
			PLAYER_TOYS[playerid][slot][player_toy_BONE], PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X], PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y],
			PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z], PLAYER_TOYS[playerid][slot][player_toy_ROT_X], PLAYER_TOYS[playerid][slot][player_toy_ROT_Y],
			PLAYER_TOYS[playerid][slot][player_toy_ROT_Z], PLAYER_TOYS[playerid][slot][player_toy_SCALE_X], PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y],
			PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z], PLAYER_TOYS[playerid][slot][player_toy_COLOR_1], PLAYER_TOYS[playerid][slot][player_toy_COLOR_2]
	);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPlayerToyInserted);
	return 1;
}

UpdateToysShop(playerid)
{
	if(!pTemp(playerid)[pt_TOYS_SHOP]) return 0;
	
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_NAME]);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop[ pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);
	
	new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_%s$", Toys_Shop[ pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], number_format_thousand( Toys_Shop[ pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] ));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
	
	
	if(PI[playerid][pi_CASH] < Toys_Shop[ pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
	else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	
	format(td_str, sizeof td_str, "%d/%d", pTemp(playerid)[pt_TOYS_SHOP_TOY_SELECTED] + 1, sizeof(Toys_Shop));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], td_str);
	return 1;
}

ShowClothingShopTextdraws(playerid)
{
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5]);
	return 1;
}

HideClothingShopTextdraws(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5]);
	return 1;
}

ClosePlayerClothingMenu(playerid)
{
	PI[playerid][pi_POS_X] = Clothing_Shop_Positions[pTemp(playerid)[pt_CLOTHING_SHOP]][clothing_shop_X];
	PI[playerid][pi_POS_Y] = Clothing_Shop_Positions[pTemp(playerid)[pt_CLOTHING_SHOP]][clothing_shop_Y];
	PI[playerid][pi_POS_Z] = Clothing_Shop_Positions[pTemp(playerid)[pt_CLOTHING_SHOP]][clothing_shop_Z];
	PI[playerid][pi_ANGLE] = Clothing_Shop_Positions[pTemp(playerid)[pt_CLOTHING_SHOP]][clothing_shop_ANGLE];
	SetPlayerSkin(playerid, PI[playerid][pi_SKIN]);
	TogglePlayerControllableEx(playerid, true);
	
	HideClothingShopTextdraws(playerid);
	pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
	pTemp(playerid)[pt_CLOTHING_SHOP] = -1;
	CancelSelectTextDrawEx(playerid);
	return 1;
}

ExitPlayerWardrobe(playerid)
{
	SetPlayerPosEx(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INT_INTERIOR], ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INT_WORLD], false, true);
	return 1;
}

UpdateClothingShop(playerid)
{
	if(pTemp(playerid)[pt_CLOTHING_SHOP] == -1) return 0;
	
	new cost, textdraw_str[128];
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], Clothing_Shop_Positions[pTemp(playerid)[pt_CLOTHING_SHOP]][clothing_shop_NAME]);
	
	switch(ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
	{
		case INTERIOR_BINCO:
		{
			switch(PI[playerid][pi_GENDER])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Binco_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Binco_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][1];
					
					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s~n~$Ropa:_%d/%d", number_format_thousand(cost), pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Binco_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Binco_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Binco_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][1];
					
					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s~n~$Ropa:_%d/%d", number_format_thousand(cost), pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Binco_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_SUBURBAN:
		{
			switch(PI[playerid][pi_GENDER])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Suburban_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Suburban_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][1];
					
					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s~n~$Ropa:_%d/%d", number_format_thousand(cost), pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Suburban_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Suburban_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Suburban_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][1];
					
					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s~n~$Ropa:_%d/%d", number_format_thousand(cost), pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Suburban_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_PROLAPS:
		{
			switch(PI[playerid][pi_GENDER])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Prolaps_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Prolaps_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][1];
					
					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s~n~$Ropa:_%d/%d", number_format_thousand(cost), pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Prolaps_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Prolaps_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Prolaps_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][1];
					
					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s~n~$Ropa:_%d/%d", number_format_thousand(cost), pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Prolaps_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_DIDIER_SACHS:
		{
			switch(PI[playerid][pi_GENDER])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Didier_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Didier_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][1];
					
					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s~n~$Ropa:_%d/%d", number_format_thousand(cost), pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Didier_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Didier_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Didier_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][1];
					
					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s~n~$Ropa:_%d/%d", number_format_thousand(cost), pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Didier_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_VICTIM:
		{
			switch(PI[playerid][pi_GENDER])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Victim_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Victim_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][1];
					
					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s~n~$Ropa:_%d/%d", number_format_thousand(cost), pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Victim_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Victim_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Victim_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][1];
					
					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s~n~$Ropa:_%d/%d", number_format_thousand(cost), pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Victim_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_ZIP:
		{
			switch(PI[playerid][pi_GENDER])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Zip_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Zip_Shop_Male_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][1];
					
					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s~n~$Ropa:_%d/%d", number_format_thousand(cost), pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Zip_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Zip_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Zip_Shop_Female_Skins[pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN]][1];
					
					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s~n~$Ropa:_%d/%d", number_format_thousand(cost), pTemp(playerid)[pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Zip_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
	}
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	return 1;
}

stock number_format_thousand(e_number) /* By adri1 - SFR3 4.3 */
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}
	
	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, ".", numbers);
	}
	
	if(negative) strins(f_string, "-", 0);
	return f_string;
}

stock number_format_dash(e_number) /* By adri1 - SFR3 4.3 */
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}
	
	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, "-", numbers);
	}
	
	if(negative) strins(f_string, "- ", 0);
	return f_string;
}

SelectTextDrawEx(playerid, color)
{
	pTemp(playerid)[pt_SELECT_TEXTDRAW] = true;
	return SelectTextDraw(playerid, color);
}

CancelSelectTextDrawEx(playerid)
{
	pTemp(playerid)[pt_SELECT_TEXTDRAW] = false;
	return CancelSelectTextDraw(playerid);
}

UpdatePlayerHud(playerid)
{
	if(!pTemp(playerid)[pt_HUD_TEXTDRAWS]) return 0;
	
	SetPlayerProgressBarValue(playerid, PLAYER_BARS[playerid][pbar_THIRST], PI[playerid][pi_THIRST]);
	SetPlayerProgressBarValue(playerid, PLAYER_BARS[playerid][pbar_HUNGRY], PI[playerid][pi_HUNGRY]);
	
	if(PI[playerid][pi_CONFIG_HUD])
	{
		ShowPlayerProgressBar(playerid, PLAYER_BARS[playerid][pbar_THIRST]);
		ShowPlayerProgressBar(playerid, PLAYER_BARS[playerid][pbar_HUNGRY]);
	}
	return 1;
}

#define INTERVAL_HUNGRY_THIRST_DOWN	2 // 2 segundos de timer
#define THIRST_HOURS_STOPPED	5 // 5 horas parado si agua esta a 100 va a 0
#define HUNGRY_HOURS_STOPPED	7 // 7 horas parado si alimentacion esta a 100 va a 0

forward HungryThirstDown(playerid);
public HungryThirstDown(playerid)
{
	if(pTemp(playerid)[pt_GAME_STATE] != GAME_STATE_NORMAL) return HidePlayerHud(playerid);
	if(!pTemp(playerid)[pt_HUD_TEXTDRAWS]) return HidePlayerHud(playerid);
	
	new current_gettime = gettime();
	
	if(PI[playerid][pi_VIP])
	{
		if(current_gettime - pTemp(playerid)[pt_LAST_SU_CHECK] > 300)
		{
			CheckPlayerSuperUser(playerid);
		}
	}

	if(PI[playerid][pi_WANTED_LEVEL] > 0 && PI[playerid][pi_STATE] == ROLEPLAY_STATE_NORMAL && !pTemp(playerid)[pt_CUFFED])
	{
		if(gettime() - pTemp(playerid)[pt_LAST_SET_WANTED_LEVEL] > 300)
		{
			if(PI[playerid][pi_WANTED_LEVEL] == 1)
			{
				SendClientMessagef(playerid, -1, "Has perdido de vista a la policía.");
				SetPlayerWantedLevelEx(playerid, 0);
			}
			else SetPlayerWantedLevelEx(playerid, PI[playerid][pi_WANTED_LEVEL] - 1);
		}
	}

	PI[playerid][pi_THIRST] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(THIRST_HOURS_STOPPED, 36));
	PI[playerid][pi_HUNGRY] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(HUNGRY_HOURS_STOPPED, 36));
	
	if(PI[playerid][pi_THIRST] <= 0.5) PI[playerid][pi_THIRST] = 0.5;
	if(PI[playerid][pi_HUNGRY] <= 0.5) PI[playerid][pi_HUNGRY] = 0.5;
	if(PI[playerid][pi_THIRST] < 20.0)
	{
		PI[playerid][pi_HEALTH] -= 0.2;
		
		if(PI[playerid][pi_THIRST] <= 1.0 || PI[playerid][pi_HEALTH] <= 0.5)
		{
			SendClientMessagef(playerid, -1, "Te has desmayado por deshidratación.");
			SetPlayerHealthEx(playerid, 0.0);
			PI[playerid][pi_THIRST] = 75.0;
			return 1;
		}
		
		SetPlayerHealthEx(playerid, PI[playerid][pi_HEALTH]);
		
		if(!pTemp(playerid)[pt_THIRST_MESSAGE])
		{
			SendClientMessagef(playerid, -1, "Tienes sed, si no bebes agua pronto acabarás muriendo.");
			pTemp(playerid)[pt_THIRST_MESSAGE] = true;
		}
	}
	
	if(PI[playerid][pi_HUNGRY] < 20.0)
	{
		PI[playerid][pi_HEALTH] -= 0.2;
		
		if(PI[playerid][pi_HUNGRY] <= 1.0 || PI[playerid][pi_HEALTH] <= 0.5)
		{
			SendClientMessagef(playerid, -1, "Te has desmayado por hambre.");
			SetPlayerHealthEx(playerid, 0.0);
			PI[playerid][pi_HUNGRY] = 55.0;
			return 1;
		}
		
		SetPlayerHealthEx(playerid, PI[playerid][pi_HEALTH]);
		
		if(!pTemp(playerid)[pt_HUNGRY_MESSAGE])
		{
			SendClientMessagef(playerid, -1, "Tienes hambre, si no comes nada pronto acabarás muriendo.");
			pTemp(playerid)[pt_HUNGRY_MESSAGE] = true;
		}
	}
	
	UpdatePlayerHud(playerid);
	return 1;
}

SetPlayerHud(playerid)
{
	pTemp(playerid)[pt_HUD_TEXTDRAWS] = true;
	UpdatePlayerHud(playerid);
	UpdateReputationTextDraws(playerid);
	
	if(PI[playerid][pi_CONFIG_TIME]) TextDrawShowForPlayer(playerid, Textdraws[textdraw_SERVER_TIME]);
	
	if(PI[playerid][pi_CONFIG_HUD])
	{
		for(new i = 0; i < HUD_TEXTDRAWS_SIZE; i ++) 
		{
			TextDrawShowForPlayer(playerid, Textdraws[textdraw_HUD][i]);	
		}
		
		for(new i = 0; i < HUD_PTEXTDRAWS_SIZE; i ++) 
		{
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][i]);
		}

		ShowPlayerProgressBar(playerid, PLAYER_BARS[playerid][pbar_THIRST]);
		ShowPlayerProgressBar(playerid, PLAYER_BARS[playerid][pbar_HUNGRY]);
	}
	
	KillTimer(pTemp(playerid)[pt_TIMERS][5]);
	pTemp(playerid)[pt_TIMERS][5] = SetTimerEx("HungryThirstDown", INTERVAL_HUNGRY_THIRST_DOWN * 1000, true, "i", playerid);
	return 1;
}

HidePlayerHud(playerid)
{
	KillTimer(pTemp(playerid)[pt_TIMERS][5]);
	pTemp(playerid)[pt_HUD_TEXTDRAWS] = false;
	
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SERVER_TIME]);
	
	for(new i = 0; i < HUD_TEXTDRAWS_SIZE; i ++) 
	{
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_HUD][i]);	
	}
	
	for(new i = 0; i < HUD_PTEXTDRAWS_SIZE; i ++) 
	{
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][i]);
	}

	HidePlayerProgressBar(playerid, PLAYER_BARS[playerid][pbar_THIRST]);
	HidePlayerProgressBar(playerid, PLAYER_BARS[playerid][pbar_HUNGRY]);
	return 1;
}

is_open(hour, open, close)
{
	if(open < 0 || close < 0) return false;
	if(open > close)
	{
		if( ( (hour >= open) && (hour < 24) ) || ( (hour >= 0) && (hour < close) ) )
		{													
			return true;			
		}
		else
		{
			return false;
		}
	}
	else if(open < close)
	{
		if((hour >= open) && (hour < close))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	return false;
}

Add_Hungry_Thirst(playerid, Float:hungry, Float:thirst)
{
	PI[playerid][pi_HUNGRY] += hungry;
	if(PI[playerid][pi_HUNGRY] > 30.0) pTemp(playerid)[pt_HUNGRY_MESSAGE] = false;
	if(PI[playerid][pi_HUNGRY] > 100.0) PI[playerid][pi_HUNGRY] = 100.0;
	
	PI[playerid][pi_THIRST] += thirst;
	if(PI[playerid][pi_THIRST] > 30.0) pTemp(playerid)[pt_THIRST_MESSAGE] = false;
	if(PI[playerid][pi_THIRST] > 100.0) PI[playerid][pi_THIRST] = 100.0;
	
	UpdatePlayerHud(playerid);
	return 1;
}

GetPlayerIdByBankAccountId(account_id)
{
	for(new i = 0; i != sizeof(PI); i ++)
	{
		if(PI[i][pi_BANK_ACCOUNT] == 0) continue;
		if(PI[i][pi_BANK_ACCOUNT] == account_id) return i;
	}
	return -1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(pTemp(playerid)[pt_KICKED]) return 1;
	
	if(pTemp(playerid)[pt_GAME_STATE] == GAME_STATE_NORMAL)
	{
		if(newstate != PLAYER_STATE_SPAWNED && oldstate != PLAYER_STATE_SPAWNED)
		{
			if(ac_Info[CHEAT_STATE_SPAMMER][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY])
				{
					new interval = GetTickDiff(GetTickCount(), pTemp(playerid)[pt_ANTIFLOOD_STATE]);
					
					if(interval < 50)
					{
						if(!ac_Info[CHEAT_STATE_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_STATE_SPAMMER, float(interval));
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_STATE_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_STATE_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_STATE_SPAMMER, float(interval));
						}
					}
					pTemp(playerid)[pt_ANTIFLOOD_STATE] = GetTickCount();
				}
			}
		}
	}
	
    if(newstate == PLAYER_STATE_DRIVER)
    {
		new vehicleid = GetPlayerVehicleID(playerid);
		if(ac_Info[CHEAT_CAR_JACKING][ac_Enabled])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_IMMUNITY])
				{
					if(!ac_Info[CHEAT_CAR_JACKING][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_JACKING);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_JACKING][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_JACKING][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_JACKING);
					}
					
					pTemp(playerid)[pt_LAST_VEHICLE_ID] = INVALID_VEHICLE_ID;
					return 1;
				}
			}
		}
		
		SetPlayerArmedWeapon(playerid, 0);
		PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		pTemp(playerid)[pt_LAST_VEHICLE_ID] = vehicleid;
		
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = true;

		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_DRIVER_DOOR]) //cerrado
		{
			if(gettime() - GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] > 5) // Si el tiempo que paso desde que cerro es mayor a 5
			{
				if(ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Enabled])
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						}
					}
				}
			}
		}
		
		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_NONE:
			{
				if(!VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_ENGINE])
				{
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
					UpdateVehicleParams(vehicleid);
				}
			}
			case VEHICLE_TYPE_PERSONAL:
			{
				if(GetPlayerWork(playerid, WORK_TAXI) && PLAYER_WORKS[playerid][WORK_TAXI][pwork_LEVEL] >= 50)
				{
					if(!pTemp(playerid)[pt_OWN_VEHICLE_TAXI])
					{
						SendMessage(playerid, "Ya puedes usar ~g~/vuber~w~ Para trabajar con tu vehiculo.");
					}
				}
			}
			case VEHICLE_TYPE_SELL:
			{
				pTemp(playerid)[pt_SELECTED_BUY_VEHICLE_ID] = vehicleid;
				new pvehicles = CountPlayerVehicles(playerid);
				if(pvehicles >= MAX_SU_VEHICLES) return SendClientMessagef(playerid, RED_COLOR2, "No puedes comprar más vehículos, el límite es %d.", MAX_SU_VEHICLES);
				if(!PI[playerid][pi_VIP])
				{
					if(pvehicles >= MAX_NU_VEHICLES)
					{
						SendClientMessagef(playerid, PRIMARY_COLOR2, "{ffffff}¡Los jugadores {"#YELLOW_COLOR"}VIP{ffffff} pueden tener hasta {"#GREEN_COLOR"}%d vehículos!{ffffff} Usa {"#PRIMARY_COLOR"}/ayuda{ffffff} si quieres ser VIP.", MAX_SU_VEHICLES);
						return 1;
					}
				}
				
				BuyVehicleShowDialog(playerid, pTemp(playerid)[pt_SELECTED_BUY_VEHICLE_ID]);
				return 1;
			}
			case VEHICLE_TYPE_SELL_INGAME:
			{
				if(PI[playerid][pi_ADMIN_LEVEL] != CMD_OWNER)
				{
					RemovePlayerFromVehicle(playerid);
					SetPlayerHealthEx(playerid, 0.0);
					return 1;
				}

				SendClientMessagef(playerid, RED_COLOR2, "Aviso: Busca una posicion adecuada y sal del vehiculo para guardarlo.");
			}
			case VEHICLE_TYPE_WORK:
			{
				if(!PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_SET])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}
				
				if(pTemp(playerid)[pt_WORKING_IN] && pTemp(playerid)[pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}
				
				if(WORK_VEHICLES[vehicleid][work_vehicle_NEED_DUTY])
				{
					if(pTemp(playerid)[pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
					{
						if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
						{
							if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
							{
								if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
								else
								{
									if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
									else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;
									
									PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
									if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
								}
							}
						}
						return 1;
					}
				}
				
				if(WORK_VEHICLES[vehicleid][work_vehicle_EXP] > PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_LEVEL])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}
				
				switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					case WORK_TAXI, WORK_FUMIGATOR: CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
					case WORK_TRUCK:
					{
						if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED])
						{
							if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != PI[playerid][pi_ID])
							{
								SendMessage(playerid, "~r~No eres el conductor de este vehículo.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							else CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
						}
						else CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
					}
					case WORK_TRAFFICKER:
					{
						if(GetTraffickerInfoLoaded(vehicleid))
						{
							if(GetTraffickerDriver(vehicleid) != PI[playerid][pi_ID])
							{
								SendMessage(playerid, "~r~No eres el conductor de este vehículo.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							else CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
						}
						else CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
					}
					case WORK_TRAILER:
					{
						if(IsVehicleTrailer_Truck(vehicleid))
						{
							if(GetTrailerInfoLoaded(vehicleid))
							{
								if(GetTrailerDriver(vehicleid) != PI[playerid][pi_ID])
								{
									SendMessage(playerid, "~r~No eres el conductor de este vehículo.");
									RemovePlayerFromVehicle(playerid);
									return 1;
								}
								else CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
							}
							else CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
						}
					}
					case WORK_TRASH:
					{
						if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
						{
							if(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] != playerid)
							{
								SendMessage(playerid, "~r~No eres el conductor de este camión.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							
							SetPlayerTrashCheckpoint(playerid, vehicleid);
						}
						else
						{
							if(pTemp(playerid)[pt_TRASH_DRIVER] || pTemp(playerid)[pt_TRASH_PASSENGER])
							{
								SendClientMessagef(playerid, -1, "Ya estás trabajando con otro compañero.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							
							pTemp(playerid)[pt_TRASH_DRIVER] = true;
							pTemp(playerid)[pt_TRASH_VEHICLE_ID] = vehicleid;
							TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] = playerid;
							
							if(TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] == INVALID_PLAYER_ID) SendClientMessagef(playerid, -1, "Necesitas un compañero para empezar con el trabajo.");
							else
							{
								new route = random(MAX_ROUTES);
								while(!TRASH_OBJECTS[route][trash_route_VALID])
								{
									route = random(MAX_ROUTES);
								}
								
								TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
								TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = route;
								TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;
								
								SetPlayerTrashCheckpoint(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], pTemp(playerid)[pt_TRASH_VEHICLE_ID]);
								SetPlayerTrashCheckpoint(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], pTemp(playerid)[pt_TRASH_VEHICLE_ID]);
								
								CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], route);
								CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], route);
								
								SendClientMessagef(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "Ruta #%d establecida, pueden comenzar.", TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
								SendClientMessagef(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "Ruta #%d establecida, pueden comenzar.", TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);

							}
						}
					}
					case WORK_PIZZA:
					{
						if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED])
						{
							if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] != PI[playerid][pi_ID])
							{
								if(GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]) < 20.0)
								{
									SetVehicleToRespawnEx(vehicleid);
								}
								
								SendMessage(playerid, "~r~No eres el conductor de esta moto.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							
							if(!pTemp(playerid)[pt_PIZZA_PROCCESS])
							{
								SendClientMessagef(playerid, -1, "Ya has repartido todas las pizzas, vuelve a la pizzería para cobrar.");
								SetPlayer_Pizza_Checkpoint(playerid, -1);
							}
							else
							{
								SendClientMessagef(playerid, -1, "Te quedan %d pizzas por repartir.", pTemp(playerid)[pt_PIZZA_PROCCESS]);
								if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT_DELI])
								{
									PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT] = randomEx(sizeof(PIZZA_DELIVERY_POINT), PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT]);
									PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT_DELI] = false;
								}
								SetPlayer_Pizza_Checkpoint(playerid, PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT]);
							}
						}
						else
						{
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED] = true;
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] = PI[playerid][pi_ID];
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS] = minrand(3, 6);
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT] = random( sizeof(PIZZA_DELIVERY_POINT) );
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT_DELI] = false;
							pTemp(playerid)[pt_PIZZA_PROCCESS] = PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS];
							pTemp(playerid)[pt_DELIVERED_PIZZAS] = 0;
							
							SendClientMessagef(playerid, -1, "Esta moto tiene %d pizzas, repartelas todas y vuelve a la pizzería para cobrar.", PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS]);
							SetPlayer_Pizza_Checkpoint(playerid, PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT]);
						}
					}
				}
			}
			case VEHICLE_TYPE_HOTDOG, VEHICLE_TYPE_HOTDOG_INGAME:
			{
				if(!pTemp(playerid)[pt_DEATH_HOTDOG_BYPASS])
				{
					SetPlayerHealthEx(playerid, 0.0);
				}
			}
		}
		
		if(pTemp(playerid)[pt_WANT_TAXI])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				pTemp(playerid)[pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);
				
				SendClientMessagef(playerid, -1, "Tu uber se ha cancelado porque te has subido a un vehículo.");
			}
		}
    }
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
		SetPlayerArmedWeapon(playerid, 0);
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		
		new vehicleid = GetPlayerVehicleID(playerid);
		pTemp(playerid)[pt_LAST_VEHICLE_ID] = vehicleid;
		
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_PASSENGER_DOOR]) //cerrado
		{
			if(gettime() - GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] > 5) // Si el tiempo que paso desde que cerro es mayor a 5
			{
				if(ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Enabled])
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						}
					}
				}
			}
		}

		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_HOTDOG, VEHICLE_TYPE_HOTDOG_INGAME:
			{
				if(!pTemp(playerid)[pt_DEATH_HOTDOG_BYPASS])
				{
					SetPlayerHealthEx(playerid, 0.0);
				}
			}
			case VEHICLE_TYPE_SELL_INGAME:
			{
				SetPlayerHealthEx(playerid, 0.0);
			}
			case VEHICLE_TYPE_PERSONAL:
			{
				if(GetPlayerWork(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], WORK_TAXI) && PLAYER_WORKS[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][WORK_TAXI][pwork_LEVEL] >= 50)
				{
					if(PlayerTemp[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_OWN_VEHICLE_TAXI])
					{
						if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID) return 1;

						if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED])
						{
							if(pTemp(playerid)[pt_WANT_TAXI])
							{
								pTemp(playerid)[pt_WANT_TAXI] = false;
								DisablePlayerTaxiMark(playerid);
							}
							return 1;
						}
						
						ShowPlayerTaxiMeter(playerid);
						if(pTemp(playerid)[pt_WANT_TAXI])
						{
							pTemp(playerid)[pt_WANT_TAXI] = false;
							DisablePlayerTaxiMark(playerid);
						}
						
						TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = true;
						GetVehiclePos(vehicleid, TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z]);
						KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
						TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], playerid);
					}
				}
			}
		}
		
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				case WORK_TAXI:
				{
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID) return 1;
					if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED])
					{
						if(pTemp(playerid)[pt_WANT_TAXI])
						{
							pTemp(playerid)[pt_WANT_TAXI] = false;
							DisablePlayerTaxiMark(playerid);
						}
						return 1;
					}
					
					ShowPlayerTaxiMeter(playerid);
					if(pTemp(playerid)[pt_WANT_TAXI])
					{
						pTemp(playerid)[pt_WANT_TAXI] = false;
						DisablePlayerTaxiMark(playerid);
					}
					
					TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = true;
					GetVehiclePos(vehicleid, TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z]);
					KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
					TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], playerid);
				}
				case WORK_TRASH:
				{
					if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET])
					{
						SendMessagef(playerid, "~r~Necesitas ser %s para poder usar este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
						RemovePlayerFromVehicle(playerid);
						return 1;
					}
					
					if(pTemp(playerid)[pt_WORKING_IN] != WORK_TRASH)
					{
						SendClientMessagef(playerid, -1, "No estás de servicio como basurero, ve a vestirte en el puesto de la entrada del vertedero.");
						RemovePlayerFromVehicle(playerid);
						return 1;
					}
					
					if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
					{
						if(TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] != playerid)
						{
							SendMessage(playerid, "~r~No eres el acompañante de este camión.");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
						
						SetPlayerTrashCheckpoint(playerid, vehicleid);
					}
					else
					{
						if(pTemp(playerid)[pt_TRASH_DRIVER] || pTemp(playerid)[pt_TRASH_PASSENGER])
						{
							SendClientMessagef(playerid, -1, "Ya estás trabajando con otro compañero.");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
						
						pTemp(playerid)[pt_TRASH_PASSENGER] = true;
						pTemp(playerid)[pt_TRASH_VEHICLE_ID] = vehicleid;
						TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] = playerid;
						
						if(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] == INVALID_PLAYER_ID) SendClientMessagef(playerid, -1, "Necesitas un compañero para empezar con el trabajo.");
						else
						{
							new route = random(MAX_ROUTES);
							while(!TRASH_OBJECTS[route][trash_route_VALID])
							{
								route = random(MAX_ROUTES);
							}
							
							TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
							TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = route;
							TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;
							
							SetPlayerTrashCheckpoint(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], pTemp(playerid)[pt_TRASH_VEHICLE_ID]);
							SetPlayerTrashCheckpoint(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], pTemp(playerid)[pt_TRASH_VEHICLE_ID]);
							
							CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], route);
							CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], route);
							
							SendClientMessagef(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "Ruta #%d establecida, pueden comenzar.", TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
							SendClientMessagef(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "Ruta #%d establecida, pueden comenzar.", TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);

						}
					}
				}
			}
		}
		
		if(pTemp(playerid)[pt_WANT_TAXI])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				pTemp(playerid)[pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);
				
				SendClientMessagef(playerid, -1, "Tu uber se ha cancelado porque te has subido a un vehículo.");
			}
		}
	}
	else if(newstate == PLAYER_STATE_SPECTATING)
	{
		if(!pTemp(playerid)[pt_PLAYER_SPECTATE])
		{
			if(ac_Info[CHEAT_SPECTATE][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_IMMUNITY])
				{
					if(!ac_Info[CHEAT_SPECTATE][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_SPECTATE);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_SPECTATE][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_SPECTATE][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_SPECTATE);
					}
				}
			}
		}
	}
	
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		if(pTemp(playerid)[pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
		{
			KillTimer(pTemp(playerid)[pt_TIMERS][7]);
			
			if(GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] != INVALID_VEHICLE_ID)
			{
				if(GLOBAL_VEHICLES[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] ][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
				{
					PLAYER_AC_INFO[ GLOBAL_VEHICLES[ GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] ][gb_vehicle_DRIVER] 	][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_IMMUNITY] = gettime() + 5;
				}
				GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
				DetachTrailerFromVehicle(pTemp(playerid)[pt_LAST_VEHICLE_ID]);
			}
			
			GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
			GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
			GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] = playerid;
			GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_OCCUPIED] = false;
			
			StopAudioStreamForPlayer(playerid);

			switch(GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_TYPE])
			{
				case VEHICLE_TYPE_HOTDOG, VEHICLE_TYPE_HOTDOG_INGAME:
				{				
					pTemp(playerid)[pt_DEATH_HOTDOG_BYPASS] = false;
					GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_PARAMS_DOORS] = 1;
					GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_PARAMS_ENGINE] = 0;
					UpdateVehicleParams(pTemp(playerid)[pt_LAST_VEHICLE_ID]);

					ShowDialog(playerid, DIALOG_CONFIRM_HOTDOG);
				}
				case VEHICLE_TYPE_SELL_INGAME:
				{				
					GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_PARAMS_DOORS] = 1;
					GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_PARAMS_ENGINE] = 0;
					UpdateVehicleParams(pTemp(playerid)[pt_LAST_VEHICLE_ID]);

					SaveSellVehicle(playerid, pTemp(playerid)[pt_LAST_VEHICLE_ID]);
				}
				case VEHICLE_TYPE_PERSONAL:
				{
					if(GetPlayerWork(playerid, WORK_TAXI))
					{
						if(pTemp(playerid)[pt_OWN_VEHICLE_TAXI])
						{
							pTemp(playerid)[pt_OWN_VEHICLE_TAXI] = false;
							CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
							SendMessage(playerid, "Ya no estas de servicio como uber.");
						}
					}
				}
			}
			
			if(GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
			{
				switch(WORK_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][work_vehicle_WORK])
				{
					case WORK_TAXI, WORK_FUMIGATOR, WORK_TRUCK, WORK_TRAILER: CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
					case WORK_PIZZA:
					{
						if(PIZZA_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][pizza_vehicle_STARTED])
						{
							if(pTemp(playerid)[pt_PIZZA_PROCCESS])
							{
								new Float:distance =	GetPlayerDistanceFromPoint
																(
																	playerid,
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][0],
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][1],
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][2]
																);
										
								if(distance > 20.0)
								{
									SendClientMessagef(playerid, -1, "Vuelve a subir a la moto, aún estás muy lejos del cliente.");
									if(IsValidDynamicActor(pTemp(playerid)[pt_PIZZA_ACTOR]))
									{
										DestroyDynamicActor(pTemp(playerid)[pt_PIZZA_ACTOR]);
										pTemp(playerid)[pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
									}
									if(IsValidDynamicCP(pTemp(playerid)[pt_PIZZA_CHECKPOINT]))
									{
										DestroyDynamicCP(pTemp(playerid)[pt_PIZZA_CHECKPOINT]);
										pTemp(playerid)[pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
									}
								}
								else
								{
									if(IsPlayerInDynamicCP(playerid, pTemp(playerid)[pt_PIZZA_CHECKPOINT]))
									{
										pTemp(playerid)[pt_PIZZA_PROCCESS] --;
										pTemp(playerid)[pt_DELIVERED_PIZZAS] ++;
										RemovePlayerAttachedObject(playerid, 9);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
										ApplyDynamicActorAnimation(pTemp(playerid)[pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
										ApplyDynamicActorAnimation(pTemp(playerid)[pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
										DestroyDynamicCP(pTemp(playerid)[pt_PIZZA_CHECKPOINT]);
										pTemp(playerid)[pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
										PIZZA_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT_DELI] = true;
										SendClientMessagef(playerid, -1, "Genial, vuelve a subir a la moto para continuar.");
									}
									else
									{
										SetPlayerArmedWeapon(playerid, 0);
										SetPlayerAttachedObject(playerid, 9, 1582, 6, 0.094, 0.077999, -0.165999, 72.0, 8.799999, 9.899992, 0.73, 0.774999, 1.0);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
								}
							}
							else
							{
								if(IsValidDynamicActor(pTemp(playerid)[pt_PIZZA_ACTOR]))
								{
									DestroyDynamicActor(pTemp(playerid)[pt_PIZZA_ACTOR]);
									pTemp(playerid)[pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
								}
								if(IsValidDynamicCP(pTemp(playerid)[pt_PIZZA_CHECKPOINT]))
								{
									DestroyDynamicCP(pTemp(playerid)[pt_PIZZA_CHECKPOINT]);
									pTemp(playerid)[pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
								}
								SendClientMessagef(playerid, -1, "Vuelve a subir a la moto y ve a la pizzería para cobrar.");
							}
						}
					}
				}
			}
			if(pTemp(playerid)[pt_LAST_VEHICLE_ID] == pTemp(playerid)[pt_TRASH_VEHICLE_ID])
			{
				if(pTemp(playerid)[pt_TRASH_DRIVER])
				{
					if(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
					{
						if(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID] == playerid) SendClientMessagef(playerid, -1, "Si quieres dejar de trabajar ve al vertedero y ponte tu ropa.");
					}
					else
					{
						TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID] = INVALID_PLAYER_ID;
						pTemp(playerid)[pt_TRASH_DRIVER] = false;
						pTemp(playerid)[pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
					}
				}
			}
		}
	}
	else if(oldstate == PLAYER_STATE_PASSENGER)
	{
		if(pTemp(playerid)[pt_TAXI_METER_ENABLED])
		{
			new driver = GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER];
			
			if(driver != INVALID_PLAYER_ID)
			{
				new work_extra_payment;
				if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[ driver ][WORK_TAXI][pwork_LEVEL], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];
				
					if(PI[playerid][pi_VIP]) work_extra_payment += VIP_WORK_EXTRA_PAY;
				}
				PLAYER_WORKS[driver][WORK_TAXI][pwork_LEVEL] ++;
				
				SendClientMessagef(driver, -1, "Has ganado %s dólares con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT] + work_extra_payment));
				GivePlayerCash(driver, TAXI_METER_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT] + work_extra_payment, true, false);
				GivePlayerCash(playerid, -TAXI_METER_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT], true, true);
				
				SendClientMessagef(playerid, -1, "El uber te costó %s$.", number_format_thousand(TAXI_METER_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT]));
				ResetVehicleTaxiMeter(pTemp(playerid)[pt_LAST_VEHICLE_ID]);
				HidePlayerTaxiMeter(playerid);
				UpdatePlayerTaxiMeterTextdraws(driver);
			}

			new passenger = GetVehicleFirstPassenger( pTemp(playerid)[pt_LAST_VEHICLE_ID] );
			if(passenger != INVALID_PLAYER_ID)
			{
				ShowPlayerTaxiMeter(passenger);
				if(PlayerTemp[passenger][pt_WANT_TAXI])
				{
					PlayerTemp[passenger][pt_WANT_TAXI] = false;
					DisablePlayerTaxiMark(passenger);
				}
				
				TAXI_METER_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][veh_taxi_meter_ENABLED] = true;
				GetVehiclePos(pTemp(playerid)[pt_LAST_VEHICLE_ID], TAXI_METER_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_Z]);
				KillTimer(TAXI_METER_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][veh_taxi_meter_TIMER]);
				TAXI_METER_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", pTemp(playerid)[pt_LAST_VEHICLE_ID], GLOBAL_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER], passenger);
			}
		}
		if(pTemp(playerid)[pt_LAST_VEHICLE_ID] == pTemp(playerid)[pt_TRASH_VEHICLE_ID])
		{
			if(pTemp(playerid)[pt_TRASH_PASSENGER])
			{
				if(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
				{
					if(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] == playerid)
					{
						if(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] >= TRASH_OBJECTS[ TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] ][trash_route_OBJECTS]) SendClientMessagef(playerid, -1, "Sube al camión para volver al vertedero y recibir la paga.");
						else
						{
							new cp = TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP];
							new route = TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
							new Float:distance =	GetPlayerDistanceFromPoint
													(
														playerid,
														TRASH_OBJECTS[ route ][trash_object_X][ cp ],
														TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
														TRASH_OBJECTS[ route ][trash_object_Z][ cp ]
													);
							
							if(distance > 10.0) SendClientMessagef(playerid, -1, "Vuelve a subir al camión, aún estás demasiado lejos del punto de recogida.");
							else
							{
								if(IsPlayerInDynamicCP(playerid, pTemp(playerid)[pt_TRASH_CHECKPOINT]))
								{
									if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET]) return DestroyPlayerTrashCheckpoint(playerid);
									if(pTemp(playerid)[pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
									if(!pTemp(playerid)[pt_TRASH_PASSENGER]) return 1;
									
									new driver = TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
									SendClientMessage(driver, -1, "{"#SILVER_COLOR"}Espera mientras tu compañero recoge la basura.");
									
									new Float:offset = floatdiv(PLAYER_WORKS[playerid][WORK_TRASH][pwork_LEVEL], 10);
									if(offset > 30.0) offset = 30.0;
									
									pTemp(playerid)[pt_RECYCLE_BIN_VALUE] = 10.0 + offset;
									UpdatePlayerTrashRecycleSize(playerid);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
									
									TogglePlayerControllableEx(playerid, false);
									SetCameraBehindPlayer(playerid);
									ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);
									
									KillTimer(pTemp(playerid)[pt_TIMERS][10]);
									pTemp(playerid)[pt_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
									return 1;
								}
								SendClientMessagef(playerid, -1, "Recoge la basura y vuelve al camión para continuar.");
							}
						}
					}
				}
				else
				{
					TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] = INVALID_PLAYER_ID;
					pTemp(playerid)[pt_TRASH_PASSENGER] = false;
					pTemp(playerid)[pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
				}
			}
		}
	}
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	return 1;
}

const CRASHER_PACKET = 228;
IPacket:CRASHER_PACKET(playerid, BitStream:bs)
{
	printf("[ADVERTENCIA] Packet 228 recibido!");
	KickEx(playerid);
}


forward ResyncPlayer(playerid);
public ResyncPlayer(playerid)
{
	new Float:x, Float:y, Float:z, Float:angle;
	GetPlayerFacingAngle(playerid, angle);

	new BitStream:bsr = BS_New();
	new BitStream:bsa = BS_New();

	BS_WriteValue(bsr, PR_UINT16, playerid);

	BS_WriteValue(
		bsa,
		PR_UINT16, playerid,
		PR_UINT8, NO_TEAM,
		PR_UINT32, GetPlayerSkin(playerid),
		PR_FLOAT, x,
		PR_FLOAT, y,
		PR_FLOAT, z,
		PR_FLOAT, angle,
		PR_UINT32, pTemp(playerid)[pt_PLAYER_COLOR],
		PR_UINT8, GetPlayerFightingStyle(playerid)
	);

	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerStreamedIn(playerid, i))
		{
			PR_SendRPC(bsr, i, 163); // RPC_WorldPlayerRemove
			PR_SendRPC(bsa, i, 32); // RPC_WorldPlayerAdd
		}
	}

	BS_Delete(bsr);
	BS_Delete(bsa);
}

hook OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	
	if(pTemp(playerid)[pt_GAME_STATE] == GAME_STATE_NORMAL)
	{
		if(ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_IMMUNITY])
			{
				new interval = GetTickDiff(GetTickCount(), pTemp(playerid)[pt_ANTIFLOOD_ENTER_VEHICLE]);
				
				if(interval < 50)
				{
					if(!ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_ENTER_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_ENTER_SPAMMER, float(interval));
					}
				}
				pTemp(playerid)[pt_ANTIFLOOD_ENTER_VEHICLE] = GetTickCount();
			}
		}
	}
	
	new Float:sx, Float:sy, Float:sz;
	GetPlayerPos(playerid, sx, sy, sz);
	
	if(pTemp(playerid)[pt_WORKING_IN] == WORK_MEDIC)
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_MEDIC)
		{
			SendMessagef(playerid, "solo puedes llevar ambulancias.");
			RemovePlayerFromVehicle(playerid);
			SetPlayerPos(playerid, sx, sy, sz);
			return 1;
		}
	}

	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK)
	{
		SetPlayerPosEx(playerid, pTemp(playerid)[pt_INJURED_POS][0], pTemp(playerid)[pt_INJURED_POS][1], pTemp(playerid)[pt_INJURED_POS][2], pTemp(playerid)[pt_INJURED_POS][3], 0, 0);
		ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, true, 0, 0, 1, 0, 1);
		return 1;
	}

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_HOTDOG || GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_HOTDOG_INGAME)
	{
		RemovePlayerFromVehicle(playerid);
		SetPlayerPos(playerid, sx, sy, sz);

		SetTimerEx("ResyncPlayer", 0, false, "d", playerid);
	}

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_SELL_INGAME)
	{
		RemovePlayerFromVehicle(playerid);
		SetPlayerPos(playerid, sx, sy, sz);

		SetTimerEx("ResyncPlayer", 0, false, "d", playerid);
	}
	
	if(!ispassenger)
	{
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED])
		{
			if(pTemp(playerid)[pt_CJ_WARNINGS] >= 5)
			{
				KickEx(playerid);
				return 1;
			}
			pTemp(playerid)[pt_CJ_WARNINGS] ++;

			SendMessagef(playerid, "~r~No robar subir a vehiculos sin rol, aviso %d/5.", pTemp(playerid)[pt_CJ_WARNINGS]);
			RemovePlayerFromVehicle(playerid);
			SetPlayerPos(playerid, sx, sy, sz);

			TogglePlayerControllableEx(playerid, false);
			KillTimer(pTemp(playerid)[pt_TIMERS][19]);
			pTemp(playerid)[pt_TIMERS][19] = SetTimerEx("CarJackingFinish", 5000, false, "i", playerid);

			SetTimerEx("ResyncPlayer", 0, false, "d", playerid);
			return 1;
		}
		
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if(!PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_SET])
			{
				SendMessagef(playerid, "~r~Necesitas ser %s para poder usar este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_VIP] && !PI[playerid][pi_VIP])
			{
				SendClientMessagef(playerid, -1, "Necesitas adquirir {"PRIMARY_COLOR"}membresía VIP{ffffff} para usar este vehículo. {"PRIMARY_COLOR"}(/ayuda > membresía VIP)");
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
			
			if(pTemp(playerid)[pt_WORKING_IN] && pTemp(playerid)[pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				SendMessagef(playerid, "~r~Tienes que dejar de estar de servicio de %s.", work_info[ pTemp(playerid)[pt_WORKING_IN] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
			
			if(WORK_VEHICLES[vehicleid][work_vehicle_NEED_DUTY])
			{
				if(pTemp(playerid)[pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					SendMessagef(playerid, "~r~Debes estar de servicio como %s para conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
					RemovePlayerFromVehicle(playerid);
					SetPlayerPos(playerid, sx, sy, sz);
					return 1;
				}
			}
			
			if(WORK_VEHICLES[vehicleid][work_vehicle_EXP] > PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_LEVEL])
			{
				SendMessagef(playerid, "Necesitas experiencia para usar este vehículo. (%d/%d)", PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_LEVEL], WORK_VEHICLES[vehicleid][work_vehicle_EXP]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}
	}
	else
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_VALID] && WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TRASH)
		{
			if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET])
			{
				SendMessagef(playerid, "~r~Necesitas ser %s para poder usar este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
			
			if(pTemp(playerid)[pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				SendMessagef(playerid, "~r~Debes estar de servicio como %s para conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}
	}
	return 1;
}

stock FindHotdogID(vehicleid)
{
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_HOTDOG)
		{
			if(HOTDOG_VEHICLES[i][hotdog_vehicle_VALID])
			{
				if(i == vehicleid)
				{
					return HOTDOG_VEHICLES[i][hotdog_vehicle_ID];
				}
			}
		}
	}
	return -1;
}

stock ClearHotdog(vehicleid)
{
	if(IsValidDynamic3DTextLabel(HOTDOG_VEHICLES[vehicleid][hotdog_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(HOTDOG_VEHICLES[vehicleid][hotdog_vehicle_LABEL]);
		HOTDOG_VEHICLES[vehicleid][hotdog_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	
	HOTDOG_VEHICLES[vehicleid][hotdog_vehicle_ID] = -2;
	HOTDOG_VEHICLES[vehicleid][hotdog_vehicle_VALID] = false;
	HOTDOG_VEHICLES[vehicleid][hotdog_vehicle_LABEL_COLOUR] = 0;
	HOTDOG_VEHICLES[vehicleid][hotdog_vehicle_pos_X] = 0;
	HOTDOG_VEHICLES[vehicleid][hotdog_vehicle_pos_Y] = 0;
	HOTDOG_VEHICLES[vehicleid][hotdog_vehicle_pos_Z] = 0;
	HOTDOG_VEHICLES[vehicleid][hotdog_vehicle_pos_A] = 0;
	return 1;
}

AddHotdogVehicle(Float:X, Float:Y, Float:Z, Float:Angle, const colour[], id, bool:server)
{
	new vehicle_id = INVALID_VEHICLE_ID;
	vehicle_id = AddStaticVehicleEx(588, X, Y, Z, Angle, 1, 1, -1, false);
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;

	if(!server) GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_HOTDOG_INGAME;
	else GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_HOTDOG;

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = 588;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = X;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = Y;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = Z;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = Angle;
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][3] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE];

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 9999.9;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = 1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = 1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[588 - 400][vehicle_info_MAX_GAS];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS];

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = 0;

	HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_ID] = id;
	HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_VALID] = true;
	format(HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_LABEL_COLOUR], 16, "%s", colour);

	new tmp_hlabel[1024];
	format(tmp_hlabel, 1024, "%sPuesto de Hotdogs (%d)\n{FFFFFF}Usa %s/hotdog{ffffff} Para consumir por {"#GREEN_COLOR"}120$\n{ffffff}Usa %s/agua{ffffff} Para consumir por {"#GREEN_COLOR"}100$", HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_LABEL_COLOUR], HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_ID], HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_LABEL_COLOUR], HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_LABEL_COLOUR]);
	
	if(IsValidDynamic3DTextLabel(HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_LABEL]);
		HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}	
	HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_LABEL] = CreateDynamic3DTextLabel(tmp_hlabel, -1, 0.0, 0.0, 0.0, 5.0, .attachedvehicle = vehicle_id);

	HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_pos_X] = X;
	HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_pos_Y] = Y;
	HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_pos_Z] = Z;
	HOTDOG_VEHICLES[vehicle_id][hotdog_vehicle_pos_A] = Angle;

	SetVehicleVirtualWorldEx(vehicle_id, 0);
	SetVehicleToRespawnEx(vehicle_id);
	return vehicle_id;
}

AddTestVehicle(bool:static_veh, modelid, Float:X, Float:Y, Float:Z, Float:Angle, Color1, Color2, interior = 0, world = 0)
{
	new vehicle_id = INVALID_VEHICLE_ID;
	if(static_veh) vehicle_id = AddStaticVehicleEx(modelid, X, Y, Z, Angle, Color1, Color2, -1, false);
	else vehicle_id = CreateVehicle(modelid, X, Y, Z, Angle, Color1, Color2, -1, false);
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_TEST;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
	format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "Test Vehicle");
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = X;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = Y;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = Z;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = Angle;
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = Color1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = Color2;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[modelid - 400][vehicle_info_MAX_GAS];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = interior;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = world;
	SetVehicleVirtualWorldEx(vehicle_id, world);
	SetVehicleToRespawnEx(vehicle_id);
	return vehicle_id;
}

AddPersonalVehicle(playerid, modelid, Float:X, Float:Y, Float:Z, Float:Angle, Color1, Color2, Float:max_gas, price = 0)
{
	new vehicle_id = INVALID_VEHICLE_ID;
	vehicle_id = CreateVehicle(modelid, X, Y, Z, Angle, Color1, Color2, -1);
	
	if(vehicle_id == INVALID_VEHICLE_ID) return false;
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_PERSONAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = X;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = Y;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = Z;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = Angle;
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = Color1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = Color2;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = max_gas;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = max_gas;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = 0;
	
	PLAYER_VEHICLES[vehicle_id][player_vehicle_VALID] = true;
	PLAYER_VEHICLES[vehicle_id][player_vehicle_OWNER_ID] = PI[playerid][pi_ID];
	PLAYER_VEHICLES[vehicle_id][player_vehicle_PRICE] = price;
	RegisterNewPlayerVehicle(playerid, vehicle_id);
	
	SetVehicleToRespawnEx(vehicle_id);
	return vehicle_id;
}

RegisterNewPlayerVehicle(playerid, vehicleid)
{
	inline OnVehicleInserted()
	{
		PLAYER_VEHICLES[vehicleid][player_vehicle_ID] = cache_insert_id();
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_ID])
		{
			format(GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE], 32, "%04d %c%c%c", PLAYER_VEHICLES[vehicleid][player_vehicle_ID], getRandomLetter(), getRandomLetter(), getRandomLetter());
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pvehicles SET plate = '%e' WHERE id = %d;", GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE], PLAYER_VEHICLES[vehicleid][player_vehicle_ID]);
			mysql_tquery(handle_db, QUERY_BUFFER);
		}
	}

	mysql_format
	(
		handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO pvehicles (id_player, modelid, spawn_x, spawn_y, spawn_z, spawn_angle, color1, color2, gas, max_gas, buy_price)\
			VALUES(%d, %d, %f, %f, %f, %f, %d, %d, %f, %f, %d);\
		",
			PI[playerid][pi_ID], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z],
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2], GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS],
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], PLAYER_VEHICLES[vehicleid][player_vehicle_PRICE]
	);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnVehicleInserted);
	return 1;
}

LoadPlayerVehicles(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;
	
	inline OnPlayerVehiclesLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_SU_VEHICLES)
				{
					printf("---> MAX_SU_VEHICLES superado al cargar de base de datos.");
					break;
				}

				new id, plate[32], modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:spawn_angle,
					Float:health, damage_panels, damage_doors, damage_lights, damage_tires, color1, color2,
					paintjob, Float:gas, Float:max_gas, closed, interior, eworld, veh_state,
					components[MAX_VEHICLE_COMPONENTS], vClamp,
					bool:isnull_plate, buy_price;

				reg_int(i, "id", id);
				cache_is_value_name_null(i, "plate", isnull_plate);
				if(!isnull_plate) reg_name(i, "plate", plate, 32);
				reg_int(i, "modelid", modelid);
				reg_float(i, "spawn_x", spawn_x);
				reg_float(i, "spawn_y", spawn_y);
				reg_float(i, "spawn_z", spawn_z);
				reg_float(i, "spawn_angle", spawn_angle);
				reg_float(i, "health", health);
				reg_int(i, "damage_panels", damage_panels);
				reg_int(i, "damage_doors", damage_doors);
				reg_int(i, "damage_lights", damage_lights);
				reg_int(i, "damage_tires", damage_tires);
				reg_int(i, "color1", color1);
				reg_int(i, "color2", color2);
				reg_int(i, "paintjob", paintjob);
				reg_float(i, "gas", gas);
				reg_float(i, "max_gas", max_gas);
				reg_int(i, "closed", closed);
				reg_int(i, "interior", interior);
				reg_int(i, "world", eworld);
				reg_int(i, "state", veh_state);
				reg_int(i, "slot0", components[0]);
				reg_int(i, "slot1", components[1]);
				reg_int(i, "slot2", components[2]);
				reg_int(i, "slot3", components[3]);
				reg_int(i, "slot4", components[4]);
				reg_int(i, "slot5", components[5]);
				reg_int(i, "slot6", components[6]);
				reg_int(i, "slot7", components[7]);
				reg_int(i, "slot8", components[8]);
				reg_int(i, "slot9", components[9]);
				reg_int(i, "slot10", components[10]);
				reg_int(i, "slot11", components[11]);
				reg_int(i, "slot12", components[12]);
				reg_int(i, "slot13", components[13]);
				reg_int(i, "clamp", vClamp);
				reg_int(i, "buy_price", buy_price);

				new vehicle_id = CreateVehicle(modelid, spawn_x, spawn_y, spawn_z, spawn_angle, color1, color2, -1);
				if(vehicle_id != INVALID_VEHICLE_ID)
				{
					PLAYER_VEHICLES[vehicle_id][player_vehicle_VALID] = true;
					PLAYER_VEHICLES[vehicle_id][player_vehicle_OWNER_ID] = PI[playerid][pi_ID];
					PLAYER_VEHICLES[vehicle_id][player_vehicle_ID] = id;
					PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = true;
					PLAYER_VEHICLES[vehicle_id][player_vehicle_CLAMP] = vClamp;
					PLAYER_VEHICLES[vehicle_id][player_vehicle_PRICE] = buy_price;

					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_PERSONAL;
					format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "%s", plate);
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = spawn_x;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = spawn_y;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = spawn_z;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = spawn_angle;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = health;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = damage_panels;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = damage_doors;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = damage_lights;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = damage_tires;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = color1;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = color2;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = paintjob;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = max_gas;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = gas;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = closed;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = veh_state;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = interior;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = eworld;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS] = components;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_LAST_REPAIR_TIME] = gettime();

					LinkVehicleToInteriorEx(vehicle_id, GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR]);
                    SetVehicleVirtualWorldEx(vehicle_id, GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD]);

					if(!PI[playerid][pi_VIP]) 
					{
						if(i >= MAX_NU_VEHICLES)
						{
							GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = 1;
							PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = false;
						}
					}

					inline OnVbootLoad()
					{
						new vb_rows;
						if(get_rows(vb_rows))
						{
							for(new x = 0; x != vb_rows; x ++)
							{
								new vboot_id, type, int, int_extra;
								reg_int(x, "id", vboot_id);
								reg_int(x, "type", type);
								reg_int(x, "int", int);
								reg_int(x, "int_extra", int_extra);

								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_VALID] = true;
								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_OBJECT_ID] = vboot_id;
								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_TYPE] = type;
								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_INT] = int;
								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_INT_EXTRA] = int_extra;
							}
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM vboot WHERE id_vehicle = %d LIMIT %d;", PLAYER_VEHICLES[vehicle_id][player_vehicle_ID], VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS]);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnVbootLoad);

					//vobjects
					inline OnVobjectsLoad()
					{
						new vo_rows;
						if(cache_get_row_count(vo_rows))
						{
							for(new x = 0; x != vo_rows; x ++)
							{
								new vobject_id, type, name[32], vobject_modelid, Float:off_x, Float:off_y, Float:off_z,
									Float:rot_x, Float:rot_y, Float:rot_z, attached, vobject_color0, vobject_color1,
									vobject_color2, vobject_color3, vobject_color4;

								cache_get_value_name_int(x, "id", vobject_id);
								cache_get_value_name_int(x, "type", type);
								cache_get_value_name(x, "name", name);
								cache_get_value_name_int(x, "modelid", vobject_modelid);
								cache_get_value_name_float(x, "off_x", off_x);
								cache_get_value_name_float(x, "off_y", off_y);
								cache_get_value_name_float(x, "off_z", off_z);
								cache_get_value_name_float(x, "rot_x", rot_x);
								cache_get_value_name_float(x, "rot_y", rot_y);
								cache_get_value_name_float(x, "rot_z", rot_z);
								cache_get_value_name_int(x, "attached", attached);
								cache_get_value_name_int(x, "color0", vobject_color0);
								cache_get_value_name_int(x, "color1", vobject_color1);
								cache_get_value_name_int(x, "color2", vobject_color2);
								cache_get_value_name_int(x, "color3", vobject_color3);
								cache_get_value_name_int(x, "color4", vobject_color4);

								VEHICLE_OBJECTS[vehicle_id][x][vobject_VALID] = true;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ID] = vobject_id;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_TYPE] = type;
								format(VEHICLE_OBJECTS[vehicle_id][x][vobject_NAME], 32, "%s", name);
								VEHICLE_OBJECTS[vehicle_id][x][vobject_MODELID] = vobject_modelid;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_OFFSET][0] = off_x;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_OFFSET][1] = off_y;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_OFFSET][2] = off_z;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ROT][0] = rot_x;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ROT][1] = rot_y;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ROT][2] = rot_z;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ATTACHED] = attached;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][0] = vobject_color0;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][1] = vobject_color1;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][2] = vobject_color2;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][3] = vobject_color3;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][4] = vobject_color4;
								UpdateVehicleAttachedObject(vehicle_id, x, true);
							}
							SetVehicleToRespawnEx(vehicle_id);
						}
					}
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM vobjects WHERE id_vehicle = %d LIMIT %d;", PLAYER_VEHICLES[vehicle_id][player_vehicle_ID], MAX_SU_VOBJECTS);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnVobjectsLoad);
				}
			}
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pvehicles WHERE id_player = %d;", PI[playerid][pi_ID]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPlayerVehiclesLoad);
	return 1;
}

SavePlayerVehicles(playerid, destroy = false)
{
	if(PI[playerid][pi_ID] == 0) return 0;
	
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) continue;
		
		GetVehiclePos(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Z]);
		GetVehicleZAngle(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_ANGLE]);
		GetVehicleHealth(i, GLOBAL_VEHICLES[i][gb_vehicle_HEALTH]);
		if(GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] > 1000.0) GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] = 1000.0;
		if(GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH) GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
		GetVehicleDamageStatus(i, GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_TIRES]);
		GLOBAL_VEHICLES[i][gb_vehicle_WORLD] = GetVehicleVirtualWorld(i);
		
		mysql_format
		(
			handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
			"\
				UPDATE pvehicles SET \
					id_player = %d,\
					plate = '%e',\
					modelid = %d,\
					spawn_x = %f,\
					spawn_y = %f,\
					spawn_z = %f,\
					spawn_angle = %f,\
					health = %f,\
					damage_panels = %d,\
					damage_doors = %d,\
					damage_lights = %d,\
					damage_tires = %d,\
					color1 = %d,\
					color2 = %d,\
					paintjob = %d,\
					gas = %f,\
					max_gas = %f,\
					closed = %d,\
					interior = %d,\
					world = %d,\
					state = %d,\
					slot0 = %d,\
					slot1 = %d,\
					slot2 = %d,\
					slot3 = %d,\
					slot4 = %d,\
					slot5 = %d,\
					slot6 = %d,\
					slot7 = %d,\
					slot8 = %d,\
					slot9 = %d,\
					slot10 = %d,\
					slot11 = %d,\
					slot12 = %d,\
					slot13 = %d,\
					clamp = %d \
				WHERE id = %d;\
			",
				PLAYER_VEHICLES[i][player_vehicle_OWNER_ID], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], GLOBAL_VEHICLES[i][gb_vehicle_MODELID], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_X],
				GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Z], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_ANGLE], GLOBAL_VEHICLES[i][gb_vehicle_HEALTH],
				GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_TIRES],
				GLOBAL_VEHICLES[i][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[i][gb_vehicle_COLOR_2], GLOBAL_VEHICLES[i][gb_vehicle_PAINTJOB], GLOBAL_VEHICLES[i][gb_vehicle_GAS], GLOBAL_VEHICLES[i][gb_vehicle_MAX_GAS],
				GLOBAL_VEHICLES[i][gb_vehicle_PARAMS_DOORS], GLOBAL_VEHICLES[i][gb_vehicle_INTERIOR], GLOBAL_VEHICLES[i][gb_vehicle_WORLD], GLOBAL_VEHICLES[i][gb_vehicle_STATE],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][0], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][1], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][2], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][3],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][4], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][5], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][6], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][7],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][8], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][9], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][10], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][11],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][12], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][13], PLAYER_VEHICLES[i][player_vehicle_CLAMP],

				PLAYER_VEHICLES[i][player_vehicle_ID]
		);
		mysql_tquery(handle_db, QUERY_BUFFER);

		if(destroy) DestroyVehicleEx(i);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = true;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;

	DestroyDynamicObject(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OBJECTID]);
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_OBJECTID] = INVALID_STREAMER_ID;
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH) GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
	
	if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}

	if(!HOTDOG_VEHICLES[vehicleid][hotdog_vehicle_VALID] || GetVehicleModel(vehicleid) != 588)
	{
		ClearHotdog(vehicleid);
	}

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TRASH)
		{
			if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
			{
				CancelTrashWork(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID], TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID], vehicleid);
			}
		}
		
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = 0.0;
		else GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] / 3, 2);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
		
		switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
		{
			case WORK_TAXI: ResetVehicleTaxiMeter(vehicleid);
			case WORK_MECHANIC: ClearTrailerInfo(vehicleid);
			case WORK_TRUCK: ResetTruckInfo(vehicleid);
			case WORK_TRAFFICKER: ResetTraffickerInfo(vehicleid);
			case WORK_TRASH: ResetTrashInfo(vehicleid);
			case WORK_PIZZA: ResetPizzaInfo(vehicleid);
			case WORK_TRAILER:
			{
				if(!IsValidTrailerVehicle(vehicleid))
				{
					ClearTrailerInfo(vehicleid);
					SetTrailerRentInfo(vehicleid);
				}
			}
		}
	}

	SetVehicleNumberPlate(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE]);
	SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
	UpdateVehicleDamageStatus(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES]);
    ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);
	ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);
	SetVehiclePosEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
	SetVehicleZAngle(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE]);
	LinkVehicleToInteriorEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_INTERIOR]);
	SetVehicleVirtualWorldEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD]);
	AddVehicleComponents(vehicleid);
	SetTrailerInfo(vehicleid, -1); //Ningun Trailer
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 0;
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE] = 0;
	UpdateVehicleParams(vehicleid);
	SetClampVehicleLabel(vehicleid);
	return 1;
}

SetClampVehicleLabel(vehicleid) {
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) {
		if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
		{
			DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		if(PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] > 0) {
			new string[256];
			format(string, sizeof string, "Cepo\nUsa {"#PRIMARY_COLOR"}/pagar {FFFFFF}para pagar la multa por %s$", number_format_thousand(PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP]));

			new Float:wX, Float:wY, Float:wZ;
			GetVehicleModelInfo(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID], VEHICLE_MODEL_INFO_WHEELSREAR, wX, wY, wZ);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = CreateDynamic3DTextLabel(string, -1, wX, wY, wZ, 20.0, .attachedvehicle = vehicleid);
		}
	}
}

UpdateVehicleParams(vehicleid)
{
	return SetVehicleParamsEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE]);
}

SetVehicleHealthEx(vehicleid, Float:health, forplayerid = INVALID_PLAYER_ID)
{
	if(forplayerid != INVALID_PLAYER_ID) PLAYER_AC_INFO[forplayerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = health;
	SetVehicleHealth(vehicleid, health);
	return 1;
}

RepairVehicleEx(vehicleid, forplayerid = INVALID_PLAYER_ID, Float:health = 1000.0)
{
	if(forplayerid != INVALID_PLAYER_ID) PLAYER_AC_INFO[forplayerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_REPAIR_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = health;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
	SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
	if(health >= 1000.0) RepairVehicle(vehicleid);
	return 1;
}

SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] = x;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] = y;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] = z;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return SetVehiclePos(vehicleid, x, y, z);
}

LinkVehicleToInteriorEx(vehicleid, interior)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_INTERIOR] = interior;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return LinkVehicleToInterior(vehicleid, interior);
}

SetVehicleToRespawnEx(vehicleid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return SetVehicleToRespawn(vehicleid);
}

public OnVehicleDeath(vehicleid, killerid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	
	DestroyDynamicObject(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OBJECTID]);
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_OBJECTID] = INVALID_STREAMER_ID;

	if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}

	if(IsVehicleTrailer_Truck(vehicleid))
	{
		new playerid = GetPlayerIdFromAccountId(GetTrailerDriver(vehicleid));
		pTemp(playerid)[pt_RENT_VEHICLE] = INVALID_VEHICLE_ID;

		ClearTrailerInfo(GetTrailerTrailer(vehicleid));
		DestroyVehicleEx(GetTrailerTrailer(vehicleid));

		ClearTrailerInfo(vehicleid);
		if(IsRentedTrailer(vehicleid)) DestroyVehicleEx(vehicleid);
	}

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_HOTDOG || GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_HOTDOG_INGAME) ClearHotdog(vehicleid);
	
	switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
	{
		case VEHICLE_TYPE_TEST: DestroyVehicleEx(vehicleid);
		case VEHICLE_TYPE_PERSONAL:
		{
			if(VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NORMAL_SPEEDO])
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_DAMAGED;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
			}
			else
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
			}
			
			new playerid = GetPlayerIdFromAccountId(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID]);
			if(playerid != INVALID_PLAYER_ID)
			{
				if(PI[playerid][pi_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "Vehículo de sustitución entregado en últ. estacionamiento.");
					RegisterPhoneMessage(0, PI[playerid][pi_ID], message);
					if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON)
					{
						if((pTemp(playerid)[pt_GAME_STATE] == GAME_STATE_NORMAL || pTemp(playerid)[pt_GAME_STATE] == GAME_STATE_DEAD))
						{
							SendClientMessagef(playerid, -1, "{"#BLUE_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 38350), message);
						}
					}
				}
			}
		}
		case VEHICLE_TYPE_HOTDOG:
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] = 0.0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = 0.0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 999999999.9;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 1;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
		}
		default:
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = 0.0;
			else GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] / 3, 2);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
		}
	}
    return 1;
}

public OnTrailerUpdate(playerid, vehicleid)
{
    new towing_vehicle;
	towing_vehicle = GetPlayerVehicleID(playerid);
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] != towing_vehicle)
	{
		if(ac_Info[CHEAT_FAKE_TRAILER_SYNC][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_FAKE_TRAILER_SYNC][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_FAKE_TRAILER_SYNC, vehicleid);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_FAKE_TRAILER_SYNC][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_FAKE_TRAILER_SYNC][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_FAKE_TRAILER_SYNC, vehicleid);
					return 0;
				}
				
			}
		}
	}
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID])
	{
		if(ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Enabled])
		{
			if(pTemp(playerid)[pt_KICKED]) return 0;
			
			new Float:veh_x, Float:veh_y, Float:veh_z, Float:veh_dis;
			GetVehiclePos(vehicleid, veh_x, veh_y, veh_z);
			veh_dis = GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z);
			
			if(gettime() > GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED])
			{
				if(veh_dis > 20.0 && veh_z > -70.0)
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_UNOCCUPIED_VEHICLE_TP, veh_dis);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_UNOCCUPIED_VEHICLE_TP, veh_dis);
						}
					}
					
					SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
					return 0;
				}
			} 
		}
		
		new Float:spawn_distance = GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_SELL:
			{
				if(spawn_distance > 0.5) SetVehicleToRespawnEx(vehicleid);
			}
			case VEHICLE_TYPE_WORK:
			{
				if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED]) return 1;
				if(spawn_distance < 25.0)
				{
					if(spawn_distance > 10.0)
					{
						SetVehicleToRespawnEx(vehicleid);
					}
				}
			}
		}
	}
    return 1;
}

task UpdateHotdogPos[15000]()
{
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i++)
	{
		if(IsValidVehicle(i))
		{
			if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_HOTDOG)
			{
				if(HOTDOG_VEHICLES[i][hotdog_vehicle_VALID])
				{
					if(HOTDOG_VEHICLES[i][hotdog_vehicle_ID] != -1)
					{
						SetVehiclePosEx(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Z]);
						SetVehicleZAngle(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_ANGLE]);
						//SetVehicleVelocity(i, 0.0, 0.0, 0.0);
					}
				}
			}
		}
	}
}

GetPlayerIdFromAccountId(accountid)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][pi_ID] == accountid)
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

#define NECESSARY_TIME_BETWEEN_WORKS	600 //segundos
CMD:trabajar(playerid, params[])
{	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "Debes estar a pie.");
	if(PI[playerid][pi_WANTED_LEVEL] > 0) return SendClientMessagef(playerid, -1, "No puedes obtener un trabajo cuando estás en búsqueda.");
	
	if(!PI[playerid][pi_VIP])
	{
		if(gettime() < pTemp(playerid)[pt_LAST_GOT_WORK_TIME] + NECESSARY_TIME_BETWEEN_WORKS)
		{
			new time = NECESSARY_TIME_BETWEEN_WORKS - (gettime() - pTemp(playerid)[pt_LAST_GOT_WORK_TIME]);
			SendClientMessagef(playerid, -1, "Debes de esperar %s minutos para conseguir otro trabajo.", TimeConvert(time));
			return 1;
		}
	}

	new player_jobs = CountPlayerJobs(playerid);
	if(PI[playerid][pi_VIP])
	{
		if(player_jobs >= MAX_SU_WORKS)
		{
			SendClientMessagef(playerid, -1, "Actualmente tienes %d trabajos, usa /renunciar para dejar un trabajo.", player_jobs);
			return 1;
		}
	}
	else
	{
		if(player_jobs >= MAX_NU_WORKS)
		{
			SendClientMessagef(playerid, -1, "Actualmente tienes %d trabajos, usa /renunciar para dejar un trabajo.", player_jobs);
			SendClientMessagef(playerid, -1, "¡Los jugadores VIP pueden tener hasta %d trabajos! Usa /ayuda si quieres ser VIP.", MAX_SU_WORKS);
			return 1;
		}
	}
	
	for(new i = 0; i != E_WORKS; i ++)	
	{
		if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;
		
		if(GetPlayerInterior(playerid) == obtain_work_coords[i][obtain_work_INTERIOR])
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z]))
			{
				if(work_info[i][work_info_LEVEL] > PI[playerid][pi_LEVEL])
				{
					SendClientMessagef(playerid, -1, "Necesitas ser al menos nivel %d para obtener este trabajo.", work_info[i][work_info_LEVEL]);
					return 1;
				}
				
				if(PLAYER_WORKS[playerid][i][pwork_SET])
				{
					SendClientMessagef(playerid, -1, "Ya eres %s.", work_info[i][work_info_NAME]);
					return 1;
				}

				if(i == WORK_TRAILER)
				{
					if(PLAYER_WORKS[playerid][WORK_TRUCK][pwork_LEVEL] < 50)
					{
						SendMessage(playerid, "Necesitas tener 50 de experienca en camionero, para que te contraten.");
						return 1;
					}
				}
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1;", PI[playerid][pi_ID], i);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				PLAYER_WORKS[playerid][i][pwork_SET] = true;
				pTemp(playerid)[pt_LAST_GOT_WORK_TIME] = gettime();

				SendClientMessagef(playerid, -1, "{"#PRIMARY_COLOR"}¡Nuevo Trabajo! {FFFFFF}Ahora trabajas de {"#GREEN_COLOR"}%s.", work_info[i][work_info_NAME]);
				SendClientMessage(playerid, -1, "Puedes usar el comando {"#BLUE_COLOR"}/ayuda trabajos {FFFFFF}para ver como trabajar aquí.");

				CallLocalFunction("OnPlayerObtainWork", "ii", playerid, i);
				return 1;
			}
		}
	}
	
	SendMessage(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:dimitir(playerid, params[])
{
	new player_jobs = CountPlayerJobs(playerid);
	if(!player_jobs) return SendClientMessagef(playerid, -1, "No tienes ningún trabajo.");
	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	
	new work;
	if(sscanf(params, "d", work))
	{
		new works[32 * sizeof(work_info)], line_str[32], count;
		for(new i = 1; i != sizeof(work_info); i ++)
		{
			if(PLAYER_WORKS[playerid][i][pwork_SET])
			{
				if(count > 0) strcat(works, ", ");
				
				format(line_str, sizeof line_str, "%s (%d)", work_info[i][work_info_NAME], i);
				strcat(works, line_str);
				
				count ++;
			}
		}
		SendClientMessagef(playerid, -1, "Tus trabajos: %s", works);
		SendClientMessagef(playerid, -1, "Utiliza /renunciar <id del trabajo> para renunciar a un trabajo.");
		return 1;
	}
	
	if(work < 1 || work >= sizeof work_info) return SendClientMessagef(playerid, -1, "El trabajo no es válido.");
	
	if(!PLAYER_WORKS[playerid][work][pwork_SET]) return SendMessagef(playerid, "~r~No eres %s.", work_info[work][work_info_NAME]);
	if(pTemp(playerid)[pt_WORKING_IN] == work) return SendClientMessagef(playerid, -1, "Ahora mismo estás de servicio en ese trabajo, deja de trabajar para abandonar el trabajo.");
	
	if(work == WORK_POLICE)
	{
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0, level = 0 WHERE id_player = %d AND id_work = %d;", PI[playerid][pi_ID], work);
		mysql_tquery(handle_db, QUERY_BUFFER);
		PLAYER_WORKS[playerid][work][pwork_LEVEL] = 0;
	}
	else
	{
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0 WHERE id_player = %d AND id_work = %d;", PI[playerid][pi_ID], work);
		mysql_tquery(handle_db, QUERY_BUFFER);
	}
	SendClientMessagef(playerid, -1, "Has abandonado tu trabajo de %s.", work_info[work][work_info_NAME]);
	PLAYER_WORKS[playerid][work][pwork_SET] = false;
	return 1;
}
alias:dimitir("renunciar");

CMD:pagar(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetNearVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendMessage(playerid, "No estás en el lugar adecuado.");

	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID] || PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] <= 0) return SendClientMessagef(playerid, -1, "Este vehículo no tiene ninguna multa.");

	if(GivePlayerCash(playerid, -PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP], true, true)) {
		PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] = 0;
		SendClientMessagef(playerid, -1, "Has pagado la multa y se ha quitado el cepo.");
		SetClampVehicleLabel(vehicleid);
	}
	else SendClientMessagef(playerid, -1, "No tienes suficiente dinero para pagar la multa.");
	return 1;
}

CMD:cepo(playerid, params[]) {
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 1) return SendClientMessagef(playerid, -1, "Tienes que ser %s para poder hacer esto.", POLICE_RANKS[1]);

	new price;
	if(sscanf(params, "d", price)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/cepo [multa]");
	if(price < 0 || price > 2000) return SendClientMessagef(playerid, -1, "El precio de la multa no es válido.");

	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetNearVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessagef(playerid, -1, "No estás cerca de un vehículo.");

	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessagef(playerid, -1, "No puedes multar a este vehículo.");
	if(!VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NORMAL_SPEEDO]) return SendClientMessagef(playerid, -1, "No puedes multar a este vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] > 0 && price != 0) return SendClientMessagef(playerid, -1, "Este vehículo ya tiene una multa.");

	if(PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] > 0 && price == 0) {
		PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] = 0;
		SetClampVehicleLabel(vehicleid);

		SendClientMessagef(playerid, -1, "Se ha quitado la multa a este vehículo.");
		Streamer_Update(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
	}
	else {
		if(price == 0) return SendClientMessagef(playerid, -1, "El precio de la multa no es válido.");
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID) return SendClientMessagef(playerid, -1, "No puedes multar a un vehículo si hay un conductor en él.");

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
		UpdateVehicleParams(vehicleid);

		PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] = price;
		SetClampVehicleLabel(vehicleid);

		SendClientMessagef(playerid, -1, "Vehículo multado.");
		Streamer_Update(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
	}
	return 1;
}

CMD:prestar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(PI[playerid][pi_LEVEL] < 2) return SendClientMessagef(playerid, -1, "Debes ser al menos nivel 2 para usar este comando.");
	
	new option[24];
	if(sscanf(params, "s[24]", option)) return SendClientMessagef(playerid, 0xCCCCCCCC, "Error en los parámetros, Opciones: llaves.");
	
	switch(YHash(option, false))
	{
		case _I<llaves>:
		{
			ShowDialog(playerid, DIALOG_KEYS_SELECT_PLAYER);
		}
		default: SendClientMessagef(playerid, 0xCCCCCCCC, "Error en los parámetros, Opciones: llaves.");
	}
	return 1;
}

CMD:llaves(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendClientMessagef(playerid, -1, "Error: /llaves [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
	if(PlayerTemp[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No quitarle las llaves a este jugador, por ahora.");
	if(PlayerTemp[params[0]][pt_PLAYER_KEYS_OWNER] != PI[playerid][pi_ID]) return SendMessage(playerid, "Las llaves de este usuario no son tuyas.");
	
	PlayerTemp[params[0]][pt_PLAYER_KEYS] = -1;
	PlayerTemp[params[0]][pt_PLAYER_KEYS_OWNER] = -1;

	SendMessagef(playerid, "Le has quitado las llaves de tu auto a %s.", PlayerTemp[params[0]][pt_NAME]);
	return 1;
}

CMD:seguro(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);
	else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetNearVehicle(playerid);
		
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessagef(playerid, -1, "No estás en tu vehículo o cerca de él para abrirlo.");
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendMessage(playerid, "~r~Este no es tú vehículo.");

	if(pTemp(playerid)[pt_PLAYER_KEYS] != -1)
	{
		if(pTemp(playerid)[pt_PLAYER_KEYS] != vehicleid) return SendMessage(playerid, "~r~Tus llaves no son para este vehiculo.");
	}
	else
	{
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendMessage(playerid, "~r~Este no es tú vehículo.");
	}
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS])
	{
		/*if(!PI[playerid][pi_VIP] && !PLAYER_VEHICLES[vehicleid][player_vehicle_ACCESSIBLE])
		{
			SendClientMessagef(playerid, -1, "Este vehículo está bloqueado, desbloquealo con VIP.");
			SendClientMessagef(playerid, -1, "¡Los jugadores VIP pueden tener hasta %d vehículos! Usa /ayuda si quieres ser VIP.", MAX_SU_VEHICLES);
			return 1;
		}*/
		
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
		UpdateVehicleParams(vehicleid);

		SendMessage(playerid, "Has ~g~abierto~w~ las puertas de tu vehículo.");

		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha abierto las puertas del vehículo.");
		else Auto_SendPlayerAction(playerid, "ha abierto las puertas de su vehículo.");
	}
	else
	{
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
		UpdateVehicleParams(vehicleid);

		SendMessage(playerid, "Has ~r~cerrado~w~ las puertas de tu vehículo.");

		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha cerrado las puertas del vehículo.");
		else Auto_SendPlayerAction(playerid, "ha cerrado las puertas de su vehículo.");
	}
	return 1;
}

CMD:capot(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) vehicleid = GetPlayerVehicleID(playerid);
	else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetNearVehicle(playerid);
	
	if(vehicleid == INVALID_VEHICLE_ID) return SendMessage(playerid, "~r~No conduciendo o cerca de algun vehiculo.");
	
	if(!IsPlayerWorking(playerid, WORK_MECHANIC))
	{
		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendMessage(playerid, "~r~Este no es tú vehículo.");
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendMessage(playerid, "~r~Este no es tú vehículo.");
	}
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET])
	{
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET] = 0;
		UpdateVehicleParams(vehicleid);

		SendMessage(playerid, "Has ~r~cerrado~w~ el capot del vehículo.");
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha cerrado el capot del vehiculo.");
		else Auto_SendPlayerAction(playerid, "ha cerrado el capot de su vehiculo.");

	}
	else
	{
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET] = 1;
		UpdateVehicleParams(vehicleid);

		SendMessage(playerid, "Has ~g~abierto~w~ el capot del vehiculo.");
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha abierto el capot del vehiculo.");
		else Auto_SendPlayerAction(playerid, "ha abierto el capot de su vehiculo.");
	}
	return 1;
}

CMD:aparcar(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);
		
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessagef(playerid, -1, "No estás en tu vehículo para aparcarlo.");
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendMessage(playerid, "~r~Este no es tú vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendMessage(playerid, "~r~Este no es tú vehículo.");
	
	new Float:pos[3], Float:angle;
	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
	GetVehicleZAngle(vehicleid, angle);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X] = pos[0];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y] = pos[1];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z] = pos[2];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE] = angle;
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
	UpdateVehicleParams(vehicleid);
	SendClientMessagef(playerid, -1, "Has estacionado tu vehículo, cuando sea destruido volverá a aparecer aquí.");
	return 1;
}
alias:aparcar("estacionar");

CMD:luces(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS])
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
			UpdateVehicleParams(vehicleid);
			
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha apagado las luces de su vehículo.");
			else Auto_SendPlayerAction(playerid, "ha apagado las luces de el vehículo.");
		}
		else
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 1;
			UpdateVehicleParams(vehicleid);
			
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha encendido las luces de su vehículo.");
			else Auto_SendPlayerAction(playerid, "ha encendido las luces de el vehículo.");
		}
	}
	else SendClientMessagef(playerid, -1, "No estás conduciendo ningún vehículo.");
	return 1;
}

CMD:motor(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE]) 
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
			{
				if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendClientMessagef(playerid, -1, "Debes esperar a que se cargue el camión para arrancar.");
				if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return SendClientMessagef(playerid, -1, "Debes esperar a que se descargue el camión para arrancar.");
			
				if(GetTraffickerInfoLoading(vehicleid)) return SendClientMessagef(playerid, -1, "Debes esperar a que se prepare el vehiculo para arrancar.");
				if(GetTraffickerInfoUnLoading(vehicleid)) return SendClientMessagef(playerid, -1, "Debes esperar a que se prepare el vehiculo para arrancar.");

				if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_SELL) return SendMessage(playerid, "¿Quieres llevartelo? Entonces compralo.");
			
				if(pTemp(playerid)[pt_IN_TUNING_GARAGE]) return SendMessage(playerid, "No puedes encender tu vehiculo aqui.");
			
				if(GetVehicleWork(vehicleid) == WORK_TRAILER)
				{
					if(!IsRentedTrailer(vehicleid))
					{
						if(IsVehicleTrailer_Truck(vehicleid))
						{
							SendInfoMessage(playerid, "Trailero~n~~n~Para encender este trailer primero debes rentarla.~n~~n~");
							return 1;
						}
					}
				}
			}

			if(GetTrailerInfoLoading(vehicleid)) return SendInfoMessage(playerid, "Aviso~n~~n~Espera a que el trailer se cargue para encender el trailer~n~~n~");
			if(GetTrailerInfoUnLoading(vehicleid)) return SendInfoMessage(playerid, "Aviso~n~~n~Espera a que el trailer se descargue para encender el trailer~n~~n~");
		}
		
		KillTimer(pTemp(playerid)[pt_TIMERS][7]);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
		{
			PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);
			
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha detenido su vehículo.");
			else Auto_SendPlayerAction(playerid, "ha detenido el vehículo.");
		}
		else
		{
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_VALID] && PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] > 0) 
			{
				SendClientMessagef(playerid, -1, "El vehículo tiene un cepo y no puede arrancar.");
				return 1;
			}
			SendClientMessagef(playerid, -1, "Encendiendo...");
			pTemp(playerid)[pt_TIMERS][7] = SetTimerEx("StartVehicleEngine", 1000, false, "ii", playerid, vehicleid);
		}
	}
	else SendClientMessagef(playerid, -1, "No estás conduciendo ningún vehículo.");
	return 1;
}
alias:motor("arrancar");

forward StartVehicleEngine(playerid, vehicleid);
public StartVehicleEngine(playerid, vehicleid)
{
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_DAMAGED) return Auto_SendPlayerAction(playerid, "intentó arrancar el vehículo pero el motor está dañado.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] <= 0.1 && VEHICLE_INFO[GetVehicleModel(vehicleid) - 400][vehicle_info_NORMAL_SPEEDO]) return Auto_SendPlayerAction(playerid, "intentó arrancar el vehículo pero no tiene gasolina.");
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] != INVALID_VEHICLE_ID)
	{
		if(GLOBAL_VEHICLES[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] ][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
			PLAYER_AC_INFO[ GLOBAL_VEHICLES[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] ][gb_vehicle_DRIVER] ][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_IMMUNITY] = gettime() + 5;

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
		DetachTrailerFromVehicle(vehicleid);
	}
	
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha arrancado su vehículo.");
	else Auto_SendPlayerAction(playerid, "ha arrancado el vehículo.");
	return 1;
}

AddVehicleComponents(vehicleid)
{
	for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
	{
		RemoveVehicleComponent(vehicleid, i);
		
		if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i]) continue;
		AddVehicleComponent(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i]);
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    if(enterexit) // Entra
    {
		SendClientMessage(playerid, -1, " ");
		SendClientMessagef(playerid, -1, "Solo puedes tunear vehículos en el mecánico, búscalo con el /GPS.");
		SendClientMessage(playerid, -1, "{ffff35}[ATENCION] {"#SILVER_COLOR"}Si realizas alguna modificación al vehículo en este garaje serás expulsado.");
    }
	else
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);
			ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);
			AddVehicleComponents(vehicleid);
		}
	}
    return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(ac_Info[CHEAT_CAR_MOD][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_IMMUNITY])
		{
			if(!ac_Info[CHEAT_CAR_MOD][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
			else
			{
				if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_MOD][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] = 0;
				else PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] ++;
				
				PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] = gettime();
				if(PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_MOD][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
			}
		}
	}
    return 0;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(ac_Info[CHEAT_CAR_MOD][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_IMMUNITY])
		{
			if(!(-1 < paintjobid < 3) && paintjobid != 255)
			{
				if(!ac_Info[CHEAT_CAR_MOD][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_MOD][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_MOD][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
				}
			}
		}
	}
	return 1;
}

DestroyVehicleEx(vehicleid)
{
	if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return false;
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
	{
		PLAYER_AC_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	}
	
	if(DestroyVehicle(vehicleid))
	{
		if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
		{
			DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		static const temp_GLOBAL_VEHICLES[Global_Vehicles_Info]; GLOBAL_VEHICLES[vehicleid] = temp_GLOBAL_VEHICLES;
		static const temp_PLAYER_VEHICLES[Player_Vehicles_Info]; PLAYER_VEHICLES[vehicleid] = temp_PLAYER_VEHICLES;
		
		static const temp_VEHICLE_BOOT[enum_VEHICLE_BOOT];
		for(new i = 0; i != MAX_BOOT_SLOTS; i ++) VEHICLE_BOOT[vehicleid][i] = temp_VEHICLE_BOOT;
		
		new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
		for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
		{
			if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID) DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][i] = temp_VEHICLE_OBJECTS;
		}		
		return true;
	}
	return false;
}

stock getRandomLetter() 
{
    return 65 + random(25);
}

UpdatePlayerPropertyContructor(playerid)
{
	SetPlayerPosEx
	(
		playerid, 
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_X],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_Y],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_Z],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_ANGLE],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_INTERIOR],
		0, false, true
	);
	
	new td_str[45]; format(td_str, sizeof td_str, "Interior:_%d/%d", PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO], sizeof PROPERTY_INTERIORS - 1);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], td_str);
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

ExitPlayerPropertyConstructor(playerid)
{
	CancelSelectTextDrawEx(playerid);
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED] = false;
	
	SetPlayerPosEx
	(
		playerid, 
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT],
		0, false, true
	);
	
	for(new i = 0; i != 6; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][i]);
	return 1;
}

Create_PlayerPropertyConstructo(playerid)
{
	new slot = GetEmptyPropertySlot();
	if(slot == -1)
	{
		SendClientMessagef(playerid, -1, "No hay mas slots.");
		ExitPlayerPropertyConstructor(playerid);
		return 1;
	}
	
	PROPERTY_INFO[slot][property_VALID] = true;
	PROPERTY_INFO[slot][property_EXT_X] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X];
	PROPERTY_INFO[slot][property_EXT_Y] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y];
	PROPERTY_INFO[slot][property_EXT_Z] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z];
	PROPERTY_INFO[slot][property_EXT_ANGLE] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG];
	PROPERTY_INFO[slot][property_EXT_INTERIOR] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT];
	PROPERTY_INFO[slot][property_EXT_FREEZE] = false;
	PROPERTY_INFO[slot][property_ID_INTERIOR] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO];
	
	PROPERTY_INFO[slot][property_SOLD] = false;
	PROPERTY_INFO[slot][property_OWNER_ID] = 0;
	PROPERTY_INFO[slot][property_PRICE] = pTemp(playerid)[pt_PROPERTY_CINFO][1];
	PROPERTY_INFO[slot][property_LEVEL] = pTemp(playerid)[pt_PROPERTY_CINFO][0];
	PROPERTY_INFO[slot][property_EXTRA] = pTemp(playerid)[pt_PROPERTY_CINFO][3];
	PROPERTY_INFO[slot][property_VIP_LEVEL] = pTemp(playerid)[pt_PROPERTY_CINFO][2];
	PROPERTY_INFO[slot][property_PRICE] = PROPERTY_INFO[slot][property_PRICE];
	PROPERTY_INFO[slot][property_GARAGE_ID] = -1;
	
	if(PROPERTY_INFO[slot][property_EXTRA]) PROPERTY_INFO[slot][property_PRICE] = 0;
	if(PROPERTY_INFO[slot][property_VIP_LEVEL]) PROPERTY_INFO[slot][property_LEVEL] = 1;
	
	inline OnPropertyInserted()
	{
		PROPERTY_INFO[slot][property_ID] = cache_insert_id();
		CreatePropertyInfo(slot, 0, "", 0, "");

		SendClientMessagef(playerid, -1, "Propiedad creada, id: %d (%d/%d).", PROPERTY_INFO[slot][property_ID], slot, MAX_PROPERTIES);
		ExitPlayerPropertyConstructor(playerid);
	}
	mysql_format
	(
		handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO properties (ext_x, ext_y, ext_z, ext_angle, ext_interior, ext_freeze, id_interior, price, level, extra, vip_level, garage_id)\
			VALUES (%f, %f, %f, %f, %d, %d, %d, %d, %d, %d, %d, %d);\
		",
			PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z], PROPERTY_INFO[slot][property_EXT_ANGLE], 
			PROPERTY_INFO[slot][property_EXT_INTERIOR], PROPERTY_INFO[slot][property_EXT_FREEZE], PROPERTY_INFO[slot][property_ID_INTERIOR],
			PROPERTY_INFO[slot][property_PRICE], PROPERTY_INFO[slot][property_LEVEL], PROPERTY_INFO[slot][property_EXTRA], PROPERTY_INFO[slot][property_VIP_LEVEL],
			PROPERTY_INFO[slot][property_GARAGE_ID]
	);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPropertyInserted);
	return 1;
}

GetEmptyPropertySlot()
{
	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if(!PROPERTY_INFO[i][property_VALID]) return i;
	}
	return -1;
}

GetEmptyATMSlot()
{
	for(new i = 0; i != MAX_ATM_BANK; i ++)
	{
		if(!ATM_BANK[i][atm_valid]) return i;
	}
	return -1;
}

GivePlayerDrunkLevel(playerid, amount)
{
	return SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + amount);
}

stock Float:frandom(Float:max, Float:min, dp)
{
	new
		Float:mul = floatpower(10.0, dp),
		imin = floatround(min * mul),
		imax = floatround(max * mul);
	return float(random(imax - imin) + imin) / mul;
}

SendAlertToTaxiDrivers(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
				if(!PLAYER_WORKS[i][WORK_TAXI][pwork_SET]) continue;
				if(PlayerTemp[i][pt_WORKING_IN] != WORK_TAXI) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, 0xf2f224FF);
				SendClientMessagef(i, -1, "Hay un nuevo cliente solicitando un uber, distancia: {"#PRIMARY_COLOR"}%.2f Km.", (GetPlayerDistanceFromPoint(i, pos[0], pos[1], pos[2]) * 0.01));
			}
		}
	}
	return 1;
}

DisablePlayerTaxiMark(playerid)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
				if(!PLAYER_WORKS[i][WORK_TAXI][pwork_SET]) continue;
				if(PlayerTemp[i][pt_WORKING_IN] != WORK_TAXI) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

SetTaxiPlayerMarkers(playerid)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PlayerTemp[i][pt_WANT_TAXI])
				{
					SetPlayerMarkerForPlayer(playerid, i, 0xf2f224FF);
				}
			}
		}
	}
	return 1;
}

SetNormalPlayerMarkers(playerid)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerMarkerForPlayer(playerid, i, PlayerTemp[i][pt_PLAYER_COLOR]);
		}
	}
	return 1;
}

LoadPlayerCrewInfo(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;
	
	if(PI[playerid][pi_CREW])
	{
		new crew_index = GetCrewIndexById(PI[playerid][pi_CREW]);
		if(crew_index == -1)
		{
			PI[playerid][pi_CREW] = 0;
			PI[playerid][pi_CREW_RANK] = 0;
			pTemp(playerid)[pt_CREW_INDEX] = 0;
			SendClientMessagef(playerid, -1, "La banda a la que pertenecías ya no existe.");

			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = NULL WHERE id = %d;", PI[playerid][pi_ID]);
			mysql_tquery(handle_db, QUERY_BUFFER);
		}
		else
		{
			pTemp(playerid)[pt_CREW_INDEX] = crew_index;
			CREW_INFO[crew_index][crew_ONLINE_MEMBERS] ++;
		}
	}
	return 1;
}

LoadPlayerWorks(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;
	
	inline OnPworksLoad()
	{
		new rows, count;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new work;
				reg_int(i, "id_work", work);
				reg_int(i, "set", PLAYER_WORKS[playerid][work][pwork_SET]);
				reg_int(i, "level", PLAYER_WORKS[playerid][work][pwork_LEVEL]);

				if(PLAYER_WORKS[playerid][work][pwork_SET] && !PI[playerid][pi_VIP])
				{
					if(count >= MAX_NU_WORKS)
					{
						PLAYER_WORKS[playerid][work][pwork_SET] = false;
						if(work == WORK_POLICE)
						{
							mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0, level = 0 WHERE id_player = %d AND id_work = %d;", PI[playerid][pi_ID], work);
							mysql_tquery(handle_db, QUERY_BUFFER);
							PLAYER_WORKS[playerid][work][pwork_LEVEL] = 0;
						}
						else
						{
							mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0 WHERE id_player = %d AND id_work = %d;", PI[playerid][pi_ID], work);
							mysql_tquery(handle_db, QUERY_BUFFER);
						}
					}
					count ++;
				}
				
			}
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pworks WHERE id_player = %d;", PI[playerid][pi_ID]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPworksLoad);
	return 1;
}

ResetTruckInfo(vehicleid)
{
	static const tmp_TRUCK_VEHICLE[TRUCK_VEHICLE_Info]; TRUCK_VEHICLE[vehicleid] = tmp_TRUCK_VEHICLE;
	return 1;
}

ResetPizzaInfo(vehicleid)
{
	new tmp_PIZZA_VEHICLE[PIZZA_VEHICLE_Info]; PIZZA_VEHICLE[vehicleid] = tmp_PIZZA_VEHICLE;
	return 1;
}

ResetTrashInfo(vehicleid)
{
	new tmp_TRASH_VEHICLES[TRASH_VEHICLES_INFO]; TRASH_VEHICLES[vehicleid] = tmp_TRASH_VEHICLES;
	
	TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] = INVALID_PLAYER_ID;
	TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] = INVALID_PLAYER_ID;
	return 1;
}

forward TruckLoadUp(playerid, vehicleid);
public TruckLoadUp(playerid, vehicleid)
{
	if(pTemp(playerid)[pt_TRUCK_LOADING_VALUE] < 100.0)
	{
		pTemp(playerid)[pt_TRUCK_LOADING_VALUE] += 10.0;
		if(pTemp(playerid)[pt_TRUCK_LOADING_VALUE] > 100.0) pTemp(playerid)[pt_TRUCK_LOADING_VALUE] = 100.0;
		
		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(pTemp(playerid)[pt_TIMERS][9]);
		pTemp(playerid)[pt_TIMERS][9] = SetTimerEx("TruckLoadUp", 1000, false, "ii", playerid, vehicleid);
		return 1;
	}
	
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);
	
	TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED] = true;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING] = false;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED] = false;
	
	SendInfoMessage(playerid, "Camionero~n~~n~La mercancia ha sido cargada, ve al ~r~punto de entrega~w~ para entregar la mercancia.~n~~n~");
	SetPlayerTruckCheckpoint(playerid, vehicleid);
	return 1;
}

forward TruckUnLoadUp(playerid, vehicleid);
public TruckUnLoadUp(playerid, vehicleid)
{
	if(pTemp(playerid)[pt_TRUCK_LOADING_VALUE] < 100.0)
	{
		pTemp(playerid)[pt_TRUCK_LOADING_VALUE] += 10.0;
		if(pTemp(playerid)[pt_TRUCK_LOADING_VALUE] > 100.0) pTemp(playerid)[pt_TRUCK_LOADING_VALUE] = 100.0;
		
		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(pTemp(playerid)[pt_TIMERS][9]);
		pTemp(playerid)[pt_TIMERS][9] = SetTimerEx("TruckUnLoadUp", 1000, false, "ii", playerid, vehicleid);
		return 1;
	}
	
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);
	
	TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING] = false;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED] = true;
	
	SendInfoMessagef(playerid, "Camionero~n~~n~La mercancia ha sido entregada, ve a ~r~camionero~w~ para finalizar y recibir tu paga.~n~~n~Ganancias: ~g~%s$~w~.", number_format_thousand(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY]));
	SetPlayerTruckCheckpoint(playerid, vehicleid);
	return 1;
}

SetPlayerTruckCheckpoint(playerid, vehicleid)
{
	if(IsValidDynamicCP(pTemp(playerid)[pt_TRUCK_CHECKPOINT]))
	{
		DestroyDynamicCP(pTemp(playerid)[pt_TRUCK_CHECKPOINT]);
		pTemp(playerid)[pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED])
	{
		pTemp(playerid)[pt_TRUCK_CHECKPOINT] = CreateDynamicCP(Truck_Return_Positions[0], Truck_Return_Positions[1], Truck_Return_Positions[2], 5.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_TRUCK;
		Streamer_SetArrayData(STREAMER_TYPE_CP, pTemp(playerid)[pt_TRUCK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		pTemp(playerid)[pt_TRUCK_CHECKPOINT] = CreateDynamicCP(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_X], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Y], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Z], 5.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_UNLOAD_TRUCK;
		Streamer_SetArrayData(STREAMER_TYPE_CP, pTemp(playerid)[pt_TRUCK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	Streamer_Update(playerid, STREAMER_TYPE_CP);
	return 1;
}

UpdatePlayerLoadingTruckSize(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 253.0 + ( pTemp(playerid)[pt_TRUCK_LOADING_VALUE] * 1.34), 0.000000);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
	return 1;
}

CMD:basurero(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET]) return SendMessage(playerid, "~r~No eres basurero.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_NONE && pTemp(playerid)[pt_WORKING_IN] != WORK_TRASH)
	{
		SendClientMessagef(playerid, -1, "Tienes que dejar de estar de servicio como %s primero.", work_info[ pTemp(playerid)[pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerInterior(playerid) != 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -1906.577514, -1756.457519, 22.079319)) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	if(!pTemp(playerid)[pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_TRASH, INVALID_VEHICLE_ID);
	else CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
	return 1;
}

CMD:reparar(playerid, params[]) {
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	if(PI[playerid][pi_MECHANIC_KITS] <= 0) return SendClientMessagef(playerid, -1, "No tienes un kit de reparación, compra uno en el taller.");

	new vehicleid = GetNearVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessagef(playerid, -1, "No estás cerca de ningún vehículo.");
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] != VEHICLE_STATE_DAMAGED) return SendClientMessagef(playerid, -1, "El vehículo no está dañado.");

	RepairVehicleEx(vehicleid, playerid, MIN_VEHICLE_HEALTH + 50.0);
	PI[playerid][pi_MECHANIC_KITS] --;
	SendClientMessagef(playerid, -1, "Has usado 1 kit de reparación para arreglar este vehículo.");
	return 1;
}

CMD:vmenu(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_SET]) return SendMessage(playerid, "~r~No eres mecánico.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_MECHANIC) return SendClientMessagef(playerid, -1, "No estás de servicio como mecánico.");
	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	
	new vehicleid = GetNearVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessagef(playerid, -1, "No estás cerca de ningún vehículo.");
	if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET]) return SendMessage(playerid, "Abre el /capot del vehiculo.");
	
	/*new bool:in_mechanic_area;
	for(new i; i != sizeof Mechanic_Areas; i++)
		if(IsPlayerInDynamicArea(playerid, Mechanic_Areas[i]))
		{
			in_mechanic_area = true;
			break;
		}


	if(!in_mechanic_area)
	{
		SendClientMessagef(playerid, -1, "Para reparar este vehículo tienes que estar en el taller.");
		return 1;
	}*/

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE]) return SendClientMessagef(playerid, -1, "Para trabajar sobre el vehículo el motor debe estar apagado.");
	if(!VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NORMAL_SPEEDO] || GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) return SendClientMessagef(playerid, -1, "No se puede modificar este vehículo aquí.");
	
	pTemp(playerid)[pt_SELECTED_MECHANIC_VEHICLE_ID] = vehicleid;
	ShowDialog(playerid, DIALOG_MECHANIC_MENU);
	return 1;
}

CMD:policia(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_NONE && pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE)
	{
		SendClientMessagef(playerid, -1, "Tienes que dejar de estar de servicio como %s primero.", work_info[ pTemp(playerid)[pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 253.280288, 76.219017, 1003.640625) || IsPlayerInRangeOfPoint(playerid, 1.0, 266.547180, 119.652816, 1004.617187) || IsPlayerInRangeOfPoint(playerid, 1.0, 217.816406, 187.667922, 1003.031250))
	{
		if(!pTemp(playerid)[pt_WORKING_IN]) ShowDialog(playerid, DIALOG_SELECT_POLICE_SKIN);
		else
		{
			CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id_player = %d;", PI[playerid][pi_ID]);
			mysql_tquery(handle_db, QUERY_BUFFER);
			ResetPlayerWeaponsEx(playerid);
		}
		return 1;
	}
	
	SendMessage(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:talar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_LUMBERJACK][pwork_SET]) return SendMessage(playerid, "~r~No eres leñador.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_NONE && pTemp(playerid)[pt_WORKING_IN] != WORK_LUMBERJACK)
	{
		SendClientMessagef(playerid, -1, "Tienes que dejar de estar de servicio como %s primero.", work_info[ pTemp(playerid)[pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerInterior(playerid) != 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -527.670349, -97.338562, 63.176174)) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	if(!pTemp(playerid)[pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_LUMBERJACK, INVALID_VEHICLE_ID);
	else CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
	return 1;
}

CMD:mecanicos(playerid, params[])
{
	if(!GetPlayerWork(playerid, WORK_MECHANIC)) return SendMessage(playerid, "No eres mecanico.");
	
	pTemp(playerid)[pt_DIALOG_DB_LIMIT] = 10;
	pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_MECHANIC_LIST);
	return 1;
}


CMD:mecanico(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_SET]) return SendMessage(playerid, "~r~No eres mecánico.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_NONE && pTemp(playerid)[pt_WORKING_IN] != WORK_MECHANIC)
	{
		SendClientMessagef(playerid, -1, "Tienes que dejar de estar de servicio como %s primero.", work_info[ pTemp(playerid)[pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerInterior(playerid) != 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");

	for(new i; i != sizeof MechanicStartWorkingCoords; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, MechanicStartWorkingCoords[i][0], MechanicStartWorkingCoords[i][1], MechanicStartWorkingCoords[i][2]))
		{
			if(!pTemp(playerid)[pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_MECHANIC, INVALID_VEHICLE_ID);
			else CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);

			return 1;
		}
	}

	SendMessage(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:medico(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MEDIC][pwork_SET]) return SendMessage(playerid, "~r~No eres médico.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_NONE && pTemp(playerid)[pt_WORKING_IN] != WORK_MEDIC)
	{
		SendClientMessagef(playerid, -1, "Tienes que dejar de estar de servicio como %s primero.", work_info[ pTemp(playerid)[pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(pTemp(playerid)[pt_INTERIOR_INDEX] == -1 || ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_HOSPITAL) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -2029.751342, -114.503044, 1035.171875)) return SendMessage(playerid, "No estás en el lugar adecuado.");

	if(!pTemp(playerid)[pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_MEDIC, INVALID_VEHICLE_ID);
	else CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
	return 1;
}

CMD:pizzero(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_PIZZA][pwork_SET]) return SendMessage(playerid, "~r~No eres pizzero, el trabajo se consigue dentro de la pizzería.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_NONE && pTemp(playerid)[pt_WORKING_IN] != WORK_PIZZA)
	{
		SendClientMessagef(playerid, -1, "Tienes que dejar de estar de servicio como %s primero.", work_info[ pTemp(playerid)[pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 2097.355712, -1818.040771, 13.382812)) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	if(!pTemp(playerid)[pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_PIZZA, INVALID_VEHICLE_ID);
	else CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
	return 1;
}

CMD:plantar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_FARMER][pwork_SET]) return SendMessage(playerid, "~r~No eres agricultor.");
	if(pTemp(playerid)[pt_WORKING_IN] && pTemp(playerid)[pt_WORKING_IN] != WORK_FARMER)
	{
		SendClientMessagef(playerid, -1, "Tienes que dejar de estar de servicio como %s primero.", work_info[ pTemp(playerid)[pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	new Float:z, Float:x, Float:y;
	GetPlayerPos(playerid, x, y, z);

	if(GetPlayerVirtualWorld(playerid) != 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerInterior(playerid) != 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	if(!IsPlayerInDynamicArea(playerid, Farmer_Area)) return SendClientMessagef(playerid, -1, "No estás en la zona para plantar, está marcada en el mapa con una bandera.");
	if(z < 128.0) return SendClientMessagef(playerid, -1, "No estás en la zona para plantar, está marcada en el mapa con una bandera.");
	if(pTemp(playerid)[pt_PLANTING]) return SendClientMessagef(playerid, -1, "Ahora mismo ya estás plantando algo.");
	
	if(gettime() < pTemp(playerid)[pt_LAST_PLANT_TIME] + 30)//tiempo en agricultor
	{
		new time = (30-(gettime()-pTemp(playerid)[pt_LAST_PLANT_TIME]));
		SendClientMessagef(playerid, -1, "Tienes que esperar %s segundos para volver a plantar.", TimeConvert(time));
		return 1;
	}
	
	if(GetPlayerPlantedPlants(playerid) > 10) return SendClientMessagef(playerid, -1, "Por favor, recoge tus otras plantas para poder plantar más.");
	
	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) continue;
		
		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2]))
		{
			SendClientMessagef(playerid, -1, "Aquí ya hay una planta, aléjate un poco para plantar.");
			return 1;
		}
	}
	
	ShowDialog(playerid, DIALOG_PLANT_PLANTS);
	return 1;
}

CMD:piezas(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_SET]) return SendMessage(playerid, "~r~No eres mecánico.");
	if(GetPlayerInterior(playerid) != 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	
	for(new i; i != sizeof MechanicBuyPiecesCoords; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, MechanicBuyPiecesCoords[i][0], MechanicBuyPiecesCoords[i][1], MechanicBuyPiecesCoords[i][2]))
		{
			if(sscanf(params, "d", params[0])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/piezas [cantidad]");
			if(params[0] <= 0 || params[0] > 50) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/piezas [cantidad > 50]");
			if(params[0] > GetMechanicPieces()) return SendMessage(playerid, "No tenemos esa cantidad de piezas.");

			new price = params[0] * 50;
			if(price > PI[playerid][pi_CASH])
			{
				SendClientMessagef(playerid, -1, "Necesitas %s$ para poder comprar %d piezas.", number_format_thousand(price), params[0]);
				return 1;
			}
			if(price < 0) return 1;

			if(GivePlayerCash(playerid, -price, true, true)) 
			{
				PI[playerid][pi_MECHANIC_PIECES] += params[0];
				AddMechanicGaragePieces(-params[0], true);
				SendClientMessagef(playerid, -1, "Has comprado %s piezas por %s$, ahora tienes %s piezas.", number_format_thousand(params[0]), number_format_thousand(price), number_format_thousand(PI[playerid][pi_MECHANIC_PIECES]));
			}
			return 1;
		}
	}

	SendMessage(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:botiquin(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	if(!PLAYER_WORKS[playerid][WORK_MEDIC][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] != WORK_MEDIC) return SendClientMessagef(playerid, -1, "Solo los médicos pueden comprar botiquines.");
	
	for(new i; i != sizeof MedicalBuyKitsCoords; i++)
		if(IsPlayerInRangeOfPoint(playerid, 1.0, MedicalBuyKitsCoords[i][0], MedicalBuyKitsCoords[i][1], MedicalBuyKitsCoords[i][2]))
		{
			if(GivePlayerCash(playerid, -5000, true, true)) {
				PI[playerid][pi_MEDICAL_KITS] += 1;
				SendClientMessagef(playerid, -1, "Has comprado un botiquín, para usararlo usa /curar cerca de la persona que quieras curar.");
			}
			else SendClientMessagef(playerid, -1, "No tienes suficiente dinero.");
			return 1;
		}

	SendMessage(playerid, "No estás en el lugar adecuado.");
	return 1;
}

VehiclePaintjob(modelid)
{
	switch(modelid)
	{
		case 483: return 1;
		case 534..536: return 3;
		case 558..562: return 3;
		case 565, 567: return 3;
		case 575: return 2;
		case 576: return 3;
	}
	return false;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	new info[1];
	Streamer_GetArrayData(STREAMER_TYPE_RACE_CP, checkpointid, E_STREAMER_EXTRA_ID, info);
	
	switch(info[0])
	{
		case CHECKPOINT_TYPE_FUMIGATOR:
		{
			if(pTemp(playerid)[pt_FUMIGATOR_PROCCESS] == sizeof(FUMIGATOR_CHECKPOINTS) - 1)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid == INVALID_VEHICLE_ID) return 1;
				
				new work_extra_payment;
				if(work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY] > 0 && work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_FUMIGATOR][pwork_LEVEL], work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_LIMIT];
				
					if(PI[playerid][pi_VIP]) work_extra_payment += VIP_WORK_EXTRA_PAY;
				}
				
				new money = minrand(1200, 1500) + work_extra_payment;
				GivePlayerCash(playerid, money, true, false);
				
				PLAYER_WORKS[playerid][WORK_FUMIGATOR][pwork_LEVEL] ++;
				SendClientMessagef(playerid, -1, "Gracias por fumigar nuestros cielos, has ganado %s$.", number_format_thousand(money));
				
				CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
				return 1;
			}
			
			new str[50];
			format(str, sizeof str, "~h~checkpoint_%d/%d", pTemp(playerid)[pt_FUMIGATOR_PROCCESS] + 1, sizeof(FUMIGATOR_CHECKPOINTS));
			GameTextForPlayer(playerid, str, 2000, 3);
			
			pTemp(playerid)[pt_FUMIGATOR_PROCCESS] ++;
			Set_FUMIGATOR_Checkpoint(playerid);
		}
	}
	return 1;
}

SetPlayerTrashCheckpoint(playerid, vehicleid)
{
	DestroyPlayerTrashCheckpoint(playerid);
	
	new cp = TRASH_VEHICLES[ vehicleid ][trash_vehicle_CP];
	new route = TRASH_VEHICLES[ vehicleid ][trash_vehicle_ROUTE];
	
	if(cp >= TRASH_OBJECTS[route][trash_route_OBJECTS])
	{
		pTemp(playerid)[pt_TRASH_CHECKPOINT] = CreateDynamicCP(-1872.575073, -1720.129394, 22.30542, 5.0, 0, 0, playerid, 9999999999.0);
		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_TRASH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, pTemp(playerid)[pt_TRASH_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		pTemp(playerid)[pt_TRASH_CHECKPOINT] = CreateDynamicCP(TRASH_OBJECTS[ route ][trash_object_X][ cp ], TRASH_OBJECTS[ route ][trash_object_Y][ cp ], TRASH_OBJECTS[ route ][trash_object_Z][ cp ], 1.5, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_TRASH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, pTemp(playerid)[pt_TRASH_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

DestroyPlayerTrashCheckpoint(playerid)
{
	if(IsValidDynamicCP(pTemp(playerid)[pt_TRASH_CHECKPOINT]))
	{
		DestroyDynamicCP(pTemp(playerid)[pt_TRASH_CHECKPOINT]);
		pTemp(playerid)[pt_TRASH_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	return 1;
}

CancelTrashWork(driver, mate, vehicleid)
{
	DestroyPlayerTrashCheckpoint(driver);
	DestroyPlayerTrashCheckpoint(mate);
	
	DestroyPlayerTrashRouteObjects(driver);
	DestroyPlayerTrashRouteObjects(mate);
	
	PlayerTemp[driver][pt_TRASH_DRIVER] = false;
	PlayerTemp[driver][pt_TRASH_PASSENGER] = false;
	PlayerTemp[driver][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
	
	PlayerTemp[mate][pt_TRASH_DRIVER] = false;
	PlayerTemp[mate][pt_TRASH_PASSENGER] = false;
	PlayerTemp[mate][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
	
	KillTimer(PlayerTemp[mate][pt_TIMERS][10]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][0]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][1]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][2]);
	ClearAnimations(mate);
	TogglePlayerControllableEx(mate, true);
	
	ResetTrashInfo(vehicleid);
	SetVehicleToRespawnEx(vehicleid);
	return 1;
}

UpdatePlayerTrashRecycleSize(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.0, pTemp(playerid)[pt_RECYCLE_BIN_VALUE] * 1.3);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
	return 1;
}

forward RecycleUp(playerid);
public RecycleUp(playerid)
{
	if(pTemp(playerid)[pt_RECYCLE_BIN_VALUE] < 100.0)
	{
		pTemp(playerid)[pt_RECYCLE_BIN_VALUE] += 15.0;
		if(pTemp(playerid)[pt_RECYCLE_BIN_VALUE] > 100.0) pTemp(playerid)[pt_RECYCLE_BIN_VALUE] = 100.0;
		
		ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);
		UpdatePlayerTrashRecycleSize(playerid);
		KillTimer(pTemp(playerid)[pt_TIMERS][10]);
		pTemp(playerid)[pt_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
		return 1;
	}
	
	TogglePlayerControllableEx(playerid, true);
	ClearAnimations(playerid);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
	
	new driver = TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
	new cp = TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP];
	new route = TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
	
	DestroyDynamicObject(TRASH_PLAYER_OBJECTS[playerid][cp]);
	TRASH_PLAYER_OBJECTS[playerid][cp] = INVALID_STREAMER_ID;
	
	DestroyDynamicObject(TRASH_PLAYER_OBJECTS[driver][cp]);
	TRASH_PLAYER_OBJECTS[driver][cp] = INVALID_STREAMER_ID;
	
	CreatePlayerFlashObject(
								playerid, 
								TRASH_OBJECTS[ route ][trash_object_X][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Z][ cp ] - 1.5
							);
	
	CreatePlayerFlashObject(
								driver, 
								TRASH_OBJECTS[ route ][trash_object_X][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Z][ cp ] - 1.5
							);
							
	PlayerPlaySoundEx(playerid, 1190, 0.0, 0.0, 0.0);
	
	TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] ++;
	if(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] >= TRASH_OBJECTS[ TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] ][trash_route_OBJECTS])
	{
		SendClientMessagef(playerid, -1, "Sube al camión para volver al vertedero y recibir la paga.");
		SendClientMessagef(driver, -1, "Espera a que se suba tu compañero y vuelve al vertedero para recibir la paga.");
	}
	else SendClientMessagef(playerid, -1, "Sube al camión y sigue con la ruta.");

	SetPlayerTrashCheckpoint(driver, pTemp(playerid)[pt_TRASH_VEHICLE_ID]);
	SetPlayerTrashCheckpoint(playerid, pTemp(playerid)[pt_TRASH_VEHICLE_ID]);
	
	Streamer_Update(driver);
	Streamer_Update(playerid);
	return 1;
}

CancelLumberjackWork(playerid)
{
	if(pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] != -1)
	{
		DestroyDynamicObject(LUMBER_TREES[ pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_OBJECT_ID]);
		LUMBER_TREES[ pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[ pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_MODELID], LUMBER_TREES[ pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_X], LUMBER_TREES[ pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_Y], LUMBER_TREES[ pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_Z], LUMBER_TREES[ pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RX], LUMBER_TREES[ pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RY], LUMBER_TREES[ pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RZ], 0, 0);
		LUMBER_TREES[ pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_STATE] = LUMBER_TREE_STATE_NORMAL;
		
		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Pulsa {f9d834}'N' {FFFFFF}para talar el árbol.", pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE]);
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_LABEL], -1, label_str);
	}
	
	if(IsValidDynamicCP(pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT]);
		pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	
	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	KillTimer(pTemp(playerid)[pt_TIMERS][11]);
	//ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllableEx(playerid, true);
	pTemp(playerid)[pt_PLAYER_CARRYING_TREE] = false;
	pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] = -1;
	DestroyPlayerKeyPress(playerid);
	SetPlayerToys(playerid);
	return 1;
}

forward ContinueTreeAnimation(playerid, tree, Float:rotation);
public ContinueTreeAnimation(playerid, tree, Float:rotation)
{
	new Float:pos[3];
	pos[0] = LUMBER_TREES[ tree ][lumber_tree_X];
	pos[1] = LUMBER_TREES[ tree ][lumber_tree_Y];
	pos[2] = LUMBER_TREES[ tree ][lumber_tree_Z];
	
	pos[0] += (1.5 * floatsin(-rotation, degrees));
	pos[1] += (1.5 * floatcos(-rotation, degrees));
	
	CreateFlashObject(pos[0], pos[1], pos[2] - 0.4);
	DestroyDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID]);
	PlayerPlaySoundEx(playerid, 1190, 0.0, 0.0, 0.0);
	
	LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID] = CreateDynamicObject(841, pos[0], pos[1], pos[2] + 0.2, 0.0, 0.0, rotation, 0, 0);
	
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	pTemp(playerid)[pt_PLAYER_CARRYING_TREE] = true;
	pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] = -1;
	
	RemovePlayerAttachedObject(playerid, 8);
	SetPlayerAttachedObject(playerid, 8, 19793, 6, 0.077999, 0.043999, -0.170999, -13.799953, 79.70, 0.0);
	
	if(IsValidDynamicCP(pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT]);
		pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT] = CreateDynamicCP(-504.353912, -88.591995, 62.086818, 5.0, 0, 0, playerid, 9999999999.0);
	
	new info[1];
	info[0] = CHECKPOINT_TYPE_LUMBERJACK;
	Streamer_SetArrayData(STREAMER_TYPE_CP, pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	
	SendClientMessagef(playerid, -1, "Ve a llevar la leña al punto marcado para recibir la paga.");
	
	
	LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] = 90;
	new label_str[256];
	format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{"#SILVER_COLOR"}(%s)", tree, TimeConvert(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER]));
	UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
	
	LUMBER_TREES[ tree ][lumber_tree_STATE] = LUMBER_TREE_STATE_CUTTED;
	KillTimer(LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER]);
	LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER] = SetTimerEx("GrowTreeUp", 1000, false, "i", tree);
	
	Streamer_Update(playerid);
	return 1;
}

forward GrowTreeUp(tree);
public GrowTreeUp(tree)
{
	if(LUMBER_TREES[ tree ][lumber_tree_STATE] != LUMBER_TREE_STATE_CUTTED) return 0;
	
	if(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] > 0)
	{
		LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] --;
		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{"#SILVER_COLOR"}(%s)", tree, TimeConvert(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER]));
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
		
		KillTimer(LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER]);
		LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER] = SetTimerEx("GrowTreeUp", 1000, false, "i", tree);
		return 1;
	}
	
	DestroyDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID]);
	LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[ tree ][lumber_tree_MODELID], LUMBER_TREES[ tree ][lumber_tree_X], LUMBER_TREES[ tree ][lumber_tree_Y], LUMBER_TREES[ tree ][lumber_tree_Z], LUMBER_TREES[ tree ][lumber_tree_RX], LUMBER_TREES[ tree ][lumber_tree_RY], LUMBER_TREES[ tree ][lumber_tree_RZ], 0, 0);
	LUMBER_TREES[ tree ][lumber_tree_STATE] = LUMBER_TREE_STATE_NORMAL;

	new label_str[256];
	format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Pulsa {f9d834}'N' {FFFFFF}para talar el árbol.", tree);
	UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
	return 1;
}

CreateFlashObject(Float:x, Float:y, Float:z)
{
	new oid = CreateObject(18680, x, y, z, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyFlashObject", 1000, false, "i", oid);
	return 1;
}

forward DestroyFlashObject(objectid);
public DestroyFlashObject(objectid)
{
	return DestroyObject(objectid);
}

ShowPlayerInventory(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(PI[pid][pi_ID] == 0) return 0;
	
	new caption[48];
	format(caption, sizeof caption, "Inventario de %s", PlayerTemp[pid][pt_NAME]);
	
	new dialog[1800], line_str[128];
	
	format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Dinero {"#SILVER_COLOR"}(%s$)\n", number_format_thousand(PI[pid][pi_CASH]));
	strcat(dialog, line_str);

	if(PI[pid][pi_PHONE_NUMBER])
	{
		format(line_str, sizeof line_str, "Teléfono {"#SILVER_COLOR"}(%d)\n", PI[pid][pi_PHONE_NUMBER]);
		strcat(dialog, line_str);
	}
	
	new toys = CountPlayerToys(pid);
	if(toys > 0)
	{
		format(line_str, sizeof line_str, "Accesorios {"#SILVER_COLOR"}(%d)\n", toys);
		strcat(dialog, line_str);
	}
	
	new pocket_objects = CountPlayerPocketObjects(pid);
	if(pocket_objects > 0)
	{
		format(line_str, sizeof line_str, "Alimentos {"#SILVER_COLOR"}(%d)\n", pocket_objects);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][pi_GPS]) strcat(dialog, "GPS\n");
	if(PI[pid][pi_MP3]) strcat(dialog, "Reproductor MP3\n");
	if(PI[pid][pi_PHONE_RESOLVER]) strcat(dialog, "Guía telefónica\n");
	if(PI[pid][pi_SPEAKERS]) strcat(dialog, "Altavoces\n");
	
	new player_weapons = CountPlayerWeapons(pid);
	if(player_weapons > 0)
	{
		if(PLAYER_WORKS[pid][WORK_POLICE][pwork_SET]) format(line_str, sizeof line_str, "{"#PRIMARY_COLOR"}Armas {"#SILVER_COLOR"}(%d)\n", player_weapons);
		else format(line_str, sizeof line_str, "{"#RED_COLOR"}Armas {"#SILVER_COLOR"}(%d)\n", player_weapons);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][pi_MECHANIC_PIECES] > 0)
	{
		format(line_str, sizeof line_str, "Piezas de mecánico {"#SILVER_COLOR"}(%s)\n", number_format_thousand(PI[pid][pi_MECHANIC_PIECES]));
		strcat(dialog, line_str);
	}
	
	if(PI[pid][pi_FUEL_DRUM] > 0)
	{
		format(line_str, sizeof line_str, "Bidón de gasolina {"#SILVER_COLOR"}(%d Litros)\n", PI[pid][pi_FUEL_DRUM]);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][pi_SEED_MEDICINE] > 0)
	{
		format(line_str, sizeof line_str, "{"#BLUE_COLOR"}Semillas de medicina {"#SILVER_COLOR"}(%d)\n", PI[pid][pi_SEED_MEDICINE]);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][pi_SEED_CANNABIS] > 0)
	{
		format(line_str, sizeof line_str, "{"#RED_COLOR"}Semillas de marihuana {"#SILVER_COLOR"}(%d)\n", PI[pid][pi_SEED_CANNABIS]);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][pi_SEED_CRACK] > 0)
	{
		format(line_str, sizeof line_str, "{"#RED_COLOR"}Semillas de coca {"#SILVER_COLOR"}(%d)\n", PI[pid][pi_SEED_CRACK]);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][pi_MEDICINE] > 0)
	{
		format(line_str, sizeof line_str, "{"#BLUE_COLOR"}Medicamentos {"#SILVER_COLOR"}(%dg)\n", PI[pid][pi_MEDICINE]);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][pi_CANNABIS] > 0)
	{
		format(line_str, sizeof line_str, "{"#RED_COLOR"}Marihuana {"#SILVER_COLOR"}(%dg)\n", PI[pid][pi_CANNABIS]);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][pi_CRACK] > 0)
	{
		format(line_str, sizeof line_str, "{"#RED_COLOR"}Crack {"#SILVER_COLOR"}(%dg)\n", PI[pid][pi_CRACK]);
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_MECHANIC_KITS] > 0)
	{
		format(line_str, sizeof line_str, "Kits de reparación (%d)\n", PI[pid][pi_MECHANIC_KITS]);
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_MEDICAL_KITS] > 0)
	{
		format(line_str, sizeof line_str, "Botiquines (%d)\n", PI[pid][pi_MEDICAL_KITS]);
		strcat(dialog, line_str);
	}
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");	
	return 1;
}

CountPlayerToys(playerid)
{
	new toys;
	
	for(new i = 0; i != MAX_SU_TOYS; i ++)
	{
		if(PLAYER_TOYS[playerid][i][player_toy_VALID])
		{
			toys ++;
		}
	}
	return toys;
}

CountPlayerPocketObjects(playerid)
{
	new objects;
	
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
	{
		if(PLAYER_POCKET[playerid][i][player_pocket_VALID])
		{
			objects ++;
		}
	}
	return objects;
}

CountPlayerWeapons(playerid)
{
	new weapons;
	
	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(PLAYER_WEAPONS[playerid][i][player_weapon_VALID])
		{
			weapons ++;
		}
	}
	return weapons;
}

ShowPlayerSkills(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(PI[pid][pi_ID] == 0) return 0;
	
	new caption[48], line_str[80], dialog[sizeof line_str * (sizeof(work_info) + 5)];
	format(caption, sizeof caption, "Experiencia de %s", PlayerTemp[pid][pt_NAME]);
	
	strcat(dialog, "{"#ORANGE_COLOR"}Informacion de tu Cuenta\n");
	format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Nivel: {"#PRIMARY_COLOR"}%d\n", PI[pid][pi_LEVEL]);
	strcat(dialog, line_str);
	
	new neccessary_rep = PI[pid][pi_LEVEL] * REP_MULTIPLIER;
	format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Reputación: {"#PRIMARY_COLOR"}%d/%d\n", PI[pid][pi_REP], neccessary_rep);
	strcat(dialog, line_str);
	
	new Float:hours;
	ConvertTime_SecondsToHoursFloat(PI[pid][pi_TIME_PLAYING], hours);
	format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Horas de juego: {"#PRIMARY_COLOR"}%.1f horas\n", hours);
	strcat(dialog, line_str);
	
	strcat(dialog, "\n{"#GREEN_COLOR"}Experiencia de Trabajos\n");
	
	for(new i = 1; i != sizeof work_info; i ++)
	{
		if(i == WORK_POLICE)
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
			{
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s: {"#BLUE_COLOR"}%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], POLICE_RANKS[PLAYER_WORKS[pid][i][pwork_LEVEL]]);
				strcat(dialog, line_str);
			}
		}
		else if(i == WORK_MECHANIC)
		{
			if(GetPlayerWork(playerid, WORK_MECHANIC))
			{
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s: {"#BLUE_COLOR"}%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], MECHANIC_RANKS[PLAYER_WORKS[pid][i][pwork_LEVEL]]);
				strcat(dialog, line_str);
			}
		}
		else
		{
			format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s: {"#PRIMARY_COLOR"}%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], number_format_thousand(PLAYER_WORKS[pid][i][pwork_LEVEL]));
			strcat(dialog, line_str);
		}
	}
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");	
	return 1;
}

stock ConvertTime_SecondsToHoursFloat(sec, &Float:hours)
{
	hours = floatdiv(float(sec), 3600);
   	return 1;
}

CreatePlayerTrashRouteObjects(playerid, route)
{
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++)
	{
		TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;
		
		if(TRASH_OBJECTS[route][trash_object_MODELID][i] != 0)
		{
			TRASH_PLAYER_OBJECTS[playerid][i] = CreateDynamicObject(TRASH_OBJECTS[route][trash_object_MODELID][i], TRASH_OBJECTS[route][trash_object_X][i], TRASH_OBJECTS[route][trash_object_Y][i], TRASH_OBJECTS[route][trash_object_Z][i], TRASH_OBJECTS[route][trash_object_RX][i], TRASH_OBJECTS[route][trash_object_RY][i], TRASH_OBJECTS[route][trash_object_RZ][i], 0, 0, playerid);
		}
	}
	return 1;
}

DestroyPlayerTrashRouteObjects(playerid)
{
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++)
	{
		if(TRASH_PLAYER_OBJECTS[playerid][i] != INVALID_STREAMER_ID) DestroyDynamicObject(TRASH_PLAYER_OBJECTS[playerid][i]);
		TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;
	}
	return 1;
}

CreatePlayerFlashObject(playerid, Float:x, Float:y, Float:z)
{
	new oid = CreatePlayerObject(playerid, 18680, x, y, z, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyPlayerFlashObject", 1000, false, "ii", playerid, oid);
	return 1;
}

forward DestroyPlayerFlashObject(playerid, objectid);
public DestroyPlayerFlashObject(playerid, objectid)
{
	return DestroyPlayerObject(playerid, objectid);
}

GetVehicleFirstPassenger(vehicleid)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
			{
				if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(GetPlayerVehicleID(i) == vehicleid)
					{
						return i;
					}
				}
			}
		}
	}
	return INVALID_PLAYER_ID;
}

CancelPlayerPlanting(playerid)
{
	KillTimer(pTemp(playerid)[pt_TIMERS][12]);
	pTemp(playerid)[pt_PLANTING] = false;
	DestroyPlayerKeyPress(playerid);
	TogglePlayerControllableEx(playerid, true);
	ClearAnimations(playerid);
	return 1;
}

GetAvaiblePlantIndex()
{
	for(new i = 0; i != sizeof PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) return i;
	}
	return -1;
}

forward GrowPlantUp(plant);
public GrowPlantUp(plant)
{
	if(!PLANTS[plant][plant_VALID] || !PLANTS[plant][plant_GROWING]) return 0;
	
	if(PLANTS[plant][plant_GROWING_PROGRESS] < 100.0)
	{
		PLANTS[plant][plant_GROWING_PROGRESS] += floatdiv(25, plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_SEEDS]);
		if(PLANTS[plant][plant_GROWING_PROGRESS] > 100.0) PLANTS[plant][plant_GROWING_PROGRESS] = 100.0;
		
		if(PLANTS[plant][plant_INVISIBLE] && PLANTS[plant][plant_GROWING_PROGRESS] > 50.0)
		{
			PLANTS[plant][plant_INVISIBLE] = false;
			SetDynamicObjectMaterial(PLANTS[plant][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0xFFFFFFFF);
		}
		
		new label_str[256];
		if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n{CCCCCC}Agricultor: %s\n\n{"#PRIMARY_COLOR"}(%.1f%%)", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], PLANTS[plant][plant_GROWING_PROGRESS]);
		else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n{CCCCCC}Agricultor: %s\n\n{"#PRIMARY_COLOR"}(%.1f%%)", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], PLANTS[plant][plant_GROWING_PROGRESS]);
		UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], -1, label_str);
		
		KillTimer(PLANTS[plant][plant_TIMER]);
		PLANTS[plant][plant_TIMER] = SetTimerEx("GrowPlantUp", 5000, false, "d", plant);
		return 1;
	}
	
	SetDynamicObjectMaterial(PLANTS[plant][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0xFFff0000);
	
	PLANTS[plant][plant_GROWING] = false;
	PLANTS[plant][plant_EXPIRE_TIME] = 300;
	PLANTS[plant][plant_IMMUNITY] = 60;
		
	new label_str[256];
	if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: %ss\n\nPresiona {"#BLUE_COLOR"}'H'{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]), TimeConvert(PLANTS[plant][plant_IMMUNITY]));
	else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: %ss\n\nPresiona {"#BLUE_COLOR"}'H'{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]), TimeConvert(PLANTS[plant][plant_IMMUNITY]));
	UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], -1, label_str);
	
	KillTimer(PLANTS[plant][plant_TIMER]);
	PLANTS[plant][plant_TIMER] = SetTimerEx("ExpirePlantTime", 1000, false, "d", plant);
	return 1;
}

forward ExpirePlantTime(plant);
public ExpirePlantTime(plant)
{
	if(!PLANTS[plant][plant_VALID]) return 0;
	
	if(PLANTS[plant][plant_EXPIRE_TIME] > 0)
	{
		new 
			label_str[256];

		PLANTS[plant][plant_EXPIRE_TIME] --;
		PLANTS[plant][plant_IMMUNITY] --;

		if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) 
		{
			if(PLANTS[plant][plant_IMMUNITY] > 0) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: %ss\n\nPresiona {"#BLUE_COLOR"}'H'{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]), TimeConvert(PLANTS[plant][plant_IMMUNITY]));
			else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: Nada\n\nPresiona {"#BLUE_COLOR"}'H'{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
		}
		else 
		{
			if(PLANTS[plant][plant_IMMUNITY] > 0) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: %ss\n\nPresiona {"#BLUE_COLOR"}'H'{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]), TimeConvert(PLANTS[plant][plant_IMMUNITY]));
			else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: Nada\n\nPresiona {"#BLUE_COLOR"}'H'{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
		}

		UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], -1, label_str);
		
		KillTimer(PLANTS[plant][plant_TIMER]);
		PLANTS[plant][plant_TIMER] = SetTimerEx("ExpirePlantTime", 1000, false, "d", plant);
		return 1;
	}
	
	new Float:pos[3];
	GetDynamicObjectPos(PLANTS[plant][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
	CreateFlashObject(pos[0], pos[1], pos[2] - 1.3);
	
	DestroyDynamicObject(PLANTS[plant][plant_OBJECT_ID]);
	DestroyDynamic3DTextLabel(PLANTS[plant][plant_LABEL_ID]);
	
	new tmp_PLANTS[PLANTS_ENUM]; PLANTS[plant] = tmp_PLANTS;
	return 1;
}

CMD:recoger(playerid, params[])
{
	if(!IsPlayerInDynamicArea(playerid, Farmer_Area)) return 1;

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	
	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID] || PLANTS[i][plant_GROWING]) continue;
		
		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);

		if(IsPlayerInRangeOfPoint(playerid, 1.5, pos[0], pos[1], pos[2]))
		{
			if(PLANTS[i][plant_IMMUNITY] > 0 && PLANTS[i][plant_PLANTED_BY_ACCOUNT_ID] != PI[playerid][pi_ID]) return SendClientMessagef(playerid, -1, "Esta planta tiene tiempo de inmunidad.");
			
			KillTimer(PLANTS[i][plant_TIMER]);
			switch(seed_info[ PLANTS[i][plant_TYPE] ][seed_info_PLANT_TYPE])
			{
				case PLANT_TYPE_MEDICINE:
				{
					PI[playerid][pi_MEDICINE] += 2;
					SendClientMessagef(playerid, -1, "Has recogido la planta y has obtenido 2 gramos de medicamento.");
				}
				case PLANT_TYPE_CANNABIS:
				{
					PI[playerid][pi_CANNABIS] += 6;
					SendClientMessagef(playerid, -1, "Has recogido la planta y has obtenido 6 gramos de marihuana.");
				}
				case PLANT_TYPE_CRACK:
				{
					PI[playerid][pi_CRACK] += 4;
					SendClientMessagef(playerid, -1, "Has recogido la planta y has obtenido 4 gramos de crack.");
				}
			}
			
			DestroyDynamicObject(PLANTS[i][plant_OBJECT_ID]);
			DestroyDynamic3DTextLabel(PLANTS[i][plant_LABEL_ID]);
			ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
			
			new tmp_PLANTS[PLANTS_ENUM]; PLANTS[i] = tmp_PLANTS;
			return 1;
		}
	}
	return 1;
}
	
public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(IsPlayerInDynamicArea(playerid, Farmer_Area))
	{
		new info[3];
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
		
		if(info[0] == OBJECT_TYPE_PLANT)
		{
			KillTimer(PLANTS[info[1]][plant_TIMER]);
			
			new Float:pos[3];
			GetDynamicObjectPos(PLANTS[info[1]][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
			CreateFlashObject(pos[0], pos[1], pos[2] - 1.3);
			
			DestroyDynamicObject(PLANTS[info[1]][plant_OBJECT_ID]);
			DestroyDynamic3DTextLabel(PLANTS[info[1]][plant_LABEL_ID]);
			
			new tmp_PLANTS[PLANTS_ENUM]; PLANTS[info[1]] = tmp_PLANTS;
		}
	}
	return 1;
}

ShowPlayerGpsMap(playerid)
{
	pTemp(playerid)[pt_GPS_MAP] = true;
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][0]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][2]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][1]);
	
	UpdatePlayer_GPS_Map(playerid);
	
	KillTimer(pTemp(playerid)[pt_TIMERS][13]);
	pTemp(playerid)[pt_TIMERS][13] = SetTimerEx("UpdatePlayer_GPS_Map", 1000, true, "i", playerid);
	return 1;
}

HidePlayerGpsMap(playerid)
{
	KillTimer(pTemp(playerid)[pt_TIMERS][13]);
	pTemp(playerid)[pt_GPS_MAP] = false;
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][3]);
	
	for(new i = 0; i != MAX_PLAYER_MAP_GPS_POINTS; i ++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i]); 
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

forward UpdatePlayer_GPS_Map(playerid);
public UpdatePlayer_GPS_Map(playerid)
{
	/*
		0 - playerpos
		1 - cp gps
		2 - cp works
		3 > cp works
		
	*/
	if(!pTemp(playerid)[pt_GPS_MAP]) return KillTimer(pTemp(playerid)[pt_TIMERS][13]);
	
	new Float:pos[3];
	
	switch(PI[playerid][pi_STATE])
	{
		case ROLEPLAY_STATE_INTERIOR:
		{
			pos[0] = ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_EXT_X];
			pos[1] = ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_EXT_Y];
		}
		case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
		{
			pos[0] = PROPERTY_INFO[ pTemp(playerid)[pt_PROPERTY_INDEX] ][property_EXT_X];
			pos[1] = PROPERTY_INFO[ pTemp(playerid)[pt_PROPERTY_INDEX] ][property_EXT_Y];
		}
		case ROLEPLAY_STATE_OWN_GARAGE, ROLEPLAY_STATE_GUEST_GARAGE:
		{
			new Float:x, Float:y;
			GetGarageExtPosX(pTemp(playerid)[pt_PROPERTY_INDEX], x);
			GetGarageExtPosY(pTemp(playerid)[pt_PROPERTY_INDEX], y);

			pos[0] = x;
			pos[1] = y;
		}
		default: GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	}
	SetPlayerPoint_GPS_Map(0, playerid, "hud:radar_waypoint", -1, 5.0, 5.0, pos[0], pos[1]);
	
	if(IsValidDynamicCP(pTemp(playerid)[pt_GPS_CHECKPOINT]))
	{
		new Float:gps_cp_pos[2]; 
		Streamer_GetFloatData(STREAMER_TYPE_CP, pTemp(playerid)[pt_GPS_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
		Streamer_GetFloatData(STREAMER_TYPE_CP, pTemp(playerid)[pt_GPS_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
		SetPlayerPoint_GPS_Map(1, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
	}
	else 
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1]); 
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	
	switch(pTemp(playerid)[pt_WORKING_IN])
	{
		case WORK_NONE:
		{
			if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
				PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
			}
		}
		case WORK_TRUCK:
		{
			if(IsValidDynamicCP(pTemp(playerid)[pt_TRUCK_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_CP, pTemp(playerid)[pt_TRUCK_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, pTemp(playerid)[pt_TRUCK_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_FUMIGATOR:
		{
			if(IsValidDynamicRaceCP(pTemp(playerid)[pt_FUMIGATOR_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, pTemp(playerid)[pt_FUMIGATOR_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, pTemp(playerid)[pt_FUMIGATOR_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_TRASH:
		{
			if(IsValidDynamicCP(pTemp(playerid)[pt_TRASH_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_CP, pTemp(playerid)[pt_TRASH_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, pTemp(playerid)[pt_TRASH_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_LUMBERJACK:
		{
			if(IsValidDynamicCP(pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_CP, pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, pTemp(playerid)[pt_LUMBERJACK_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_PIZZA:
		{
			if(IsValidDynamicCP(pTemp(playerid)[pt_PIZZA_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_CP, pTemp(playerid)[pt_PIZZA_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, pTemp(playerid)[pt_PIZZA_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
	}
	
	new cp_counts = 3;
	for(new d = cp_counts; d != MAX_PLAYER_MAP_GPS_POINTS; d ++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d]); 
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	
	if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) return 1;
	switch(pTemp(playerid)[pt_WORKING_IN])
	{
		case WORK_TAXI:
		{
			LoopEx(i, MAX_PLAYERS, 0)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(PlayerTemp[i][pt_WANT_TAXI])
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;
							
							new Float:player_pos[3];
							switch(PI[i][pi_STATE])
							{
								case ROLEPLAY_STATE_INTERIOR:
								{
									player_pos[0] = ENTER_EXIT[ PlayerTemp[i][pt_INTERIOR_INDEX] ][ee_EXT_X];
									player_pos[1] = ENTER_EXIT[ PlayerTemp[i][pt_INTERIOR_INDEX] ][ee_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
								{
									player_pos[0] = PROPERTY_INFO[ PlayerTemp[i][pt_PROPERTY_INDEX] ][property_EXT_X];
									player_pos[1] = PROPERTY_INFO[ PlayerTemp[i][pt_PROPERTY_INDEX] ][property_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_GARAGE, ROLEPLAY_STATE_GUEST_GARAGE:
								{
									new Float:x, Float:y;
									GetGarageExtPosX(PlayerTemp[i][pt_PROPERTY_INDEX], x);
									GetGarageExtPosY(PlayerTemp[i][pt_PROPERTY_INDEX], y);
									
									player_pos[0] = x;
									player_pos[1] = y;
								}
								default: GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							}
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", 0xf2f224FF, 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
		case WORK_POLICE:
		{
			LoopEx(i, MAX_PLAYERS, 0)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(PI[i][pi_WANTED_LEVEL] > 0)
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;

							new Float:player_pos[3];
							switch(PI[i][pi_STATE])
							{
								case ROLEPLAY_STATE_INTERIOR:
								{
									if(PlayerTemp[i][pt_INTERIOR_INDEX] == -1)
									{
										printf("[debug] Player id %d tiene interior index -1 estando en ROLEPLAY_STATE_INTERIOR");
										PrintBacktrace();
										continue;
									}
									player_pos[0] = ENTER_EXIT[ PlayerTemp[i][pt_INTERIOR_INDEX] ][ee_EXT_X];
									player_pos[1] = ENTER_EXIT[ PlayerTemp[i][pt_INTERIOR_INDEX] ][ee_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
								{
									if(PlayerTemp[i][pt_PROPERTY_INDEX] == -1)
									{
										printf("[debug] Player id %d tiene property index -1 estando en pt_PROPERTY_INDEX");
										PrintBacktrace();
										continue;
									}
									player_pos[0] = PROPERTY_INFO[ PlayerTemp[i][pt_PROPERTY_INDEX] ][property_EXT_X];
									player_pos[1] = PROPERTY_INFO[ PlayerTemp[i][pt_PROPERTY_INDEX] ][property_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_GARAGE, ROLEPLAY_STATE_GUEST_GARAGE:
								{
									new Float:x, Float:y;
									GetGarageExtPosX(PlayerTemp[i][pt_PROPERTY_INDEX], x);
									GetGarageExtPosY(PlayerTemp[i][pt_PROPERTY_INDEX], y);
									
									player_pos[0] = x;
									player_pos[1] = y;
								}
								default: GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							}
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", PlayerWantedColor(i), 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
		case WORK_MEDIC:
		{
			LoopEx(i, MAX_PLAYERS, 0)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(PI[i][pi_STATE] == ROLEPLAY_STATE_CRACK)
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;

							new Float:player_pos[3];
							GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", 0x4aba00FF, 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
	}
	return 1;
}

SetPlayerPoint_GPS_Map(index, playerid, const icon[], color, Float:icon_size_X, Float:icon_size_Y, Float:x, Float:y)
{
	new Float:td_X, Float:td_Y,
		Float:converted_MAP_SIZE_X = floatdiv(map_td_SIZE_X, 2),
		Float:converted_MAP_SIZE_Y = floatdiv(map_td_SIZE_Y, 2),
		Float:converted_ICON_SIZE_X = floatdiv(icon_size_X, 2),
		Float:converted_ICON_SIZE_Y = floatdiv(icon_size_Y, 2);
	
	if(x > 3000.0) x = 3000.0;
	else if(x < -3000.0) x = -3000.0;
	
	if(y > 3000.0) y = 3000.0;
	else if(y < -3000.0) y = -3000.0;

	td_X = map_td_X + floatmul(floatdiv(converted_MAP_SIZE_X, 3000), x) + converted_MAP_SIZE_X - converted_ICON_SIZE_X;
	td_Y = map_td_Y + floatmul(floatdiv(-converted_MAP_SIZE_Y, 3000), y) + converted_MAP_SIZE_Y- converted_ICON_SIZE_Y;

	if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index]);
		PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] = PlayerText:INVALID_TEXT_DRAW;
	}

	PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] = CreatePlayerTextDraw(playerid, td_X, td_Y, icon);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0.160333, 1.280592);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], icon_size_X, icon_size_Y);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], color);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index]);
	return 1;
}

#define lc_limit_X_WEST 4000.0
#define lc_limit_X_EAST 7500.0
#define lc_limit_Y_NORTH 6900.0
#define lc_limit_Y_SOUTH 4150.0

stock Lc3dTo2d(Float:map_x, Float:map_y, Float:map_size_x, Float:map_size_y, Float:x, Float:y, Float:z, &Float:td_x, &Float:td_y)
{
	#pragma unused z

	/* Map limits */
	if(x > lc_limit_X_EAST) x = lc_limit_X_EAST;
	else if(x < lc_limit_X_WEST) x = lc_limit_X_WEST;

	if(y > lc_limit_Y_NORTH) y = lc_limit_Y_NORTH;
	else if(y < lc_limit_Y_SOUTH) y = lc_limit_Y_SOUTH;

	/* Calculations */
	new Float:map_width = floatsub(lc_limit_X_EAST, lc_limit_X_WEST),
		Float:prop_X = floatdiv(map_size_x, map_width),
		Float:mv_X = floatsub(map_width, lc_limit_X_EAST);

	new Float:map_height = floatsub(lc_limit_Y_SOUTH, lc_limit_Y_NORTH),
		Float:prop_Y = floatdiv(map_size_y, map_height),
		Float:mv_Y = floatsub(map_height, lc_limit_Y_SOUTH);
	
	/* Conversion */
	x += mv_X;
	y += mv_Y;

	/* Result */
	td_x = map_x + floatmul(prop_X, x),
	td_y = map_y + floatmul(prop_Y, y);
	return 1;
}

stock GetIconTextdraw(iconid)
{
	new td_icon[24];
	
	switch(iconid)
	{
		case 2: td_icon = "hud:radar_centre";
		case 3: td_icon = "hud:arrow";
		case 4: td_icon = "hud:radar_north";
		case 5: td_icon = "hud:radar_airyard";
		case 6: td_icon = "hud:radar_ammugun";
		case 7: td_icon = "hud:radar_barbers";
		case 8: td_icon = "hud:radar_bigsmoke";
		case 9: td_icon = "hud:radar_boatyard";
		case 10: td_icon = "hud:radar_burgershot";
		case 11: td_icon = "hud:radar_bulldozer";
		case 12: td_icon = "hud:radar_catalinapink";
		case 13: td_icon = "hud:radar_cesarviapando";
		case 14: td_icon = "hud:radar_chicken";
		case 15: td_icon = "hud:radar_cj";
		case 16: td_icon = "hud:radar_crash1";
		case 17: td_icon = "hud:radar_diner";
		case 18: td_icon = "hud:radar_emmetgun";
		case 19: td_icon = "hud:radar_enemyattack";
		case 20: td_icon = "hud:radar_fire";
		case 21: td_icon = "hud:radar_girlfriend";
		case 22: td_icon = "hud:radar_hostpital";
		case 23: td_icon = "hud:radar_locosyndicate";
		case 24: td_icon = "hud:radar_maddog";
		case 25: td_icon = "hud:radar_mafiacasino";
		case 26: td_icon = "hud:radar_mcstrap";
		case 27: td_icon = "hud:radar_modgarage";
		case 28: td_icon = "hud:radar_ogloc";
		case 29: td_icon = "hud:radar_pizza";
		case 30: td_icon = "hud:radar_police";
		case 31: td_icon = "hud:radar_propertyg";
		case 32: td_icon = "hud:radar_propertyr";
		case 33: td_icon = "hud:radar_race";
		case 34: td_icon = "hud:radar_ryder";
		case 35: td_icon = "hud:radar_savegame";
		case 36: td_icon = "hud:radar_school";
		case 37: td_icon = "hud:radar_qmark";
		case 38: td_icon = "hud:radar_sweet";
		case 39: td_icon = "hud:radar_tattoo";
		case 40: td_icon = "hud:radar_thetruth";
		case 41: td_icon = "hud:radar_waypoint";
		case 42: td_icon = "hud:radar_toreno";
		case 43: td_icon = "hud:radar_triads";
		case 44: td_icon = "hud:radar_triadscasino";
		case 45: td_icon = "hud:radar_tshirt";
		case 46: td_icon = "hud:radar_woozie";
		case 47: td_icon = "hud:radar_zero";
		case 48: td_icon = "hud:radar_datedisco";
		case 49: td_icon = "hud:radar_datedrink";
		case 50: td_icon = "hud:radar_datefood";
		case 51: td_icon = "hud:radar_truck";
		case 52: td_icon = "hud:radar_cash";
		case 53: td_icon = "hud:radar_flag";
		case 54: td_icon = "hud:radar_gym";
		case 55: td_icon = "hud:radar_impound";
		case 56: td_icon = "hud:radar_light";
		case 57: td_icon = "hud:radar_runway";
		case 58: td_icon = "hud:radar_gangb";
		case 59: td_icon = "hud:radar_gangp";
		case 60: td_icon = "hud:radar_gangy";
		case 61: td_icon = "hud:radar_gangn";
		case 62: td_icon = "hud:radar_gangg";
		case 63: td_icon = "hud:radar_spray";
	}
	
	return td_icon;
}

GivePlayerWeaponEx(playerid, weapon_id, ammo)
{
	PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY] = gettime() + 3;

	if(ammo > 8000) ammo = 8000;

	if(PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] == weapon_id) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] += ammo;
	else PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = ammo;

	PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_VALID] = true;
	PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] = weapon_id;
	
	SetPlayerWeapon(playerid, WEAPON_INFO[weapon_id][weapon_info_SLOT]);
	return 1;
}

ResetPlayerWeaponsEx(playerid)
{
	PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY] = gettime() + 3;

	new tmp_PLAYER_WEAPONS[enum_PLAYER_WEAPONS];
	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++) PLAYER_WEAPONS[playerid][i] = tmp_PLAYER_WEAPONS;
	
	ResetPlayerWeapons(playerid);
	SetPlayerToys(playerid);
	return 1;
}

SetWeaponsForPlayer(playerid)
{
	PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY] = gettime() + 3;

	ResetPlayerWeapons(playerid);

	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(PLAYER_WEAPONS[playerid][i][player_weapon_ID] != 0)
		{
			SetPlayerWeapon(playerid, i);
		}
	}
	return 1;
}

SetPlayerWeapon(playerid, slot) 
{
	if(PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO] > 0)
	{
		GivePlayerWeapon(playerid, PLAYER_WEAPONS[playerid][slot][player_weapon_ID], PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO]);
	}
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{	
	if(WEAPON_INFO[weaponid][weapon_info_AMMO]) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] --;
	if(PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] <= 0) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] = 0;
	if(ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Enabled])
	{
		if(GetPlayerWeapon(playerid) != weaponid)
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_UNDETECTED_WEAPON);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_UNDETECTED_WEAPON);
				}
			}
		}
	}
	if(ac_Info[CHEAT_DRIVE_BY][ac_Enabled])
	{
		new player_state = GetPlayerState(playerid);
		if(player_state == PLAYER_STATE_DRIVER || player_state == PLAYER_STATE_PASSENGER)
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_DRIVE_BY][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DRIVE_BY);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DRIVE_BY][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DRIVE_BY][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DRIVE_BY);
				}
			}
		}
	}
	if(PI[playerid][pi_CREW])
	{
		if(gettime() > CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_LAST_ATTACK] + 300)
		{
			if(pTemp(playerid)[pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
			{
				if(IsPlayerInDynamicArea(playerid, TERRITORIES[ pTemp(playerid)[pt_LAST_TERRITORY] ][territory_AREA]))
				{
					if(TERRITORIES[ pTemp(playerid)[pt_LAST_TERRITORY] ][territory_CREW_ID] != PI[playerid][pi_CREW])
					{
						if(!TERRITORIES[ pTemp(playerid)[pt_LAST_TERRITORY] ][territory_WAR] && !CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_FIGHTING])
						{
							if(gettime() > TERRITORIES[ pTemp(playerid)[pt_LAST_TERRITORY] ][territory_LAST_ATTACK] + 300)
							{
								if(!TERRITORIES[ pTemp(playerid)[pt_LAST_TERRITORY] ][territory_OCCUPIED])
								{
									new attackers_in_area = CountCrewPlayersInTerritory(pTemp(playerid)[pt_CREW_INDEX], pTemp(playerid)[pt_LAST_TERRITORY]);
									if(attackers_in_area >= 0) StartTerritoryAttack(pTemp(playerid)[pt_CREW_INDEX], pTemp(playerid)[pt_LAST_TERRITORY], 180);
								}
								else
								{
									if(CREW_INFO[ TERRITORIES[ pTemp(playerid)[pt_LAST_TERRITORY] ][territory_CREW_INDEX] ][crew_VALID])
									{
										if(!CREW_INFO[ TERRITORIES[ pTemp(playerid)[pt_LAST_TERRITORY] ][territory_CREW_INDEX] ][crew_FIGHTING])
										{	
											new attackers_in_area = CountCrewPlayersInTerritory(pTemp(playerid)[pt_CREW_INDEX], pTemp(playerid)[pt_LAST_TERRITORY]);
											if(attackers_in_area >= 0) StartTerritoryAttack(pTemp(playerid)[pt_CREW_INDEX], pTemp(playerid)[pt_LAST_TERRITORY], 180);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
    return 1;
}

public OnPlayerSuspectedForAimbot(playerid, hitid, weaponid, warnings)
{
	new current_gettime = gettime();
	if(warnings & WARNING_OUT_OF_RANGE_SHOT)
	{
		if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_IMMUNITY])
		{
			if(!ac_Info[CHEAT_AIMBOT][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_AIMBOT);
			else
			{
				if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_AIMBOT][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_DETECTIONS] = 0;
				else PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_DETECTIONS] ++;
					
				PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_LAST_DETECTION] = current_gettime;
				if(PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_AIMBOT][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_AIMBOT);
			}
		}
	}
	if(warnings & WARNING_PROAIM_TELEPORT)
	{
		if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_IMMUNITY])
		{
			if(!ac_Info[CHEAT_AIMBOT][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_AIMBOT);
			else
			{
				if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_AIMBOT][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_DETECTIONS] = 0;
				else PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_DETECTIONS] ++;
					
				PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_LAST_DETECTION] = current_gettime;
				if(PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_AIMBOT][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_AIMBOT);
			}
		}
	}
	if(warnings & WARNING_RANDOM_AIM)
	{
		if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_IMMUNITY])
		{
			if(!ac_Info[CHEAT_AIMBOT][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_AIMBOT);
			else
			{
				if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_AIMBOT][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_DETECTIONS] = 0;
				else PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_DETECTIONS] ++;
					
				PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_LAST_DETECTION] = current_gettime;
				if(PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_AIMBOT][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_AIMBOT);
			}
		}
	}
	if(warnings & WARNING_CONTINOUS_SHOTS)
	{
		if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_IMMUNITY])
		{
			if(!ac_Info[CHEAT_AIMBOT][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_AIMBOT);
			else
			{
				if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_AIMBOT][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_DETECTIONS] = 0;
				else PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_DETECTIONS] ++;
					
				PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_LAST_DETECTION] = current_gettime;
				if(PLAYER_AC_INFO[playerid][CHEAT_AIMBOT][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_AIMBOT][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_AIMBOT);
			}
		}
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
	if(damagedid != INVALID_PLAYER_ID)
	{
		if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE && PI[playerid][pi_STATE] != ROLEPLAY_STATE_CRACK && PI[playerid][pi_STATE] != ROLEPLAY_STATE_JAIL) {
			if(pTemp(playerid)[pt_COMBAT])
			{
				KillTimer(pTemp(playerid)[pt_COMBAT_TIMER]);
				pTemp(playerid)[pt_COMBAT_TIMER] = SetTimerEx("ResetCombat", 60000 * 2, false, "i", playerid);
			}
			else
			{
				pTemp(playerid)[pt_COMBAT_TIMER] = SetTimerEx("ResetCombat", 60000 * 2, false, "i", playerid);
				pTemp(playerid)[pt_COMBAT] = true;

				TextDrawShowForPlayer(playerid, Textdraws[textdraw_COMBAT_MODE]);

				SendClientMessagef(playerid, -1, "Has entrado en modo de combate. Saldrás de este modo en 2 minutos.Si te desconectas, perderás todas tus armas, y en caso de tener cargos irás a prisión.");
			}
		}

		if(PlayerTemp[damagedid][pt_WORKING_IN] != WORK_POLICE && PI[damagedid][pi_STATE] != ROLEPLAY_STATE_CRACK && PI[damagedid][pi_STATE] != ROLEPLAY_STATE_JAIL) {
			if(PlayerTemp[damagedid][pt_COMBAT])
			{
				KillTimer(PlayerTemp[damagedid][pt_COMBAT_TIMER]);
				PlayerTemp[damagedid][pt_COMBAT_TIMER] = SetTimerEx("ResetCombat", 60000 * 2, false, "i", damagedid);
			}
			else
			{
				PlayerTemp[damagedid][pt_COMBAT_TIMER] = SetTimerEx("ResetCombat", 60000 * 2, false, "i", damagedid);
				PlayerTemp[damagedid][pt_COMBAT] = true;

				TextDrawShowForPlayer(damagedid, Textdraws[textdraw_COMBAT_MODE]);

				SendClientMessagef(damagedid, -1, "Has entrado en modo de combate. Saldrás de este modo en 2 minutos.Si te desconectas, perderás todas tus armas, y en caso de tener cargos irás a prisión.");
			}
		}
	}
		
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
	{
		if(gettime() > pTemp(playerid)[pt_LAST_SAFE_ZONE_WARNING] + 60)
		{
			if(IsPlayerInSafeZone(playerid))
			{
				SendClientMessagef(playerid, -1, "Estás en una zona segura, la policía ha sido avisada de la agresión.");
				
				new city[45], zone[45];
				GetPlayerZones(playerid, city, zone);

				if(!PI[playerid][pi_WANTED_LEVEL]) SetPlayerWantedLevelEx(playerid, 1);

				new message[145];
				format(message, sizeof message, "{"#POLICE_COLOR"}[Central policía] {FFFFFF}%s está causando disturbios en {"#POLICE_COLOR"}%s, %s.", pTemp(playerid)[pt_NAME], city, zone);
				SendPoliceRadioMessage(-1, -1, message);
				
				pTemp(playerid)[pt_LAST_SAFE_ZONE_WARNING] = gettime();
			}
		}
	}
    return 1;
}

/*public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    return 1;
}*/

CheckWeaponAndAmmo(playerid, weaponid)
{
	if(WEAPON_INFO[weaponid][weapon_info_ANTI_CHEAT])
	{
		new weapon_id, weapon_ammo;
		GetPlayerWeaponData(playerid, WEAPON_INFO[weaponid][weapon_info_SLOT], weapon_id, weapon_ammo);
		
		if(ac_Info[CHEAT_WEAPON][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY])
			{
				if(weapon_id != PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID])
				{
					if(!ac_Info[CHEAT_WEAPON][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_WEAPON);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_WEAPON][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_WEAPON][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_WEAPON);
					}
				}
			}
		}
		
		if(WEAPON_INFO[weapon_id][weapon_info_AMMO])
		{
			if(ac_Info[CHEAT_AMMO][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY])
				{
					if(weapon_ammo > PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] + 10)
					{
				
						if(!ac_Info[CHEAT_AMMO][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_AMMO);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_AMMO][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_AMMO][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_AMMO);
						}
					}
					else PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = weapon_ammo;
				}
			}
		}
	}
	return 1;
}


new ADMIN_LEVEL_AC_IMMUNITY = 3; //nivel 3 en adelante
OnPlayerCheatDetected(playerid, cheat, Float:extra = 0.0)
{
	if(PI[playerid][pi_ADMIN_LEVEL] >= ADMIN_LEVEL_AC_IMMUNITY) return 1;
	if(pTemp(playerid)[pt_KICKED]) return 1;
	

	if(gettime() < pTemp(playerid)[pt_LAST_CHEAT_DETECTED_TIME] + 5) return 1;

	new ac_message[145], player_state = GetPlayerState(playerid);
	
	if(ac_Info[cheat][ac_Kick])
	{	
		new bad_history[24];
		format(bad_history, sizeof bad_history, "ac, cheat (%02d)", cheat);
		AddPlayerBadHistory(PI[playerid][pi_ID], -1, TYPE_KICK, bad_history);
		
		if(extra != 0.0) format(ac_message, sizeof ac_message, "{"#RED_COLOR"}[AC-KICK] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)", PI[playerid][pi_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
		else format(ac_message, sizeof ac_message, "{"#RED_COLOR"}[AC-KICK] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)", PI[playerid][pi_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);
		
		KickEx(playerid);
		
		if(cheat == CHEAT_PLAYER_HEALTH) PI[playerid][pi_HEALTH] = 20.0;
		if(cheat == CHEAT_PLAYER_ARMOUR) PI[playerid][pi_ARMOUR] = 0.0;
	}
	else
	{
		if(extra != 0.0) format(ac_message, sizeof ac_message, "{"#RED_COLOR"}[AC-AVISO] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)", PI[playerid][pi_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
		else format(ac_message, sizeof ac_message, "{"#RED_COLOR"}[AC-AVISO] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)", PI[playerid][pi_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);
	}
	
	SendMessageToAdminsAC(-1, ac_message);
	pTemp(playerid)[pt_LAST_CHEAT_DETECTED_TIME] = gettime();

	return 1;
}

RegisterNewPlayerWeapon(playerid, weapon_slot)
{
	inline OnPweaponInserted()
	{
		PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_DB_ID] = cache_insert_id();
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pweapons (id_player, weaponid, ammo) VALUES (%d, %d, %d);", PI[playerid][pi_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPweaponInserted);
	QUERY_BUFFER[0] = EOS;
	return 1;
}

SavePlayerWeaponsData(playerid)
{
	if(!pTemp(playerid)[pt_USER_EXIST] || !pTemp(playerid)[pt_USER_LOGGED]) return 0;
	
	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(!PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]) continue;
		
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pweapons SET weaponid = %d, ammo = %d WHERE id = %d;", PLAYER_WEAPONS[playerid][i][player_weapon_ID], PLAYER_WEAPONS[playerid][i][player_weapon_AMMO], PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]);
		mysql_tquery(handle_db, QUERY_BUFFER);
	}
	return 1;
}

RemovePlayerSlotWeapon(playerid, slot, bool:db_delete = false)
{
	if(db_delete)
	{
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id = %d;", PLAYER_WEAPONS[playerid][slot][player_weapon_DB_ID]);
		mysql_tquery(handle_db, QUERY_BUFFER);
	}
	
	new current_weapon = GetPlayerWeapon(playerid);
	if(current_weapon == PLAYER_WEAPONS[playerid][slot][player_weapon_ID]) current_weapon = 0;
	
	PLAYER_WEAPONS[playerid][slot][player_weapon_VALID] = false;
	PLAYER_WEAPONS[playerid][slot][player_weapon_DB_ID] = 0;
	PLAYER_WEAPONS[playerid][slot][player_weapon_ID] = 0;
	PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO] = 0;
	
	SetWeaponsForPlayer(playerid);
	SetPlayerArmedWeapon(playerid, current_weapon);
	return 1;
}

LoadPlayerWeaponsData(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;
	
	inline OnPweaponsLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new weaponid;
				reg_int(i, "weaponid", weaponid);

				PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_VALID] = true;
				reg_int(i, "id", PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_DB_ID]);
				reg_int(i, "ammo", PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO]);
				PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_ID] = weaponid;
			}
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pweapons WHERE id_player = %d LIMIT 13;", PI[playerid][pi_ID]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPweaponsLoad);
	return 1;
}

SetPlayerHealthEx(playerid, Float:health)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	
	PI[playerid][pi_HEALTH] = health;
	SetPlayerHealth(playerid, PI[playerid][pi_HEALTH]);
	return 1;
}

SetPlayerArmourEx(playerid, Float:armour)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;
	
	PI[playerid][pi_ARMOUR] = armour;
	SetPlayerArmour(playerid, PI[playerid][pi_ARMOUR]);
	return 1;
}

GivePlayerHealthEx(playerid, Float:health)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	
	PI[playerid][pi_HEALTH] += health;
	if(PI[playerid][pi_HEALTH] > 100.0) PI[playerid][pi_HEALTH] = 100.0;
	SetPlayerHealth(playerid, PI[playerid][pi_HEALTH]);
	return 1;
}

GivePlayerArmourEx(playerid, Float:armour)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;
	
	PI[playerid][pi_ARMOUR] += armour;
	if(PI[playerid][pi_ARMOUR] > 100.0) PI[playerid][pi_ARMOUR] = 100.0;
	SetPlayerArmour(playerid, PI[playerid][pi_ARMOUR]);
	return 1;
}

TransferPlayerWeapon(from_playerid, slot, to_playerid)
{
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pweapons SET id_player = %d WHERE id = %d;", PI[to_playerid][pi_ID], PLAYER_WEAPONS[from_playerid][slot][player_weapon_DB_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);
	
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_VALID] = true;
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_DB_ID] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_DB_ID];
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_ID] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_ID];
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_AMMO] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_AMMO];
	SetWeaponsForPlayer(to_playerid);
	
	RemovePlayerSlotWeapon(from_playerid, slot);
	return 1;
}

//ANIMACIONES
CMD:animaciones(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_ANIMS);
	return 1;
}
alias:animaciones("anims", "acciones");
CMD:parar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "PED", "IDLE_tired", 4.1, false, false, false, false, 0);
	//ClearAnimations(playerid);
	return 1;
}
CMD:rendirse(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP); //rendirse
    SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:blowjob(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 0, 0);//blowjob
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:rodar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:borracho(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);//borracho
    SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:bomba(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);//bomba
    SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:apuntar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1,500);
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:reir(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);//reir
    SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:amenazar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);//amenazar
    SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:paja(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:herido(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:cruzarbrazos(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:recostarse(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);//recostarse
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:cubrirse(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);//crubrirse
    SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:vomitar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);//vomitar
    SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:comer(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:despedir(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);//despedir
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:nalgada(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);//nalgada
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:agonizar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);//agonizar
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:besar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);//besar
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:crack(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);//crack
    SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:mear(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);//mear
    SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:sentarse(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);//sentarse
    SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:asiento(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 1, 1, 1, 0);
    SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:fucku(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );//fucku
    SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:taichi(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);//taichi
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:beber(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);//beber
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:boxear(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);//boxear
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:saludar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);//saludar
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:llorar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);//llorar
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:dormir(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	if(!GetPlayerInterior(playerid)) return SendClientMessagef(playerid, -1, "Solo puedes hacer esto en un interior");
	ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);//dormir
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:rapear(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,0,0,0,8000);//rapear
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:astrip(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,1);//strip
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:bailar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFF4500FF, "ERROR: /bailar [1-4]");

	switch(params[0])
	{
	    case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		default: SendClientMessage(playerid, 0xFF4500FF, "ERROR: /bailar [1-4]");
	}
	return 1;
}
CMD:alentar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);//alentar
	SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:hablar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);//hablar
    SendClientMessagef(playerid, -1, "Para cancelar la animacion utiliza /parar.");
	return 1;
}

GetPlayerVehicleAvaibleBootSlot(vehicleid)
{
	new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
	if(max_slots > MAX_BOOT_SLOTS) max_slots = MAX_BOOT_SLOTS;
	
	for(new i = 0; i != max_slots; i ++)
	{
		if(!VEHICLE_BOOT[vehicleid][i][vehicle_boot_VALID]) return i;
	}
	return -1;
}

RegisterVehicleBootObject(vehicleid, boot_slot, type, int, extra)
{
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_ID]) return 0;

	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_VALID] = false;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_TYPE] = type;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT] = int;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT_EXTRA] = extra;
	
	inline OnVbootInserted()
	{
		VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_OBJECT_ID] = cache_insert_id();
		if(VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_OBJECT_ID]) VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_VALID] = true;
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO vboot (id_vehicle, type, `int`, int_extra) VALUES (%d, %d, %d, %d);", PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_TYPE], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT_EXTRA]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnVbootInserted);
	return 1;
}

SavePlayerWeaponInVehicleBoot(playerid, weapon_slot, vehicleid, boot_slot)
{
	RegisterVehicleBootObject(vehicleid, boot_slot, BOOT_TYPE_WEAPON, PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO]);
	RemovePlayerSlotWeapon(playerid, weapon_slot, true);
	return 1;
}

GetPropertyAvaibleClosetSlot(index)
{
	new max_slots = MAX_CLOSET_SLOTS;
	for(new i = 0; i != max_slots; i ++)
	{
		if(!PROPERTY_CLOSET[index][i][property_closet_VALID]) return i;
	}
	return -1;
}

RegisterPropertyClosetObject(index, closet_slot, type, int, extra)
{
	PROPERTY_CLOSET[index][closet_slot][property_closet_VALID] = false;
	PROPERTY_CLOSET[index][closet_slot][property_closet_TYPE] = type;
	PROPERTY_CLOSET[index][closet_slot][property_closet_INT] = int;
	PROPERTY_CLOSET[index][closet_slot][property_closet_INT_EXTRA] = extra;
	
	inline OnPropertyClosetInserted()
	{
		PROPERTY_CLOSET[index][closet_slot][property_closet_OBJECT_ID] = cache_insert_id();
		if(PROPERTY_CLOSET[index][closet_slot][property_closet_OBJECT_ID]) PROPERTY_CLOSET[index][closet_slot][property_closet_VALID] = true;
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO property_closet (id_property, type, `int`, int_extra) VALUES (%d, %d, %d, %d);", PROPERTY_INFO[index][property_ID], type, int, extra);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnPropertyClosetInserted);
	return 1;
}

SaveWeaponInPropertyCloset(playerid, weapon_slot, index, closet_slot)
{
	RegisterPropertyClosetObject(index, closet_slot, CLOSET_TYPE_WEAPON, PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO]);
	RemovePlayerSlotWeapon(playerid, weapon_slot, true);
	return 1;
}

CMD:guardar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	
	new option[24], extra;
	if(sscanf(params, "s[24]d", option, extra)) return SendClientMessagef(playerid, -1, "Error en los parámetros, utilice /manual guardar.");

	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_NORMAL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK)
	{
		new vehicleid = GetNearVehicle(playerid);
		if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessagef(playerid, -1, "No estás cerca de tu vehículo.");
		
		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendMessage(playerid, "~r~Este no es tú vehículo.");
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendMessage(playerid, "~r~Este no es tú vehículo.");
				
		new boot_slot = GetPlayerVehicleAvaibleBootSlot(vehicleid);
		if(boot_slot == -1) return SendClientMessagef(playerid, -1, "No tienes suficiente espacio en tu /maletero.");

		if(!strcmp(option, "arma", true))
		{
			if(GetPlayerWork(playerid, WORK_POLICE)) return SendMessage(playerid, "~r~No puedes hacer esto.");
			if(extra < 0 || extra >= sizeof PLAYER_WEAPONS[]) return SendClientMessagef(playerid, -1, "Error: /guardar arma {FFFFFF}[slot/armas]");
			if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID])
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessagef(playerid, -1, "No tienes ninguna arma en ese slot (/armas).");
				return 1;
			}

			SendClientMessagef(playerid, -1, "Arma '%s' guardada en el maletero de tu %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME], VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);

			new string[128];
			format(string, sizeof string, "guarda un(a) %s en el maletero de su vehículo.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
			Auto_SendPlayerAction(playerid, string);
			
			SavePlayerWeaponInVehicleBoot(playerid, extra, vehicleid, boot_slot);
		}
		else if(!strcmp(option, "medicamentos", true)) 
		{
			if(extra < 0 || extra > PI[playerid][pi_MEDICINE]) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
			
			PI[playerid][pi_MEDICINE] -= extra;
			RegisterVehicleBootObject(vehicleid, boot_slot, BOOT_TYPE_MEDICINES, extra, 0);
			
			Auto_SendPlayerAction(playerid, "guarda medicamentos en el maletero de su vehículo.");
		}
		else if(!strcmp(option, "marihuana", true)) 
		{
			if(extra < 0 || extra > PI[playerid][pi_CANNABIS]) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
			
			PI[playerid][pi_CANNABIS] -= extra;
			RegisterVehicleBootObject(vehicleid, boot_slot, BOOT_TYPE_CANNABIS, extra, 0);

			Auto_SendPlayerAction(playerid, "guarda marihuana en el maletero de su vehículo.");
		}
		else if(!strcmp(option, "crack", true)) 
		{
			if(extra < 0 || extra > PI[playerid][pi_CRACK]) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
			
			PI[playerid][pi_CRACK] -= extra;
			RegisterVehicleBootObject(vehicleid, boot_slot, BOOT_TYPE_CRACK, extra, 0);

			Auto_SendPlayerAction(playerid, "guarda crack en el maletero de su vehículo.");
		}
		else SendClientMessagef(playerid, -1, "Error en los parámetros, utilice /man guardar.");
	}
	else if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
	{
		new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
		if(index == -1) return SendClientMessagef(playerid, -1, "BUG: CMD /guardar (casa), Tome captura y contacte con administrador.");
		if(PROPERTY_INFO[index][property_OWNER_ID] != PI[playerid][pi_ID]) return SendClientMessagef(playerid, -1, "Esta no es tu casa");

		if(IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_X], PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Y], PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Z]))
		{
			new closet_slot = GetPropertyAvaibleClosetSlot(index);
			if(closet_slot == -1) return SendClientMessagef(playerid, -1, "No tienes suficiente espacio en tu /armario.");
			
			if(!strcmp(option, "arma", true))
			{
				if(GetPlayerWork(playerid, WORK_POLICE)) return SendMessage(playerid, "~r~No puedes hacer esto.");
				if(extra < 0 || extra >= sizeof PLAYER_WEAPONS[]) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/guardar arma [slot /armas]");
				if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessagef(playerid, -1, "No tienes ninguna arma en ese slot (/armas).");
					return 1;
				}

				SendClientMessagef(playerid, -1, "Arma '%s' guardada en el armario de tu casa.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);

				new string[128];
				format(string, sizeof string, "guarda un(a) %s en el armario de su casa.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
				Auto_SendPlayerAction(playerid, string);
				
				SaveWeaponInPropertyCloset(playerid, extra, index, closet_slot);
			}
			else if(!strcmp(option, "medicamentos", true)) 
			{
				if(extra < 0 || extra > PI[playerid][pi_MEDICINE]) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
				
				PI[playerid][pi_MEDICINE] -= extra;
				RegisterPropertyClosetObject(index, closet_slot, BOOT_TYPE_MEDICINES, extra, 0);
				
				Auto_SendPlayerAction(playerid, "guarda medicamentos en el armario.");
			}
			else if(!strcmp(option, "marihuana", true)) 
			{
				if(extra < 0 || extra > PI[playerid][pi_CANNABIS]) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
				
				PI[playerid][pi_CANNABIS] -= extra;
				RegisterPropertyClosetObject(index, closet_slot, BOOT_TYPE_CANNABIS, extra, 0);
				
				Auto_SendPlayerAction(playerid, "guarda marihuana en el armario.");
			}
			else if(!strcmp(option, "crack", true)) 
			{
				if(extra < 0 || extra > PI[playerid][pi_CRACK]) return SendClientMessagef(playerid, -1, "Cantidad incorrecta.");
				
				PI[playerid][pi_CRACK] -= extra;
				RegisterPropertyClosetObject(index, closet_slot, BOOT_TYPE_CRACK, extra, 0);
				
				Auto_SendPlayerAction(playerid, "guarda crack en el armario.");
			}
			else SendClientMessagef(playerid, -1, "Error en los parámetros, utilice /man guardar.");
		}
		else SendClientMessagef(playerid, -1, "No estás cerca del armario.");
	}
	else SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	return 1;
}

CMD:maletero(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	
	new vehicleid = GetNearVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessagef(playerid, -1, "No estás cerca de tu vehículo.");
	
	if((pTemp(playerid)[pt_WORKING_IN] == WORK_POLICE) && PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID])
	{
		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessagef(playerid, -1, "Este vehiculo es del gobierno o de un consecionario.");
		new pid = -1;
		LoopEx(i, MAX_PLAYERS, 0)
		{
			if(PlayerTemp[i][pt_USER_LOGGED] && PI[i][pi_ID] == PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID])
			pid = i;
		}

		if(pid == -1) return SendClientMessagef(playerid, -1, "Error del juego: No se ha podido encontrar al dueño de este vehículo.");
		if(!PlayerTemp[pid][pt_CUFFED]) return SendClientMessagef(playerid, -1, "El dueño de este vehículo debe estar esposado para poder revisar su vehículo.");
		
		pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] = vehicleid;
		ShowDialog(playerid, DIALOG_VEHICLE_BOOT);

		Auto_SendPlayerAction(playerid, "revisa el maltero del vehículo");
		return 1;
	}

	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendMessage(playerid, "~r~Este no es tú vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendMessage(playerid, "~r~Este no es tú vehículo.");
		
	pTemp(playerid)[pt_DIALOG_BOT_VEHICLE] = vehicleid;
	ShowDialog(playerid, DIALOG_VEHICLE_BOOT);
	return 1;
}
alias:maletero("baul");

task UpdatePlayerMarkers[30000]()
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerWork(i, WORK_POLICE))
			{
				if(IsPlayerWorking(i, WORK_POLICE))
				{
					SetWantedPlayerMarkers(i);
				}
			}
		}
	}

	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerWork(i, WORK_TAXI))
			{
				if(IsPlayerWorking(i, WORK_TAXI))
				{
					SetTaxiPlayerMarkers(i);
				}
			}
		}
	}
}

SetWantedPlayerMarkers(playerid)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PI[i][pi_WANTED_LEVEL] > 0)
				{
					SetPlayerMarkerForPlayer(playerid, i, PlayerWantedColor(i));
				}
			}
		}
	}
	return 1;
}

PlayerWantedColor(playerid)
{
	if(PI[playerid][pi_WANTED_LEVEL] > 0)
	{
		if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return 0x009900ff;
		else
		{
			switch(PI[playerid][pi_WANTED_LEVEL])
			{
				case 1: return 0xfffdbaff;
				case 2: return 0xf7f254ff;
				case 3: return 0xd98900ff;
				case 4: return 0xce4202ff;
				case 5: return 0xff00ffff;
				case 6: return 0x9900ccff;
				default: return 0x9900ccff;
			}
		}
	}
	return SetPlayerNormalColor(playerid);
}

CMD:nivel(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 2) return SendClientMessagef(playerid, -1, "Los cadetes y soldados rasos no pueden colocar cargos.");
	if(sscanf(params, "ud", params[0], params[1])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/nivel [PlayerID/Nombre] [nivel de búsqueda 0-6]");
	if(params[1] < 0 || params[1] > 6) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/nivel [PlayerID/Nombre] [nivel de búsqueda 0-6]");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	if(PLAYER_WORKS[params[0]][WORK_POLICE][pwork_SET]) return SendClientMessagef(playerid, -1, "Este jugador es policía.");
	if(PI[params[0]][pi_STATE] == ROLEPLAY_STATE_JAIL) return SendClientMessagef(playerid, -1, "Esta persona está en la cárcel.");

	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 100.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya. (A más de 100 metros)");

	new 
		action[145],
		message[445];

	if(params[1] == 0)
	{
		format(action, sizeof action, "le quita el nivel de búsqueda a %s.", PlayerTemp[params[0]][pt_NAME]);

		format(message, sizeof message, "{"#POLICE_COLOR"}[Central policía] {FFFFFF}%s reporta: {"#POLICE_COLOR"}%s {FFFFFF}ya no es sospechoso.", pTemp(playerid)[pt_NAME], PlayerTemp[params[0]][pt_NAME]);
		SendClientMessagef(playerid, -1, "Le has removido el nivel de búsqueda a %s.", PlayerTemp[params[0]][pt_NAME]);
	}
	else
	{
		new 
			zone[45], 
			city[45];

		GetPlayerZones(playerid, city, zone);

		format(action, sizeof action, "le pone nivel de búsqueda a %s.", PlayerTemp[params[0]][pt_NAME]);
		
		SendClientMessagef(playerid, -1, "Has asignado nivel de búsqueda %d a %s.", params[1], PlayerTemp[params[0]][pt_NAME]);
		format(message, sizeof message, "{"#POLICE_COLOR"}[Central policía] {FFFFFF}%s reporta: {"#POLICE_COLOR"}%s (%d*) {FFFFFF}en {"#PRIMARY_COLOR"}%s, %s.", pTemp(playerid)[pt_NAME], PlayerTemp[params[0]][pt_NAME], params[1], city, zone);
	
		SendClientMessagef(params[0], ORANGE_COLOR2, "[AVISO] {ffffff}el {"#BLUE_COLOR"}%s %s (%d) {ffffff}te ha puesto nivel de busqueda.", POLICE_RANKS[ GetPlayerWorkLevel(playerid, WORK_POLICE) ], pTemp(playerid)[pt_NAME], playerid);
	}

	Auto_SendPlayerAction(playerid, action);

	SetPlayerWantedLevelEx(params[0], params[1]);
	SendPoliceRadioMessage(-1, -1, message);
	return 1;
}
alias:nivel("cargos", "c");

CMD:esposar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendClientMessagef(playerid, -1, "Error: /esposar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
	if(PlayerTemp[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No puedes esposar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "Para esposar a esta persona tiene que estar depie.");
	if(PI[params[0]][pi_WANTED_LEVEL] == 0) return SendClientMessagef(playerid, -1, "Esta persona no tiene nivel de búsqueda.");
	
	new oldstate = PI[params[0]][pi_STATE];
	DisablePlayerInjuredMark(params[0]);
	PI[params[0]][pi_STATE] = ROLEPLAY_STATE_NORMAL;
	ApplyAnimation(params[0], "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(params[0]);

	if(PlayerTemp[params[0]][pt_CUFFED])
	{
		TogglePlayerControllableEx(params[0], true);
		PlayerTemp[params[0]][pt_CUFFED] = false;
		PlayerTemp[params[0]][pt_CUFFING] = false;
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
		
		new action[64];
		format(action, sizeof action, "le quita las esposas a %s.", PlayerTemp[params[0]][pt_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	
	if(!PlayerTemp[params[0]][pt_CUFFING])
	{
		if(oldstate == ROLEPLAY_STATE_CRACK) {
			CuffPlayer(params[0]);
		}
		else {
			SendClientMessagef(params[0], -1, "Estás siendo esposado, puedes /resistirse.");
			SendClientMessagef(playerid, -1, "Estás esposando a esta persona, aún puede resistirse.");
			
			PlayerTemp[params[0]][pt_CUFFED] = false;
			PlayerTemp[params[0]][pt_CUFFING] = true;
			KillTimer(PlayerTemp[params[0]][pt_TIMERS][14]);
			TogglePlayerControllableEx(params[0], false);
			SetPlayerSpecialAction(params[0], SPECIAL_ACTION_HANDSUP);
			PlayerTemp[params[0]][pt_TIMERS][14] = SetTimerEx("CuffPlayer", 6000, false, "i", params[0]);
		}
	}
	return 1;
}

CMD:placa(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendClientMessagef(playerid, -1, "Error: /placa [PlayerID/Nombre]");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
	if(PlayerTemp[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No puedes enseñarle tu placa a este jugador ahora.");
	
	new action[64];
	format(action, sizeof action, "le enseña su placa a %s.", PlayerTemp[params[0]][pt_NAME]);
	Auto_SendPlayerAction(playerid, action);
	
	SendClientMessagef(params[0], -1, "{"#SILVER_COLOR"}%s %c. %s {A9C4E4}[Placa: %d]", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], pTemp(playerid)[pt_FIRST_NAME][0], pTemp(playerid)[pt_SUB_NAME], PI[playerid][pi_PLACA_PD]);
	return 1;
}

CMD:revisar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendClientMessagef(playerid, -1, "Error: /revisar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
	if(PlayerTemp[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No puedes revisar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "Para revisar a esta persona tiene que estar depie.");
	if(PI[params[0]][pi_WANTED_LEVEL] == 0) return SendClientMessagef(playerid, -1, "Esta persona no tiene nivel de búsqueda.");
	if(!PlayerTemp[params[0]][pt_CUFFED]) return SendClientMessagef(playerid, -1, "Para revisar a esta persona tiene que estar esposada.");
	
	ShowPlayerInventory(playerid, params[0]);
	
	new action[64];
	format(action, sizeof action, "revisa a %s.", PlayerTemp[params[0]][pt_NAME]);
	Auto_SendPlayerAction(playerid, action);
	return 1;
}

CMD:requisar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendClientMessagef(playerid, -1, "Error: /requisar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
	if(PlayerTemp[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No puedes revisar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "Para revisar a esta persona tiene que estar depie.");
	if(PI[params[0]][pi_WANTED_LEVEL] == 0) return SendClientMessagef(playerid, -1, "Esta persona no tiene nivel de búsqueda.");
	if(!PlayerTemp[params[0]][pt_CUFFED]) return SendClientMessagef(playerid, -1, "Para revisar a esta persona tiene que estar esposada.");
	
	DeleteIlegalInv(params[0]);
	
	new action[64];
	format(action, sizeof action, "requisa las pertenencias ilegales de %s.", PlayerTemp[params[0]][pt_NAME]);
	Auto_SendPlayerAction(playerid, action);
	return 1;
}

CMD:ref(playerid, params[])
{
	if(PI[playerid][pi_CREW]) return Crew_RequestHelp(playerid, PI[playerid][pi_CREW]);
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return Police_RequestHelp(playerid);
	SendMessage(playerid, "~r~No eres policía o no estas eun una banda.");
	return 1;
}
alias:ref("refuerzos");

CMD:control(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8) return SendClientMessagef(playerid, -1, "Debes ser al menos rango %s para colocar objetos policíales.", POLICE_RANKS[8]);
	
	if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return SendClientMessagef(playerid, -1, "No puedes colocar objetos policíales aquí.");
	
	new type;
	if(sscanf(params, "d", type)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/control [Tipo 1-5]");
	
	new modelid;
	switch(type)
	{
		case 1: modelid = 1459;
		case 2: modelid = 1238;
		case 3: modelid = 1425;
		case 4: modelid = 3265;
		case 5: modelid = 3091;
		default: return SendClientMessagef(playerid, -1, "Tipo de objeto no válido.");
	}
	
	new index = GetFreePoliceObjectSlot();
	if(index == -1) return SendClientMessagef(playerid, -1, "No se pueden crear más objetos policíales.");
	
	POLICE_OBJECTS[index][police_object_VALID] = true;
	format(POLICE_OBJECTS[index][police_object_USER], 24, "%s", PI[playerid][pi_NAME]);
	
	new Float:pos[3], Float:angle;
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, angle);
	pos[0] += (1.5 * floatsin(-angle, degrees));
	pos[1] += (1.5 * floatcos(-angle, degrees));

	POLICE_OBJECTS[index][police_object_OBJECT_ID] = CreateDynamicObject(modelid, pos[0], pos[1], pos[2], 0.0, 0.0, angle, GetPlayerVirtualWorld(playerid), 0);
	Streamer_Update(playerid);
	new info[3];
	info[0] = OBJECT_TYPE_POLICE;
	info[1] = index; // Index
	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, POLICE_OBJECTS[index][police_object_OBJECT_ID], E_STREAMER_EXTRA_ID, info);
	pTemp(playerid)[pt_SELECTED_POLICE_OBJECT_INDEX] = index;
	EditDynamicObject(playerid, POLICE_OBJECTS[index][police_object_OBJECT_ID]);
	
	SendClientMessagef(playerid, -1, "Coloca el objeto, posteriormente puedes usar /econtrol para moverlo o eliminarlo.");
	return 1;
}

CMD:econtrol(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8) return SendClientMessagef(playerid, -1, "Debes ser al menos rango %s para editar objetos policíales.", POLICE_RANKS[8]);
	
	if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return SendClientMessagef(playerid, -1, "No puedes editar objetos policíales aquí.");
	
	SelectObject(playerid);
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, modelid, Float:x, Float:y, Float:z)
{
	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case OBJECT_TYPE_POLICE:
		{
			if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
			{
				CancelEdit(playerid);
				SendMessage(playerid, "~r~No eres policía.");
				return 1;
			}
			if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE)
			{
				CancelEdit(playerid);
				SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
				return 1;
			}
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8)
			{
				CancelEdit(playerid);
				SendClientMessagef(playerid, -1, "Debes ser al menos rango %s para colocar objetos policíales.", POLICE_RANKS[8]);
				return 1;
			}
			
			SendClientMessagef(playerid, -1, "Este objeto fue colocado por %s. Usa 'ESC' para borrar el objeto, o usa los controles para moverlo.", POLICE_OBJECTS[ info[1] ][police_object_USER]);
			pTemp(playerid)[pt_SELECTED_POLICE_OBJECT_INDEX] = info[1];
			EditDynamicObject(playerid, objectid);
			return 1;
		}
		case OBJECT_TYPE_ATM:
		{
			if(!PI[playerid][pi_ADMIN_LEVEL])
			{
				CancelEdit(playerid);
				SendMessage(playerid, "~r~No puedes hacer eso.");
				return 1;
			}
			
			if(!pTemp(playerid)[pt_ATM_MAKER])
			{
				CancelEdit(playerid);
				SendMessage(playerid, "~r~No puedes hacer eso.");
				return 1;
			}
		}
		default:
		{
			if(PI[playerid][pi_ADMIN_LEVEL] == CMD_OWNER) 
			{
				EditDynamicObject(playerid, objectid);
			}
		}
	}
	
	return 1;
}

SetCorrectObjectPos(objectid)
{
	new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
	GetDynamicObjectPos(objectid, x, y, z);
	GetDynamicObjectRot(objectid, rx, ry, rz);

	SetDynamicObjectPos(objectid, x, y, z);
	SetDynamicObjectRot(objectid, rx, ry, rz);
}

public OnPlayerEditDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	switch(response)
	{
		case EDIT_RESPONSE_CANCEL:
		{
			new info[3];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
			switch(info[0])
			{
				case OBJECT_TYPE_POLICE:
				{
					if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
					{
						CancelEdit(playerid);
						SendMessage(playerid, "~r~No eres policía.");
						return 1;
					}
					if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE)
					{
						CancelEdit(playerid);
						SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
						return 1;
					}
					if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8)
					{
						CancelEdit(playerid);
						SendClientMessagef(playerid, -1, "Debes ser al menos rango %s para colocar objetos policíales.", POLICE_RANKS[8]);
						return 1;
					}
					
					DestroyDynamicObject(POLICE_OBJECTS[ info[1] ][police_object_OBJECT_ID]);
					POLICE_OBJECTS[ info[1] ][police_object_VALID] = false;
					POLICE_OBJECTS[ info[1] ][police_object_USER][0] = EOS;
					POLICE_OBJECTS[ info[1] ][police_object_OBJECT_ID] = INVALID_STREAMER_ID;
					SendClientMessagef(playerid, -1, "Objeto policíal eliminado.");
				}
				case OBJECT_TYPE_ATM:
				{
					pTemp(playerid)[pt_ATM_MAKER] = false;
					ATM_BANK[ info[1] ][atm_valid] = false;
					DestroyDynamicObject(ATM_BANK[ info[1] ][atm_objectid]);
				}
			}
		}
		case EDIT_RESPONSE_FINAL:
		{
			new info[3];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
			
			switch(info[0])
			{
				case OBJECT_TYPE_POLICE:
				{
					if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
					{
						CancelEdit(playerid);
						SendMessage(playerid, "~r~No eres policía.");
						SetCorrectObjectPos(objectid);
						return 1;
					}
					if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE)
					{
						CancelEdit(playerid);
						SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
						SetCorrectObjectPos(objectid);
						return 1;
					}
					if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8)
					{
						CancelEdit(playerid);
						SendClientMessagef(playerid, -1, "Debes ser al menos rango %s para colocar objetos policíales.", POLICE_RANKS[8]);
						SetCorrectObjectPos(objectid);
						return 1;
					}

					SetDynamicObjectPos(objectid, x, y, z);
					SetDynamicObjectRot(objectid, rx, ry, rz);

					SendClientMessagef(playerid, -1, "Objeto movido correctamente");

					format(POLICE_OBJECTS[ info[1] ][police_object_USER], 24, "%s", PI[playerid][pi_NAME]);

				}
				case OBJECT_TYPE_TEST: 
				{
					printf("CreateDynamicObject(%d, %f, %f, %f, %f, %f, %f);", Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID), x, y, z, rx, ry, rz);
				
					SetDynamicObjectPos(objectid, x, y, z);
					SetDynamicObjectRot(objectid, rx, ry, rz);
				}
				case OBJECT_TYPE_ATM:
				{
					pTemp(playerid)[pt_ATM_MAKER] = false;

					SetDynamicObjectPos(ATM_BANK[ info[1] ][atm_objectid], x, y, z);
					SetDynamicObjectRot(ATM_BANK[ info[1] ][atm_objectid], rx, ry, rz);

					ATM_BANK[ info[1] ][atm_X] = x; ATM_BANK[ info[1] ][atm_RX] = rx;
					ATM_BANK[ info[1] ][atm_Y] = y; ATM_BANK[ info[1] ][atm_RY] = ry;
					ATM_BANK[ info[1] ][atm_Z] = z; ATM_BANK[ info[1] ][atm_RZ] = rz;

					inline OnATMBankInserted()
					{
						ATM_BANK[ info[1] ][atm_valid] = true;
						ATM_BANK[ info[1] ][atm_id] = cache_insert_id();

						ATM_BANK[ info[1] ][atm_X] += (-0.5 * floatsin(-(ATM_BANK[ info[1] ][atm_RZ] - 90.0), degrees));
						ATM_BANK[ info[1] ][atm_Y] += (-0.5 * floatcos(-(ATM_BANK[ info[1] ][atm_RZ] - 90.0), degrees));

						DestroyDynamicObject(objectid);
						ATM_BANK[ info[1] ][atm_objectid] = CreateDynamicObject(DEFAULT_ATM_MODELID, ATM_BANK[ info[1] ][atm_X], ATM_BANK[ info[1] ][atm_Y], ATM_BANK[ info[1] ][atm_Z], ATM_BANK[ info[1] ][atm_RX], ATM_BANK[ info[1] ][atm_RY], ATM_BANK[ info[1] ][atm_RZ]);
						
						new info1[3], info2[3];
						info1[0] = OBJECT_TYPE_ATM;
						info1[1] = info[1]; // Index
						Streamer_SetArrayData(STREAMER_TYPE_OBJECT, ATM_BANK[ info[1] ][atm_objectid], E_STREAMER_EXTRA_ID, info1);

						CreateDynamicMapIcon(ATM_BANK[ info[1] ][atm_X], ATM_BANK[ info[1] ][atm_Y], ATM_BANK[ info[1] ][atm_Z], 52, -1, 0, 0);

						new label_str[256]; format(label_str, 256, "{"#PRIMARY_COLOR"}Cajero automático (%d)\n{ffffff}Presiona {"#BLUE_COLOR"}'H' {FFFFFF}para realizar operaciones", ATM_BANK[ info[1] ][atm_id]);
						CreateATMBankLabel(info[1], label_str, ATM_BANK[ info[1] ][atm_X], ATM_BANK[ info[1] ][atm_Y], ATM_BANK[ info[1] ][atm_Z]);
					
						ATM_BANK[ info[1] ][atm_pickupid] = CreateDynamicPickup(0, 1, ATM_BANK[ info[1] ][atm_X], ATM_BANK[ info[1] ][atm_Y], ATM_BANK[ info[1] ][atm_Z] + 0.10, 0, 0);
						info2[0] = PICKUP_TYPE_ATM;
						info2[1] = info[1]; // Index
						info2[2] = 0; // Nada
						Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ATM_BANK[ info[1] ][atm_pickupid], E_STREAMER_EXTRA_ID, info2);

						Streamer_Update(playerid);
						SendMessage(playerid, "Has creado un nuevo cajero.");			
					}
					mysql_format
					(
						handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, 
						"INSERT INTO atm_bank (pos_x, pos_y, pos_z, pos_rx, pos_ry, pos_rz) \n\
						VALUES (%f, %f, %f, %f, %f, %f);", x, y, z, rx, ry, rz
					);
					mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnATMBankInserted);
				}
			}
		}
	}
	return 1;
}

CMD:multar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	if(sscanf(params, "ud", params[0], params[1])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/multar [PlayerID/Nombre] [precio$]");
	if(params[1] < 0) return SendClientMessagef(playerid, -1, "El precio no puede ser menor a 0$.");
	else if(params[1] > 100000) return SendClientMessagef(playerid, -1, "El precio no puede ser mayor a 100.000$.");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
	if(PlayerTemp[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No puedes multar a este jugador ahora.");
	if(PI[params[0]][pi_STATE] == ROLEPLAY_STATE_ARRESTED || PI[params[0]][pi_STATE] == ROLEPLAY_STATE_JAIL) return SendClientMessagef(playerid, -1, "No puedes multar a este jugador ahora.");
	
	PlayerTemp[params[0]][pt_POLICE_PEN_PID] = playerid;
	PlayerTemp[params[0]][pt_POLICE_PEN_AID] = PI[playerid][pi_ID];
	PlayerTemp[params[0]][pt_POLICE_PEN_IM] = params[1];
	PlayerTemp[params[0]][pt_POLICE_PEN_TIME] = gettime();
	ShowDialog(params[0], DIALOG_POLICE_PENALTY);
	
	SendClientMessagef(playerid, -1, "La multa ha sido enviada, espera para ver si el jugador la acepta.");
	return 1;
}

CMD:arrestar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	
	if(sscanf(params, "ud", params[0], params[1])) return SendClientMessagef(playerid, -1, "Error: /arrestar [PlayerID/Nombre] [Asiento 1 ó 2]");
	if(params[1] < 1 || params[1] > 2) return SendClientMessagef(playerid, -1, "Error: /arrestar [PlayerID/Nombre] [Asiento 1 ó 2]");
	params[1] ++;
	
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessagef(playerid, -1, "Para arrestar tienes que estar dentro de un vehículo policíal.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendClientMessagef(playerid, -1, "Para arrestar tienes que estar dentro de un vehículo policíal.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendClientMessagef(playerid, -1, "Para arrestar tienes que estar dentro de un vehículo policíal.");
	if( (params[1] + 1) > VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS]) return SendClientMessagef(playerid, -1, "Este vehículo es de %d pasajeros, así que no puedes llevar arrestados en él.", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS]);
	
	if(!IsPlayerConnected(params[0])) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
	if(PlayerTemp[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No puedes arrestar a este jugador ahora.");
	
	if(PI[params[0]][pi_WANTED_LEVEL] == 0) return SendClientMessagef(playerid, -1, "Esta persona no tiene nivel de búsqueda.");
	if(!PlayerTemp[params[0]][pt_CUFFED] && PI[params[0]][pi_STATE] != ROLEPLAY_STATE_CRACK) return SendClientMessagef(playerid, -1, "Para arrestar a esta persona tiene que estar esposada.");
	
	if(PI[params[0]][pi_STATE] == ROLEPLAY_STATE_ARRESTED)
	{
		TogglePlayerControllableEx(params[0], true);
		PlayerTemp[params[0]][pt_CUFFED] = false;
		PlayerTemp[params[0]][pt_CUFFING] = false;
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
		PI[params[0]][pi_STATE] = ROLEPLAY_STATE_NORMAL;
		
		SendClientMessagef(playerid, -1, "Has soltado a %s.", PlayerTemp[params[0]][pt_NAME]);
		return 1;
	}
	else
	{
		if(PI[params[0]][pi_STATE] == ROLEPLAY_STATE_CRACK) {
			DisablePlayerInjuredMark(params[0]);
			ApplyAnimation(params[0], "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
			ClearAnimations(params[0]);
		}

		PI[params[0]][pi_STATE] = ROLEPLAY_STATE_ARRESTED;
		TogglePlayerControllableEx(params[0], false);
		PutPlayerInVehicleEx(params[0], vehicleid, params[1]);
	}
	return 1;
}


CMD:callsing(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 11) return SendClientMessagef(playerid, -1, "Debes ser al menos rango %s para asignar callsing.", POLICE_RANKS[11]);
	
	if(isnull(params)) return SendClientMessagef(playerid, -1, "Error: /callsing [Texto]");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessagef(playerid, -1, "Para asignar callsing tienes que estar dentro de un vehículo policíal.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendClientMessagef(playerid, -1, "Para asignar callsing tienes que estar dentro de un vehículo policíal.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendClientMessagef(playerid, -1, "Para asignar callsing tienes que estar dentro de un vehículo policíal.");
	
	if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = CreateDynamic3DTextLabel(params, 0xCCCCCCCC, -0.7, -1.9, -0.3, 20.0, .attachedvehicle = vehicleid);
	return 1;
}

CMD:m(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessagef(playerid, -1, "Para usar el megáfono tienes que estar dentro de un vehículo oficial.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendClientMessagef(playerid, -1, "Para usar el megáfono tienes que estar dentro de un vehículo oficial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendClientMessagef(playerid, -1, "Para usar el megáfono tienes que estar dentro de un vehículo oficial.");

	if(isnull(params)) return SendClientMessagef(playerid, -1, "Error: /m [Mensaje]");

	new str_text[190];
	format(str_text, 190, "(Megáfono) %s: {FFFFFF}%s", pTemp(playerid)[pt_NAME], params);
	ProxDetector(playerid, 40.0, str_text, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 85);
	return 1;
}

PutPlayerInVehicleEx(playerid, vehicleid, seat)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY] = gettime() + 5;
	PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
	return PutPlayerInVehicle(playerid, vehicleid, seat);
}

CMD:equiparse(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(!IsPlayerWorking(playerid, WORK_POLICE)) return SendMessage(playerid, "No estas de servicio como policía.");
	
	if((IsPlayerInRangeOfPoint(playerid, 2.0, 219.244018, 69.982215, 1005.039062) || IsPlayerInRangeOfPoint(playerid, 2.0, 262.945587, 109.785270, 1004.617187) || IsPlayerInRangeOfPoint(playerid, 2.0, 222.683914, 186.956054, 1003.031250)) && PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
	{
		ShowDialog(playerid, DIALOG_POLICE_EQUIPTMENT);
	}
	else SendMessage(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:entregar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	
	if(sscanf(params, "u", params[0])) return SendClientMessagef(playerid, -1, "Error: /entregar [PlayerID/Nombre]");
	
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessagef(playerid, -1, "Para entregar tienes que estar dentro de un vehículo oficial.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendClientMessagef(playerid, -1, "Para entregar tienes que estar dentro de un vehículo oficial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendClientMessagef(playerid, -1, "Para entregar tienes que estar dentro de un vehículo oficial.");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
	if(PlayerTemp[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No puedes arrestar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_PASSENGER) return SendClientMessagef(playerid, -1, "Para entregar a esta persona tiene que estar dentro del vehículo policíal.");
	if(GetPlayerVehicleID(params[0]) != vehicleid) return SendClientMessagef(playerid, -1, "Para entregar a esta persona tiene que estar dentro del vehículo policíal.");
	if(PI[params[0]][pi_WANTED_LEVEL] == 0) return SendClientMessagef(playerid, -1, "Esta persona no tiene nivel de búsqueda.");
	
	if(IsPlayerInRangeOfPoint(playerid, 20.0, 1564.971923, -1694.916381, 5.617697) || IsPlayerInRangeOfPoint(playerid, 20.0, 6808.6948, 5335.9800 ,14.9625))
	{
		SendClientMessagef(playerid, -1, "La persona ahora está en la cárcel.");
		PI[params[0]][pi_POLICE_JAIL_ID] = 0;
		JailPlayer(params[0]);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, -1589.333496, 716.759521, -5.515106) || IsPlayerInRangeOfPoint(playerid, 20.0, 6005.6670, 4917.3179, 23.0543))
	{
		SendClientMessagef(playerid, -1, "La persona ahora está en la cárcel.");
		PI[params[0]][pi_POLICE_JAIL_ID] = 1;
		JailPlayer(params[0]);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, 2282.200439, 2431.598632, 3.000518) || IsPlayerInRangeOfPoint(playerid, 20.0, 4405.0625, 5969.0493, 59.0018))
	{
		SendClientMessagef(playerid, -1, "La persona ahora está en la cárcel.");
		PI[params[0]][pi_POLICE_JAIL_ID] = 2;
		JailPlayer(params[0]);
	}
	else SendMessage(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:policias(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	
	pTemp(playerid)[pt_DIALOG_DB_LIMIT] = 10;
	pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_POLICE_LIST);
	return 1;
}

CMD:resistirse(playerid, params[])
{
	if(pTemp(playerid)[pt_CUFFING])
	{
		KillTimer(pTemp(playerid)[pt_TIMERS][14]);
		pTemp(playerid)[pt_CUFFING] = false;
		TogglePlayerControllableEx(playerid, true);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		Auto_SendPlayerAction(playerid, "se resiste.");
	}
	return 1;
}

forward CuffPlayer(playerid);
public CuffPlayer(playerid)
{
	StopAudioStreamForPlayer(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	CancelEdit(playerid);
	HidePlayerDialog(playerid);
	CallLocalFunction("EndPlayerJob", "iib", playerid, pTemp(playerid)[pt_WORKING_IN], true);
	pTemp(playerid)[pt_HUNGRY_MESSAGE] = false;
	pTemp(playerid)[pt_THIRST_MESSAGE] = false;
	pTemp(playerid)[pt_PLAYER_IN_ATM] = false;
	pTemp(playerid)[pt_CUFFED] = false;
	pTemp(playerid)[pt_CUFFING] = false;
	pTemp(playerid)[pt_PLAYER_WAITING_MP3_HTTP] = false;
	if(pTemp(playerid)[pt_WANT_TAXI])
	{
		pTemp(playerid)[pt_WANT_TAXI] = false;
		DisablePlayerTaxiMark(playerid);
	}
	if(pTemp(playerid)[pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
	if(pTemp(playerid)[pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	if(PI[playerid][pi_WANTED_LEVEL] > 0) DisablePlayerPoliceMark(playerid);
	
	pTemp(playerid)[pt_CUFFED] = true;
	pTemp(playerid)[pt_CUFFING] = false;
	TogglePlayerControllableEx(playerid, true);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	return 1;
}

CMD:frecuencias(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	
	ShowDialog(playerid, DIALOG_POLICE_RADIOS);
	return 1;
}

SendMechanicRadioMessage(color, const message[], sender = INVALID_PLAYER_ID)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i) && PlayerTemp[i][pt_USER_LOGGED])
		{
			if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][WORK_MECHANIC][pwork_SET])
				{
					if(PlayerTemp[i][pt_WORKING_IN] == WORK_MECHANIC)
					{
						if(sender == i) continue; 
						SendClientMessage(i, color, message);
					}
				}
			}
		}
	}
	return 1;
}

SendPoliceRadioMessage(radio, color, const message[], sender = INVALID_PLAYER_ID)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i) && PlayerTemp[i][pt_USER_LOGGED])
		{
			if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][WORK_POLICE][pwork_SET])
				{
					if(PlayerTemp[i][pt_WORKING_IN] == WORK_POLICE)
					{
						if(sender == i) continue; 

						if(radio == -1) SendClientMessage(i, color, message);
						else
						{
							if(PlayerTemp[i][pt_POLICE_RADIO] == radio)
							{
								SendClientMessage(i, color, message);
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

CountPoliceRadioPlayers(radio)
{
	new total;
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][WORK_POLICE][pwork_SET])
				{
					if(PlayerTemp[i][pt_WORKING_IN] == WORK_POLICE)
					{
						if(PlayerTemp[i][pt_POLICE_RADIO] == radio)
						{
							total ++;
						}
					}
				}
			}
		}
	}
	return total;
}

GetPlayerZones(playerid, city[], zone[])
{
	new Float:f_Pos[3];
	
	switch(PI[playerid][pi_STATE])
	{
		case ROLEPLAY_STATE_INTERIOR:
		{
			f_Pos[0] = ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_EXT_X];
			f_Pos[1] = ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_EXT_Y];
			f_Pos[2] = ENTER_EXIT[ pTemp(playerid)[pt_INTERIOR_INDEX] ][ee_EXT_Z];
		}
		case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
		{
			f_Pos[0] = PROPERTY_INFO[ pTemp(playerid)[pt_PROPERTY_INDEX] ][property_EXT_X];
			f_Pos[1] = PROPERTY_INFO[ pTemp(playerid)[pt_PROPERTY_INDEX] ][property_EXT_Y];
			f_Pos[2] = PROPERTY_INFO[ pTemp(playerid)[pt_PROPERTY_INDEX] ][property_EXT_Z];
		}
		case ROLEPLAY_STATE_OWN_GARAGE, ROLEPLAY_STATE_GUEST_GARAGE:
		{
			new Float:x, Float:y, Float:z;
			GetGarageExtPosX(pTemp(playerid)[pt_PROPERTY_INDEX], x);
			GetGarageExtPosY(pTemp(playerid)[pt_PROPERTY_INDEX], y);
			GetGarageExtPosZ(pTemp(playerid)[pt_PROPERTY_INDEX], y);

			f_Pos[0] = x;
			f_Pos[1] = y;
			f_Pos[2] = z;
		}
		default: GetPlayerPos(playerid, f_Pos[0], f_Pos[1], f_Pos[2]);
	}

    format(city, 45, "San Andreas");
    format(zone, 45, "Desconocida");

	for(new i = 0; i < sizeof(g_Cities); i++)
	{
	    if(	(f_Pos[0] >= g_Cities[i][z_MinX] && f_Pos[0] < g_Cities[i][z_MaxX]) && (f_Pos[1] >= g_Cities[i][z_MinY] && f_Pos[1] < g_Cities[i][z_MaxY]) )
		{
			format(city, 45, g_Cities[i][z_Name]);
		    break;
		}
	}

	for(new i = 0; i < sizeof(g_Zones); i++)
	{
	    if(	(f_Pos[0] >= g_Zones[i][z_MinX] && f_Pos[0] < g_Zones[i][z_MaxX]) && (f_Pos[1] >= g_Zones[i][z_MinY] && f_Pos[1] < g_Zones[i][z_MaxY]) )
		{
			format(zone, 45, g_Zones[i][z_Name]);
		    break;
		}
	}
	
	return 1;
}

SetPlayerWantedLevelEx(playerid, level)
{
	PI[playerid][pi_WANTED_LEVEL] = level;
	SetPlayerWantedLevel(playerid, level);

	if(PI[playerid][pi_WANTED_LEVEL] == 0) DisablePlayerPoliceMark(playerid);
	else
	{
		pTemp(playerid)[pt_LAST_SET_WANTED_LEVEL] = gettime();
		SetWantedMarkerToFactions(playerid);
	}
	return 1;
}

GetPointZone(Float:f_Pos_X, Float:f_Pos_Y, city[], zone[])
{
	format(city, 45, "San Andreas");
    format(zone, 45, "Desconocida");

	for(new i = 0; i < sizeof(g_Cities); i++)
	{
	    if(	(f_Pos_X >= g_Cities[i][z_MinX] && f_Pos_X < g_Cities[i][z_MaxX]) && (f_Pos_Y >= g_Cities[i][z_MinY] && f_Pos_Y < g_Cities[i][z_MaxY]) )
		{
			format(city, 45, g_Cities[i][z_Name]);
		    break;
		}
	}
	
	for(new i = 0; i < sizeof(g_Zones); i++)
	{
	    if(	(f_Pos_X >= g_Zones[i][z_MinX] && f_Pos_X < g_Zones[i][z_MaxX]) && (f_Pos_Y >= g_Zones[i][z_MinY] && f_Pos_Y < g_Zones[i][z_MaxY]) )
		{
			format(zone, 45, g_Zones[i][z_Name]);
		    break;
		}
	}

	return 1;
}

JailPlayer(playerid, time = 0)
{
	PI[playerid][pi_STATE] = ROLEPLAY_STATE_JAIL;

	if(time)
		PI[playerid][pi_POLICE_JAIL_TIME] = time;
	else
	{	
		if(PI[playerid][pi_VIP]) PI[playerid][pi_POLICE_JAIL_TIME] = 150 * PI[playerid][pi_WANTED_LEVEL];
		else PI[playerid][pi_POLICE_JAIL_TIME] = 300 * PI[playerid][pi_WANTED_LEVEL];
	}

	SetPlayerWantedLevelEx(playerid, 0);
	pTemp(playerid)[pt_ENTER_JAIL_TIME] = gettime();
	SetPlayerPosEx(playerid, JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);
	
	KillTimer(pTemp(playerid)[pt_TIMERS][15]);
	pTemp(playerid)[pt_TIMERS][15] = SetTimerEx("UnjailPlayer", PI[playerid][pi_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
	
	SendClientMessagef(playerid, -1, "Te quedan %s minutos de condena.", TimeConvert( PI[playerid][pi_POLICE_JAIL_TIME] - (gettime() - pTemp(playerid)[pt_ENTER_JAIL_TIME]) ));
	ResetPlayerWeaponsEx(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	DisablePlayerPoliceMark(playerid);
	DeleteIlegalInv(playerid);
	return 1;
}

forward UnjailPlayer(playerid);
public UnjailPlayer(playerid)
{
	KillTimer(pTemp(playerid)[pt_TIMERS][15]);
	PI[playerid][pi_POLICE_JAIL_TIME] = 0;
	SetPlayerWantedLevelEx(playerid, 0);
	PI[playerid][pi_STATE] = ROLEPLAY_STATE_INTERIOR;
	SetWeaponsForPlayer(playerid);
	SetPlayerArmedWeapon(playerid, 0);
	
	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		if(ENTER_EXIT[i][ee_INTERIOR_TYPE] == JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_INT])
		{
			PI[playerid][pi_LOCAL_INTERIOR] = ENTER_EXIT[i][ee_ID];
			pTemp(playerid)[pt_PROPERTY_INDEX] = -1;
			SetPlayerPosEx(playerid, ENTER_EXIT[i][ee_INT_X], ENTER_EXIT[i][ee_INT_Y], ENTER_EXIT[i][ee_INT_Z], ENTER_EXIT[i][ee_INT_ANGLE] + 180.0, ENTER_EXIT[i][ee_INT_INTERIOR], ENTER_EXIT[i][ee_INT_WORLD], true);
			StopAudioStreamForPlayer(playerid);
			break;
		}
	}
	
	SendClientMessagef(playerid, -1, "Has cumplido tu condena.");
	return 1;
}

DisablePlayerPoliceMark(playerid)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_POLICE][pwork_SET]) continue;
				if(PlayerTemp[i][pt_WORKING_IN] != WORK_POLICE) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

Crew_RequestHelp(playerid, crew_id)
{
	new
		city[45],
		zone[45],
		crew_message[128];

	GetPlayerZones(playerid, city, zone);

	if(!pTemp(playerid)[pt_CREW_HELP])
	{
		LoopEx(i, MAX_PLAYERS, 0)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(i == playerid) continue;
					if(PI[i][pi_CREW] != crew_id) continue;
					
					SetPlayerMarkerForPlayer(i, playerid, 0xDD4C4FFF);
				}
			}
		}
		format(crew_message, sizeof crew_message, "{%06x}[Banda] {FFFFFF}%s está pidiendo refuerzos en {%06x}%s, %s.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME],  CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, city, zone);
		SendMessageToCrewMembers(crew_id, -1, crew_message);

		pTemp(playerid)[pt_CREW_HELP] = true;

		Auto_SendPlayerAction(playerid, "enciende su localizador.");
	}
	else
	{
		LoopEx(i, MAX_PLAYERS, 0)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(i == playerid) continue;
					if(PI[i][pi_CREW] != crew_id) continue;
					
					SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
				}
			}
		}
		format(crew_message, sizeof crew_message, "{%06x}[Banda] {FFFFFF}%s ya no necesita refuerzos.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, pTemp(playerid)[pt_NAME]);
		SendMessageToCrewMembers(crew_id, -1, crew_message);

		pTemp(playerid)[pt_CREW_HELP] = false;

		Auto_SendPlayerAction(playerid, "apaga su localizador.");
	}
	return 1;
}

Police_RequestHelp(playerid)
{
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendMessage(playerid, "No estas de servicio como policia.");

	new
		city[45],
		zone[45],
		message[445];

	GetPlayerZones(playerid, city, zone);

	if(!pTemp(playerid)[pt_POLICE_HELP])
	{
		LoopEx(i, MAX_PLAYERS, 0)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(i == playerid) continue;
					if(!PLAYER_WORKS[i][WORK_POLICE][pwork_SET]) continue;
					if(PlayerTemp[i][pt_WORKING_IN] != WORK_POLICE) continue;
					
					SetPlayerMarkerForPlayer(i, playerid, POLICE_COLOR2);
				}
			}
		}
		format(message, sizeof message, "{"#POLICE_COLOR"}[Central policía] {FFFFFF}el %s %s está pidiendo refuerzos en {"#POLICE_COLOR"}%s, %s.", POLICE_RANKS[ GetPlayerWorkLevel(playerid, WORK_POLICE) ], pTemp(playerid)[pt_NAME], city, zone);
		SendPoliceRadioMessage(-1, -1, message);

		pTemp(playerid)[pt_POLICE_HELP] = true;

		Auto_SendPlayerAction(playerid, "enciende su localizador.");
	}
	else
	{
		LoopEx(i, MAX_PLAYERS, 0)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(i == playerid) continue;
					if(!PLAYER_WORKS[i][WORK_POLICE][pwork_SET]) continue;
					if(PlayerTemp[i][pt_WORKING_IN] != WORK_POLICE) continue;
					
					SetPlayerMarkerForPlayer(i, playerid, POLICE_PLAYER_COLOR);
				}
			}
		}
		format(message, sizeof message, "{"#POLICE_COLOR"}[Central policía] {FFFFFF}%s ya no necesita refuerzos.", pTemp(playerid)[pt_NAME]);
		SendPoliceRadioMessage(-1, -1, message);

		pTemp(playerid)[pt_POLICE_HELP] = false;

		Auto_SendPlayerAction(playerid, "apaga su localizador.");
	}
	return 1;
}

ptask UpdatePlayerNameColour[5000](playerid)
{
	if(pTemp(playerid)[pt_USER_LOGGED])
	{
		if(GetPlayerWork(playerid, WORK_POLICE))
		{
			if(IsPlayerWorking(playerid, WORK_POLICE))
			{
				LoopEx(i, MAX_PLAYERS, 0)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
						{
							if(i == playerid) continue;
							if(!PLAYER_WORKS[i][WORK_POLICE][pwork_SET]) continue;
							if(PlayerTemp[i][pt_WORKING_IN] != WORK_POLICE) continue;
							
							if(pTemp(playerid)[pt_POLICE_HELP]) SetPlayerMarkerForPlayer(i, playerid, POLICE_COLOR2);
							else SetPlayerMarkerForPlayer(i, playerid, POLICE_PLAYER_COLOR);
						}
					}
				}
			}
		}

		if(PI[playerid][pi_WANTED_LEVEL]) SetWantedMarkerToFactions(playerid);
	}
}

SetWantedMarkerToFactions(playerid)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_POLICE][pwork_SET]) continue;
				if(PlayerTemp[i][pt_WORKING_IN] != WORK_POLICE) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, PlayerWantedColor(playerid));
			}
		}
	}
	return 1;
}

ShowPlayerStats(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(PI[pid][pi_ID] == 0) return 0;
	
	new Float:hours;
	ConvertTime_SecondsToHoursFloat(PI[pid][pi_TIME_PLAYING], hours);

	new next_rep[24], neccessary_rep = PI[pid][pi_LEVEL] * REP_MULTIPLIER;
	if(PI[pid][pi_REP] < neccessary_rep)
	{
		new time = (PI[pid][pi_TIME_FOR_REP] - (gettime() * 1000 - PlayerTemp[pid][pt_TIME_PASSED_LAST_REP])) / 1000;
		if(time < 3) time = 3;
		
		format(next_rep, sizeof next_rep, "%sm", TimeConvert(time));
	}
	else format(next_rep, sizeof next_rep, "Sube de Nivel para Continuar");
	
	new caption[48], dialog[445 + (27 * sizeof(work_info))];
	format(caption, sizeof caption, "Estadísticas de %s", PlayerTemp[pid][pt_NAME]);
	
	format(dialog, sizeof dialog,
		
		"\
			{ffffff}ID: %d\n\
			Nombre: %s\n\
			Fecha registro: %s\n\
			Últ. conexión: %s\n\
			Tiempo jugando: %.1f horas\n\
			Nivel: %d\n\
			Reputación: %d/%d\n\
			Siguiente reputación: %s\n\
			Trabajo(s): %s\n\
			Banda: %s{ffffff}\n\
			Dinero: %s$\n\
			Dinero en banco: %s$\n\
			"SERVER_COIN": %d\n\
			VIP: %s\n\
		",
			
			PI[pid][pi_ID],
			PI[pid][pi_NAME],
			PI[pid][pi_REG_DATE],
			PI[pid][pi_LAST_CONNECTION],
			hours,
			PI[pid][pi_LEVEL],
			PI[pid][pi_REP], neccessary_rep,
			next_rep,
			getPlayerWorks(pid),
			getPlayerCrew(pid),
			number_format_thousand(PI[pid][pi_CASH]),
			number_format_thousand(PI[pid][pi_BANK_MONEY]),
			PI[pid][pi_COINS],
			getPlayerVip(pid)
			
	);
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");	
	return 1;
}

getPlayerCrew(playerid)
{
	new crew[32];
	if(!PI[playerid][pi_CREW]) crew = "ninguna";
	else format(crew, sizeof crew, "%s", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_NAME]);
	return crew;
}

getPlayerVip(playerid)
{
	new vip[16];
	if(!PI[playerid][pi_VIP]) vip = "No";
	else format(vip, sizeof vip, "Sí, VIP (%d)", PI[playerid][pi_VIP]);
	return vip;
}

AddPlayerBadHistory(account_id, by_account_id, type, const text[])
{
	new date[24];
	getDateTime(date);
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bad_history (id_player, type, `by`, `text`, `date`) VALUES (%d, %d, %d, '%e', '%e');", account_id, type, by_account_id, text, date);
	mysql_tquery(handle_db, QUERY_BUFFER);
	return 1;
}

AddPlayerJail(account_id, autor_id, time, reason[])
{
	new reason_fix[32], player_autorid = GetPlayerIdFromAccountId(autor_id);
	format(reason_fix, 32, "%s", reason);

	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, 
	"INSERT INTO jails (id_player, autor_id, autor_name, time, reason) VALUES (%d, %d, '%e', %d, '%e');", 
	account_id, autor_id, PI[player_autorid][pi_NAME], time, reason_fix);
	mysql_tquery(handle_db, QUERY_BUFFER);

	return 1;
}

AddPlayerBan(account_id, const account_name[], const account_ip[], by_account_id, type, const text[], days = 0)
{
	new date[24], account_name_fix[24], account_ip_fix[24];
	getDateTime(date);
	format(account_name_fix, 24, "%s", account_name);
	format(account_ip_fix, 16, "%s", account_ip);

	if(!days)
	{
		inline OnBadHistoryInserted1()
		{
			new id = cache_insert_id();
			if(id)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bans (name, ip, id_history) VALUES ('%e', '%e', %d);", account_name_fix, account_ip_fix, id);
				mysql_tquery(handle_db, QUERY_BUFFER);
			}
		}
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bad_history (id_player, type, `by`, `text`, `date`) VALUES (%d, %d, %d, '%e', '%e');", account_id, type, by_account_id, text, date);
		mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnBadHistoryInserted1);
	}
	else
	{
		inline OnBadHistoryInserted2()
		{
			new id = cache_insert_id();
			if(id)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bans (name, ip, id_history, expire_date) VALUES ('%e', '%e', %d, DATE_ADD(NOW(), INTERVAL %d DAY));", account_name_fix, account_ip_fix, id, days);
				mysql_tquery(handle_db, QUERY_BUFFER);
			}
		}
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bad_history (id_player, type, `by`, `text`, `date`) VALUES (%d, %d, %d, '%e', '%e');", account_id, type, by_account_id, text, date);
		mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnBadHistoryInserted2);
	}
	return 1;
}

// Comandos admins
CMD:reportar(playerid, params[])
{
	if(gettime() < pTemp(playerid)[pt_ANTIFLOOD_REPORT] + 5) return SendClientMessagef(playerid, -1, "Cálmate.");
	pTemp(playerid)[pt_ANTIFLOOD_REPORT] = gettime();
	
	new reason[128];
	if(sscanf(params, "us[128]", params[0], reason)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/reportar [PlayerID/Nombre] [Razón]");
    if(!IsPlayerConnected(params[0])) return SendClientMessagef(playerid, -1, "Jugador desconectado.");
	
	SendClientMessagef(playerid, -1, "Tu reporte ha sido enviado a los administradores en línea.");
	
	new str[145]; format(str, 145, "{"#RED_COLOR"}[REPORTE] {FFFFFF}%s (%d) > %s (%d): %s", PI[playerid][pi_NAME], playerid, PI[params[0]][pi_NAME], params[0], reason);
	SendMessageToAdmins(-1, str);
	return 1;
}

CMD:r(playerid, params[])
{
	new message[128];
	if(sscanf(params, "s[128]", message)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/r [MENSAJE]");
	
	if(pTemp(playerid)[pt_ADMIN_PM_PID] == INVALID_PLAYER_ID || !pTemp(playerid)[pt_ADMIN_PM_AID]) return SendClientMessagef(playerid, -1, "Nada para responder.");
	if(PI[ pTemp(playerid)[pt_ADMIN_PM_PID] ][pi_ID] != pTemp(playerid)[pt_ADMIN_PM_AID])
	{
		pTemp(playerid)[pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
		pTemp(playerid)[pt_ADMIN_PM_AID] = 0;
		pTemp(playerid)[pt_ADMIN_PM_TIME] = 0;
		SendClientMessagef(playerid, -1, "El administrador que te envió el mensaje está desconectado.");
		return 1;
	}
	if(gettime() > pTemp(playerid)[pt_ADMIN_PM_TIME] + 60)
	{
		pTemp(playerid)[pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
		pTemp(playerid)[pt_ADMIN_PM_AID] = 0;
		pTemp(playerid)[pt_ADMIN_PM_TIME] = 0;
		SendClientMessagef(playerid, -1, "Has tardado demasiado en responser.");
		return 1;
	}
	
	SendClientMessagef(pTemp(playerid)[pt_ADMIN_PM_PID], -1, "Respuesta de %s (%d): %s", PI[playerid][pi_NAME], playerid, message);
	SendClientMessagef(playerid, -1, "Tu mensaje ha sido enviado al administrador.");
	pTemp(playerid)[pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
	pTemp(playerid)[pt_ADMIN_PM_AID] = 0;
	pTemp(playerid)[pt_ADMIN_PM_TIME] = 0;
	return 1;
}

CMD:id(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/id [PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendClientMessagef(playerid, -1, "Jugador desconectado.");
	
	SendClientMessagef(playerid, -1, "Nombre: '%s'DB-ID: '%d'Playerid: '%d'Nivel: %dPing: %d", PI[to_player][pi_NAME], PI[to_player][pi_ID], to_player, PI[to_player][pi_LEVEL], GetPlayerPing(to_player));
	return 1;
}

CMD:admins(playerid, params[])
{
	pTemp(playerid)[pt_DIALOG_DB_LIMIT] = 10;
	pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_ADMIN_LIST);
	return 1;
}

CMD:trabajos(playerid, params[])
{
	ShowDialog(playerid, DIALOG_WORKS_TELEPORTS);
	SendCmdLogToAdmins(playerid, "trabajos", params);
	return 1;
}

CMD:getid(playerid, params[])
{
	new findname[24];
	if(sscanf(params, "s[24]", findname)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/getid <nombre o parte del nombre>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new id, name[24], connected, pid;
				reg_int(i, "id", id);
				reg_name(i, "name", name);
				reg_int(i, "connected", connected);
				reg_int(i, "playerid", pid);
				SendClientMessagef(playerid, -1, "Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", name, id, connected, pid);
			}
			SendClientMessagef(playerid, -1, "Se encontraron %d coincidencias, el límite es 20.", rows);
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, connected, playerid FROM player WHERE name LIKE '%%%e%%' LIMIT 20;", findname);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);

	SendCmdLogToAdmins(playerid, "getid", params);
	return 1;
}

CMD:getname(playerid, params[])
{
	new db_id;
	if(sscanf(params, "d", db_id)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/getname <DB-ID>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new id, name[24], connected, pid;
				reg_int(i, "id", id);
				reg_name(i, "name", name);
				reg_int(i, "connected", connected);
				reg_int(i, "playerid", pid);
				SendClientMessagef(playerid, -1, "Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", name, id, connected, pid);
			}
			SendClientMessagef(playerid, -1, "Se encontraron %d coincidencias, el límite es 20.", rows);
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, connected, playerid FROM player WHERE id = %d LIMIT 20;", db_id);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	SendCmdLogToAdmins(playerid, "getname", params);
	return 1;
}

CMD:aka(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/aka <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessagef(playerid, -1, "Jugador desconectado.");
	if(isnull(PI[to_player][pi_IP])) return SendClientMessagef(playerid, -1, "IP no válida.");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			SendClientMessagef(playerid, -1, "AKA de %s (%d):", PI[to_player][pi_NAME], to_player);
			for(new i = 0; i != rows; i ++)
			{
				new id, name[24];
				reg_int(i, "id", id);
				reg_name(i, "name", name);
				SendClientMessagef(playerid, -1, "Nombre: {f4f442}'%s' {FFFFFF}DB-ID: '%d'", name, id);
			}
			SendClientMessagef(playerid, -1, "Se encontraron %d coincidencias, el límite es 20.", rows);
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name FROM player WHERE ip = '%e' LIMIT 20;", PI[to_player][pi_IP]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	SendCmdLogToAdmins(playerid, "aka", params);
	return 1;
}
alias:aka("cuentas", "multicuentas");

CMD:adv(playerid, params[])
{
	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/adv <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	AddPlayerBadHistory(PI[to_player][pi_ID], PI[playerid][pi_ID], TYPE_WARNING, reason);
	
	new dialog[170];
	format(dialog, sizeof dialog, "Has recibido una advertencia, razón:\n%s\n", reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	
	SendClientMessagef(playerid, -1, "Jugador (nick: '%s' dbid: '%d', pid: '%d') advertido.", PI[to_player][pi_NAME], PI[to_player][pi_ID], to_player);
	
	new str[145]; format(str, 145, "{"#RED_COLOR"}el %s %s (%d) le ha dado una advertencia a %s (%d).", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ], PI[playerid][pi_NAME], playerid, PI[to_player][pi_NAME], to_player);
	SendAdminAd(-1, str);
	SendCmdLogToAdmins(playerid, "adv", params);
	return 1;
}
alias:adv("advertencia", "san");

CMD:kick(playerid, params[])
{
	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/kick <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(PlayerTemp[to_player][pt_KICKED]) return SendClientMessagef(playerid, -1, "El jugador ya está expulsado.");
	if(!PI[to_player][pi_ID]) return Kick(to_player);
	
	
	AddPlayerBadHistory(PI[to_player][pi_ID], PI[playerid][pi_ID], TYPE_KICK, reason);
	
	new dialog[170];
	format(dialog, sizeof dialog, "Has sido expulsado, razón:\n%s\n", reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);
	
	SendClientMessagef(playerid, -1, "Jugador (nick: '%s' dbid: '%d', pid: '%d') expulsado.", PI[to_player][pi_NAME], PI[to_player][pi_ID], to_player);
	
	
	new str[145]; format(str, 145, "{"#RED_COLOR"}el %s %s (%d) ha expulsado a %s (%d).", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ], PI[playerid][pi_NAME], playerid, PI[to_player][pi_NAME], to_player);
	SendAdminAd(-1, str);

	SendCmdLogToAdmins(playerid, "kick", params);
	return 1;
}

CMD:spec(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/spec <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");

	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
		new Float:p[4];
		GetPlayerPos(playerid, p[0], p[1], p[2]);
		GetPlayerFacingAngle(playerid, p[3]);
		SetSpawnInfo(playerid, NO_TEAM, GetPlayerSkin(playerid), p[0], p[1], p[2], p[3], 0, 0, 0, 0, 0, 0);
		PI[playerid][pi_INTERIOR] = GetPlayerInterior(playerid);
		pTemp(playerid)[pt_VIRTUAL_WORLD] = GetPlayerVirtualWorld(playerid);
	}
	
	TogglePlayerSpectatingEx(playerid, true);
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(to_player));
	SetPlayerInterior(playerid, GetPlayerInterior(to_player));
	if(IsPlayerInAnyVehicle(to_player)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(to_player));
	else PlayerSpectatePlayer(playerid, to_player);
	SendClientMessagef(playerid, -1, "Utiliza /specoff para terminar este modo.");
	
	SendCmdLogToAdmins(playerid, "spec", params);
	return 1;
}
alias:spec("specp", "spp");

CMD:specoff(playerid, params[])
{
	SetPlayerInterior(playerid, PI[playerid][pi_INTERIOR]);
	SetPlayerVirtualWorld(playerid, pTemp(playerid)[pt_VIRTUAL_WORLD]);
	TogglePlayerSpectatingEx(playerid, false);
	KillTimer(pTemp(playerid)[pt_TIMERS][3]);
	pTemp(playerid)[pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	
	SendCmdLogToAdmins(playerid, "specoff", params);
	return 1;
}
alias:specoff("listo");

CMD:freeze(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/freeze <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	
	SendClientMessagef(playerid, -1, "Jugador '%s' (%d) congelado.", PI[to_player][pi_NAME], to_player);
	TogglePlayerControllableEx(to_player, false);

	SendCmdLogToAdmins(playerid, "freeze", params);
	return 1;
}
alias:freeze("congelar");

CMD:unfreeze(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/unfreeze <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	
	SendClientMessagef(playerid, -1, "Jugador '%s' (%d) descongelado.", PI[to_player][pi_NAME], to_player);
	TogglePlayerControllableEx(to_player, true);

	SendCmdLogToAdmins(playerid, "unfreeze", params);
	return 1;
}
alias:unfreeze("descongelar");

CMD:pest(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/pest <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	ShowPlayerStats(playerid, to_player);
	SendCmdLogToAdmins(playerid, "pest", params);
	return 1;
}

CMD:pinv(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/pinv <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	ShowPlayerInventory(playerid, to_player);
	SendCmdLogToAdmins(playerid, "pinv", params);
	return 1;
}

CMD:pexp(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/pexp <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	ShowPlayerSkills(playerid, to_player);
	SendCmdLogToAdmins(playerid, "pexp", params);
	return 1;
}

CMD:parmas(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/parmas <player_id>");
	
	new dialog[95 * 15], line_str[95];
	format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Arma\t{"#BLUE_COLOR"}Munición\t{"#SILVER_COLOR"}Slot\n");
	
	for(new i = 0; i < sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(!PLAYER_WEAPONS[to_player][i][player_weapon_VALID]) continue;
		
		format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[to_player][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[to_player][i][player_weapon_AMMO]), i);
		strcat(dialog, line_str);
	}

	format(line_str, sizeof line_str, "Armas de %s", pTemp(playerid)[pt_NAME]);
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, line_str, dialog, "Continuar", "Cerrar");
	SendCmdLogToAdmins(playerid, "parmas", params);	
	return 1;
}

CMD:pbank(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/pbank <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(!PI[to_player][pi_BANK_ACCOUNT]) SendClientMessagef(playerid, -1, "El jugador no tiene cuenta bancaria.");
	else SendClientMessagef(playerid, -1, "Cuenta bancaria ID: '%d' Balance: '%s'", PI[to_player][pi_BANK_ACCOUNT], number_format_thousand(PI[to_player][pi_BANK_MONEY]));
	SendCmdLogToAdmins(playerid, "pbank", params);
	return 1;
}

CMD:unjail(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/unjail <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(PI[to_player][pi_STATE] != ROLEPLAY_STATE_JAIL) return SendClientMessagef(playerid, -1, "El jugador no está en el cárcel.");
	
	UnjailPlayer(to_player);
	SendClientMessagef(playerid, -1, "El jugador %s (%d) ahora está en libertad.", PI[to_player][pi_NAME], to_player);
	
	SendCmdLogToAdmins(playerid, "unjail", params);
	return 1;
}

CMD:ip(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/ip <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");

	SendClientMessagef(playerid, -1, "IP %s (%d): %s", PI[to_player][pi_NAME], to_player, PI[to_player][pi_IP]);
	SendCmdLogToAdmins(playerid, "ip", params);
	return 1;
}

CMD:traerveh(playerid, params[])
{
	new to_car;
	if(sscanf(params, "i", to_car)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/traerveh <car_id>");
	if(to_car >= MAX_VEHICLES) return 1;

	if(!GLOBAL_VEHICLES[to_car][gb_vehicle_VALID]) return SendClientMessagef(playerid, -1, "Vehículo no válido.");
	if(GLOBAL_VEHICLES[to_car][gb_vehicle_OCCUPIED]) return SendClientMessagef(playerid, -1, "Vehículo está ocupado.");
	
	LinkVehicleToInteriorEx(to_car, GetPlayerInterior(playerid));
    SetVehicleVirtualWorldEx(to_car, GetPlayerVirtualWorld(playerid));

    new Float:gPos[3];
    GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);
    SetVehiclePosEx(to_car, gPos[0] + 2.0, gPos[1], gPos[2]);

	SendCmdLogToAdmins(playerid, "traerveh", params);
    return 1;
}
alias:traerveh("mover", "getveh", "traervehiculo", "traerauto", "getcar");

CMD:gotoveh(playerid, params[])
{
	new to_car;
	if(sscanf(params, "i", to_car)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/gotoveh <car_id>");
	if(to_car >= MAX_VEHICLES) return 1;

	if(!GLOBAL_VEHICLES[to_car][gb_vehicle_VALID]) return SendClientMessagef(playerid, -1, "Vehículo no válido.");
		
    new Float:gPos[3];
    GetVehiclePos(to_car, gPos[0], gPos[1], gPos[2]);
    SetPlayerPosEx(playerid, gPos[0], gPos[1], gPos[2], 0.0, GLOBAL_VEHICLES[to_car][gb_vehicle_INTERIOR], GLOBAL_VEHICLES[to_car][gb_vehicle_WORLD]);
    SavePlayerLastPos(playerid);

	SendCmdLogToAdmins(playerid, "gotoveh", params);
	return 1;
}
alias:gotoveh("irvehiculo", "gotocar", "iracarro");

CMD:duty(playerid)
{
	if(PI[playerid][pi_ADMIN_LEVEL] < CMD_ASSISTANT) return SendMessage(playerid, "No puedes usar este comando.");

	if(pTemp(playerid)[pt_ADMIN_SERVICE])
	{
		pTemp(playerid)[pt_ADMIN_SERVICE] = false;
		pTemp(playerid)[pt_GPS_TELEPORT] = false;
		SetPlayerNormalColor(playerid);
		
		if(IsValidDynamic3DTextLabel(pTemp(playerid)[pt_ADMIN_LABEL]))
		{
			DestroyDynamic3DTextLabel(pTemp(playerid)[pt_ADMIN_LABEL]);
			pTemp(playerid)[pt_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		for(new i = 0; i < 2; i++) TextDrawHideForPlayer(playerid, Textdraws[textdraw_STAFF_DUTY][i]);

		SendClientMessagef(playerid, -1, "Ahora no estás de servicio como %s.", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ]);
	
		new str[145]; format(str, 145, "%s (%d) ya no esta de servicio como %s", PI[playerid][pi_NAME], playerid, ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ]);
		if(PI[playerid][pi_ADMIN_LEVEL] != CMD_OWNER) SendMessageToAdmins(RED_COLOR2, str);	
	}	
	else
	{
		pTemp(playerid)[pt_ADMIN_SERVICE] = true;
		SetPlayerNormalColor(playerid);
		
		if(IsValidDynamic3DTextLabel(pTemp(playerid)[pt_ADMIN_LABEL]))
		{
			DestroyDynamic3DTextLabel(pTemp(playerid)[pt_ADMIN_LABEL]);
			pTemp(playerid)[pt_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		for(new i = 0; i < 2; i++) TextDrawShowForPlayer(playerid, Textdraws[textdraw_STAFF_DUTY][i]);
		
		new label_str[64];
		format(label_str, sizeof label_str, "{1E1E1E}[{"#RED_COLOR"}%s{1E1E1E}]", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ]);
		pTemp(playerid)[pt_ADMIN_LABEL] = CreateDynamic3DTextLabel(label_str, -1, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);

		SendClientMessagef(playerid, -1, "Ahora estás de servicio como %s.", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ]);
	
		new str[145]; format(str, 145, "%s (%d) ahora esta de servicio como %s", PI[playerid][pi_NAME], playerid, ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ]);
		if(PI[playerid][pi_ADMIN_LEVEL] != CMD_OWNER) SendMessageToAdmins(RED_COLOR2, str);	
	}
	return 1;
}

CMD:goto(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/goto <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");

	new Float:p[4];
	GetPlayerPos(to_player, p[0], p[1], p[2]);
	GetPlayerFacingAngle(to_player, p[3]);

	SavePlayerLastPos(playerid);
	SetPlayerPosEx(playerid, p[0], p[1], p[2], p[3], GetPlayerInterior(to_player), GetPlayerVirtualWorld(to_player), false, true);
	SetPlayerFacingAngle(playerid, p[3] + 180.0);

    SetPlayerCityWeather(playerid);
	
	SendCmdLogToAdmins(playerid, "goto", params);
	return 1;
}
alias:goto("ir");

CMD:get(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/get <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");

	new Float:p[4];
	GetPlayerPos(playerid, p[0], p[1], p[2]);
	GetPlayerFacingAngle(playerid, p[3]);
	
	SavePlayerLastPos(to_player);
	SetPlayerPosEx(to_player, p[0], p[1], p[2], p[3], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false, true);
	SetPlayerFacingAngle(to_player, p[3] + 180.0);

    SetPlayerCityWeather(to_player);

	SendCmdLogToAdmins(playerid, "get", params);
	return 1;
}
alias:get("traer");

CMD:back(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/back <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");

	SetPlayerLastPos(to_player);
	SendCmdLogToAdmins(playerid, "ultima", params);
	return 1;
}
alias:back("ultima");

CMD:slap(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/slap <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessagef(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");

	new Float:p[4];
	GetPlayerPos(to_player, p[0], p[1], p[2]);
	GetPlayerFacingAngle(to_player, p[3]);

	SetPlayerPosEx(to_player, p[0], p[1], p[2] + 3.0, p[3], GetPlayerInterior(to_player), GetPlayerVirtualWorld(to_player), false, true);
	
	SendCmdLogToAdmins(playerid, "slap", params);
	return 1;
}

CMD:unban(playerid, params[])
{
	new name[24];
	if(sscanf(params, "s[24]", name)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/unban <nombre completo o ip>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			if(rows)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM bans WHERE name = '%e' OR ip = '%e';", name, name);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				SendClientMessagef(playerid, -1, "'%s' ha sido desbaneado.", name);
				
				new str[145]; format(str, 145, "{"#RED_COLOR"}el %s %s (%d) ha desbaneado a '%s'.", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ], PI[playerid][pi_NAME], playerid, name);
				SendMessageToAdmins(-1, str);

				inline OnCountQueryLoad()
				{
					new crows;
					if(get_rows(crows))
					{
						if(crows)
						{
							new id_player;
							cache_get_value_index_int(0, 0, id_player);
							if(id_player) AddPlayerBadHistory(id_player, PI[playerid][pi_ID], TYPE_UNBAN, "/unban");
						}
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE name = '%e' OR ip = '%e';", name, name);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
			}
			else SendClientMessagef(playerid, -1, "'%s' no está en la lista de baneados.", name);
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM bans WHERE name = '%e' OR ip = '%e';", name, name);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);

	SendCmdLogToAdmins(playerid, "unban", params);
	return 1;
}

CMD:jail(playerid, params[])
{
    new to_player, reason[128], time;
    if(sscanf(params, "uds[128]", to_player, time, reason)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/jail <player_id> <minutos> <razón>");
	if(time < 0 || time > 1440) return SendClientMessagef(playerid, -1, "Intervalo de minutos incorrecto.");
    if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
    if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	if(to_player == playerid) return SendMessage(playerid, "~r~No seas pendejo, te estoy vigilando.");

	SavePlayerLastPos(to_player);
    StopAudioStreamForPlayer(to_player);
    CancelEdit(to_player);
    HidePlayerDialog(to_player);
	CallLocalFunction("EndPlayerJob", "iib", to_player, PlayerTemp[to_player][pt_WORKING_IN], true);
    PlayerTemp[to_player][pt_HUNGRY_MESSAGE] = false;
    PlayerTemp[to_player][pt_THIRST_MESSAGE] = false;
    PlayerTemp[to_player][pt_PLAYER_IN_ATM] = false;
    PlayerTemp[to_player][pt_CUFFED] = false;
    PlayerTemp[to_player][pt_CUFFING] = false;
    PlayerTemp[to_player][pt_PLAYER_WAITING_MP3_HTTP] = false;
    if(PlayerTemp[to_player][pt_WANT_TAXI])
    {
        PlayerTemp[to_player][pt_WANT_TAXI] = false;
        DisablePlayerTaxiMark(to_player);
    }
    if(PlayerTemp[to_player][pt_PLAYER_IN_CALL]) EndPhoneCall(to_player);
    if(PlayerTemp[to_player][pt_GPS_MAP]) HidePlayerGpsMap(to_player);

	PI[to_player][pi_POLICE_JAIL_ID] = 0;
    JailPlayer(to_player, time * 60);
    SendClientMessagef(to_player, -1, "{"#SILVER_COLOR"}Te quedan %s minutos de sanción, razón: %s.", TimeConvert(time * 60), reason);
    SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);

    new str[145]; format(str, 145, "{"#RED_COLOR"}el %s %s (%d) sancionó a %s (%d).", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ], PI[playerid][pi_NAME], playerid, PI[to_player][pi_NAME], to_player);
    SendAdminAd(-1, str);

	SendCmdLogToAdmins(playerid, "jail", params);
    return 1;
}

CMD:djail(playerid, params[])
{
	new reason[128], to_account, time;
	if(sscanf(params, "dds[128]", to_account, time, reason)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/djail <DB-ID> <tiempo> <razon>");
	if(time < 0 || time > 1440) return SendClientMessagef(playerid, -1, "Intervalo de minutos incorrecto.");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				reg_int(0, "id", id);
				reg_name(0, "ip", ip);
				reg_name(0, "name", name);
				reg_int(0, "connected", connected);
				reg_int(0, "playerid", pid);
				reg_int(0, "admin_level", admin_level);

				if(PI[playerid][pi_ADMIN_LEVEL] >= admin_level)
				{
					if(connected) SendClientMessagef(playerid, -1, "JUGADOR '%s' DB-ID '%d' conectado utilice /jail, su player_id: %d.", name, id, pid);
					else
					{
						inline OnCountQueryLoad()
						{
							new crows;
							if(get_rows(crows))
							{
								if(crows)
								{
									SendClientMessagef(playerid, -1, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya tiene una sancion en espera.", name, id);
								}
								else
								{
									AddPlayerJail(id, PI[playerid][pi_ID], time, reason);
									SendClientMessagef(playerid, -1, "Jugador (nick: '%s' db_id: '%d') sancíonado.", name, id);
									
									new str[145]; format(str, 145, "{"#RED_COLOR"}el %s %s (%d) ha sancíonado a %s (db_id: %d).", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ], PI[playerid][pi_NAME], playerid, name, id);
									SendMessageToAdmins(-1, str);
								}
							}
						}
						mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM jails WHERE id_player = %d;", id);
						mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
					}
				}
				else SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
			}
			else SendClientMessagef(playerid, -1, "No se encontro la DB-ID.");
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);

	SendCmdLogToAdmins(playerid, "djail", params);
	return 1;
}

CMD:say(playerid, params[])
{
	new 
		to_player, 
		command[128];

	if(sscanf(params, "us[128]", to_player, command)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/say <player_id> <comando>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");

	if(strfind(command, "/", true) == -1) CallLocalFunction("OnPlayerText", "is", to_player, command);
	else 
	{
		PlayerTemp[to_player][pt_ANTIFLOOD_TALK] = GetTickCount();
		PC_EmulateCommand(to_player, command);
	}

	SendCmdLogToAdmins(playerid, "say", params);
	return 1;
}

CMD:ban(playerid, params[])
{	
	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/ban <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	if(to_player == playerid) return SendMessage(playerid, "~r~No seas pendejo, te estoy vigilando.");

	if(PlayerTemp[to_player][pt_KICKED]) return SendClientMessagef(playerid, -1, "El jugador ya está expulsado.");
	if(!PI[to_player][pi_ID]) return Kick(to_player);
	
	AddPlayerBan(PI[to_player][pi_ID], PI[to_player][pi_NAME], PI[to_player][pi_IP], PI[playerid][pi_ID], TYPE_BAN, reason);
	
	new dialog[250];
	format(dialog, sizeof dialog, "Has sido baneado, razón:\n%s\n", reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);
	
	SendClientMessagef(playerid, -1, "Jugador (nick: '%s' dbid: '%d', id: '%d') baneado.", PI[to_player][pi_NAME], PI[to_player][pi_ID], to_player);
	
	new str[145]; format(str, 145, "{"#RED_COLOR"}el %s %s (%d) ha baneado a %s (%d).", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ], PI[playerid][pi_NAME], playerid, PI[to_player][pi_NAME], to_player);
	SendAdminAd(-1, str);

	SendCmdLogToAdmins(playerid, "ban", params);
	return 1;
}

CMD:cls(playerid, params[])
{	
	for(new i = 0; i != 80; i ++) SendClientMessageToAll(-1, " ");
	SendCmdLogToAdmins(playerid, "cls", params);
	return 1;
}
alias:cls("log");

CMD:tban(playerid, params[])
{	
	new to_player, days = 9999, reason[128];
	if(sscanf(params, "uds[128]", to_player, reason)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/tban <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	//if(days <= 0 || days > 9999) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/ban <player_id> <dias> <razon>");
	if(to_player == playerid) return SendMessage(playerid, "~r~No seas pendejo, te estoy vigilando.");
	
	if(PlayerTemp[to_player][pt_KICKED]) return SendClientMessagef(playerid, -1, "El jugador ya está expulsado.");
	if(!PI[to_player][pi_ID]) return Kick(to_player);
	
	AddPlayerBan(PI[to_player][pi_ID], PI[to_player][pi_NAME], "0.0.0.0", PI[playerid][pi_ID], TYPE_TEMP_BAN, reason, days);
	
	new dialog[250];
	format(dialog, sizeof dialog, "Has sido baneado por %d días, razón:\n%s\n", days, reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);
	
	SendClientMessagef(playerid, -1, "Jugador (nick: '%s' dbid: '%d', pid: '%d') baneado por %d días.", PI[to_player][pi_NAME], PI[to_player][pi_ID], to_player, days);
	
	
	new str[145]; format(str, 145, "{"#RED_COLOR"}el %s %s (%d) ha baneado a %s (%d).", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ], PI[playerid][pi_NAME], playerid, PI[to_player][pi_NAME], to_player);
	SendAdminAd(-1, str);

	SendCmdLogToAdmins(playerid, "tban", params);
	return 1;
}

CMD:setwlevel(playerid, params[]) 
{
	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setwlevel <to_player> <level>");
	SetPlayerWantedLevelEx(to_player, level);
	SendCmdLogToAdmins(playerid, "setwlevel", params);
	return 1;
}

CMD:sound(playerid, params[]) {
	new id;
	if(sscanf(params, "d", id)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/sound <id>");
	PlayerPlaySound(playerid, id, 0.0, 0.0, 0.0);
	SendCmdLogToAdmins(playerid, "sound", params);
	return 1;
}

CMD:anim(playerid, params[]) {
	new animLib[32], animName[32];
	if(sscanf(params, "s[32]s[32]", animLib, animName)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/anim <animLib> <animName>");
	ApplyAnimation(playerid, animLib, animName, 4.1, 1, 0, 0, 0, 0, 1);
	SendCmdLogToAdmins(playerid, "anim", params);
	return 1;
}

CMD:animindex(playerid, params[])
{
	new anim = GetPlayerAnimationIndex(playerid);
	SendMessagef(playerid, "Index: %d", anim);
	SendCmdLogToAdmins(playerid, "animindex", params);
	return 1;
}

CMD:dban(playerid, params[])
{
	new reason[128], to_account;
	if(sscanf(params, "ds[128]", to_account, reason)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/dban <DB-ID> <razon>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				reg_int(0, "id", id);
				reg_name(0, "ip", ip);
				reg_name(0, "name", name);
				reg_int(0, "connected", connected);
				reg_int(0, "playerid", pid);
				reg_int(0, "admin_level", admin_level);

				if(PI[playerid][pi_ADMIN_LEVEL] >= admin_level)
				{
					if(connected) SendClientMessagef(playerid, -1, "JUGADOR '%s' DB-ID '%d' conectado utilice /ban, su player_id: %d.", name, id, pid);
					else
					{
						inline OnCountQueryLoad()
						{
							new crows;
							if(get_rows(crows))
							{
								if(crows)
								{
									new expire_date[24];
									reg_name(0, "expire_date", expire_date);
									
									if(isnull(expire_date)) SendClientMessagef(playerid, -1, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (permanentemente).", name, id);
									else SendClientMessagef(playerid, -1, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (temporalmente, fecha de readmisión: %s).", name, id, expire_date);
								}
								else
								{
									AddPlayerBan(id, name, ip, PI[playerid][pi_ID], TYPE_BAN, reason);
									SendClientMessagef(playerid, -1, "Jugador (nick: '%s' db_id: '%d') baneado.", name, id);
									
									new str[145]; format(str, 145, "{"#RED_COLOR"}el %s %s (%d) ha baneado a %s (db_id: %d).", PI[playerid][pi_NAME], playerid, name, id);
									SendMessageToAdmins(-1, str);
								}
							}
						}
						mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM bans WHERE name = '%e' OR ip = '%e';", name, ip);
						mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
					}
				}
				else SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
			}
			else SendClientMessagef(playerid, -1, "No se encontro la DB-ID.");
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);

	SendCmdLogToAdmins(playerid, "dban", params);
	return 1;
}

CMD:dtban(playerid, params[])
{
	new reason[128], to_account, days = 9999;
	if(sscanf(params, "dds[128]", to_account, reason)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/dtban <DB-ID> <razon>");
	//if(days <= 0 || days > 9999) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/dtban <DB-ID> <razon>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				reg_int(0, "id", id);
				reg_name(0, "ip", ip);
				reg_name(0, "name", name);
				reg_int(0, "connected", connected);
				reg_int(0, "playerid", pid);
				reg_int(0, "admin_level", admin_level);

				if(PI[playerid][pi_ADMIN_LEVEL] >= admin_level)
				{
					if(connected) SendClientMessagef(playerid, -1, "JUGADOR '%s' DB-ID '%d' conectado utilice /ban, su player_id: %d.", name, id, pid);
					else
					{
						inline OnCountQueryLoad()
						{
							new crows;
							if(get_rows(crows))
							{
								if(crows)
								{
									new expire_date[24];
									reg_name(0, "expire_date", expire_date);
									
									if(isnull(expire_date)) SendClientMessagef(playerid, -1, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (permanentemente).", name, id);
									else SendClientMessagef(playerid, -1, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (temporalmente, fecha de readmisión: %s).", name, id, expire_date);
								}
								else
								{
									AddPlayerBan(id, name, "0.0.0.0", PI[playerid][pi_ID], TYPE_BAN, reason, days);
									SendClientMessagef(playerid, -1, "Jugador (nick: '%s' dbid: '%d') baneado por %d días.", name, id, days);
					
									new str[145]; format(str, 145, "{"#RED_COLOR"}el %s %s (%d) ha baneado a %s (db_id: %d).", PI[playerid][pi_NAME], playerid, name, id);
									SendMessageToAdmins(-1, str);
								}
							}
						}
						mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM bans WHERE name = '%e' OR ip = '%e';", name, ip);
						mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
					}
				}
				else SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
			}
			else SendClientMessagef(playerid, -1, "No se encontro la DB-ID.");
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);

	SendCmdLogToAdmins(playerid, "dtban", params);
	return 1;
}

CMD:rac(playerid, params[])
{
	RespawnGlobalUnoccupiedVehicles();
	SendClientMessagef(playerid, -1, "Todos los vehículos no personales y sin ocupar han sido re-spawneados.");
	
	SendCmdLogToAdmins(playerid, "rac", params);
	return 1;
}

CMD:rac2(playerid, params[])
{
	RespawnAllUnoccupiedVehicles();
	SendClientMessagef(playerid, -1, "Todos los vehículos sin ocupar han sido re-spawneados.");
	
	SendCmdLogToAdmins(playerid, "rac2", params);
	return 1;
}

CMD:rv(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessagef(playerid, -1, "No estás en un vehículo.");
	
	SetVehicleToRespawnEx(vehicleid);
	SendClientMessagef(playerid, -1, "Vehículo (%d) re-spawneado.", vehicleid);

	SendCmdLogToAdmins(playerid, "rv", params);
	return 1;
}

CMD:pm(playerid, params[])
{
	new to_player, message[128];
	if(sscanf(params, "us[128]", to_player, message)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/pm <player_id> <mensaje>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	
	SendClientMessagef(playerid, -1, "Mensaje enviado a %s (%d): %s", PI[to_player][pi_NAME], to_player, message);
	
	PlayerTemp[to_player][pt_ADMIN_PM_PID] = playerid;
	PlayerTemp[to_player][pt_ADMIN_PM_AID] = PI[playerid][pi_ID];
	PlayerTemp[to_player][pt_ADMIN_PM_TIME] = gettime();
	SendClientMessagef(to_player, -1, "{"#SILVER_COLOR"}Mensaje de un administrador (/r para responder): {FFFFFF}%s", message);
	
	SendCmdLogToAdmins(playerid, "pm", params);
	return 1;
}

CMD:deletead(playerid, params[])
{
	new ad_id;
	if(sscanf(params, "d", ad_id)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/deletead <ID>");
	
	inline OnShopChecked()
	{
		new rows;
		if(get_rows(rows))
		{
			if(rows)
			{
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM shop WHERE id = %d;", ad_id);
				mysql_tquery(handle_db, QUERY_BUFFER);
				SendClientMessagef(playerid, -1, "Anuncio '%d' eliminado.", ad_id);
				SendCmdLogToAdmins(playerid, "deletead", params);
			}
			else SendClientMessagef(playerid, -1, "No se encontro la ID de ese anuncio.");
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM shop WHERE id = %d;", ad_id);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnShopChecked);

	SendCmdLogToAdmins(playerid, "deletead", params);
	return 1;
}
alias:deletead("borrarad");

CMD:settime(playerid, params[])
{
	new hour, minute;
	if(sscanf(params, "dd", hour, minute)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/settime <hora> <minuto>");
	SetMyWorldTime(hour, minute);
	SendClientMessagef(playerid, -1, "El tiempo se ajustará cuando el reloj avance.");
	SendCmdLogToAdmins(playerid, "settime", params);
	return 1;
}

CMD:setweather(playerid, params[])
{
	new weather;
	if(sscanf(params, "d", weather)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setweather <ID>");
	InterpolateWeather(weather);
	SendCmdLogToAdmins(playerid, "setweather", params);
	return 1;
}

CMD:rconadmin(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return 1;
	
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET admin_level = %d WHERE id = %d;", CMD_OWNER, PI[playerid][pi_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);
	
	PI[playerid][pi_ADMIN_LEVEL] = CMD_OWNER;
	return 1;
}

CMD:givemod(playerid, params[])
{
	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/givemod <player_id> <rango>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	if(level < 0 || level >= sizeof ADMIN_LEVELS) return SendClientMessagef(playerid, -1, "El rango no es válido.");
	if(level > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "No puedes dar este rango por ser un rango superior al tuyo.");
	
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET admin_level = %d WHERE id = %d;", level, PI[to_player][pi_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);
	
	PI[to_player][pi_ADMIN_LEVEL] = level;
	SendClientMessagef(to_player, -1, "%s cambió tu rango administrativo a: %s.", PI[playerid][pi_NAME], ADMIN_LEVELS[level]);
	SendClientMessagef(playerid, -1, "El rango administrativo de %s (%d) ahora es %s.", PI[to_player][pi_NAME], to_player, ADMIN_LEVELS[level]);
	
	SendCmdLogToAdmins(playerid, "givemod", params);
	return 1;
}
alias:givemod("staff");

CMD:ac(playerid, params[])
{
	ShowDialog(playerid, DIALOG_ANTI_CHEAT);
	SendCmdLogToAdmins(playerid, "ac", params);
	return 1;
}

CMD:setthirst(playerid, params[])
{
	new to_player, Float:amount;
	if(sscanf(params, "uf", to_player, amount)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setthirst <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(amount < 0.0 || amount > 100.0) return SendClientMessagef(playerid, -1, "Cantidad no válida.");
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	PI[to_player][pi_THIRST] = amount;
	SendClientMessagef(playerid, -1, "La hidratación de %s (%d) ahora es %.1f.", PI[to_player][pi_NAME], to_player, amount);
	
	SendCmdLogToAdmins(playerid, "setthirst", params);
	return 1;
}
alias:setthirst("setsed");

CMD:sethunger(playerid, params[])
{
	new to_player, Float:amount;
	if(sscanf(params, "uf", to_player, amount)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/sethungry <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(amount < 0.0 || amount > 100.0) return SendClientMessagef(playerid, -1, "Cantidad no válida.");
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	PI[to_player][pi_HUNGRY] = amount;
	SendClientMessagef(playerid, -1, "La alimentación de %s (%d) ahora es %.1f.", PI[to_player][pi_NAME], to_player, amount);
	
	SendCmdLogToAdmins(playerid, "sethunger", params);
	return 1;
}
alias:sethunger("sethambre", "sethungry");

CMD:setgas(playerid, params[])
{
	new Float:val;
	if(sscanf(params, "f", val)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setgas <valor>");
	if(val < 0.0) return SendClientMessagef(playerid, -1, "Valor no válido.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessagef(playerid, -1, "No estás en un vehículo.");
	
	if(val > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) val = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = val;
	
	SendClientMessagef(playerid, -1, "La gasolina del vehículo (%d) ahora es %.1f.", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);
	
	SendCmdLogToAdmins(playerid, "setgas", params);
	return 1;
}

CMD:repairveh(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessagef(playerid, -1, "No estás en un vehículo.");
	
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) RepairVehicleEx(vehicleid, playerid);
	else {
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID) RepairVehicleEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER]);
		else RepairVehicleEx(vehicleid);
	}
	SendClientMessagef(playerid, -1, "Vehículo (%d) reparado.", vehicleid);
	
	SendCmdLogToAdmins(playerid, "repairveh", params);
	return 1;
}
alias:repairveh("repararveh");

CMD:sethealth(playerid, params[])
{
	new to_player, Float:amount;
	if(sscanf(params, "uf", to_player, amount)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/sethealth <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(amount < 0.0 || amount > 100.0) return SendClientMessagef(playerid, -1, "Valor no válido.");
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	SetPlayerHealthEx(to_player, amount);
	SendClientMessagef(playerid, -1, "La vida de %s (%d) ahora es %.1f.", PI[to_player][pi_NAME], to_player, amount);
	
	SendCmdLogToAdmins(playerid, "sethealth", params);
	return 1;
}
alias:sethealth("setvida");

CMD:setarmour(playerid, params[])
{
	new to_player, Float:amount;
	if(sscanf(params, "uf", to_player, amount)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setarmour <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(amount < 0.0 || amount > 100.0) return SendClientMessagef(playerid, -1, "Valor no válido.");
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	SetPlayerArmourEx(to_player, amount);
	SendClientMessagef(playerid, -1, "El chaleco de %s (%d) ahora es %.1f.", PI[to_player][pi_NAME], to_player, amount);
	
	SendCmdLogToAdmins(playerid, "setarmour", params);
	return 1;
}
alias:setarmour("setchaleco");

CMD:setlevel(playerid, params[])
{
	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/level <player_id> <nivel>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	KillTimer(PlayerTemp[to_player][pt_TIMERS][2]);
	
	PI[to_player][pi_REP] = 1;
	PI[to_player][pi_LEVEL] = level;
	UpdateReputationTextDraws(to_player);
	SetPlayerSkillLevels(to_player);
	
	SendClientMessagef(to_player, PRIMARY_COLOR2, "{"#PRIMARY_COLOR"}¡Nuevo Nivel! {ffffff}Has subido al nivel {"#PRIMARY_COLOR"}%d.", PI[to_player][pi_LEVEL]);
	SetPlayerScore(to_player, PI[to_player][pi_LEVEL]);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);
	
	PI[to_player][pi_TIME_FOR_REP] = TIME_FOR_REP;
	PlayerTemp[to_player][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;
	
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET time_playing = %d, level = %d, rep = %d, time_for_rep = %d, payday_rep = %d WHERE id = %d;", PI[to_player][pi_TIME_PLAYING], PI[to_player][pi_LEVEL], PI[to_player][pi_REP], TIME_FOR_REP, PI[to_player][pi_PAYDAY_REP], PI[to_player][pi_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);
	
	KillTimer(PlayerTemp[to_player][pt_TIMERS][2]);
	PlayerTemp[to_player][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", PI[to_player][pi_TIME_FOR_REP], false, "i", to_player);
	
	SendClientMessagef(playerid, -1, "El nivel de %s (%d) ahora es %d.", PI[to_player][pi_NAME], to_player, PI[to_player][pi_LEVEL]);
	
	SendCmdLogToAdmins(playerid, "setlevel", params);
	return 1;
}

CMD:setwork(playerid, params[])
{
	new to_player, work, set;
	if(sscanf(params, "udd", to_player, work, set)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setwork <player_id> <work> <set>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(work < 0 || work >= sizeof work_info) return SendClientMessagef(playerid, -1, "El trabajo no es válido, para verlos usa /works.");
	
	if(PlayerTemp[to_player][pt_WORKING_IN]) return SendClientMessagef(playerid, -1, "No se puede cambiar el trabajo del jugador porque está de servicio en su trabajo.");
	
	new player_jobs = CountPlayerJobs(to_player);
	if(PI[to_player][pi_VIP])
	{
		if(player_jobs >= MAX_SU_WORKS && set)
		{
			SendClientMessagef(playerid, -1, "El limite de trabajos para este jugador es %d.", player_jobs);
			return 1;
		}
	}
	else
	{
		if(player_jobs >= MAX_NU_WORKS && set)
		{
			SendClientMessagef(playerid, -1, "El limite de trabajos para este jugador es %d.", player_jobs);
			return 1;
		}
	}

	if(set)
	{
		if(work == WORK_POLICE)
		{
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1, level = 1;", PI[to_player][pi_ID], work);
			mysql_tquery(handle_db, QUERY_BUFFER);

			PI[to_player][pi_PLACA_PD] = random(10000000);
			PLAYER_WORKS[to_player][work][pwork_LEVEL] = 1;
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET placa_pd = %d WHERE id = %d;", PI[to_player][pi_PLACA_PD], PI[to_player][pi_ID]);
			mysql_tquery(handle_db, QUERY_BUFFER);
		}
		else if(work == WORK_MECHANIC)
		{
			PLAYER_WORKS[to_player][work][pwork_LEVEL] = 1;
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1, level = 1;", PI[to_player][pi_ID], work);
			mysql_tquery(handle_db, QUERY_BUFFER);
		}
		else
		{
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1;", PI[to_player][pi_ID], work);
			mysql_tquery(handle_db, QUERY_BUFFER);
		}
	
		PLAYER_WORKS[to_player][work][pwork_SET] = 1;

		SendClientMessagef(to_player, -1, "{"#PRIMARY_COLOR"}¡Nuevo Trabajo! {FFFFFF}Ahora trabajas de {"#GREEN_COLOR"}%s.", work_info[work][work_info_NAME]);
		SendClientMessage(to_player, -1, "Puedes usar el comando {"#BLUE_COLOR"}/ayuda trabajos {FFFFFF}para ver como trabajar aquí.");
	}
	else
	{
		if(work == WORK_POLICE)
		{
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0, level = 0 WHERE id_player = %d AND id_work = %d;", PI[to_player][pi_ID], work);
			mysql_tquery(handle_db, QUERY_BUFFER);

			PI[to_player][pi_PLACA_PD] = 0;
			PLAYER_WORKS[to_player][work][pwork_LEVEL] = 0;
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET placa_pd = %d WHERE id = %d;", PI[to_player][pi_PLACA_PD], PI[to_player][pi_ID]);
			mysql_tquery(handle_db, QUERY_BUFFER);
		}
		else
		{
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0 WHERE id_player = %d AND id_work = %d;", PI[to_player][pi_ID], work);
			mysql_tquery(handle_db, QUERY_BUFFER);
		}

		PLAYER_WORKS[to_player][work][pwork_SET] = 0;
		SendClientMessagef(to_player, -1, "{"#SILVER_COLOR"}Has abandonado tu trabajo de %s.", work_info[work][work_info_NAME]);
	}

	SendClientMessagef(playerid, -1, "El trabajo %s de %s (%d) es: '%d'.", work_info[ work ][work_info_NAME], PI[to_player][pi_NAME], to_player, set);
	SendCmdLogToAdmins(playerid, "setwork", params);
	return 1;
}

CMD:setworkexp(playerid, params[])
{
	new to_player, work, exp;
	if(sscanf(params, "udd", to_player, work, exp)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setworkexp <player_id> <work, para verlos /works> <exp>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(work < 0 || work >= sizeof work_info) return SendClientMessagef(playerid, -1, "El trabajo no es válido, para verlos usa /works.");
	
	if(PLAYER_WORKS[to_player][ work ][pwork_SET])
	{
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET level = %d WHERE id_player = %d AND id_work = %d;", exp, PI[to_player][pi_ID], work);
		mysql_tquery(handle_db, QUERY_BUFFER);

		PLAYER_WORKS[to_player][ work ][pwork_LEVEL] = exp;
		SendClientMessagef(playerid, -1, "La experiencia de %s (%d) en el trabajo '%s' ahora es %d.", PI[to_player][pi_NAME], to_player, work_info[ work ][work_info_NAME], exp);
		SendCmdLogToAdmins(playerid, "setworkexp", params);
	}
	else SendClientMessagef(playerid, -1, "El jugador no tiene el trabajo");
	return 1;
}

CMD:setcash(playerid, params[])
{
	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setcash <player_id> <amount>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	SetPlayerCash(to_player, value);
	SendClientMessagef(playerid, -1, "El dinero de %s (%d) ahora es %d.", PI[to_player][pi_NAME], to_player, value);
	
	SendCmdLogToAdmins(playerid, "setcash", params);
	return 1;
}

CMD:givecash(playerid, params[])
{
	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/givecash <player_id> <amount>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	GivePlayerCash(to_player, value, true, value < 0 ? true : false);
	SendClientMessagef(playerid, -1, "El jugador %s (%d) ha recibido %d.", PI[to_player][pi_NAME], to_player, value);
	
	SendCmdLogToAdmins(playerid, "givecash", params);
	return 1;
}

CMD:asay(playerid, params[])
{
	if(isnull(params)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/asay <message>");

	SendClientMessageToAllf(0x2587CEFF, "* Admin: %s", params);
	SendCmdLogToAdmins(playerid, "asay", params);
	return 1;
}

CMD:spos(playerid, params[])
{
	new Float:p[4], interior, vw;
	if(sscanf(params, "p<,>ffffdd", p[0], p[1], p[2], p[3], interior, vw)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/spos [X], [Y], [Z], [ANGLE], [INTERIOR], [VIRTUAL WORLD]");

	SetPlayerPosEx(playerid, p[0], p[1], p[2], p[3], interior, vw);
	SendCmdLogToAdmins(playerid, "spos", params);
	return 1;
}

GetVehicleModelByName(const vehname[]) 
{
	new modelid = -1;
	for(new i = 0; i < sizeof VEHICLE_INFO; i ++) 
	{
		if(strfind(VEHICLE_INFO[i][vehicle_info_NAME], vehname, true) != -1) 
		{
			modelid = i + 400;
			break;
		}
	}
	return modelid;
}

CMD:payday(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/payday [Player/Name]");
	
	PlayerPayday(to_player);
	SendCmdLogToAdmins(playerid, "payday", params);
	return 1;
}

CMD:v(playerid, params[])
{
	new modelid, vehname[24], color1 = 1, color2 = 1;
	if(!sscanf(params, "ddd", modelid, color1, color2)) { }
	else if(!sscanf(params, "d", modelid)) { }
	else if(!sscanf(params, "s[24]dd", vehname, color1, color2)) { modelid = GetVehicleModelByName(vehname); }
	else if(!sscanf(params, "s[24]", vehname)) { modelid = GetVehicleModelByName(vehname); }
	else return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/v <modelid/name> <color 1 = 1> <color 2 = 1>");
	
	if(modelid < 400 || modelid > 611) return SendClientMessagef(playerid, -1, "Modelo de vehículo no válido.");
		
	new Float:p[4];
	GetPlayerPos(playerid, p[0], p[1], p[2]);
	GetPlayerFacingAngle(playerid, p[3]);
	
	new vid = AddTestVehicle(false, modelid, p[0], p[1], p[2], p[3], color1, color2, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	PutPlayerInVehicleEx(playerid, vid, 0);

	GLOBAL_VEHICLES[vid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vid);
	
	SendCmdLogToAdmins(playerid, "v", params);
	return 1;
}

CMD:dv(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessagef(playerid, -1, "Error: no estás en ningún vehículo de prueba.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_TEST) return SendClientMessagef(playerid, -1, "Error: no estás en ningún vehículo de prueba.");
	
	DestroyVehicleEx(vehicleid);
	SendClientMessagef(playerid, -1, "Vehículo de prueba destruido.");
	SendCmdLogToAdmins(playerid, "dv", params);
	return 1;
}

CMD:exit(playerid, params[])
{
	mysql_tquery(handle_db, "UPDATE player SET connected = 0, playerid = 0;");
	SendRconCommand("exit");
	return 1;
}

CMD:nombre(playerid, params[])
{
	if(CHANGE_NAME_COINS_PRICE > PI[playerid][pi_COINS])
	{
		SendClientMessagef(playerid, -1, "Te faltan %d "SERVER_COIN" para poder cambiarte el nombre.", CHANGE_NAME_COINS_PRICE - PI[playerid][pi_COINS]);
		return 1;
	}

	ShowDialog(playerid, DIALOG_CHANGE_NAME);
	return 1;
}
alias:nombre("cname");

CMD:correo(playerid, params[])
{
	ShowDialog(playerid, DIALOG_CHANGE_EMAIL);
	return 1;
}
alias:correo("email", "mail");

CMD:setnametemp(playerid, params[])
{
	new to_player, new_name[24];
	if(sscanf(params, "us[24]", to_player, new_name)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setnametemp <player_id> <nuevo nombre>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);

	if(SetPlayerName(to_player, new_name) == 1) 
	{
		for(new i = 0; i < 24; i++) 
		{
			if(new_name[i] == '_')
			{
				new_name[i] = ' ';
			}
		}

		format(PlayerTemp[to_player][pt_NAME], 24, "%s", new_name);
		SendClientMessagef(playerid, -1, "Nombre cambiado temporalmente.");
	}
	else SendClientMessagef(playerid, -1, "Nombre no válido.");
	SendCmdLogToAdmins(playerid, "setnametemp", params);
	return 1;
}

CMD:setnameplayer(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setnameplayer <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);

	SetPlayerName(to_player, PI[to_player][pi_NAME]);
	GetPlayerName(to_player, PlayerTemp[to_player][pt_NAME], 24);

	SetRolePlayNames(to_player);
	UpdateReputationTextDraws(to_player);

	SendClientMessagef(playerid, -1, "Nombre cambiado.");
	SendCmdLogToAdmins(playerid, "setnameplayer", params);
	return 1;
}

CMD:setname(playerid, params[])
{
	new to_player, new_name[24];
	if(sscanf(params, "us[24]", to_player, new_name)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setname <player_id> <nuevo nombre>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(!IsValidRPName(new_name)) return SendClientMessagef(playerid, -1, "El nombre '%s' no cumple con el formato Nombre_Apellido.", new_name);
	
	inline OnInfoQueryLoad(data[])
	{
		new rows;
		if(get_rows(rows))
		{
			if(rows) SendClientMessagef(playerid, -1, "El nombre '%s' está en uso.", new_name);
			else
			{
				format(PlayerTemp[to_player][pt_NAME], 24, "%s", new_name);
				format(PI[to_player][pi_NAME], 24, "%s", new_name);
				SetRolePlayNames(to_player);
				SetPlayerName(to_player, new_name);
				
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET name = '%e' WHERE id = %d;", new_name, PI[to_player][pi_ID]);
				mysql_tquery(handle_db, QUERY_BUFFER);
				
				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(PROPERTY_INFO[i][property_OWNER_ID] != PI[to_player][pi_ID]) continue;
					
					new label_str[256];
					format
					(
						label_str, 
						sizeof label_str, 
						"\
							Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
							{FFFFFF}Propietario: {"#PRIMARY_COLOR"}%s\n\
							{FFFFFF}Presiona {"#PRIMARY_COLOR"}'Y' {FFFFFF}para entrar.\
						", PROPERTY_INFO[i][property_ID], PI[to_player][pi_NAME]
					);
					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				}
				
				SendClientMessagef(to_player, -1, "{"#SILVER_COLOR"}Tu nombre ha sido cambiado a '%s'", new_name);
				SendClientMessagef(playerid, -1, "El nombre del jugador ha sido cambiado a '%s'", new_name);
				
				SendCmdLogToAdmins(playerid, "setname", data);
			}
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE name = '%e';", new_name);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad, "s", params);
	return 1;
}

CMD:exproperty(playerid, params[])
{
	new id_property;
	if(sscanf(params, "d", id_property)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/exproperty <id>");
	if(id_property <= 0) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/exproperty < id > 0 >");
	
	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendClientMessagef(playerid, -1, "PROPIEDAD ID no encontrada.");
	
	if(!PROPERTY_INFO[index][property_SOLD]) return SendClientMessagef(playerid, -1, "Esta propiedad ya está en venta.");
	
	
	PROPERTY_INFO[ index ][property_SOLD] = false;
	PROPERTY_INFO[ index ][property_CREW] = false;
	PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
	PROPERTY_INFO[ index ][property_CREW_ID] = 0;
	format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);
	
	new info[3];
	UpdateUnnocupiedPropertyLabel(index);
	
	DestroyDynamicPickup(PROPERTY_INFO[ index ][property_EXT_PICKUP_ID]);
	PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
	
	PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = index; // Index
	info[2] = 2; // Pickup Exterior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ index ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
				
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = NULL WHERE id = %d;", PROPERTY_INFO[ index ][property_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);
	SendClientMessagef(playerid, -1, "Propiedad (%d) expropiada.", PROPERTY_INFO[ index ][property_ID]);
	
	SendCmdLogToAdmins(playerid, "exproperty", params);
	return 1;
}

CMD:gotoproperty(playerid, params[])
{
	new int_type;
	if(sscanf(params, "d", int_type)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/gotoproperty <interior>");
	if(int_type < 0 || int_type >= sizeof PROPERTY_INTERIORS) return SendClientMessagef(playerid, -1, "Error, rango de interior: 0-%d", sizeof(PROPERTY_INTERIORS) - 1);

	SetPlayerPosEx(playerid, PROPERTY_INTERIORS[int_type][property_INT_X], PROPERTY_INTERIORS[int_type][property_INT_Y], PROPERTY_INTERIORS[int_type][property_INT_Z], PROPERTY_INTERIORS[int_type][property_INT_ANGLE], PROPERTY_INTERIORS[int_type][property_INT_INTERIOR], 0, false, true);
	return 1;
}
alias:gotoproperty("ircasa");

CMD:setpass(playerid, params[])
{
	new to_account, new_pass[MAX_PASS_LENGTH + 1];
	if(sscanf(params, "ds[19]", to_account, new_pass)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setpass <DB-ID> <pass>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			if(rows)
			{
				new id, name[24], connected, pid, admin_level;
				reg_int(0, "id", id);
				reg_name(0, "name", name);
				reg_int(0, "connected", connected);
				reg_int(0, "playerid", pid);
				reg_int(0, "admin_level", admin_level);
				if(PI[playerid][pi_ADMIN_LEVEL] >= admin_level)
				{
					if(connected) SendClientMessagef(playerid, -1, "JUGADOR '%s' DB-ID '%d' conectado, player_id: %d, no es necario cambiar la contraseña.", name, id, pid);
					else
					{
						new salt[16], salt_ex[16], pass_ex[64 + 1];
						getRandomSalt(salt);
						format(salt_ex, 16, "%s", salt);
						SHA256_PassHash(new_pass, salt_ex, pass_ex, 64 + 1);
						
						mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET salt = '%e', pass = '%e' WHERE id = %d;", salt_ex, pass_ex, id);
						mysql_tquery(handle_db, QUERY_BUFFER);
						
						SendClientMessagef(playerid, -1, "La contraseña de '%s' ahora es: %s", name, new_pass);
						SendCmdLogToAdmins(playerid, "setpass", params);
					}
				}
				else SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
			}
			else SendClientMessagef(playerid, -1, "No se encontro la DB-ID.");
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

CMD:delete(playerid, params[])
{
	new to_account;
	if(sscanf(params, "d", to_account)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/delete <DB-ID>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				reg_int(0, "id", id);
				reg_name(0, "ip", ip);
				reg_name(0, "name", name);
				reg_int(0, "connected", connected);
				reg_int(0, "playerid", pid);
				reg_int(0, "admin_level", admin_level);

				if(PI[playerid][pi_ADMIN_LEVEL] >= admin_level)
				{
					if(connected) SendClientMessagef(playerid, -1, "JUGADOR '%s' DB-ID '%d' conectado para eliminarlo debe estar desconectado, utilice kick, su player_id: %d.", name, id, pid);
					else
					{
						mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM player WHERE id = %d;", id);
						mysql_tquery(handle_db, QUERY_BUFFER);
						
						new ex_properties;
						for(new index = 0; index != MAX_PROPERTIES; index ++)
						{
							if(!PROPERTY_INFO[index][property_VALID]) continue;
							if(!PROPERTY_INFO[index][property_SOLD]) continue;
							if(PROPERTY_INFO[index][property_OWNER_ID] != id) continue;
						
							PROPERTY_INFO[ index ][property_SOLD] = false;
							PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
							format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);
							
							new info[3];
							UpdateUnnocupiedPropertyLabel(index);
							
							DestroyDynamicPickup(PROPERTY_INFO[ index ][property_EXT_PICKUP_ID]);
							PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
							
							PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
							info[0] = PICKUP_TYPE_PROPERTY;
							info[1] = index; // Index
							info[2] = 2; // Pickup Exterior
							Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ index ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
							
							ex_properties ++;
						}
						
						
						SendClientMessagef(playerid, -1, "CUENTA (Nombre '%s' DB-ID: '%d') ha sido eliminada.", name, id);
						if(ex_properties > 0) SendClientMessagef(playerid, -1, "Se han expropiado '%d' propiedades del jugador eliminado.", ex_properties);
						
						new str[145]; format(str, 145, "{"#RED_COLOR"}el %s %s (%d) ha eliminado el usuario '%s'", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ], PI[playerid][pi_NAME], playerid, name);
						SendMessageToAdmins(-1, str);

						SendCmdLogToAdmins(playerid, "delete", params);
					}
				}
				else SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
			}
			else SendClientMessagef(playerid, -1, "No se encontro la DB-ID.");
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

/* PROPERTY CONSTRUCTOR */

CMD:rproperty(playerid, params[])
{
	new id_property;
	if(sscanf(params, "d", id_property)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/rproperty <id>");
	if(id_property <= 0) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/rproperty < id > 0 >");
	
	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendClientMessagef(playerid, -1, "PROPIEDAD ID no encontrada.");
	
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM properties WHERE id = %d;", PROPERTY_INFO[index][property_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);
	
	if(IsValidDynamic3DTextLabel(PROPERTY_INFO[index][property_EXT_LABEL_ID])) DestroyDynamic3DTextLabel(PROPERTY_INFO[index][property_EXT_LABEL_ID]);
	if(IsValidDynamic3DTextLabel(PROPERTY_INFO[index][property_INT_LABEL_ID])) DestroyDynamic3DTextLabel(PROPERTY_INFO[index][property_INT_LABEL_ID]);
	if(IsValidDynamicPickup(PROPERTY_INFO[index][property_EXT_PICKUP_ID])) DestroyDynamicPickup(PROPERTY_INFO[index][property_EXT_PICKUP_ID]);
	if(IsValidDynamicPickup(PROPERTY_INFO[index][property_INT_PICKUP_ID])) DestroyDynamicPickup(PROPERTY_INFO[index][property_INT_PICKUP_ID]);
	new reset[Property_Info_Enum]; PROPERTY_INFO[index] = reset;
	
	TOTAL_PROPERTIES_LOADED --;
	
	SendClientMessagef(playerid, -1, "PROPIEDAD %d ELIMINADA.", id_property);
	SendClientMessagef(playerid, -1, "PROPIEDADES: %d/%d", TOTAL_PROPERTIES_LOADED, MAX_PROPERTIES);
	
	SendCmdLogToAdmins(playerid, "rproperty", params);
	return 1;
}

CMD:eproperty(playerid, params[])
{
	new id_property, new_int;
	if(sscanf(params, "dddddd", id_property, new_int, pTemp(playerid)[pt_PROPERTY_CINFO][0], pTemp(playerid)[pt_PROPERTY_CINFO][1], pTemp(playerid)[pt_PROPERTY_CINFO][2], pTemp(playerid)[pt_PROPERTY_CINFO][3])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/eproperty <id> <interior> <nivel> <precio> <vip level> <coins>");
	if(id_property <= 0) return SendClientMessagef(playerid, -1, "ID no válida.");
	
	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendClientMessagef(playerid, -1, "PROPIEDAD ID no encontrada.");
	
	if(PROPERTY_INFO[index][property_SOLD]) return SendClientMessagef(playerid, -1, "Solo se pueden modificar propiedades que están libres.");
	
	if(new_int < 0 || new_int >= sizeof(PROPERTY_INTERIORS)) return SendClientMessagef(playerid, -1, "El interior elegido no es válido.");
	
	PROPERTY_INFO[index][property_ID_INTERIOR] = new_int;
	PROPERTY_INFO[index][property_PRICE] = pTemp(playerid)[pt_PROPERTY_CINFO][1];
	PROPERTY_INFO[index][property_LEVEL] = pTemp(playerid)[pt_PROPERTY_CINFO][0];
	PROPERTY_INFO[index][property_EXTRA] = pTemp(playerid)[pt_PROPERTY_CINFO][3];
	PROPERTY_INFO[index][property_VIP_LEVEL] = pTemp(playerid)[pt_PROPERTY_CINFO][2];
	PROPERTY_INFO[index][property_PRICE] = PROPERTY_INFO[index][property_PRICE];
	
	if(PROPERTY_INFO[index][property_EXTRA]) PROPERTY_INFO[index][property_PRICE] = 0;
	if(PROPERTY_INFO[index][property_VIP_LEVEL]) PROPERTY_INFO[index][property_LEVEL] = 1;
	
	UpdateUnnocupiedPropertyLabel(index);
	
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_interior = %d, price = %d, level = %d, extra = %d, vip_level = %d WHERE id = %d;", PROPERTY_INFO[index][property_ID_INTERIOR], PROPERTY_INFO[index][property_PRICE], PROPERTY_INFO[index][property_LEVEL], PROPERTY_INFO[index][property_EXTRA], PROPERTY_INFO[index][property_VIP_LEVEL], PROPERTY_INFO[index][property_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);

	SendCmdLogToAdmins(playerid, "eproperty", params);
	return 1;
}

CMD:cproperty(playerid, params[])
{
	if(TOTAL_PROPERTIES_LOADED >= MAX_PROPERTIES) return SendClientMessagef(playerid, -1, "Límite alcanzado.");
	
	if(sscanf(params, "dddd", pTemp(playerid)[pt_PROPERTY_CINFO][0], pTemp(playerid)[pt_PROPERTY_CINFO][1], pTemp(playerid)[pt_PROPERTY_CINFO][2], pTemp(playerid)[pt_PROPERTY_CINFO][3])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/cproperty <nivel> <precio> <vip level> <coins>");
	
	GetPlayerPos(playerid, PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X], PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y], PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z]);
	GetPlayerFacingAngle(playerid, PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG]);
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT] = GetPlayerInterior(playerid);
	
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED] = true;
	for(new i = 0; i != 6; i ++) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][i]);
	
	UpdatePlayerPropertyContructor(playerid);
	return 1;
}

SendChatMessageToAdmins(color, const message[])
{
	LoopEx(i, MAX_PLAYERS, 0) 
	    if(IsPlayerConnected(i) && PlayerTemp[i][pt_USER_LOGGED])
	        if(PI[i][pi_ADMIN_LEVEL] > 1 && PlayerTemp[i][pt_SEE_ADM_CHAT] /*&& PlayerTemp[i][pt_ADMIN_SERVICE]*/)
	            SendClientMessage(i, color, message);
}

SendMessageToAdmins(color, const message[], level = 1)
{
	LoopEx(i, MAX_PLAYERS, 0) 
	    if(IsPlayerConnected(i) && PlayerTemp[i][pt_USER_LOGGED])
	        if(PI[i][pi_ADMIN_LEVEL] > level && PlayerTemp[i][pt_SEE_ADM_LOG] /*&& PlayerTemp[i][pt_ADMIN_SERVICE]*/)
	            SendClientMessage(i, color, message);

	return 1;
}

SendCmdLogToAdmins(playerid, const cmdtext[], const params[])
{
	new message[256];
	if(isnull(params)) format(message, sizeof message, "{"#ORANGE_COLOR"}[%s] {ffffff}%s (%d) ha ejecutado el comando {"#ORANGE_COLOR"}/%s", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ], PI[playerid][pi_NAME], playerid, cmdtext);
	else format(message, sizeof message, "{"#ORANGE_COLOR"}[%s] {ffffff}%s (%d) ha ejecutado el comando {"#ORANGE_COLOR"}/%s %s", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ], PI[playerid][pi_NAME], playerid, cmdtext, params);
	
	LoopEx(i, MAX_PLAYERS, 0) 
	    if(IsPlayerConnected(i) && PlayerTemp[i][pt_USER_LOGGED])
	        if(PI[i][pi_ADMIN_LEVEL] >= PI[playerid][pi_ADMIN_LEVEL] && PlayerTemp[i][pt_SEE_ACMD_LOG])
	            SendClientMessage(i, ORANGE_COLOR2, message);
	
	return 1;
}

SendMessageToAdminsAC(color, const message[])
{
	LoopEx(i, MAX_PLAYERS, 0) 
	    if(IsPlayerConnected(i) && PlayerTemp[i][pt_USER_LOGGED])
	        if(PI[i][pi_ADMIN_LEVEL] > 1 && PlayerTemp[i][pt_SEE_AC_LOG] /*&& PlayerTemp[i][pt_ADMIN_SERVICE]*/)
	            SendClientMessage(i, color, message);
	
	return 1;
}

RespawnAllUnoccupiedVehicles()
{
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_OCCUPIED]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_TEST || GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_SELL_INGAME || GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_HOTDOG_INGAME)
		{
			ClearSellVehicle(i);
			ClearHotdog(i);
			DestroyVehicleEx(i);
			continue;
		}
		
		SetVehicleToRespawnEx(i);
	}
	return 1;
}

RespawnGlobalUnoccupiedVehicles()
{
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_PERSONAL) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_OCCUPIED]) continue;
	
		SetVehicleToRespawnEx(i);
	}
	return 1;
}

CMD:kill(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK) 
	{
		new now = gettime();
		if(now < pTemp(playerid)[pt_DEATH_TIME] + 30)
		{
			new time = 30 - (now - pTemp(playerid)[pt_DEATH_TIME]);
			SendClientMessagef(playerid, -1, "Tienes que esperar %s minutos para poder usar este comando.", TimeConvert(time));
			return 1;
		}
	}

	SetPlayerHealthEx(playerid, 0.0);
	return 1;
}

GetNumberOfPlayersOnThisIP(const test_ip[])
{
	new against_ip[16], ip_count = 0;
	for(new x = 0, j = GetPlayerPoolSize(); x <= j; x++) 
	{
		if(IsPlayerConnected(x)) 
		{
		    GetPlayerIp(x, against_ip, 16);
		    if(!strcmp(against_ip, test_ip)) ip_count++;
		}
	}
	return ip_count;
}

getRandomSalt(salt[], length = sizeof salt)
{
    for(new i = 0; i != length; i ++)
	{
		salt[i] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
	}
	return true;
}

GetTickDiff(newtick, oldtick)
{
	if (oldtick < 0 && newtick >= 0) {
		return newtick - oldtick;
	} else if (oldtick >= 0 && newtick < 0 || oldtick > newtick) {
		return (cellmax - oldtick + 1) - (cellmin - newtick);
	}
	return newtick - oldtick;
}

GetPlayerSpeed(vehicleid)
{
	new Float:xPos[3];
	GetPlayerVelocity(vehicleid, xPos[0], xPos[1], xPos[2]);
	return floatround(floatsqroot(xPos[0] * xPos[0] + xPos[1] * xPos[1] + xPos[2] * xPos[2]) * 170.00);
}

ShowPlayerShop(playerid)
{
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][0]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][1]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][2]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][3]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][4]);
	
	pTemp(playerid)[pt_SHOP_COME_FROM_MY_ADS] = false;
	pTemp(playerid)[pt_SHOP] = true;
	pTemp(playerid)[pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
	
	pTemp(playerid)[pt_DIALOG_DB_LIMIT] = 6;
	pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
	
	UpdatePlayerShop(playerid);
	SelectTextDrawEx(playerid, 0x00a39bFF);
	return 1;
}

UpdatePlayerShop(playerid)
{
	switch(pTemp(playerid)[pt_SHOP_STATE])
	{
		case PLAYER_SHOP_STATE_ALL:
		{
			if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
			}
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
			
			for(new i = 0; i != 6; i ++)
			{
				pTemp(playerid)[pt_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
				if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
			}
			
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "+_Publicar_anuncio");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "-_Mis_anuncios");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Cerrar");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Siguiente");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Anterior");
			
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);
			
			
			DestroyArticleShopTextDraws(playerid);
			
			//
			inline OnShopLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					for(new i = 0; i != rows; i ++)
					{
						new connected, id_ad, price, modelid, Float:rx, Float:ry, Float:rz, Float:zoom, vcol1, vcol2;
						reg_int(i, "connected", connected);
						reg_int(i, "id_ad", id_ad);
						reg_int(i, "price", price);
						reg_int(i, "modelid", modelid);
						reg_float(i, "rx", rx);
						reg_float(i, "ry", ry);
						reg_float(i, "rz", rz);
						reg_float(i, "zoom", zoom);
						reg_int(i, "vcol1", vcol1);
						reg_int(i, "vcol2", vcol2);
						pTemp(playerid)[pt_SHOP_ARTICLE_ID][i] = id_ad;

						new Float:Td_Pos[2], td_str[64];
						switch(i)
						{
							case 0: Td_Pos = Float:{212.000000, 152.000000};
							case 1: Td_Pos = Float:{289.000000, 152.000000};
							case 2: Td_Pos = Float:{366.000000, 152.000000};
							case 3: Td_Pos = Float:{212.000000, 229.000000};
							case 4: Td_Pos = Float:{289.000000, 229.000000};
							case 5: Td_Pos = Float:{366.000000, 229.000000};
						}

						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] = CreatePlayerTextDraw(playerid, Td_Pos[0], Td_Pos[1], "");
						PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 62.000000, 55.000000);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 1);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], -1);
						if(connected) PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 0xCCCCCCFF);
						else PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 0x666666FF);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 5);
						PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], modelid);
						PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], rx, ry, rz, zoom);
						PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], vcol1, vcol2);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i]);
						
						format(td_str, sizeof td_str, "%s$", number_format_thousand(price));
						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] = CreatePlayerTextDraw(playerid, Td_Pos[0] + 31.0, Td_Pos[1] + 55.0, td_str);
						PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0.229333, 0.957037);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 2);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], -1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 255);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 1);
						PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i]);

						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);

						inline OnCountQueryLoad()
						{
							new crows;
							if(get_rows(crows))
							{
								if(crows)
								{
									new count, pages;
									cache_get_value_index_int(0, 0, count);
									pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

									format(td_str, sizeof td_str, "-_%d/%d_-", pTemp(playerid)[pt_DIALOG_DB_PAGE] + 1, pages);
									PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], td_str);
								}
							}
						}
						mysql_tquery_inline(handle_db, "SELECT COUNT(id) FROM shop;", using inline OnCountQueryLoad);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
					}
				}
			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT player.connected, shop.*, shop.id AS id_ad FROM shop INNER JOIN player ON shop.id_player = player.id ORDER BY player.connected DESC, shop.date DESC LIMIT %d, %d;", pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT], pTemp(playerid)[pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnShopLoad);
			return 1;
		}
		case PLAYER_SHOP_STATE_MY_ADS:
		{
			if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
			}
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
			
			for(new i = 0; i != 6; i ++)
			{
				pTemp(playerid)[pt_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
				if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
			}
			
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "_");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "_");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Atrs");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Siguiente");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Anterior");

			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);
			
			
			DestroyArticleShopTextDraws(playerid);
			
			//
			inline OnShopLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new td_str[64];
					for(new i = 0; i != rows; i ++)
					{
						new connected, ad_id, price, modelid, Float:rx, Float:ry, Float:rz, Float:zoom, vcol1, vcol2;
						reg_int(i, "connected", connected);
						reg_int(i, "ad_id", ad_id);
						reg_int(i, "price", price);
						reg_int(i, "modelid", modelid);
						reg_float(i, "rx", rx);
						reg_float(i, "ry", ry);
						reg_float(i, "rz", rz);
						reg_float(i, "zoom", zoom);
						reg_int(i, "vcol1", vcol1);
						reg_int(i, "vcol2", vcol2);
						pTemp(playerid)[pt_SHOP_ARTICLE_ID][i] = ad_id;

						new Float:Td_Pos[2];
						switch(i)
						{
							case 0: Td_Pos = Float:{212.000000, 152.000000};
							case 1: Td_Pos = Float:{289.000000, 152.000000};
							case 2: Td_Pos = Float:{366.000000, 152.000000};
							case 3: Td_Pos = Float:{212.000000, 229.000000};
							case 4: Td_Pos = Float:{289.000000, 229.000000};
							case 5: Td_Pos = Float:{366.000000, 229.000000};
						}

						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] = CreatePlayerTextDraw(playerid, Td_Pos[0], Td_Pos[1], "");
						PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 62.000000, 55.000000);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 1);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], -1);
						if(connected) PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 0xCCCCCCFF);
						else PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 0x666666FF);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 5);
						PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], modelid);
						PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], rx, ry, rz, zoom);
						PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], vcol1, vcol2);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i]);
						
						format(td_str, sizeof td_str, "%s$", number_format_thousand(price));
						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] = CreatePlayerTextDraw(playerid, Td_Pos[0] + 31.0, Td_Pos[1] + 55.0, td_str);
						PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0.229333, 0.957037);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 2);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], -1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 255);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 1);
						PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i]);

						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);

						inline OnCountQueryLoad()
						{
							new crows;
							if(get_rows(crows))
							{
								if(crows)
								{
									new count, pages;
									cache_get_value_index_int(0, 0, count);
									pages = GetDatabasePages(count, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);

									format(td_str, sizeof td_str, "-_%d/%d_-", pTemp(playerid)[pt_DIALOG_DB_PAGE] + 1, pages);
									PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], td_str);
								}
							}
						}
						mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM shop WHERE id_player = %d;", PI[playerid][pi_ID]);
						mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
					}
				}
			}
			new limit1 = pTemp(playerid)[pt_DIALOG_DB_PAGE] * pTemp(playerid)[pt_DIALOG_DB_LIMIT];
			if(limit1 < 0) limit1 = 0;
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT player.connected, shop.*, shop.id AS ad_id FROM shop INNER JOIN player ON shop.id_player = player.id WHERE shop.id_player = %d ORDER BY player.connected DESC, shop.date DESC LIMIT %d, %d;", PI[playerid][pi_ID], limit1, pTemp(playerid)[pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnShopLoad);
			return 1;
		}
		case PLAYER_SHOP_STATE_AD:
		{
			inline OnShopAdLoad()
			{
				new rows;
				if(get_rows(rows))
				{
					new td_str[190];
					if(rows)
					{
						new id, id_player, type, price, text[24], modelid, Float:rx, Float:ry, Float:rz, Float:zoom, vcol1, vcol2, date[24], connected, name[24], phone_number;
						reg_int(0, "id", id);
						reg_int(0, "id_player", id_player);
						reg_int(0, "type", type);
						reg_int(0, "price", price);
						reg_name(0, "text", text);
						reg_int(0, "modelid", modelid);
						reg_float(0, "rx", rx);
						reg_float(0, "ry", ry);
						reg_float(0, "rz", rz);
						reg_float(0, "zoom", zoom);
						reg_int(0, "vcol1", vcol1);
						reg_int(0, "vcol2", vcol2);
						reg_name(0, "date", date);
						reg_int(0, "connected", connected);
						reg_name(0, "name", name);
						reg_int(0, "phone_number", phone_number);

						if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
						{
							PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
							PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
						}
						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = CreatePlayerTextDraw(playerid, 212.000000, 179.000000, "");
						PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0.000000, 0.000000);
						PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 92.000000, 91.000000);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 1);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], -1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
						PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
						PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 44284927);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 5);
						PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
						PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], modelid);
						PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], rx, ry, rz, zoom);
						PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], vcol1, vcol2);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
						
						format(td_str, sizeof td_str, "Art¢culo_n|_%d (%s)", id, date);
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], td_str);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
						
						switch(type)
						{
							case SHOP_ARTICLE_TYPE_PROPERTY: format(td_str, sizeof td_str, "Producto:_PropiedadPrecio:_%s$Descripci¦n:%sTlf:_%d_(%s)%s", number_format_thousand(price), text, phone_number, connected ? "online" : "offline", name);
							case SHOP_ARTICLE_TYPE_VEHICLE: format(td_str, sizeof td_str, "Producto:_Veh¢culoPrecio:_%s$Descripci¦n:%sTlf:_%d_(%s)%s", number_format_thousand(price), text, phone_number, connected ? "online" : "offline", name);
							case SHOP_ARTICLE_TYPE_OTHER: format(td_str, sizeof td_str, "Producto:_OtrosPrecio:_%s$Descripci¦n:%sTlf:_%d_(%s)%s", number_format_thousand(price), text, phone_number, connected ? "online" : "offline", name);
						}
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], td_str);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
						
						for(new i = 0; i != 4; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "_");
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "_");
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "_");
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "_");
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Atrs");
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);
						
						if(PI[playerid][pi_ID] == id_player)
						{
							PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Modificar");
							PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Eliminar");
							PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
							PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
						}

						for(new i = 0; i != 6; i ++)
						{
							pTemp(playerid)[pt_SHOP_ARTICLE_ID][i] = 0;
							TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
						}
						
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
						DestroyArticleShopTextDraws(playerid);
					}
					else
					{
						SendClientMessagef(playerid, -1, "Este anuncio ya no está disponible.");
						pTemp(playerid)[pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
					}
				}
				else
				{
					SendClientMessagef(playerid, -1, "Este anuncio ya no está disponible.");
					pTemp(playerid)[pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
				}

			}
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT shop.*, player.connected, player.name, player.phone_number FROM shop INNER JOIN player ON shop.id_player = player.id WHERE shop.id = %d;", pTemp(playerid)[pt_SHOP_SELECTED_ARTICLE_ID]);
			mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnShopAdLoad);
		}
	}
	return 1;
}

HidePlayerShop(playerid)
{
	HidePlayerDialog(playerid);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][3]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][4]);
	
	pTemp(playerid)[pt_SHOP_COME_FROM_MY_ADS] = false;
	pTemp(playerid)[pt_SHOP] = false;
	pTemp(playerid)[pt_SHOP_STATE] = 0;
	
	pTemp(playerid)[pt_DIALOG_DB_LIMIT] = 0;
	pTemp(playerid)[pt_DIALOG_DB_PAGE] = 0;
	
	if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
		PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
	}
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
	
	for(new i = 0; i != 6; i ++)
	{
		pTemp(playerid)[pt_SHOP_ARTICLE_ID][i] = 0;
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
		if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
	}
	DestroyArticleShopTextDraws(playerid);
	
	CancelSelectTextDrawEx(playerid);
	return 1;
}

DestroyArticleShopTextDraws(playerid)
{
	for(new i; i < 6; i++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i]);
			PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] = PlayerText:INVALID_TEXT_DRAW;
		}
		if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i]);
			PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

td_str_legal(const text[])
{
	for(new i = 0; i != strlen(text); i ++)
	{
		if((text[i] >= 91 && text[i] <= 96) || (text[i] >= 58 && text[i] <= 64) || (text[i] < 48 && text[i] != 32) || text[i] > 122)
		{
			return false;
		}
	}
	return true;
}

stock SetPlayerMechanicSkin(playerid)
{
	if(PI[playerid][pi_GENDER] == SEX_MALE)
	{
		switch(PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL])
		{
			case 1: SetPlayerSkin(playerid, 8);
			case 2: SetPlayerSkin(playerid, 50);
			case 3: SetPlayerSkin(playerid, 72);
			case 4: SetPlayerSkin(playerid, 268);
			case 5: SetPlayerSkin(playerid, 268);
			case 6: SetPlayerSkin(playerid, 42);
			case 7: SetPlayerSkin(playerid, 304);
		}
	}
	else
	{
		switch(PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL])
		{
			case 1: SetPlayerSkin(playerid, 41);
			case 2: SetPlayerSkin(playerid, 201);
			case 3: SetPlayerSkin(playerid, 69);
			case 4: SetPlayerSkin(playerid, 148);
			case 5: SetPlayerSkin(playerid, 148);
			case 6: SetPlayerSkin(playerid, 150);
			case 7: SetPlayerSkin(playerid, 76);
		}
	}
}

stock RemoveHexColours(text[])
{
	for(new i = 0; i != strlen(text); i ++)
	{
		if(text[i] == '{') text[i] = '#';
		if(text[i] == '}') text[i] = '#';
	}
}

GetPlayerPlantedPlants(playerid)
{
	new plants;
	
	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) continue;
		if(PLANTS[i][plant_PLANTED_BY_ACCOUNT_ID] == PI[playerid][pi_ID]) plants ++;
	}
	return plants;
}

forward StartPlayerJob(playerid, work, vehicleid);
public StartPlayerJob(playerid, work, vehicleid)
{
	switch(work)
	{
		case WORK_TAXI:
		{
			SetTaxiPlayerMarkers(playerid);
			ResetVehicleTaxiMeter(vehicleid);
			ShowPlayerTaxiMeter(playerid);
			
			new passenger = GetVehicleFirstPassenger(vehicleid);
			if(passenger != INVALID_PLAYER_ID)
			{
				ShowPlayerTaxiMeter(passenger);
				if(PlayerTemp[passenger][pt_WANT_TAXI])
				{
					PlayerTemp[passenger][pt_WANT_TAXI] = false;
					DisablePlayerTaxiMark(passenger);
				}
				
				TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = true;
				GetVehiclePos(vehicleid, TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z]);
				KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
				TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], passenger);
			}
		}
		case WORK_TRUCK:
		{
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED])
			{
				if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) SendClientMessagef(playerid, -1, "El camión ya ha entregado la mercancía, ve al punto de partida para cobrar.");
				else SendClientMessagef(playerid, -1, "Ve a entregar la mercancía al punto marcado.");
				
				SetPlayerTruckCheckpoint(playerid, vehicleid);
			}
			else SendMessage(playerid, "Para comenzar a trabajar carga el camion en los ~r~Puntos de carga.");
		}
		case WORK_FUMIGATOR:
		{	
			pTemp(playerid)[pt_FUMIGATOR_PROCCESS] = 0;
			SendClientMessagef(playerid, -1, "Ve hasta los puntos de control para completar el trabajo.");
			SendClientMessagef(playerid, -1, "Si te bajas del avión se cancelará el trabajo.");
			Set_FUMIGATOR_Checkpoint(playerid);
			
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
			UpdateVehicleParams(vehicleid);
		}
		case WORK_LUMBERJACK:
		{
			pTemp(playerid)[pt_PLAYER_CARRYING_TREE] = false;
			pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] = -1;
			
			DestroyPlayerKeyPress(playerid);
			DisablePlayerArmedWeapons(playerid);
			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerAttachedObject(playerid, 9, 341, 1, -0.172999, -0.165, -0.053999, 0.0, -7.599999, -9.6);
			
			SendClientMessage(playerid,-1, "{"#SILVER_COLOR"}Los árboles que puedes talar están repartidos por la zona, si te alejas demasiado el trabajo se cancelará.");
		}
		case WORK_TRASH:
		{
			if(PI[playerid][pi_GENDER] == SEX_MALE)
			{
				SetPlayerSkin(playerid, 16);
				for(new i = 0; i != MAX_SU_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
			}
		}
		case WORK_MECHANIC:
		{
			new label_str[128];
			format(label_str, sizeof label_str, "%s", MECHANIC_RANKS[ PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL] ]);
			
			if(IsValidDynamic3DTextLabel(pTemp(playerid)[pt_MECHANIC_LABEL]))
			{
				DestroyDynamic3DTextLabel(pTemp(playerid)[pt_MECHANIC_LABEL]);
				pTemp(playerid)[pt_MECHANIC_LABEL] = Text3D:INVALID_STREAMER_ID;
			}
			pTemp(playerid)[pt_MECHANIC_LABEL] = CreateDynamic3DTextLabel(label_str, 0x91C3CDFF, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);

			for(new i = 0; i != MAX_SU_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);

			SetPlayerMechanicSkin(playerid);
			SetPlayerColorEx(playerid, PLAYER_MECHANIC_COLOR);
		}
		case WORK_POLICE:
		{
			new label_str[128];
			format(label_str, sizeof label_str, "%s | Nº%d | %c. %s", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], PI[playerid][pi_PLACA_PD], pTemp(playerid)[pt_FIRST_NAME][0], pTemp(playerid)[pt_SUB_NAME]);
			
			if(IsValidDynamic3DTextLabel(pTemp(playerid)[pt_POLICE_LABEL]))
			{
				DestroyDynamic3DTextLabel(pTemp(playerid)[pt_POLICE_LABEL]);
				pTemp(playerid)[pt_POLICE_LABEL] = Text3D:INVALID_STREAMER_ID;
			}
			pTemp(playerid)[pt_POLICE_LABEL] = CreateDynamic3DTextLabel(label_str, 0xCCCCCCCC, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);

			for(new i = 0; i != MAX_SU_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);

			SetWantedPlayerMarkers(playerid);
			SetPlayerColorEx(playerid, POLICE_PLAYER_COLOR);
			SetPlayerSkin(playerid, PI[playerid][pi_POLICE_DUTY]);
		}
		case WORK_PIZZA:
		{
			if(PI[playerid][pi_GENDER] == SEX_MALE)
			{
				SetPlayerSkin(playerid, 155);
				for(new i = 0; i != MAX_SU_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
				DisablePlayerArmedWeapons(playerid);
			}
			pTemp(playerid)[pt_PIZZA_PROCCESS] = 0;
			pTemp(playerid)[pt_DELIVERED_PIZZAS] = 0;
			SendClientMessagef(playerid, -1, "Para comenzar a repartir súbete a una moto de la pizzería.");
		}
		case WORK_MEDIC:
		{
			if(PI[playerid][pi_GENDER] == SEX_MALE) SetPlayerSkin(playerid, male_medic_skins[ random(sizeof(male_medic_skins)) ]);
			else SetPlayerSkin(playerid, 308);
			for(new i = 0; i != MAX_SU_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
			SetInjuredPlayerMarkers(playerid);
		}
		case WORK_TRAILER:
		{
			if(GetTrailerInfoLoaded(vehicleid))
			{
				SetPlayerTrailerCheckpoint(playerid, vehicleid);
			}
			else SendMessage(playerid, "Para comenzar a trabajar prepara el trailer en los ~r~Puntos de carga.");
		}
		case WORK_TRAFFICKER:
		{
			if(GetTraffickerInfoLoaded(vehicleid))
			{
				SetPlayerTraffickerCheckpoint(playerid, vehicleid);
			}
			else
			{
				SendMessage(playerid, "Para comenzar a trabajar prepara el vehiculo en los ~r~Puntos de carga.");
				SetGPSTraffickerLoad(playerid);
			}
		}
	}
	
	pTemp(playerid)[pt_WORKING_IN] = work;
	return 1;
}

forward EndPlayerJob(playerid, work, bool:changeskin);
public EndPlayerJob(playerid, work, bool:changeskin)
{
	switch(pTemp(playerid)[pt_WORKING_IN])
	{
		case WORK_TAXI:
		{
			if(pTemp(playerid)[pt_TAXI_METER_ENABLED])
			{
				SetNormalPlayerMarkers(playerid);
				HidePlayerTaxiMeter(playerid);
			}
		}
		case WORK_TRUCK:
		{
			if(pTemp(playerid)[pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(TRUCK_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][truck_vehicle_DRIVER_USER_ID] == PI[playerid][pi_ID])
				{
					if(TRUCK_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][truck_vehicle_LOADING])
					{
						HidePlayerDialog(playerid);
						KillTimer(pTemp(playerid)[pt_TIMERS][9]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
						SetVehicleToRespawnEx(pTemp(playerid)[pt_LAST_VEHICLE_ID]);
					}
					if(TRUCK_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][truck_vehicle_UNLOADING])
					{
						TRUCK_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][truck_vehicle_UNLOADING] = false;
						KillTimer(pTemp(playerid)[pt_TIMERS][9]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
					}
				}
			}
			if(IsValidDynamicCP(pTemp(playerid)[pt_TRUCK_CHECKPOINT]))
			{
				DestroyDynamicCP(pTemp(playerid)[pt_TRUCK_CHECKPOINT]);
				pTemp(playerid)[pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
			}
		}
		case WORK_TRAFFICKER:
		{
			if(pTemp(playerid)[pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(GetTraffickerDriver(pTemp(playerid)[pt_LAST_VEHICLE_ID]) == PI[playerid][pi_ID])
				{
					if(GetTraffickerInfoLoading(pTemp(playerid)[pt_LAST_VEHICLE_ID]))
					{
						HidePlayerDialog(playerid);
						KillTimer(pTemp(playerid)[pt_TIMERS][9]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
						SetVehicleToRespawnEx(pTemp(playerid)[pt_LAST_VEHICLE_ID]);
					}
					if(GetTraffickerInfoUnLoading(pTemp(playerid)[pt_LAST_VEHICLE_ID]))
					{
						SetTraffickerInfoUnLoading(pTemp(playerid)[pt_LAST_VEHICLE_ID], false);

						KillTimer(pTemp(playerid)[pt_TIMERS][9]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
					}
				}
			}
			if(IsValidDynamicCP(pTemp(playerid)[pt_TRUCK_CHECKPOINT]))
			{
				DestroyDynamicCP(pTemp(playerid)[pt_TRUCK_CHECKPOINT]);
				pTemp(playerid)[pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
			}
		}
		case WORK_FUMIGATOR:
		{
			if(IsValidDynamicRaceCP(pTemp(playerid)[pt_FUMIGATOR_CHECKPOINT]))
			{
				DestroyDynamicRaceCP(pTemp(playerid)[pt_FUMIGATOR_CHECKPOINT]);
				pTemp(playerid)[pt_FUMIGATOR_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if(pTemp(playerid)[pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(WORK_VEHICLES[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][work_vehicle_WORK] == WORK_FUMIGATOR) SetVehicleToRespawnEx(pTemp(playerid)[pt_LAST_VEHICLE_ID]);
			}
		}
		case WORK_LUMBERJACK: CancelLumberjackWork(playerid);
		case WORK_FARMER: CancelPlayerPlanting(playerid);
		case WORK_TRASH:
		{
			if(changeskin)
			{
				SetPlayerSkin(playerid, PI[playerid][pi_SKIN]);
				SetPlayerToys(playerid);
			}
			
			if(pTemp(playerid)[pt_TRASH_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
				{
					if(pTemp(playerid)[pt_TRASH_DRIVER])
					{
						SendClientMessage(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "{"#SILVER_COLOR"}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
						CancelTrashWork(playerid, TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], pTemp(playerid)[pt_TRASH_VEHICLE_ID]);
					}
					if(pTemp(playerid)[pt_TRASH_PASSENGER])
					{
						SendClientMessage(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "{"#SILVER_COLOR"}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
						CancelTrashWork(TRASH_VEHICLES[ pTemp(playerid)[pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], playerid, pTemp(playerid)[pt_TRASH_VEHICLE_ID]);
					}
				}
			}
		}
		case WORK_POLICE:
		{
			pTemp(playerid)[pt_POLICE_RADIO] = 0;
			
			if(IsValidDynamic3DTextLabel(pTemp(playerid)[pt_POLICE_LABEL]))
			{
				DestroyDynamic3DTextLabel(pTemp(playerid)[pt_POLICE_LABEL]);
				pTemp(playerid)[pt_POLICE_LABEL] = Text3D:INVALID_STREAMER_ID;
			}
			if(changeskin)
			{
				SetPlayerSkin(playerid, PI[playerid][pi_SKIN]);
				SetPlayerToys(playerid);
				PI[playerid][pi_POLICE_DUTY] = 0;
			}

			SetPlayerColorEx(playerid, PLAYER_COLOR);
			SetNormalPlayerMarkers(playerid);
		}
		case WORK_MECHANIC:
		{
			if(changeskin)
			{
				if(IsValidDynamic3DTextLabel(pTemp(playerid)[pt_MECHANIC_LABEL]))
				{
					DestroyDynamic3DTextLabel(pTemp(playerid)[pt_MECHANIC_LABEL]);
					pTemp(playerid)[pt_MECHANIC_LABEL] = Text3D:INVALID_STREAMER_ID;
				}

				SetPlayerSkin(playerid, PI[playerid][pi_SKIN]);
				SetPlayerToys(playerid);
			}

			SetNormalPlayerMarkers(playerid);
			SetPlayerColorEx(playerid, PLAYER_COLOR);
		}
		case WORK_PIZZA:
		{
			if(pTemp(playerid)[pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(PIZZA_VEHICLE[ pTemp(playerid)[pt_LAST_VEHICLE_ID] ][pizza_vehicle_DRIVER_AID] == PI[playerid][pi_ID]) SetVehicleToRespawnEx(pTemp(playerid)[pt_LAST_VEHICLE_ID]);
			}
			if(IsValidDynamicCP(pTemp(playerid)[pt_PIZZA_CHECKPOINT]))
			{
				DestroyDynamicCP(pTemp(playerid)[pt_PIZZA_CHECKPOINT]);
				pTemp(playerid)[pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if(IsValidDynamicActor(pTemp(playerid)[pt_PIZZA_ACTOR]))
			{
				DestroyDynamicActor(pTemp(playerid)[pt_PIZZA_ACTOR]);
				pTemp(playerid)[pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
			}
			if(changeskin)
			{
				SetPlayerSkin(playerid, PI[playerid][pi_SKIN]);
				SetPlayerToys(playerid);
			}
		}
		case WORK_MEDIC:
		{
			if(changeskin)
			{
				SetPlayerSkin(playerid, PI[playerid][pi_SKIN]);
				SetPlayerToys(playerid);
			}
			SetNormalPlayerMarkers(playerid);
		}
		case WORK_TRAILER:
		{
			if(pTemp(playerid)[pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(GetTrailerDriver(pTemp(playerid)[pt_LAST_VEHICLE_ID]) == PI[playerid][pi_ID])
				{
					if(GetTrailerInfoLoading(pTemp(playerid)[pt_LAST_VEHICLE_ID]))
					{
						HidePlayerDialog(playerid);
						KillTimer(pTemp(playerid)[pt_TIMERS][9]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
					}
					if(GetTrailerInfoUnLoading(pTemp(playerid)[pt_LAST_VEHICLE_ID]))
					{
						SetTrailerInfoUnLoading(pTemp(playerid)[pt_LAST_VEHICLE_ID], false);
						KillTimer(pTemp(playerid)[pt_TIMERS][9]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
					}
				}
			}
			if(IsValidDynamicCP(pTemp(playerid)[pt_TRAILER_CHECKPOINT]))
			{
				DestroyDynamicCP(pTemp(playerid)[pt_TRAILER_CHECKPOINT]);
				pTemp(playerid)[pt_TRAILER_CHECKPOINT] = INVALID_STREAMER_ID;
			}
		}
	}
	
	EnablePlayerArmedWeapons(playerid);
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET level = %d WHERE id_player = %d AND id_work = %d;", PLAYER_WORKS[playerid][ pTemp(playerid)[pt_WORKING_IN] ][pwork_LEVEL], PI[playerid][pi_ID], pTemp(playerid)[pt_WORKING_IN]);
	mysql_tquery(handle_db, QUERY_BUFFER);
	pTemp(playerid)[pt_WORKING_IN] = WORK_NONE;
	return 1;
}

CountPlayerJobs(playerid)
{
	new count;
	for(new i = 1; i != sizeof(work_info); i ++)
	{
		if(PLAYER_WORKS[playerid][i][pwork_SET]) count ++;
	}
	return count;
}

getPlayerWorks(playerid)
{
	new works[27 * sizeof(work_info)], count;
	for(new i = 1; i != sizeof(work_info); i ++)
	{
		if(PLAYER_WORKS[playerid][i][pwork_SET])
		{
			if(count > 0) strcat(works, ", ");
			strcat(works, work_info[i][work_info_NAME]);
			
			count ++;
		}
	}
	
	if(!count) works = "ninguno";
	return works;
}

SetPlayer_Pizza_Checkpoint(playerid, point)
{
	if(IsValidDynamicCP(pTemp(playerid)[pt_PIZZA_CHECKPOINT]))
	{
		DestroyDynamicCP(pTemp(playerid)[pt_PIZZA_CHECKPOINT]);
		pTemp(playerid)[pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicActor(pTemp(playerid)[pt_PIZZA_ACTOR]))
	{
		DestroyDynamicActor(pTemp(playerid)[pt_PIZZA_ACTOR]);
		pTemp(playerid)[pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
	}
	
	if(point == -1)
	{
		pTemp(playerid)[pt_PIZZA_CHECKPOINT] = CreateDynamicCP(2096.279785, -1797.436279, 12.982056, 3.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_PIZZA_FINISH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, pTemp(playerid)[pt_PIZZA_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		pTemp(playerid)[pt_PIZZA_ACTOR] = CreateDynamicActor(minrand(0, 311), PIZZA_DELIVERY_POINT[point][0], PIZZA_DELIVERY_POINT[point][1], PIZZA_DELIVERY_POINT[point][2], PIZZA_DELIVERY_POINT[point][3], .playerid = playerid);
		
		new Float:pos[3];
		pos[0] = PIZZA_DELIVERY_POINT[point][0] + (1.5 * floatsin(-PIZZA_DELIVERY_POINT[point][3], degrees));
		pos[1] = PIZZA_DELIVERY_POINT[point][1] + (1.5 * floatcos(-PIZZA_DELIVERY_POINT[point][3], degrees));
		pos[2] = PIZZA_DELIVERY_POINT[point][2];
	
		pTemp(playerid)[pt_PIZZA_CHECKPOINT] = CreateDynamicCP(pos[0], pos[1], pos[2], 1.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_PIZZA_DEL;
		Streamer_SetArrayData(STREAMER_TYPE_CP, pTemp(playerid)[pt_PIZZA_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

randomEx(max, exception)
{
	new rand = random(max);
	while(rand == exception)
	{
		rand = random(max);
	}
	return rand;
}

SetPlayerSkillLevels(playerid)
{	
	if(PI[playerid][pi_LEVEL] >= 7)
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN,		200);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 				40);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 		500);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 				999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 			50);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 					999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 				999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 					999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 			999);
	}
	else
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 0);
	}
	return 1;
}

DeleteIlegalInv(playerid)
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
	{
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET seed_cannabis = 0, seed_crack = 0, cannabis = 0, crack = 0 WHERE id = %d;", PI[playerid][pi_ID]);
		mysql_tquery(handle_db, QUERY_BUFFER);

		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id_player = %d;", PI[playerid][pi_ID]);
		mysql_tquery(handle_db, QUERY_BUFFER);
		ResetPlayerWeaponsEx(playerid);
	}
	
	PI[playerid][pi_SEED_CANNABIS] = 0;
	PI[playerid][pi_SEED_CRACK] = 0;
	PI[playerid][pi_CANNABIS] = 0;
	PI[playerid][pi_CRACK] = 0;
	return 1;
}

forward HealthDown(playerid);
public HealthDown(playerid)
{
	if(PI[playerid][pi_STATE] != ROLEPLAY_STATE_CRACK) return 1;
	
	GivePlayerHealthEx(playerid, -0.3);
	
	if(GetPlayerDistanceFromPoint(playerid, pTemp(playerid)[pt_INJURED_POS][0], pTemp(playerid)[pt_INJURED_POS][1], pTemp(playerid)[pt_INJURED_POS][2]) > 0.5) SetPlayerPosEx(playerid, pTemp(playerid)[pt_INJURED_POS][0], pTemp(playerid)[pt_INJURED_POS][1], pTemp(playerid)[pt_INJURED_POS][2], pTemp(playerid)[pt_INJURED_POS][3], 0, 0);
	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, true, 0, 0, 1, 0, 1);
	
	KillTimer(pTemp(playerid)[pt_TIMERS][16]);
	pTemp(playerid)[pt_TIMERS][16] = SetTimerEx("HealthDown", 2000, false, "i", playerid);
	return 1;
}

SetInjuredPlayerMarkers(playerid)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PI[i][pi_STATE] == ROLEPLAY_STATE_CRACK)
				{
					SetPlayerMarkerForPlayer(playerid, i, 0x4aba00FF);
				}
			}
		}
	}
	return 1;
}

SendAlertToMedics(playerid)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MEDIC][pwork_SET]) continue;
				if(PlayerTemp[i][pt_WORKING_IN] != WORK_MEDIC) continue;

				SetPlayerMarkerForPlayer(i, playerid, 0x4aba00FF);
			}
		}
	}
	return 1;
}

DisablePlayerInjuredMark(playerid)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MEDIC][pwork_SET]) continue;
				if(PlayerTemp[i][pt_WORKING_IN] != WORK_MEDIC) continue;

				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

CMD:curar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessagef(playerid, -1, "No estás depie.");
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK) return SendClientMessagef(playerid, -1, "No puedes curar estando herido.");
	if(PI[playerid][pi_CREW] && CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_FIGHTING]) return SendClientMessagef(playerid, -1, "No puedes curar mientras tu banda está en combate.");

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/curar [PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendClientMessagef(playerid, -1, "El jugador no está conectado.");
	if(to_player == playerid) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/curar [PlayerID/Nombre]");
	
	new Float:pos[3];
	GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");

	if(PI[to_player][pi_STATE] != ROLEPLAY_STATE_CRACK) return SendClientMessagef(playerid, -1, "Esta persona no está herida.");
	if(PI[to_player][pi_CREW] && CREW_INFO[ PlayerTemp[to_player][pt_CREW_INDEX] ][crew_FIGHTING]) return SendClientMessagef(playerid, -1, "No puedes curar a esta persona porque su banda está en combate.");

	if(!PLAYER_WORKS[playerid][WORK_MEDIC][pwork_SET] && pTemp(playerid)[pt_WORKING_IN] != WORK_MEDIC) {
		if(PI[playerid][pi_MEDICAL_KITS] <= 0) return SendClientMessagef(playerid, -1, "No tienes botiquines para curar a esta persona.");
		else {
			new now = gettime();
			if(pTemp(playerid)[pt_COOLDOWN_MEDICAL_KIT] > now) return SendClientMessagef(playerid, -1, "Debes esperar %d segundos para volver a poder curar.", pTemp(playerid)[pt_COOLDOWN_MEDICAL_KIT] - now);
			pTemp(playerid)[pt_COOLDOWN_MEDICAL_KIT] = now + 300;

			PI[playerid][pi_MEDICAL_KITS] --;
			SendClientMessagef(playerid, -1, "Has usado 1 botiquín para curar a esta persona.");
		}
	}
	
	KillTimer(PlayerTemp[to_player][pt_TIMERS][16]);
	PlayerTemp[to_player][pt_TIMERS][16] = SetTimerEx("StandUp", 5000, false, "ii", playerid, to_player);
	DisablePlayerInjuredMark(to_player);
	
	ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, false, 0, 0, 0, 0, 1);
	return 1;
}

forward StandUp(medic, playerid);
public StandUp(medic, playerid)
{
	if(PLAYER_WORKS[medic][WORK_MEDIC][pwork_SET] && PlayerTemp[medic][pt_WORKING_IN] == WORK_MEDIC) {
		new work_extra_payment;
		if(work_info[WORK_MEDIC][work_info_EXTRA_PAY] > 0 && work_info[WORK_MEDIC][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_MEDIC][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[medic][WORK_MEDIC][pwork_LEVEL], work_info[WORK_MEDIC][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT];
		
			if(PI[medic][pi_VIP]) work_extra_payment += VIP_WORK_EXTRA_PAY;
		}
		
		new money = minrand(600, 800) + work_extra_payment;
		GivePlayerCash(medic, money, true, false);
		PLAYER_WORKS[medic][WORK_MEDIC][pwork_LEVEL] ++;
		SendClientMessagef(medic, -1, "Has salvado la vida de esta persona, has ganado {"#PRIMARY_COLOR"}%s$.", number_format_thousand(money));
	}
	
	PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
	SetWeaponsForPlayer(playerid);
	if(PI[playerid][pi_VIP]) SetPlayerHealthEx(playerid, 50.0);
	else SetPlayerHealthEx(playerid, 25.0);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(playerid);
	return 1;
}

CMD:banda(playerid, params[])
{
	if(!PI[playerid][pi_CREW])
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendClientMessagef(playerid, -1, "Los policías no pueden tener bandas.");
		
		new index = GetAvaibleCrewIndex();
		if(index == -1)
		{
			SendClientMessagef(playerid, -1, "No perteneces a ninguna banda y no se puede crear una porque no hay espacio disponible, el límite de bandas es %d.", MAX_CREWS);
			return 1;
		}
		
		ShowDialog(playerid, DIALOG_CREATE_CREW);
		return 1;
	}
	
	ShowDialog(playerid, DIALOG_CREW_MENU);
	return 1;
}

CMD:abandonar(playerid, params[])
{
	if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No perteneces a ninguna banda.");
	if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY]) return SendClientMessagef(playerid, -1, "No tienes permiso para abandonar territorios.");
	if(pTemp(playerid)[pt_LAST_TERRITORY] == INVALID_STREAMER_ID) return SendClientMessagef(playerid, -1, "No estás en un territorio de tu banda.");
	if(!IsPlayerInDynamicArea(playerid, TERRITORIES[ pTemp(playerid)[pt_LAST_TERRITORY] ][territory_AREA])) return SendClientMessagef(playerid, -1, "No estás en un territorio de tu banda.");
	if(TERRITORIES[ pTemp(playerid)[pt_LAST_TERRITORY] ][territory_CREW_ID] != PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No estás en un territorio de tu banda.");			
	if(CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_FIGHTING]) return SendClientMessagef(playerid, -1, "No puedes abandonar territorios mientras tu banda está en combate.");
	
	pTemp(playerid)[pt_PLAYER_TERRITORY_PRO] = pTemp(playerid)[pt_LAST_TERRITORY];
	ShowDialog(playerid, DIALOG_CREW_LEAVE_TERRITORY);
	return 1;
}

CMD:invitar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	
	if(!PI[playerid][pi_CREW]) return SendMessage(playerid, "~r~No eres miembro de ninguna banda.");
	if(!CREW_RANK_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE]) return SendClientMessagef(playerid, -1, "No tienes permiso para invitar personas a la banda.");
	if(CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_FIGHTING]) return SendClientMessagef(playerid, -1, "No puedes invitar a gente a la banda cuando la banda está en combate.");
	
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/invitar [PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendClientMessagef(playerid, -1, "El jugador está desconectado.");
	if(to_player == playerid) return SendClientMessagef(playerid, -1, "Eres tú.");
	
	new members = CountCrewPlayers(PI[playerid][pi_CREW]);
	if(members >= MAX_CREW_MEMBERS) {
		return SendClientMessagef(playerid, -1, "Actualmente la banda cuenta con %d miembros, el límite es de %d miembros.", members, MAX_CREW_MEMBERS);
	}
	
	new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
	if(PLAYER_WORKS[to_player][WORK_POLICE][pwork_SET]) return SendClientMessagef(playerid, -1, "Esta persona es policía y no puede tener banda.");
	if(PI[to_player][pi_CREW]) return SendClientMessagef(playerid, -1, "Esta persona pertenece a otra banda.");
	if(PlayerTemp[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No puedes invitar a este jugador ahora.");
	
	if(gettime() < PlayerTemp[ to_player ][pt_LAST_GOT_CREW] + 600)
	{
		new time = 600 - (gettime() - PlayerTemp[to_player][pt_LAST_GOT_CREW]);
		SendClientMessagef(playerid, -1, "La otra persona debe esperar %s minutos para volver a ser invitada.", TimeConvert(time));
		return 1;
	}
	
	pTemp(playerid)[pt_CREW_INVITE_PID] = to_player;
	pTemp(playerid)[pt_CREW_INVITE_AID] = PI[to_player][pi_ID];
	SendClientMessagef(playerid, -1, "Quieres invitar a %s a la banda, elige el rango que le ofreces.", PlayerTemp[to_player][pt_NAME]);
	ShowDialog(playerid, DIALOG_CREW_INVITE_RANK);
	return 1;
}

CMD:reclutar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessagef(playerid, -1, "Ahora no puedes usar este comando.");
	
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 11) return SendClientMessagef(playerid, -1, "Debes ser al menos rango %s para reclutar gente.", POLICE_RANKS[11]);
		
		new to_player;
		if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/reclutar [PlayerID/Nombre]");
		if(!IsPlayerConnected(to_player)) return SendClientMessagef(playerid, -1, "El jugador está desconectado.");
		if(to_player == playerid) return SendClientMessagef(playerid, -1, "No puedes invitarte.");
		
		new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessagef(playerid, -1, "Este jugador no está cerca tuya.");
		if(PI[to_player][pi_CREW]) return SendClientMessage(playerid,-1, "{"#RED_COLOR"}Esta persona pertenece a una banda y no puede ser policía.");
		if(PLAYER_WORKS[to_player][WORK_POLICE][pwork_SET]) return SendClientMessagef(playerid, -1, "Éste usuario es miembro.");
		if(PlayerTemp[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No puedes reclutar a este jugador ahora.");
		
		new player_jobs = CountPlayerJobs(to_player);
		if(PI[to_player][pi_VIP])
		{
			if(player_jobs >= MAX_SU_WORKS)
			{
				SendClientMessagef(playerid, -1, "Esta persona ya tiene trabajo y no puede tener más.");
				return 1;
			}
		}
		else
		{
			if(player_jobs >= MAX_NU_WORKS)
			{
				SendClientMessagef(playerid, -1, "Esta persona ya tiene trabajo y no puede tener más.");
				return 1;
			}
		}
		
		if(PlayerTemp[to_player][pt_WORKING_IN]) return SendClientMessagef(playerid, -1, "Esta persona no puede unirse porque esta de servicio en su trabajo.");
		
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1, level = 1;", PI[to_player][pi_ID], WORK_POLICE);
		mysql_tquery(handle_db, QUERY_BUFFER);

		PLAYER_WORKS[to_player][WORK_POLICE][pwork_SET] = true;
		PLAYER_WORKS[to_player][WORK_POLICE][pwork_LEVEL] = 1;
		
		PI[to_player][pi_PLACA_PD] = random(10000000);
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET placa_pd = %d WHERE id = %d;", PI[to_player][pi_PLACA_PD], PI[to_player][pi_ID]);
		mysql_tquery(handle_db, QUERY_BUFFER);
		
		SendClientMessagef(playerid, -1, "%s ahora es policía.", PlayerTemp[to_player][pt_NAME]);
		SendClientMessage(to_player, -1, "Ahora eres policía.");
	}
	else SendClientMessagef(playerid, -1, "Debes ser miembro de la policía o mecanico para usar este comando.");
	return 1;
}



GetAvaibleCrewIndex()
{
	for(new i = 0; i != MAX_CREWS; i ++)
	{
		if(!CREW_INFO[i][crew_VALID]) return i;
	}
	return -1;
}


NewCrewRegister(index, playerid)
{
	if(!CREW_INFO[index][crew_VALID]) return 0;
	
	inline OnCrewInserted()
	{
		CREW_INFO[index][crew_ID] = cache_insert_id();
		if(CREW_INFO[index][crew_ID])
		{
			PI[playerid][pi_CREW] = CREW_INFO[index][crew_ID];
			PI[playerid][pi_CREW_RANK] = 0;
			pTemp(playerid)[pt_CREW_INDEX] = index;
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = %d, crew_rank = %d WHERE id = %d;", PI[playerid][pi_CREW], PI[playerid][pi_CREW_RANK], PI[playerid][pi_ID]);
			mysql_tquery(handle_db, QUERY_BUFFER);
			RegisterNewCrewRank(index, 0);
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO crews (name, color) VALUES ('%e', %d);", CREW_INFO[index][crew_NAME], CREW_INFO[index][crew_COLOR]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCrewInserted);
	return 1;
}

SendMessageToCrewMembers(crew_id, color, const message[], sender = INVALID_PLAYER_ID)
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i) && PlayerTemp[i][pt_USER_LOGGED])
		{
			if(PI[i][pi_CREW] == crew_id)
			{
				if(sender == i) continue;

				SendClientMessage(i, color, message);
			}
		}
	}
	return 1;
}

RegisterNewCrewRank(index, rank)
{
	inline OnCrewRankInserted()
	{
		CREW_RANK_INFO[index][rank][crew_rank_ID] = cache_insert_id();
	}
	mysql_format
	(
		handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, 
		"\
			INSERT INTO crew_ranks (id_crew, rank_pos, rank_name, permission0, permission1, permission2, permission3, permission4, permission5, permission6, permission7, permission8, permission9, permission10)\
			VALUES (%d, %d, '%e', %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d);\
		",
			CREW_INFO[index][crew_ID], rank, CREW_RANK_INFO[index][rank][crew_rank_NAME], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][0], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][1],
			CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][2], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][3], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][4],
			CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][5], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][6], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][7],
			CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][8], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][9], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][10]
	);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCrewRankInserted);
	return 1;
}

SetPlayerGangZones(playerid)
{
	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(!TERRITORIES[i][territory_VALID]) continue;
		
		if(TERRITORIES[i][territory_WAR])
		{
			new flash_color, r, g, b, a;
			HexToRGBA(CREW_INFO[ TERRITORIES[i][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
			flash_color = RGBAToHex(r, g, b, 135);
			
			GangZoneFlashForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE], flash_color);
		}
		else GangZoneShowForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE], TERRITORIES[i][territory_COLOR]);
	}
	return 1;
}

HidePlayerGangZones(playerid)
{
	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(!TERRITORIES[i][territory_VALID]) continue;
		
		GangZoneHideForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE]);
	}
	return 1;
}

stock HexToRGBA(colour, &r, &g, &b, &a) //By Betamaster
{
    r = (colour >> 24) & 0xFF;
    g = (colour >> 16) & 0xFF;
    b = (colour >> 8) & 0xFF;
    a = colour & 0xFF;
}

stock RGBAToHex(r, g, b, a) //By Betamaster
{
    return (r<<24 | g<<16 | b<<8 | a);
}

stock RGBAToARGB(col)
{
	return ((((col) << 24) & 0xFF000000) | (((col) >>> 8) & 0xFFFFFF));
}

stock ARGBToRGBA(col)
{
	return ((((col) << 8) & 0xFFFFFF00) | (((col) >>> 24) & 0xFF));
}

UpdateGangZoneColor(index)
{
	if(TERRITORIES[index][territory_WAR])
	{
		new flash_color, r, g, b, a;
		HexToRGBA(CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
		flash_color = RGBAToHex(r, g, b, 135);
		
		LoopEx(i, MAX_PLAYERS, 0)
		{
			if(IsPlayerConnected(i))
			{
				if(PI[i][pi_CREW])
				{
					GangZoneFlashForPlayer(i, TERRITORIES[index][territory_GANG_ZONE], flash_color);
				}
			}
		}
	}
	else
	{
		LoopEx(i, MAX_PLAYERS, 0)
		{
			if(IsPlayerConnected(i))
			{
				if(PI[i][pi_CREW])
				{
					GangZoneShowForPlayer(i, TERRITORIES[index][territory_GANG_ZONE], TERRITORIES[index][territory_COLOR]);
				}
			}
		}
	}
	return 1;
}

StartTerritoryAttack(crew_index, territory_index, time)
{
	CREW_INFO[crew_index][crew_FIGHTING] = true;
	CREW_INFO[crew_index][crew_LAST_ATTACK] = gettime();
	TERRITORIES[territory_index][territory_WAR] = true;
	TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = crew_index;
	TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = time;
	TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
	UpdateGangZoneColor(territory_index);
	
	new message[145];
	format(message, sizeof message, "Conquista:_%s", TimeConvert(TERRITORIES[territory_index][territory_WAR_TIME_LEFT]));
	TextDrawSetString(TERRITORIES[territory_index][territory_TEXTDRAW], message);
	
	KillTimer(TERRITORIES[territory_index][territory_TIMER]);
	if(time) TERRITORIES[territory_index][territory_TIMER] = SetTimerEx("UpdateTerritoryAttack", 1000, false, "i", territory_index);
	else TERRITORIES[territory_index][territory_TIMER] = CallLocalFunction("UpdateTerritoryAttack", "i", territory_index);

	if(TERRITORIES[territory_index][territory_OCCUPIED])
	{
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = true;
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '{%06x}%s{ffffff}' está atacando un territorio de la banda '{%06x}%s{ffffff}' en {"#PRIMARY_COLOR"}%s.", CREW_INFO[crew_index][crew_COLOR] >>> 8, CREW_INFO[crew_index][crew_NAME], CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
	}
	else
	{
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '{%06x}%s{ffffff}' está atacando un territorio en {"#PRIMARY_COLOR"}%s.", CREW_INFO[crew_index][crew_COLOR] >>> 8, CREW_INFO[crew_index][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
	}

	new message_police[145];
	format(message_police, sizeof message_police, "{"#POLICE_COLOR"}[Central policía] {FFFFFF}La banda '{%06x}%s{ffffff}' está atacando un territorio en {"#POLICE_COLOR"}%s.", CREW_INFO[crew_index][crew_COLOR] >>> 8, CREW_INFO[crew_index][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
	
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][pi_CREW])
			{
				SendClientMessage(i, -1, message);
				if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
				{	
					if(PI[i][pi_WANTED_LEVEL] < 2)
						SetPlayerWantedLevelEx(i, 2);

					new r, g, b, a;
					HexToRGBA(CREW_INFO[ PlayerTemp[i][pt_CREW_INDEX] ][crew_COLOR], r, g, b, a);
					SetPlayerColorEx(i, RGBAToHex(r, g, b, 0));
					
					TextDrawShowForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
					TextDrawShowForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
				}
			}
			
			if(PLAYER_WORKS[i][WORK_POLICE][pwork_SET])
			{
				if(PlayerTemp[i][pt_WORKING_IN] == WORK_POLICE)
				{
					SendClientMessage(i, -1, message_police);
				}
			}
		}
	}
	return 1;
}

forward UpdateTerritoryAttack(territory_index);
public UpdateTerritoryAttack(territory_index)
{
	if(!TERRITORIES[territory_index][territory_VALID]) return 1;
	if(!TERRITORIES[territory_index][territory_WAR]) return 1;
	
	if(TERRITORIES[territory_index][territory_WAR_TIME_LEFT] <= 0)
	{
		new old_crew = TERRITORIES[territory_index][territory_CREW_ID];
		
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_CREW_ID] = CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID];
		TERRITORIES[territory_index][territory_CREW_INDEX] = TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX];
		
		new r, g, b, a;
		HexToRGBA(CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
		TERRITORIES[territory_index][territory_COLOR] = RGBAToHex(r, g, b, 135);
		
		new message[145];
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '{%06x}%s{ffffff}' ha conquistado un nuevo territorio.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);
	
		new label_str[256];
		if(TERRITORIES[territory_index][territory_OCCUPIED])
		{
			for(new i = 0; i != MAX_PROPERTIES; i ++)
			{
				if(!PROPERTY_INFO[i][property_VALID]) continue;
				if(!PROPERTY_INFO[i][property_CREW]) continue;
				if(PROPERTY_INFO[i][property_CREW_ID] != old_crew) continue;
				
				if(IsPointInDynamicArea(TERRITORIES[territory_index][territory_AREA], PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z]))
				{
					PROPERTY_INFO[i][property_CREW_ID] = TERRITORIES[territory_index][territory_CREW_ID];
					
					format
					(
						label_str, 
						sizeof label_str, 
						"\
							Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
							{FFFFFF}Banda: {"#PRIMARY_COLOR"}%s\n\
							{FFFFFF}Presiona {"#PRIMARY_COLOR"}'Y' {FFFFFF}para entrar.\
						", PROPERTY_INFO[i][property_ID], CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_NAME]
					);
					
					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				}
			}
		}
		
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE territories SET id_crew = %d WHERE id = %d;", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID], TERRITORIES[territory_index][territory_ID]);
		mysql_tquery(handle_db, QUERY_BUFFER);
		
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_LAST_ATTACK] = gettime();
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_WAR] = false;
		TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = 0;
		TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = 0;
		TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
		KillTimer(TERRITORIES[territory_index][territory_TIMER]);
		UpdateGangZoneColor(territory_index);
		TERRITORIES[territory_index][territory_OCCUPIED] = true;
		
		new prize = minrand(5000, 7525);
		new prize_message[64];
		format(prize_message, sizeof prize_message, "{"#SILVER_COLOR"}Has ganado %d$ por conquistar este territorio.", prize);
		
		LoopEx(i, MAX_PLAYERS, 0)
		{
			if(IsPlayerConnected(i))
			{
				if(PI[i][pi_CREW])
				{
					SendClientMessage(i, -1, message);
					if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
					{
						if(PI[i][pi_CREW] == TERRITORIES[territory_index][territory_CREW_ID])
						{
							GivePlayerCash(i, prize, true, false);
							SendClientMessage(i, -1, prize_message);
						}
						SetPlayerNormalColor(i);
						
						TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
					}
				}
			}
		}

		CallLocalFunction("OnCrewCaptureTerritory", "iiii", TERRITORIES[territory_index][territory_CREW_ID], TERRITORIES[territory_index][territory_CREW_INDEX], TERRITORIES[territory_index][territory_ID], territory_index);
		return 1;
	}
	
	
	TERRITORIES[territory_index][territory_WAR_TIME_LEFT] --;
	new message[145];
	format(message, sizeof message, "Conquista:_%s", TimeConvert(TERRITORIES[territory_index][territory_WAR_TIME_LEFT]));
	TextDrawSetString(TERRITORIES[territory_index][territory_TEXTDRAW], message);
	
	
	new attackers_in_area = CountCrewPlayersInTerritory(TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX], territory_index);
	if(attackers_in_area <= 0)
	{
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '{%06x}%s{ffffff}' no ha podido conquistar el territorio que estaba atacando.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);

		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_LAST_ATTACK] = gettime();
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_FIGHTING] = false;
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_WAR] = false;
		TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = 0;
		TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = 0;
		TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
		KillTimer(TERRITORIES[territory_index][territory_TIMER]);
		UpdateGangZoneColor(territory_index);

		LoopEx(i, MAX_PLAYERS, 0)
		{
			if(IsPlayerConnected(i))
			{
				if(PI[i][pi_CREW])
				{
					SendClientMessage(i, -1, message);
					if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
					{
						SetPlayerNormalColor(i);
						
						TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
					}
				}
			}
		}
		return 1;
	}
	
	KillTimer(TERRITORIES[territory_index][territory_TIMER]);
	TERRITORIES[territory_index][territory_TIMER] = SetTimerEx("UpdateTerritoryAttack", 1000, false, "i", territory_index);
	return 1;
}

CountCrewPlayersInTerritory(crew_index, territory_index)
{
	new count;
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][pi_CREW])
			{
				if(PlayerTemp[i][pt_CREW_INDEX] == crew_index)
				{
					if(PI[i][pi_STATE] == ROLEPLAY_STATE_NORMAL && PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
						{
							count ++;
						}
					}
				}
			}
		}
	}
	return count;
}

SetPlayerColorEx(playerid, color)
{
	pTemp(playerid)[pt_PLAYER_COLOR] = color;
	return SetPlayerColor(playerid, color);
}
	
LoadServerInfo()
{
	new File:AC = fopen("SERVER/AC.txt", io_read), ac_str[128], ac_num;
	if(AC)
	{
		while(fread(AC, ac_str))
		{
			if(ac_num >= sizeof(ac_Info)) break;
			sscanf(ac_str, "p<,>bbdd", ac_Info[ac_num][ac_Enabled], ac_Info[ac_num][ac_Kick], ac_Info[ac_num][ac_Detections], ac_Info[ac_num][ac_Interval]);
			ac_num ++;
		}
		fclose(AC);
	}
	return 1;
}

WriteAnticheatRules()
{
	new File:AC = fopen("SERVER/AC.txt", io_write), ac_str[128];
	if(AC)
	{
		for(new i = 0; i != sizeof(ac_Info); i ++)
		{
			format(ac_str, sizeof ac_str, "%d,%d,%d,%d\r\n", ac_Info[i][ac_Enabled], ac_Info[i][ac_Kick], ac_Info[i][ac_Detections], ac_Info[i][ac_Interval]);
			fwrite(AC, ac_str);
		}
		fclose(AC);
	}
	return 1;
}

ReLockPlayerVehicles(playerid, bool:remove = false)
{
	if(PI[playerid][pi_ID] == 0) return 0;
	if(PI[playerid][pi_VIP]) return 0;
	
	inline OnQueryLoadedInline()
	{
		new rows;
		if(get_rows(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_SU_VEHICLES)
				{
					printf("---> MAX_SU_VEHICLES superado al cargar de base de datos.");
					break;
				}

				new veh_did;
				cache_get_value_index_int(i, 0, veh_did);

				//
				new vehicle_id = GetPlayerVehicleIdFromDbId(veh_did);
				if(vehicle_id != INVALID_VEHICLE_ID)
				{
					PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = true;
					if(i >= MAX_NU_VEHICLES)
					{
						if(remove)
						{
							if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_OCCUPIED])
							{
								SetVehicleVelocity(vehicle_id, 0.0, 0.0, 0.0);
								if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DRIVER] != INVALID_PLAYER_ID) RemovePlayerFromVehicle(playerid);
							}
						}
						GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_ENGINE] = 0;
						GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_LIGHTS] = 0;
						GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = 1;
						PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = false;
						UpdateVehicleParams(vehicle_id);
					}
				}
			}
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM pvehicles WHERE id_player = %d ORDER BY id DESC LIMIT %d;", PI[playerid][pi_ID], MAX_SU_VEHICLES);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnQueryLoadedInline);
	return 1;
}

UnlockPlayerVehicles(playerid)
{
	new total;
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		
		if(PLAYER_VEHICLES[i][player_vehicle_ID] == PI[playerid][pi_ID])
		{
			if(total >= MAX_SU_VEHICLES) break;
			
			PLAYER_VEHICLES[i][player_vehicle_ACCESSIBLE] = true;
		}
	}
	return total;
}

GetPlayerVehicleIdFromDbId(veh_did)
{
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		
		if(PLAYER_VEHICLES[i][player_vehicle_ID] == veh_did) return i;
	}
	return INVALID_VEHICLE_ID;
}

CMD:vip(playerid, params[])
{
	if(PI[playerid][pi_VIP] && PI[playerid][pi_ADMIN_LEVEL] >= CMD_MODERATOR) return SendMessage(playerid, "Ya tienes VIP.");
	
	if(PI[playerid][pi_VIP]) ShowDialog(playerid, DIALOG_VIP);
	else ShowDialog(playerid, DIALOG_VIP_BUY);
	return 1;
}

CMD:setcoins(playerid, params[])
{
	new to_player, sd;
	if(sscanf(params, "ud", to_player, sd)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setcoins <player_id> <sd>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	
	PI[to_player][pi_COINS] = sd;
	UpdateReputationTextDraws(playerid);
	SendClientMessagef(to_player, -1, "Ahora tienes %d "SERVER_COIN".", sd);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);
	
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d WHERE id = %d;", PI[to_player][pi_COINS], PI[to_player][pi_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);
	
	SendCmdLogToAdmins(playerid, "setcoins", params);
	return 1;
}

CMD:givecoins(playerid, params[])
{
	new to_player, sd;
	if(sscanf(params, "ud", to_player, sd)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/givecoins <player_id> <sd>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	
	PI[to_player][pi_COINS] += sd;
	UpdateReputationTextDraws(playerid);
	SendClientMessagef(to_player, -1, "{"#SILVER_COLOR"}Has comprado %d "SERVER_COIN".", sd);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);
	
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d WHERE id = %d;", PI[to_player][pi_COINS], PI[to_player][pi_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);
	
	SendCmdLogToAdmins(playerid, "givecoins", params);
	return 1;
}

CMD:setvip(playerid, params[])
{
	new to_player, vip_level, days;
	if(sscanf(params, "udd", to_player, vip_level, days)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setvip <player_id> <vip_level> <dias>");
	if(PI[playerid][pi_ADMIN_LEVEL] <= CMD_ADMINISTRATOR && days > 5) return SendMessage(playerid, "no puedes dar mas de 5 dias.");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	
	SetPlayerVip(to_player, vip_level, 0, days);
	
	SendCmdLogToAdmins(playerid, "setvip", params);
	return 1;
}

CheckPlayerSuperUser(playerid)
{
	if(PI[playerid][pi_VIP])
	{
		inline OnInfoQueryLoad()
		{
			new rows;
			if(get_rows(rows))
			{
				if(rows)
				{
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET vip = 0, vip_expire_date = '0000-00-00 00:00:00' WHERE id = %d;", PI[playerid][pi_ID]);
					mysql_tquery(handle_db, QUERY_BUFFER);

					PI[playerid][pi_VIP] = false;
					PI[playerid][pi_VIP_EXPIRE_DATE][0] = EOS;
					SendClientMessagef(playerid, -1, "¡Tu VIP ha expirado! Usa /vip para comprar de nuevo.");
					if(GetPlayerSkin(playerid) == PI[playerid][pi_SKIN]) SetPlayerToys(playerid);
					ReLockPlayerVehicles(playerid, true);
				}
				pTemp(playerid)[pt_LAST_SU_CHECK] = gettime();
			}
		}
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE id = %d AND NOW() >= vip_expire_date;", PI[playerid][pi_ID]);
		mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	}
	return 1;
}

CMD:darskin(playerid, params[])
{
    new to_player, skin;
    if(sscanf(params, "ud", to_player, skin)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setskin <player_id> <skin>");
    if(!IsPlayerConnected(to_player)) return SendClientMessagef(playerid, -1, "Jugador desconectado");

	PI[to_player][pi_SKIN] = skin;
    SetPlayerSkin(to_player, PI[to_player][pi_SKIN]);
	
	SendClientMessagef(playerid, -1, "Skin '%s (%d)' cambiado a '%d'.", PI[to_player][pi_NAME], to_player, skin);
	SendCmdLogToAdmins(playerid, "setskin", params);
    return 1;
}
alias:darskin("setskin");

CMD:setfstyle(playerid, params[])
{
    new to_player, style;
    if(sscanf(params, "ud", to_player, style)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/setfstyle <player_id> <style>");
    if(!IsPlayerConnected(to_player)) return SendClientMessagef(playerid, -1, "Jugador desconectado");

	PI[to_player][pi_FIGHT_STYLE] = style;
    SetPlayerFightingStyle(to_player, PI[to_player][pi_FIGHT_STYLE]);
	
	SendClientMessagef(playerid, -1, "FStyle '%s (%d)' cambiado a '%d'.", PI[to_player][pi_NAME], to_player, style);
	SendCmdLogToAdmins(playerid, "setfstyle", params);
    return 1;
}

CMD:ls(playerid, params[])
{
    new to_player;
    if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/ls <player_id>");
    if(!IsPlayerConnected(to_player)) return SendClientMessagef(playerid, -1, "Jugador desconectado");
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");

	PI[to_player][pi_STATE] = ROLEPLAY_STATE_NORMAL;
	PI[to_player][pi_LOCAL_INTERIOR] = 0;
	PlayerTemp[to_player][pt_INTERIOR_INDEX] = -1;
	PI[to_player][pi_INTERIOR] = 0;
	PI[to_player][pi_POLICE_JAIL_TIME] = 0;

	SavePlayerLastPos(to_player);
    SetPlayerPosEx(to_player, 1555.400390, -1675.611694, 16.195312, 0.0, 0, 0, true);
    SetPlayerCityWeather(to_player);

	SendClientMessagef(playerid, -1, "Jugador '%s (%d)' fue llevado a LS.", PI[to_player][pi_NAME], to_player);
    SendCmdLogToAdmins(playerid, "ls", params);
	return 1;
}

CMD:lsdb(playerid, params[])
{
	new to_account;
	if(sscanf(params, "d", to_account)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/osendls <DB-ID>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				reg_int(0, "id", id);
				reg_name(0, "ip", ip);
				reg_name(0, "name", name);
				reg_int(0, "connected", connected);
				reg_int(0, "playerid", pid);
				reg_int(0, "admin_level", admin_level);

				if(connected) SendClientMessagef(playerid, -1, "JUGADOR '%s' DB-ID '%d' conectado utilice /ls, su player_id: %d.", name, id, pid);
				else
				{
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET pos_x = 1555.400390, pos_y = -1675.611694, pos_z = 16.195312, angle = 0, state = %d, interior = 0, local_interior = 0, police_jail_time = 0 WHERE id = %d;", ROLEPLAY_STATE_NORMAL, to_account);
					mysql_tquery(handle_db, QUERY_BUFFER);
					SendClientMessagef(playerid, -1, "Jugador '%s' DB-ID '%d' ahora aparecerá en LS.", name, id);
				}
			}
			else SendClientMessagef(playerid, -1, "No se encontro la DB-ID.");
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	SendCmdLogToAdmins(playerid, "lsdb", params);
	return 1;
}

CMD:ccajero(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) != 0) return SendMessage(playerid, "Se requiere vw 0");
	if(GetPlayerInterior(playerid) != 0) return SendMessage(playerid, "Se requiere int 0");

	pTemp(playerid)[pt_ATM_MAKER] = true;

	new Float:pos[3], Float:angle, index;
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, angle);
	pos[0] += (1.5 * floatsin(-angle, degrees));
	pos[1] += (1.5 * floatcos(-angle, degrees));

	index = GetEmptyATMSlot();
	if(index == -1) return SendMessage(playerid, "Limite de cajeros alcanzado.");

	ATM_BANK[ index ][atm_objectid] = CreateDynamicObject(DEFAULT_ATM_MODELID, pos[0], pos[1], pos[2], 0.0, 0.0, angle);
	
	new info[3];
	info[0] = OBJECT_TYPE_ATM;
	info[1] = index;
	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, ATM_BANK[ index ][atm_objectid], E_STREAMER_EXTRA_ID, info);

	Streamer_Update(playerid);
	EditDynamicObject(playerid, ATM_BANK[ index ][atm_objectid]);

	SendMessage(playerid, "Ajusta el cajero en una posicion y pulsa el boton guardar.");
	return 1;
}

CMD:dcajero(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id)) return SendMessage(playerid, "Modo de uso: /dcajero <ID>");

	for(new i = 0; i != MAX_ATM_BANK; i++)
	{
		if(ATM_BANK[i][atm_id] != id) continue;
		if(!ATM_BANK[i][atm_valid]) continue;
			
		DestroyDynamicObject(ATM_BANK[i][atm_objectid]);
		ATM_BANK[i][atm_objectid] = INVALID_STREAMER_ID;

		if(IsValidDynamic3DTextLabel(ATM_BANK[i][atm_label]))
		{
			DestroyDynamic3DTextLabel(ATM_BANK[i][atm_label]);
			ATM_BANK[i][atm_label] = Text3D:INVALID_STREAMER_ID;
		}

		DestroyDynamicPickup(ATM_BANK[i][atm_pickupid]);
		ATM_BANK[i][atm_pickupid] = INVALID_STREAMER_ID;

		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM atm_bank WHERE id = %d;", ATM_BANK[i][atm_id]);
		mysql_tquery(handle_db, QUERY_BUFFER);

		ATM_BANK[i][atm_valid] = false;
		ATM_BANK[i][atm_id] = -1;

		SendMessagef(playerid, "El cajero (ID: %d) ha sido eliminado.", id);
		SendClientMessagef(playerid, ORANGE_COLOR2, "Si el cajero ya no exisita y te aparece que fue eliminado, no hay ningun problema.");
	}

	return 1;
}

CMD:chotdog(playerid, params[])
{
	new vid, Float:pos[4], colour[16];
	if(sscanf(params, "s[7]", colour)) return SendClientMessage(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/chotdog <Color del texto [Formato Hex sin llaves '{}']>");

	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, pos[3]);

	new hexfixed[16];
	format(hexfixed, sizeof hexfixed, "{%s}", colour);

	pTemp(playerid)[pt_DEATH_HOTDOG_BYPASS] = true;

	vid = AddHotdogVehicle(pos[0], pos[1], pos[2], pos[3], hexfixed, -1, false);
	PutPlayerInVehicleEx(playerid, vid, 0);
	SendCmdLogToAdmins(playerid, "chotdog", params);
	return 1;
}

CMD:dhotdog(playerid, params[])
{
	new hid, vehicleid;
	if(sscanf(params, "d", vehicleid)) return SendClientMessage(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/dhotdog <vehicleid>");
	
	hid = FindHotdogID(vehicleid);
	if(hid == -1) return SendMessage(playerid, "~r~Carrito hotdog no encontrado.");

	ClearHotdog(vehicleid);
	DestroyVehicleEx(vehicleid);

	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM hotdog_vehicles WHERE id = %d;", hid);
	mysql_tquery(handle_db, QUERY_BUFFER);

	SendMessagef(playerid, "Vehiculo ID: ~b~%d~w~ Eliminado.", hid);
	SendCmdLogToAdmins(playerid, "dhotdog", params);
	return 1;
}

CMD:vpcar(playerid, params[])
{
	new to_player, modelid;
	if(sscanf(params, "ud", to_player, modelid)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/vpcar <playerid> <modelid>");
	if(!IsPlayerConnected(to_player)) return SendClientMessagef(playerid, -1, "Jugador desconectado.");
	if(modelid < 400 || modelid > 611) return SendClientMessagef(playerid, -1, "Modelo de vehículo no válido.");
	
	new pvehicles = CountPlayerVehicles(to_player);
	if(pvehicles >= MAX_SU_VEHICLES) return SendClientMessagef(playerid, -1, "El jugador no puede tener más vehículos, su límite es %d.", MAX_SU_VEHICLES);
	if(!PI[to_player][pi_VIP])
	{
		if(pvehicles >= MAX_NU_VEHICLES)
		{
			SendClientMessagef(playerid, -1, "El jugador no puede tener más vehículos, su límite es %d.", MAX_NU_VEHICLES);
			return 1;
		}
	}
	
	new Float:pos[4];
	GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(to_player, pos[3]);
	
	new vid = AddPersonalVehicle
	(
		to_player,
		modelid,
		pos[0],
		pos[1],
		pos[2],
		pos[3],
		1,
		1,
		VEHICLE_INFO[ modelid - 400 ][vehicle_info_MAX_GAS]
	);
	if(!vid) return SendClientMessagef(playerid, -1, "No se pueden añadir más vehículos.");
	
	SendCmdLogToAdmins(playerid, "vpcar", params);
	return 1;
}

CMD:revivir(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/revivir <playerid>");
	
	if(PI[to_player][pi_STATE] != ROLEPLAY_STATE_CRACK) return SendClientMessagef(playerid, -1, "Esta persona no está herida.");
	
	DisablePlayerInjuredMark(to_player);
	PI[to_player][pi_STATE] = ROLEPLAY_STATE_NORMAL;
	SetWeaponsForPlayer(to_player);
	if(PI[to_player][pi_VIP]) SetPlayerHealthEx(to_player, 50.0);
	else SetPlayerHealthEx(to_player, 25.0);
	ApplyAnimation(to_player, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(to_player);
	
	SendCmdLogToAdmins(playerid, "revive", params);
	return 1;
}
alias:revivir("revive");

CMD:tuning(playerid, params[])
{	
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendMessage(playerid, "No estás en nigún vehículo.");
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendMessage(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendMessage(playerid, "No estás en el lugar adecuado.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, -602.2586, -508.6797, 25.2885)) return SendMessage(playerid, "No estás en el lugar adecuado.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendMessage(playerid, "Solo puedes tunear tus vehículos personales.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendMessage(playerid, "Solo puedes tunear tus vehículos personales.");
	if(!VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NORMAL_SPEEDO]) return SendMessage(playerid, "Este vehículo no se puede tunear.");
	if(PI[playerid][pi_LEVEL] < 2) return SendMessage(playerid, "Debes de ser al menos nivel 2 para tunear vehículos aquí.");
	
	pTemp(playerid)[pt_IN_TUNING_GARAGE] = true;
	pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] = vehicleid;
	
	SetVehiclePosEx(vehicleid, -610.9049, -515.7297, 27.0);
	SetVehicleZAngle(vehicleid, 0.0);
	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
	SetVehicleVirtualWorldEx(vehicleid, playerid + MAX_PLAYERS);
	SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	UpdateVehicleParams(vehicleid);
	HidePlayerSpeedoMeter(playerid);
	SetCameraBehindPlayer(playerid);

	ShowDialog(playerid, DIALOG_VOBJECT_MENU);
	return 1;
}

stock GetPlayerCameraLookAt(playerid, &Float:X, &Float:Y, &Float:Z)
{
    new Float:pos[6];
    GetPlayerCameraPos(playerid, pos[0], pos[1], pos[2]);
    GetPlayerCameraFrontVector(playerid, pos[3], pos[4], pos[5]);
    X = floatadd(pos[0], pos[3]);
    Y = floatadd(pos[1], pos[4]);
    Z = floatadd(pos[2], pos[5]);
    return 1;
}

GetVehicleFreeObjectSlot(vehicleid)
{
	for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
	{
		if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) return i;
	}
	return -1;
}

UpdateVehicleAttachedObject(vehicleid, slot, material = false)
{
	if(VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED])
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] == INVALID_STREAMER_ID)
		{
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = 	CreateDynamicObject
																	(
																		VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
																		0.0,
																		0.0,
																		0.0,
																		0.0,
																		0.0,
																		0.0
																	);
		}
		
		if(material)
		{
			switch(VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++)
					{
						SetDynamicObjectMaterial(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], i, -1, "none", "none", VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][i]);
					}
				}
			}
		}
		
		AttachDynamicObjectToVehicle
		(
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],
			vehicleid,
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]
		);
	}
	else
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
		}
	}
	return 1;
}

EditVehicleObject(playerid, vehicleid, slot)
{
	if(pTemp(playerid)[pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
	{
		DestroyPlayerObject(playerid, pTemp(playerid)[pt_PIVOT_OBJECT]);
		pTemp(playerid)[pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
	}
	
	pTemp(playerid)[pt_TUNING_EDIT_SLOT] = slot;
	GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
	
	new Float:pos[3];
	pos[0] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] + VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	pos[1] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] + VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	pos[2] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] + VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];
	
	pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][0] = VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][1] = VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][2] = VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];
	pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][3] = VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ROT][0];
	pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][4] = VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ROT][1];
	pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][5] = VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ROT][2];
	
	pTemp(playerid)[pt_PIVOT_OBJECT] = CreatePlayerObject(playerid, 999, pos[0], pos[1], pos[2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]);
	SetPlayerObjectMaterial(playerid, pTemp(playerid)[pt_PIVOT_OBJECT], 0, 0, "null", "null");
	SetPlayerObjectMaterial(playerid, pTemp(playerid)[pt_PIVOT_OBJECT], 1, 0, "null", "null");
	
	Streamer_Update(playerid);
	EditPlayerObject(playerid, pTemp(playerid)[pt_PIVOT_OBJECT]);
	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if(playerobject)
	{
		if(objectid == pTemp(playerid)[pt_PIVOT_OBJECT])
		{
			switch(response)
			{
				case EDIT_RESPONSE_CANCEL:
				{
					if(pTemp(playerid)[pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, pTemp(playerid)[pt_PIVOT_OBJECT]);
						pTemp(playerid)[pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
					}
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][0];
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][1];
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][2];
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][3];
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][4];
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][5];
					UpdateVehicleAttachedObject(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], pTemp(playerid)[pt_TUNING_EDIT_SLOT]);
					Streamer_Update(playerid);
					
					SendMessage(playerid, "Has cancelado la edición.");
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}
				case EDIT_RESPONSE_FINAL:
				{
					if(pTemp(playerid)[pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, pTemp(playerid)[pt_PIVOT_OBJECT]);
						pTemp(playerid)[pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
					}
					
					new Float:v_size[3];
					GetVehicleModelInfo(GLOBAL_VEHICLES[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID], VEHICLE_MODEL_INFO_SIZE, v_size[0], v_size[1], v_size[2]);
					
					if	(
							(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] >= v_size[0] || -v_size[0] >= VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0]) || 
							(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] >= v_size[1] || -v_size[1] >= VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1]) ||
							(VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] >= v_size[2] || -v_size[2] >= VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2])
						)
					{
						SendMessage(playerid, "La posición del objeto está demasiado lejos del vehículo.");
						VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][0];
						VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][1];
						VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][2];
						VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][3];
						VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][4];
						VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = pTemp(playerid)[pt_OLD_EDIT_VOBJECT_POS][5];
						UpdateVehicleAttachedObject(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], pTemp(playerid)[pt_TUNING_EDIT_SLOT]);
						Streamer_Update(playerid);
					}
					
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = true;
					SendMessage(playerid, "Objeto actualizado.");
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}
				case EDIT_RESPONSE_UPDATE:
				{
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = fX - GLOBAL_VEHICLES[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][0];
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = fY - GLOBAL_VEHICLES[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][1];
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = fZ - GLOBAL_VEHICLES[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][2];
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = fRotX;
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = fRotY;
					VEHICLE_OBJECTS[ pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID] ][ pTemp(playerid)[pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = fRotZ;
					UpdateVehicleAttachedObject(pTemp(playerid)[pt_TUNING_GARAGE_VEHICLEID], pTemp(playerid)[pt_TUNING_EDIT_SLOT]);
				}
			}
		}
	}
	return 1;
}

SetVehicleVirtualWorldEx(vehicleid, worldid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD] = worldid;
	
	for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
	{
		if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) continue;
		if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] == INVALID_STREAMER_ID) continue;
		
		Streamer_SetIntData(STREAMER_TYPE_OBJECT, VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID], E_STREAMER_WORLD_ID, GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD]);
	}
	
	SetVehicleVirtualWorld(vehicleid, worldid);
	return 1;
}

RegisterNewVehicleObject(vehicleid, slot)
{
	inline OnVobjectInserted()
	{
		VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = cache_insert_id();
	}

	mysql_format
	(
		handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO vobjects (id_vehicle, type, name, modelid, off_x, off_y, off_z, rot_x, rot_y, rot_z, attached, color0, color1, color2, color3, color4)\
			VALUES(%d, %d, '%e', %d, %f, %f, %f, %f, %f, %f, %d, %d, %d, %d, %d, %d);\
		",
			PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4]
	);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnVobjectInserted);
	return 1;
}

UpdateVehicleObject(vehicleid, slot)
{
	mysql_format
	(
		handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			UPDATE vobjects SET \
				id_vehicle = %d,\
				type = %d,\
				name = '%e',\
				modelid = %d,\
				off_x = %f,\
				off_y = %f,\
				off_z = %f,\
				rot_x = %f,\
				rot_y = %f,\
				rot_z = %f,\
				attached = %d,\
				color0 = %d,\
				color1 = %d,\
				color2 = %d,\
				color3 = %d,\
				color4 = %d \
			WHERE id = %d;\
		",
			PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4],

			VEHICLE_OBJECTS[vehicleid][slot][vobject_ID]
	);
	mysql_tquery(handle_db, QUERY_BUFFER);
	return 1;
}

FixTextDrawString(message[], bool:space = false) 
{
	for(new len = strlen(message), pos; pos < len; pos ++)
	{
		switch(message[pos])
		{
			case 'à': message[pos] = 151;
			case 'á': message[pos] = 152;
			case 'â': message[pos] = 153;
			case 'ä': message[pos] = 154;
			case 'À': message[pos] = 128;
			case 'Á': message[pos] = 129;
			case 'Â': message[pos] = 130;
			case 'Ä': message[pos] = 131;
			case 'è': message[pos] = 157;
			case 'é': message[pos] = 158;
			case 'ê': message[pos] = 159;
			case 'ë': message[pos] = 160;
			case 'È': message[pos] = 134;
			case 'É': message[pos] = 135;
			case 'Ê': message[pos] = 136;
			case 'Ë': message[pos] = 137;
			case 'ì': message[pos] = 161;
			case 'í': message[pos] = 162;
			case 'î': message[pos] = 163;
			case 'ï': message[pos] = 164;
			case 'Ì': message[pos] = 138;
			case 'Í': message[pos] = 139;
			case 'Î': message[pos] = 140;
			case 'Ï': message[pos] = 141;
			case 'ò': message[pos] = 165;
			case 'ó': message[pos] = 166;
			case 'ô': message[pos] = 167;
			case 'ö': message[pos] = 168;
			case 'Ò': message[pos] = 142;
			case 'Ó': message[pos] = 143;
			case 'Ô': message[pos] = 144;
			case 'Ö': message[pos] = 145;
			case 'ù': message[pos] = 169;
			case 'ú': message[pos] = 170;
			case 'û': message[pos] = 171;
			case 'ü': message[pos] = 172;
			case 'Ù': message[pos] = 146;
			case 'Ú': message[pos] = 147;
			case 'Û': message[pos] = 148;
			case 'Ü': message[pos] = 149;
			case 'ñ': message[pos] = 174;
			case 'Ñ': message[pos] = 173;
			case '¡': message[pos] = 64;
			case '¿': message[pos] = 175;
			case '`': message[pos] = 177;
			case '&': message[pos] = 38;
			case ' ': 
			{
				if(space) 
				{
					message[pos] = '_';
				}
			}
			default: message[pos] = message[pos];
		}
	}
}

PlayerPlaySoundEx(playerid, sound, Float:X, Float:Y, Float:Z)
{
	if(PI[playerid][pi_CONFIG_SOUNDS]) PlayerPlaySound(playerid, sound, X, Y, Z);
	return 1;
}

PlayAudioStreamForPlayerEx(playerid, const url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(PI[playerid][pi_CONFIG_AUDIO]) PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
	return 1;
}

TogglePlayerControllableEx(playerid, bool:controllable)
{
	pTemp(playerid)[pt_CONTROL] = controllable;
	return TogglePlayerControllable(playerid, controllable);
}

IsPlayerInSafeZone(playerid)
{
	for(new i = 0; i != sizeof SAFE_ZONES; i ++)
	{
		if(IsPlayerInDynamicArea(playerid, SAFE_ZONES[i][safe_zone_AREA_ID]))
		{
			return true;
		}
	}
	return false;
}

SetPlayerVip(playerid, set, price_coin = 0, days = 30)
{
	PI[playerid][pi_COINS] -= price_coin;
	PI[playerid][pi_VIP] = set;

	UpdateReputationTextDraws(playerid);
	
	inline OnInfoQueryLoad()
	{
		inline OnCountQueryLoad()
		{
			new rows;
			if(get_rows(rows))
			{
				if(rows)
				{
					cache_get_value_index(0, 0, PI[playerid][pi_VIP_EXPIRE_DATE]);
					SendClientMessagef(playerid, -1, "{"#PRIMARY_COLOR"}¡Felicidades! {FFFFFF}Has comprado VIP por %d días, fecha de caducidad: %s.", days, PI[playerid][pi_VIP_EXPIRE_DATE]);
					SendClientMessage(playerid, -1, "Puedes utilizar {"#PRIMARY_COLOR"}/vip {FFFFFF}para ver el tiempo restante o renovar.");
					UnlockPlayerVehicles(playerid);

					if(GetPlayerSkin(playerid) == PI[playerid][pi_SKIN]) SetPlayerToys(playerid);
				}
			}
		}
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT vip_expire_date FROM player WHERE id = %d;", PI[playerid][pi_ID]);
		mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnCountQueryLoad);
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d, vip = %d, vip_expire_date = DATE_ADD(NOW(), INTERVAL %d DAY) WHERE id = %d;", PI[playerid][pi_COINS], PI[playerid][pi_VIP], days, PI[playerid][pi_ID]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

UpdateUnnocupiedPropertyLabel(index)
{
	if(!PROPERTY_INFO[index][property_VALID]) return 0;
	if(PROPERTY_INFO[index][property_SOLD]) return 0;
	
	new label_str[256];
	if(PROPERTY_INFO[index][property_VIP_LEVEL])
	{
		if(PROPERTY_INFO[index][property_EXTRA])
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
					\n\
					{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
					{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], PROPERTY_INFO[index][property_EXTRA], PROPERTY_INFO[index][property_LEVEL]
			);
		}
		else
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
					\n\
					{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
					{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[index][property_PRICE]), PROPERTY_INFO[index][property_LEVEL]
			);
		}
	}
	else
	{
		if(PROPERTY_INFO[index][property_EXTRA])
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
					{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], PROPERTY_INFO[index][property_EXTRA], PROPERTY_INFO[index][property_LEVEL]
			);
		}
		else
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
					{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[index][property_PRICE]), PROPERTY_INFO[index][property_LEVEL]
			);
		}
	}
	UpdateDynamic3DTextLabelText(PROPERTY_INFO[index][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
	return 1;
}


FreezePlayer(playerid, ms = 2000)
{
	TogglePlayerControllableEx(playerid, false);
	KillTimer(pTemp(playerid)[pt_TIMERS][3]);
	pTemp(playerid)[pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", ms, false, "ib", playerid, true);
	return 1;
}

forward CarJackingFinish(playerid);
public CarJackingFinish(playerid)
{
	return TogglePlayerControllableEx(playerid, true);
}

SetPlayerNormalColor(playerid)
{
	if(IsPlayerWorking(playerid, WORK_POLICE)) return SetPlayerColorEx(playerid, POLICE_PLAYER_COLOR);
	if(IsPlayerWorking(playerid, WORK_MECHANIC)) return SetPlayerColorEx(playerid, PLAYER_MECHANIC_COLOR);
	return SetPlayerColorEx(playerid, PLAYER_COLOR);
}

SendAdminAd(color, const text[])
{
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if((PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PI[i][pi_CONFIG_ADMIN])
			{
				SendClientMessage(i, color, text);
			}
		}
	}
	return 1;
}

#define MIN_SECONDS_BETWEEN_COMMANDS 1 // Deben pasar al menos 1 segundos entre comando y comando.
public OnPlayerCommandReceived(playerid, cmd[], params[], flags) 
{
	if(pTemp(playerid)[pt_KICKED]) return 0;
	
	if(pTemp(playerid)[pt_GAME_STATE] != GAME_STATE_NORMAL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_HOSPITAL)
	{
		SendClientMessagef(playerid, -1, "Ahora no puedes usar comandos.");
		return 0;
	}
	if(pTemp(playerid)[pt_SELECT_TEXTDRAW]) { SendClientMessagef(playerid, -1, "Ahora no puedes usar comandos, pulsa 'ESCAPE' para cerrar el menú."); return 0; }
	
	
	new interval = GetTickDiff(GetTickCount(), pTemp(playerid)[pt_ANTIFLOOD_COMMANDS]);
	if(interval < MIN_SECONDS_BETWEEN_COMMANDS)
	{
		if(ac_Info[CHEAT_COMMAND_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_IMMUNITY])
			{
				if(interval < 50)
				{
					if(!ac_Info[CHEAT_COMMAND_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_COMMAND_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_COMMAND_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_COMMAND_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_COMMAND_SPAMMER, float(interval));
					}
				}
			}
		}
		SendClientMessagef(playerid, -1, "Cálmate."); 
		return 0; 
	}
	
	if(flags)
	{
		if(flags == CMD_DISABLED)
		{
			SendMessage(playerid, "~r~Este comando esta deshabilitado.");
			return 0;
		}

		if(flags > PI[playerid][pi_ADMIN_LEVEL])
		{
			SendMessage(playerid, "No puedes usar este comando.");
			return 0;
		}

		if(!pTemp(playerid)[pt_ADMIN_SERVICE])
		{
			SendMessagef(playerid, "~r~No estas de servicio como %s.", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ]);
			return 0;
		}
	}

	if(!CheckCommandInDuty(cmd))
	{
		if(pTemp(playerid)[pt_ADMIN_SERVICE] && !flags)
		{
			HideInfoMessages(playerid);
			SendInfoMessage(playerid, "STAFF en Servicio~n~~n~Mientras estes en servicio, tu uso de comandos estara limitado.~n~~n~");
			return 0;
		}
	}
	
	pTemp(playerid)[pt_ANTIFLOOD_COMMANDS] = GetTickCount();
	printf("[CMD] %s (%d): /%s %s", PI[playerid][pi_NAME], PI[playerid][pi_ID], cmd, params);
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags) 
{ 
    if(result == -1) 
    { 
		SendMessagef(playerid, "el comando ~r~/%s~w~ no existe. Utiliza ~b~/ayuda~w~ para mas información.", cmd);
        return 0;
    }
    return 1; 
}

stock CheckCommandInDuty(const cmd[])
{
	if(!strcmp("duty", cmd, true)) return 1;
	else if(!strcmp("duda", cmd, true)) return 1;
	else if(!strcmp("gps", cmd, true)) return 1;
	else if(!strcmp("motor", cmd, true)) return 1;
	else if(!strcmp("est", cmd, true)) return 1;
	else if(!strcmp("estadisticas", cmd, true)) return 1;
	else if(!strcmp("cuenta", cmd, true)) return 1;
	else if(!strcmp("seguro", cmd, true)) return 1;
	else if(!strcmp("pay", cmd, true)) return 1;
	return 0;
}

SendMessageToDoubtChannel(playerid, message[])
{
	new str[145];
	if(PI[playerid][pi_ADMIN_LEVEL]) format(str, 145, "[Dudas | /d] {"#SILVER_COLOR"}%s (%d): {"#BLUE_COLOR"}%s", pTemp(playerid)[pt_NAME], playerid, message);
	else format(str, 145, "[Dudas | /d] {"#SILVER_COLOR"}%s (%d): %s", pTemp(playerid)[pt_NAME], playerid, message);

	pTemp(playerid)[pt_DOUBT_CHANNEL_TIME] = gettime();
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if((PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PI[i][pi_DOUBT_CHANNEL])
			{
				SendClientMessage(i, GREEN_COLOR2, str);
			}
		}
	}
	return 1;
}


CMD:muteard(playerid, params[])
{
    new to_player, time;
    if(sscanf(params, "ud", to_player, time)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/muteard <player_id> <minutos>");
	if(time < 0 || time > 1440) return SendClientMessagef(playerid, -1, "Intervalo de minutos incorrecto.");

    if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);

    if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	if(gettime() < PI[to_player][pi_MUTE]) return SendClientMessagef(playerid, -1, "El jugador ya está muteado.");

	new seconds = time * 60;
	PI[to_player][pi_MUTE] = gettime() + seconds;
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET mute = %d WHERE id = %d;", PI[to_player][pi_MUTE], PI[to_player][pi_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);

	SendClientMessagef(to_player, -1, "Has sido silenciado del canal de dudas por %d minutos", time);
	
	new str[256]; format(str, 256, "{"#RED_COLOR"}el %s %s (%d) ha silenciado a %s (%d) del canal de dudas.", ADMIN_LEVELS[ PI[playerid][pi_ADMIN_LEVEL] ], PI[playerid][pi_NAME], playerid, PI[to_player][pi_NAME], to_player);
    SendAdminAd(-1, str);

	SendCmdLogToAdmins(playerid, "muteard", params);
	return 1;
}

CMD:desmuteard(playerid, params[])
{
    new to_player;
    if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/desmuteard <player_id>");
    if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
    if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");

	if(gettime() > PI[to_player][pi_MUTE]) return SendClientMessagef(playerid, -1, "Este jugador no está silenciado.");
	
	PI[to_player][pi_MUTE] = 0;
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET mute = %d WHERE id = %d;", PI[to_player][pi_MUTE], PI[to_player][pi_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);
	SendClientMessage(to_player, -1, "Ya puedes volver a enviar dudas.");
	
	SendClientMessagef(playerid, -1, "Jugador %s (%d) ha sido des-silenciado.", PI[to_player][pi_NAME], to_player);
	SendCmdLogToAdmins(playerid, "desmuteard", params);
	return 1;
}

GetFreePoliceObjectSlot()
{
	for(new i = 0; i != MAX_POLICE_OBJECTS; i ++)
	{
		if(!POLICE_OBJECTS[i][police_object_VALID]) return i;
	}
	return -1;
}

CMD:dcontroles(playerid, params[])
{
	new affected_objects;
	for(new i = 0; i != MAX_POLICE_OBJECTS; i ++)
	{
		if(!POLICE_OBJECTS[i][police_object_VALID]) continue;
		
		DestroyDynamicObject(POLICE_OBJECTS[i][police_object_OBJECT_ID]);
		POLICE_OBJECTS[i][police_object_VALID] = false;
		POLICE_OBJECTS[i][police_object_USER][0] = EOS;
		POLICE_OBJECTS[i][police_object_OBJECT_ID] = INVALID_STREAMER_ID;
		affected_objects ++;
	}
	
	SendClientMessagef(playerid, -1, "Se han eliminado todos los objetos policíales, %d objetos afectados.", affected_objects);
	SendCmdLogToAdmins(playerid, "dcontroles", params);
	return 1;
}

CMD:abyc(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	
	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendClientMessagef(playerid, -1, "Error: /abyc [Playerid o nombre] [razon]");
	if(!IsPlayerConnected(to_player)) return SendClientMessagef(playerid, -1, "Jugador desconectado.");
	if(to_player == playerid) return 1;
	
	if(PlayerTemp[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No se puede añadir byc a este jugador ahora.");
	if(PLAYER_WORKS[to_player][WORK_POLICE][pwork_SET]) return SendClientMessagef(playerid, -1, "No puedes añadir byc a este jugador porque es policía.");
	
	AddPlayerPoliceHistory(to_player, PI[playerid][pi_ID], reason);
	SendClientMessagef(playerid, -1, "Se ha añadido el informe al historial policíal de %s.", PlayerTemp[to_player][pt_NAME]);
	return 1;
}

CMD:dbyc(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 11) return SendClientMessagef(playerid, -1, "Debes ser al menos rango %s para colocar objetos policíales.", POLICE_RANKS[11]);
	
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Error: /dbyc [Playerid o nombre]");
	if(!IsPlayerConnected(to_player)) return SendClientMessagef(playerid, -1, "Jugador desconectado.");
	if(PlayerTemp[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessagef(playerid, -1, "No se puede eliminar el historial policíal de este jugador ahora.");
	
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM police_history WHERE id_player = %d;", PI[to_player][pi_ID]);
	mysql_tquery(handle_db, QUERY_BUFFER);
	
	SendClientMessagef(playerid, -1, "Has borrado el historial policíal de %s.", PlayerTemp[to_player][pt_NAME]);
	return 1;
}


CMD:byc(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendMessage(playerid, "~r~No eres policía.");
	if(pTemp(playerid)[pt_WORKING_IN] != WORK_POLICE) return SendClientMessagef(playerid, -1, "No estás de servicio como policía.");
	
	ShowDialog(playerid, DIALOG_POLICE_BYC);
	return 1;
}

AddPlayerPoliceHistory(playerid, by_id, reason[])
{
	if(!PI[playerid][pi_ID]) return 0;
	
	new date[24];
	getDateTime(date);
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO police_history (id_player, by_id, text, date) VALUES (%d, %d, '%e', '%e');", PI[playerid][pi_ID], by_id, reason, date);
	mysql_tquery(handle_db, QUERY_BUFFER);
	return 1;
}

CMD:admac(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/admac <nivel>");
	ADMIN_LEVEL_AC_IMMUNITY = params[0];
	
	SendClientMessagef(playerid, -1, "Admin level %d o mayor no sera detectado por ac.", ADMIN_LEVEL_AC_IMMUNITY);
	return 1;
}

PlayMp3(playerid, const url[], const song_name[])
{
	if(pTemp(playerid)[pt_MUSIC_FOR_PROPERTY])
	{
		LoopEx(i, MAX_PLAYERS, 0)
		{
			if(IsPlayerConnected(i))
			{
				if( (PI[i][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY || PI[i][pi_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY) && PI[i][pi_LOCAL_INTERIOR] == PI[playerid][pi_LOCAL_INTERIOR])
				{
					PlayAudioStreamForPlayerEx(i, url);
					SendClientMessagef(i, -1, "Reproduciendo '%s'Utiliza /stop para parar la música.", song_name);
				}
			}
		}
		pTemp(playerid)[pt_MUSIC_FOR_PROPERTY] = false;
		Auto_SendPlayerAction(playerid, "pone música en su propiedad.");
	}
	else if(pTemp(playerid)[pt_MUSIC_FOR_VEHICLE])
	{
		LoopEx(i, MAX_PLAYERS, 0)
		{
			if(IsPlayerConnected(i))
			{
				if(IsPlayerInAnyVehicle(i))
				{
					if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
					{
						PlayAudioStreamForPlayerEx(i, url);
						SendClientMessagef(i, -1, "Reproduciendo '%s'Utiliza /stop para parar la música.", song_name);
					}
				}
			}
		}
		pTemp(playerid)[pt_MUSIC_FOR_VEHICLE] = false;
		if(PLAYER_VEHICLES[ GetPlayerVehicleID(playerid) ][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "pone música en su vehículo.");
		else Auto_SendPlayerAction(playerid, "pone música en el vehículo.");
	}
	else if(pTemp(playerid)[pt_MUSIC_FOR_SPEAKERS])
	{
		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

		LoopEx(i, MAX_PLAYERS, 0)
		{
			if(IsPlayerConnected(i))
			{
				if((PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PI[i][pi_CONFIG_AUDIO])
				{
					if(GetPlayerDistanceFromPoint(i, pos[0], pos[1], pos[2]) <= 30.0)
					{
						PlayAudioStreamForPlayerEx(i, url, pos[0], pos[1], pos[2], 50.0, true);
						SendClientMessagef(i, 0xf796bdFF, "* Se escuchan unos altavoces...");
					}
				}
			}
		}
		pTemp(playerid)[pt_SPEAKERS_TIME] = gettime();
		pTemp(playerid)[pt_MUSIC_FOR_SPEAKERS] = false;
		Auto_SendPlayerAction(playerid, "pone música de su MP3 en los altavoces.");
	}
	else
	{
		PlayAudioStreamForPlayerEx(playerid, url);
		SendClientMessagef(playerid, -1, "Reproduciendo '%s' usa /stop para parar la música.", song_name);
		Auto_SendPlayerAction(playerid, "escucha música de su MP3 en sus auriculares.");
	}
	return 1;
}

CMD:cleanproperties(playerid, params[])
{
	new total;
	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if(PROPERTY_INFO[i][property_SOLD])
		{
			PROPERTY_INFO[i][property_SOLD] = false;
			PROPERTY_INFO[i][property_CREW] = false;
			PROPERTY_INFO[i][property_OWNER_ID] = 0;
			PROPERTY_INFO[i][property_CREW_ID] = 0;
			format(PROPERTY_INFO[i][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[i][property_ID]);
			
			new label_str[256], info[3];
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
					{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[i][property_PRICE]), PROPERTY_INFO[i][property_LEVEL]
			);
			UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
			
			DestroyDynamicPickup(PROPERTY_INFO[i][property_EXT_PICKUP_ID]);
			PROPERTY_INFO[i][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
			
			PROPERTY_INFO[i][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z], 0, PROPERTY_INFO[i][property_EXT_INTERIOR]);
			info[0] = PICKUP_TYPE_PROPERTY;
			info[1] = i; // Index
			info[2] = 2; // Pickup Exterior
			Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[i][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
						
			//
			total ++;
		}
	}
	
	//
	mysql_tquery(handle_db, "UPDATE properties SET id_player = NULL, id_territory = NULL;");
	
	SendClientMessagef(playerid, -1, "Se han liberado todas las propiedades (%d).", total);
	
	SendCmdLogToAdmins(playerid, "cleanproperties", params);
	return 1;
}

CMD:cleanshop(playerid, params[])
{
	mysql_tquery(handle_db, "DELETE FROM shop;");
	SendClientMessagef(playerid, -1, "Ok.");
	return 1;
}

CMD:countv(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/countv <playerid>");
	SendClientMessagef(playerid, -1, "Vehicles: %d", CountPlayerVehicles(params[0]));
	return 1;
}

CMD:countp(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/countp <playerid>");
	SendClientMessagef(playerid, -1, "Properties: %d", CountPlayerProperties(params[0]));
	return 1;
}

CMD:presolv(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/presolv <numero>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			if(rows)
			{
				new id, name[24], connected, pid;
				reg_int(0, "id", id);
				reg_name(0, "name", name);
				reg_int(0, "connected", connected);
				reg_int(0, "playerid", pid);
				SendClientMessagef(playerid, -1, "PN: %d --- Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", params[0], name, id, connected, pid);
			}
			else SendClientMessagef(playerid, -1, "No se encontró ningún resultado para ese número.");
		}	
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, connected, playerid FROM player WHERE phone_number = %d LIMIT 1;", params[0]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	SendCmdLogToAdmins(playerid, "presolv", params);
	return 1;
}


Set_FUMIGATOR_Checkpoint(playerid)
{
	if(IsValidDynamicRaceCP(pTemp(playerid)[pt_FUMIGATOR_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(pTemp(playerid)[pt_FUMIGATOR_CHECKPOINT]);
		pTemp(playerid)[pt_FUMIGATOR_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	
	if(pTemp(playerid)[pt_FUMIGATOR_PROCCESS] == sizeof(FUMIGATOR_CHECKPOINTS) - 1)
	{
		pTemp(playerid)[pt_FUMIGATOR_CHECKPOINT] =	CreateDynamicRaceCP
														(
															4,
															FUMIGATOR_CHECKPOINTS[ pTemp(playerid)[pt_FUMIGATOR_PROCCESS] ][0],
															FUMIGATOR_CHECKPOINTS[ pTemp(playerid)[pt_FUMIGATOR_PROCCESS] ][1],
															FUMIGATOR_CHECKPOINTS[ pTemp(playerid)[pt_FUMIGATOR_PROCCESS] ][2],
															0.0,
															0.0,
															0.0,
															10.0, 
															0,
															0,
															playerid,
															999999.0
														);
	}
	else
	{
		pTemp(playerid)[pt_FUMIGATOR_CHECKPOINT] =	CreateDynamicRaceCP
														(
															3,
															FUMIGATOR_CHECKPOINTS[ pTemp(playerid)[pt_FUMIGATOR_PROCCESS] ][0],
															FUMIGATOR_CHECKPOINTS[ pTemp(playerid)[pt_FUMIGATOR_PROCCESS] ][1],
															FUMIGATOR_CHECKPOINTS[ pTemp(playerid)[pt_FUMIGATOR_PROCCESS] ][2],
															FUMIGATOR_CHECKPOINTS[ pTemp(playerid)[pt_FUMIGATOR_PROCCESS] + 1 ][0],
															FUMIGATOR_CHECKPOINTS[ pTemp(playerid)[pt_FUMIGATOR_PROCCESS] + 1 ][1],
															FUMIGATOR_CHECKPOINTS[ pTemp(playerid)[pt_FUMIGATOR_PROCCESS] + 1 ][2],
															10.0, 
															0,
															0,
															playerid,
															999999.0
														);
	}
	
	new info[1];
	info[0] = CHECKPOINT_TYPE_FUMIGATOR;
	Streamer_SetArrayData(STREAMER_TYPE_RACE_CP, pTemp(playerid)[pt_FUMIGATOR_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	
	return 1;
}

CMD:osetname(playerid, params[])
{
	new to_account, new_name[24];
	if(sscanf(params, "ds[20]", to_account, new_name)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/osetname <DB-ID> <name>");
	if(!IsValidRPName(new_name)) return SendClientMessagef(playerid, -1, "El nombre '%s' no cumple con el formato Nombre_Apellido.", new_name);

	inline OnNameChecked()
	{
		new crows;
		if(get_rows(crows))
		{
			if(crows) SendClientMessagef(playerid, -1, "El nombre %s está en uso", new_name);
			else
			{
				inline OnInfoQueryLoad()
				{
					new rows;
					if(get_rows(rows))
					{
						if(rows)
						{
							new id, ip[16], name[24], connected, pid, admin_level;
							reg_int(0, "id", id);
							reg_name(0, "ip", ip);
							reg_name(0, "name", name);
							reg_int(0, "connected", connected);
							reg_int(0, "playerid", pid);
							reg_int(0, "admin_level", admin_level);

							if(PI[playerid][pi_ADMIN_LEVEL] >= admin_level)
							{
								if(connected) SendClientMessagef(playerid, -1, "JUGADOR '%s' DB-ID '%d' conectado utilice /setname, su player_id: %d.", name, id, pid);
								else
								{
									mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET name = '%e' WHERE id = %d;", new_name, id);
									mysql_tquery(handle_db, QUERY_BUFFER);

									for(new i = 0; i != MAX_PROPERTIES; i ++)
									{
										if(!PROPERTY_INFO[i][property_VALID]) continue;
										if(PROPERTY_INFO[i][property_OWNER_ID] != id) continue;
										
										new label_str[256];
										format
										(
											label_str, 
											sizeof label_str, 
											"\
												Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
												{FFFFFF}Propietario: {"#PRIMARY_COLOR"}%s\n\
												{FFFFFF}Presiona {"#PRIMARY_COLOR"}'Y' {FFFFFF}para entrar.\
											", PROPERTY_INFO[i][property_ID], new_name
										);
										UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
									}
									SendClientMessagef(playerid, -1, "El nombre de '%s' ahora es: %s", name, new_name);
								}
							}
							else SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
						}
						else SendClientMessagef(playerid, -1, "No se encontro la DB-ID.");
					}
				}
				mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
				mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
			}
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE name = '%e';", new_name);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnNameChecked);
	return 1;
}

CMD:ogivecoins(playerid, params[])
{
	new to_account, amount;
	if(sscanf(params, "dd", to_account, amount)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/ogivecoins <DB-ID> <cantidad>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				reg_int(0, "id", id);
				reg_name(0, "ip", ip);
				reg_name(0, "name", name);
				reg_int(0, "connected", connected);
				reg_int(0, "playerid", pid);
				reg_int(0, "admin_level", admin_level);

				if(connected) SendClientMessagef(playerid, -1, "JUGADOR '%s' DB-ID '%d' conectado, player_id: %d, use /givecoins.", name, id, pid);
				else
				{
					mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = coins + %d WHERE id = %d;", amount, id);
					mysql_tquery(handle_db, QUERY_BUFFER);
					SendClientMessagef(playerid, -1, "Le has dado %d "SERVER_COIN" a %s.", amount, name);
				}
			}
			else SendClientMessagef(playerid, -1, "No se encontro la DB-ID.");
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

CMD:con(playerid, params[])
{
	new stats[400+1];
	GetNetworkStats(stats, sizeof(stats));
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Estadísticas del servidor", stats, "OK", "");
	return 1;
}

CMD:notifica(playerid, params[])
{
	if(isnull(params)) return SendClientMessagef(playerid, -1, "Uso: /notifica [cmd/adm/ac/chat]");

	switch(YHash(params, false))
	{
		case _I<cmd>:
		{
			pTemp(playerid)[pt_SEE_ACMD_LOG] ^= true;
			SendClientMessagef(playerid, -1, "Log de comandos %sactivado", pTemp(playerid)[pt_SEE_ACMD_LOG] ? ("") : ("des"));
		}
		case _I<adm>:
		{
			pTemp(playerid)[pt_SEE_ADM_LOG] ^= true;
			SendClientMessagef(playerid, -1, "Log admin general %sactivado", pTemp(playerid)[pt_SEE_ADM_LOG] ? ("") : ("des"));
		}
		case _I<ac>:
		{
			pTemp(playerid)[pt_SEE_AC_LOG] ^= true;
			SendClientMessagef(playerid, -1, "Log de anticheat %sactivado", pTemp(playerid)[pt_SEE_AC_LOG] ? ("") : ("des"));
		}
		case _I<chat>:
		{
			pTemp(playerid)[pt_SEE_ADM_CHAT] ^= true;
			SendClientMessagef(playerid, -1, "Chat admin %sactivado", pTemp(playerid)[pt_SEE_ADM_CHAT] ? ("") : ("des"));
		}
		default:
			SendClientMessagef(playerid, -1, "Uso: /notifica [cmd/log/ac/chat]");
	}

	return 1;
}

CMD:changeflags(playerid, params[])
{
	new cmd[24], flags;
	if(sscanf(params, "s[24]d", cmd, flags)) return SendClientMessagef(playerid, -1, "Uso: /changeflags [cmd] [flags]");
	
	PC_SetFlags(cmd, flags);
	SendClientMessagef(playerid, -1, "Flag de /%s cambiada a %d", cmd, flags);
	return 1;
}

CMD:cobject(playerid, params[]) {
	new modelid;
	if(sscanf(params, "d", modelid)) return SendClientMessagef(playerid, -1, "Uso: /cobject [modelid]");

	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	new objectid = CreateDynamicObject(modelid, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0);
	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, {OBJECT_TYPE_TEST});
	Streamer_Update(playerid);
	EditDynamicObject(playerid, objectid);
	return 1;
}

CMD:selectobject(playerid, params[])
{
	SendClientMessagef(playerid, -1, "Entraste en selección de objetos");
	SelectObject(playerid);

	return 1;
}

CMD:std(playerid, params[]) {
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}


CMD:historial(playerid, params[])
{	
	//
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/historial <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendClientMessagef(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	if(!PI[to_player][pi_ID]) return SendClientMessagef(playerid, -1, "DB ID = 0!");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(get_rows(rows))
		{
			new caption[40], dialog[1600], line_str[256];
			format(caption, sizeof caption, "Bad historial de %s (%d)", PI[to_player][pi_NAME], to_player);
			format(dialog, sizeof dialog, "Por\tFecha\tTipo\tDescr.\n");
			if(rows)
			{
				for(new i = 0; i != rows; i ++)
				{
					new name[24], by, type, date[24], text[128], bool:isnull_by;
					reg_name(i, "name", name);
					cache_is_value_name_null(i, "by", isnull_by);
					if(!isnull_by) reg_int(i, "by", by);
					reg_int(i, "type", type);
					reg_name(i, "date", date);
					reg_name(i, "text", text);

					if(by == -1) name = "AC";
					switch(type)
					{
						case TYPE_WARNING: format(line_str, sizeof line_str, "%s\t%s\tAdv\t%s\n", name, date, text);
						case TYPE_KICK: format(line_str, sizeof line_str, "%s\t%s\tKick\t%s\n", name, date, text);
						case TYPE_BAN: format(line_str, sizeof line_str, "%s\t%s\tBan\t%s\n", name, date, text);
						case TYPE_TEMP_BAN: format(line_str, sizeof line_str, "%s\t%s\tTBan\t%s\n", name, date, text);
						case TYPE_UNBAN: format(line_str, sizeof line_str, "%s\t%s\tUnban\t%s\n", name, date, text);
					}
					strcat(dialog, line_str);
				}
			}
			else strcat(dialog, "Sin resultados");
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "X", "");
			SendClientMessagef(playerid, -1, "Limite: 20");
		}
	}
	mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT bad_history.*, player.name FROM bad_history LEFT JOIN player ON bad_history.by = player.id WHERE bad_history.id_player = %d ORDER BY bad_history.date LIMIT 20;", PI[to_player][pi_ID]);
	mysql_tquery_inline(handle_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

CMD:getversion(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/getversion <playerid>");
	if(!IsPlayerConnected(to_player)) return SendClientMessagef(playerid, -1, "Jugador desconectado");

	new player_version[32];
	GetPlayerVersion(to_player, player_version, sizeof player_version);

	SendClientMessagef(playerid, -1, "Jugador %s usa la versión %s", PlayerTemp[to_player][pt_NAME], player_version);
	return 1;
}

CMD:arma(playerid, params[])
{
	new weaponid, ammo;
	if(sscanf(params, "dd", weaponid, ammo)) return SendClientMessagef(playerid, -1, "Uso: /arma [weaponid] [balas]");
	
	GivePlayerWeaponEx(playerid, weaponid, ammo);
	RegisterNewPlayerWeapon(playerid, WEAPON_INFO[weaponid][weapon_info_SLOT]);
	return 1;
}

CMD:printtestvehicles(playerid, params[])
{
	for(new i, j = GetVehiclePoolSize(); i <= j; i++)
	{
		if(GLOBAL_VEHICLES[i][gb_vehicle_VALID] && GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_TEST)
		{
			new Float:x, Float:y, Float:z, Float:angle;
			GetVehiclePos(i, x, y, z);
			GetVehicleZAngle(i, angle);
			printf("{VEHICLE_TYPE_, WORK_, exp, %d, %f, %f, %f, %f, color1, color2, vip, world},", GetVehicleModel(i), x, y, z, angle);
		}
	}
	SendClientMessagef(playerid, -1, "Se hizo un printf de todos los vehiculos de prueba - revisa la consola o el server_log.txt");
	SendCmdLogToAdmins(playerid, "ptv", params);
	return 1;
}
alias:printtestvehicles("ptv");

CMD:vehicles(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessagef(playerid, -1, "Modo de uso: {"PRIMARY_COLOR"}/vehicles <player_id>");
	if(!IsPlayerConnected(to_player)) return SendMessagef(playerid, "Jugador (%d) desconectado.", to_player);
	
	new dialog[115 * (MAX_SU_VEHICLES + 2)], total_vehicles;
	format(dialog, sizeof dialog, "Vehículo\tMatrícula\tDistancia\n");
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		if(total_vehicles > MAX_SU_VEHICLES) break;
		
		if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == PI[to_player][pi_ID])
		{
			
			new Float:pos[3];
			GetVehiclePos(i, pos[0], pos[1], pos[2]);
			
			new line_str[115];
			format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{"#SILVER_COLOR"}/gotoveh %d\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], i);
			strcat(dialog, line_str);
			total_vehicles ++;
		}
	}
	if(total_vehicles == 0) strcat(dialog, "{"#SILVER_COLOR"}El jugador no tiene vehiculos");
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, "Vehiculos", dialog, "OK", "");
	return 1;
}
alias:vehicles("vehiculos");

CMD:allt(playerid, params[])
{
	if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No estas en una banda.");

	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		StartTerritoryAttack(pTemp(playerid)[pt_CREW_INDEX], i, 0);
	}

	SendCmdLogToAdmins(playerid, "allt", params);
	return 1;
}

CMD:nallt(playerid, params[])
{
	if(!PI[playerid][pi_CREW]) return SendClientMessagef(playerid, -1, "No estas en una banda.");

	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(TERRITORIES[i][territory_CREW_INDEX] != pTemp(playerid)[pt_CREW_INDEX]) continue;

	    TERRITORIES[ i ][territory_OCCUPIED] = false;
		TERRITORIES[ i ][territory_CREW_ID] = 0;
		TERRITORIES[ i ][territory_CREW_INDEX] = 0;
		TERRITORIES[ i ][territory_COLOR] = 0xCCCCCC55;
		UpdateGangZoneColor(i);
				
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE territories SET id_crew = NULL WHERE id = %d;", TERRITORIES[ i ][territory_ID]);
		mysql_tquery(handle_db, QUERY_BUFFER);
		CallLocalFunction("OnCrewLeftTerritory", "iiii", PI[playerid][pi_CREW], pTemp(playerid)[pt_CREW_INDEX], TERRITORIES[ i ][territory_ID], i);
				
		for(new y = 0; y != MAX_PROPERTIES; y ++)
		{
			if(!PROPERTY_INFO[y][property_VALID]) continue;
			if(!PROPERTY_INFO[y][property_CREW]) continue;
			if(PROPERTY_INFO[y][property_CREW_ID] != PI[playerid][pi_CREW]) continue;

			PROPERTY_INFO[ y ][property_SOLD] = false;
			PROPERTY_INFO[ y ][property_CREW] = false;
			PROPERTY_INFO[ y ][property_OWNER_ID] = 0;
			PROPERTY_INFO[ y ][property_CREW_ID] = 0;
			format(PROPERTY_INFO[ y ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ y ][property_ID]);
						
			new info[3];
			UpdateUnnocupiedPropertyLabel(y);
						
			DestroyDynamicPickup(PROPERTY_INFO[ y ][property_EXT_PICKUP_ID]);
			PROPERTY_INFO[ y ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
						
			PROPERTY_INFO[ y ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ y ][property_EXT_X], PROPERTY_INFO[ y ][property_EXT_Y], PROPERTY_INFO[ y ][property_EXT_Z], 0, PROPERTY_INFO[ y ][property_EXT_INTERIOR]);
			info[0] = PICKUP_TYPE_PROPERTY;
			info[1] = y; // Index
			info[2] = 2; // Pickup Exterior
			Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ y ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
							
			mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = NULL WHERE id = %d;", PROPERTY_INFO[ y ][property_ID]);
			mysql_tquery(handle_db, QUERY_BUFFER);
		}
				
		new message[145];
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '{%06x}%s{FFFFFF}' ha abandonado un territorio en {"#PRIMARY_COLOR"}%s.", CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ pTemp(playerid)[pt_CREW_INDEX] ][crew_NAME], TERRITORIES[ i ][territory_NAME]);
		
		for(new f = 0, z = GetPlayerPoolSize(); f <= z; f++)
		{
			if(IsPlayerConnected(f))
			{
				if(PI[f][pi_CREW])
				{
					SendClientMessage(f, -1, message);
				}
			}
		}
	}

	SendCmdLogToAdmins(playerid, "nallt", params);
	return 1;
}

//Ayudante
flags:muteard(CMD_ASSISTANT);
flags:desmuteard(CMD_ASSISTANT);
flags:presolv(CMD_ASSISTANT);
flags:cls(CMD_ASSISTANT);

//Moderador
flags:admins(CMD_MODERATOR);
flags:trabajos(CMD_MODERATOR);
flags:getid(CMD_MODERATOR);
flags:getname(CMD_MODERATOR);
flags:aka(CMD_MODERATOR);
flags:adv(CMD_MODERATOR);
flags:kick(CMD_MODERATOR);
flags:spec(CMD_MODERATOR);
flags:specoff(CMD_MODERATOR);
flags:freeze(CMD_MODERATOR);
flags:unfreeze(CMD_MODERATOR);
flags:jail(CMD_MODERATOR);
flags:djail(CMD_MODERATOR);
flags:unjail(CMD_MODERATOR);
flags:notifica(CMD_MODERATOR);
flags:ls(CMD_MODERATOR);
flags:lsdb(CMD_MODERATOR);
flags:pest(CMD_MODERATOR);
flags:pinv(CMD_MODERATOR);
flags:pexp(CMD_MODERATOR);
flags:parmas(CMD_MODERATOR);
flags:pbank(CMD_MODERATOR);
flags:goto(CMD_MODERATOR);
flags:get(CMD_MODERATOR);
flags:tban(CMD_MODERATOR);
flags:dtban(CMD_MODERATOR);
flags:rac(CMD_MODERATOR);
flags:rac2(CMD_MODERATOR);
flags:rv(CMD_MODERATOR);
flags:deletead(CMD_MODERATOR);
flags:repairveh(CMD_MODERATOR);
flags:historial(CMD_MODERATOR);
flags:getversion(CMD_MODERATOR);
flags:pm(CMD_MODERATOR);
flags:back(CMD_MODERATOR);
flags:slap(CMD_MODERATOR);
flags:vehicles(CMD_MODERATOR);

//Administrador
flags:asay(CMD_ADMINISTRATOR);
flags:revivir(CMD_ADMINISTRATOR);
flags:ban(CMD_ADMINISTRATOR);
flags:dcontroles(CMD_ADMINISTRATOR);
flags:say(CMD_ADMINISTRATOR);
flags:traerveh(CMD_ADMINISTRATOR);
flags:gotoveh(CMD_ADMINISTRATOR);
flags:unban(CMD_ADMINISTRATOR);
flags:rproperty(CMD_ADMINISTRATOR);
flags:eproperty(CMD_ADMINISTRATOR);
flags:cproperty(CMD_ADMINISTRATOR);
flags:setwork(CMD_ADMINISTRATOR);
flags:ip(CMD_ADMINISTRATOR);
flags:setnametemp(CMD_ADMINISTRATOR);
flags:v(CMD_ADMINISTRATOR);
flags:dv(CMD_ADMINISTRATOR);
flags:dban(CMD_ADMINISTRATOR);
flags:gtp(CMD_ADMINISTRATOR);
flags:setvip(CMD_ADMINISTRATOR);

//Desarrollador
flags:givemod(CMD_OWNER);
flags:ac(CMD_OWNER);
flags:settime(CMD_OWNER);
flags:setcoins(CMD_OWNER);
flags:setthirst(CMD_OWNER);
flags:chotdog(CMD_OWNER);
flags:dhotdog(CMD_OWNER);
flags:ccajero(CMD_OWNER);
flags:dcajero(CMD_OWNER);
flags:sethunger(CMD_OWNER);
flags:setgas(CMD_OWNER);
flags:setweather(CMD_OWNER);
flags:sethealth(CMD_OWNER);
flags:setarmour(CMD_OWNER);
flags:setlevel(CMD_OWNER);
flags:setworkexp(CMD_OWNER);
flags:setcash(CMD_OWNER);
flags:givecash(CMD_OWNER);
flags:spos(CMD_OWNER);
flags:exit(CMD_OWNER);
flags:setname(CMD_OWNER);
flags:exproperty(CMD_OWNER);
flags:gotoproperty(CMD_OWNER);
flags:setpass(CMD_OWNER);
flags:osetname(CMD_OWNER);
flags:delete(CMD_OWNER);
flags:givecoins(CMD_OWNER);
flags:darskin(CMD_OWNER);
flags:setfstyle(CMD_OWNER);
flags:vpcar(CMD_OWNER);
flags:admac(CMD_OWNER);
flags:cleanproperties(CMD_OWNER);
flags:cleanshop(CMD_OWNER);
flags:ogivecoins(CMD_OWNER);
flags:con(CMD_OWNER);
flags:changeflags(CMD_OWNER);
flags:selectobject(CMD_OWNER);
flags:setnameplayer(CMD_OWNER);
flags:arma(CMD_OWNER);
flags:printtestvehicles(CMD_OWNER);
flags:gpos(CMD_OWNER);
flags:cpos(CMD_OWNER);
flags:setwlevel(CMD_OWNER);
flags:sound(CMD_OWNER);
flags:anim(CMD_OWNER);
flags:animindex(CMD_OWNER);
flags:cobject(CMD_OWNER);
flags:payday(CMD_OWNER);
flags:setfdrum(CMD_OWNER);
flags:allt(CMD_OWNER);
flags:nallt(CMD_OWNER);

getPhoneNumber(dbid)
{
	new number_str[24];
	format(number_str, sizeof number_str, "%d%04d", random(999), dbid);
	return strval(number_str);
}

getBankAccountNumber(dbid)
{
	new number_str[24];
	format(number_str, sizeof number_str, "%d%04d", random(999), dbid);
	return strval(number_str);
}

SetPiDefaultValues(playerid)
{
	new tmp_PI[enum_PI];
	PI[playerid] = tmp_PI;

	new date[24];
	getDateTime(date);

	GetPlayerIp(playerid, PI[playerid][pi_IP], 16);
	format(PI[playerid][pi_NAME], 24, "%s", pTemp(playerid)[pt_NAME]);
	format(PI[playerid][pi_LAST_CONNECTION], 24, "%s", date);
	format(PI[playerid][pi_REG_DATE], 24, "%s", date);
	PI[playerid][pi_LAST_CONNECTION_TIMESTAMP] = gettime();
	PI[playerid][pi_LEVEL] = 1;
	PI[playerid][pi_REP] = 1;
	PI[playerid][pi_CONNECTED] = 1;
	PI[playerid][pi_PLAYERID] = playerid;
	PI[playerid][pi_TIME_FOR_REP] = TIME_FOR_REP;
	PI[playerid][pi_SKIN] = 15;
	PI[playerid][pi_CASH] = 3500;
	PI[playerid][pi_POS_X] = New_User_Pos[0];
	PI[playerid][pi_POS_Y] = New_User_Pos[1];
	PI[playerid][pi_POS_Z] = New_User_Pos[2];
	PI[playerid][pi_ANGLE] = New_User_Pos[3];
	PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
	PI[playerid][pi_FIGHT_STYLE] = 4;
	PI[playerid][pi_HEALTH] = 100.0;
	PI[playerid][pi_HUNGRY] = 100.0;
	PI[playerid][pi_THIRST] = 100.0;
	PI[playerid][pi_CONFIG_SOUNDS] = 1;
	PI[playerid][pi_CONFIG_AUDIO] = 1;
	PI[playerid][pi_CONFIG_TIME] = 1;
	PI[playerid][pi_CONFIG_HUD] = 1;
	PI[playerid][pi_CONFIG_ADMIN] = 1;
	PI[playerid][pi_PHONE_VISIBLE_NUMBER] = 1;
	PI[playerid][pi_DOUBT_CHANNEL] = 1;
	return 1;
}

getDateTime(string[])
{
	new 
		Year, Month, Day,
		Hour, Minute, Second
	;
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	
	format(string, 24, "%04d-%02d-%02d %02d:%02d:%02d", Year, Month, Day, Hour, Minute, Second);
	return 1;
}

public OnPlayerRegister(playerid)
{
	if(pTemp(playerid)[pt_LOGIN_KICK_TIMER] != -1) 
	{
		KillTimer(pTemp(playerid)[pt_LOGIN_KICK_TIMER]);
		pTemp(playerid)[pt_LOGIN_KICK_TIMER] = -1;
	}
	pTemp(playerid)[pt_USER_LOGGED] = true;

	TogglePlayerSpectatingEx(playerid, false);
	StopAudioStreamForPlayer(playerid);
	ClearPlayerChat(playerid);
	TogglePlayerControllable(playerid, false);

	SendClientMessagef(playerid, 0xFF0000FF, "Un nuevo comienzo, una nueva vida; Adelante!");
	return 1;
}

public OnPlayerLogin(playerid) 
{
	pTemp(playerid)[pt_USER_LOGGED] = true;

	LoadPlayerVehicles(playerid);
	LoadPlayerPhoneBook(playerid);
	LoadPlayerToys(playerid);
	LoadPlayerGPSData(playerid);
	LoadPlayerPocketData(playerid);
	LoadPlayerWeaponsData(playerid);
	LoadPlayerWorks(playerid);
	LoadPlayerCrewInfo(playerid);

	SetPlayerScore(playerid, PI[playerid][pi_LEVEL]);
	pTemp(playerid)[pt_DOUBT_CHANNEL_TIME] = gettime();
	ResetPlayerWeapons(playerid);
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PI[playerid][pi_CASH]);
	SetPlayerFightingStyle(playerid, PI[playerid][pi_FIGHT_STYLE]);
	SetPlayerHealthEx(playerid, PI[playerid][pi_HEALTH]);
	SetPlayerArmourEx(playerid, PI[playerid][pi_ARMOUR]);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerNormalColor(playerid);
	StopAudioStreamForPlayer(playerid);
	SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], 0, 0, 0, 0, 0, 0);
	SetPlayerInterior(playerid, PI[playerid][pi_INTERIOR]);
	
	pTemp(playerid)[pt_BAD_LOGIN_ATTEMP] = 0;
	SendClientMessagef(playerid, PRIMARY_COLOR2, "[>] {ffffff}Bienvenido {"#PRIMARY_COLOR"}%s. {ffffff}Tu última conexión fue registrada el {"#GREEN_COLOR"}%s.", pTemp(playerid)[pt_NAME], PI[playerid][pi_LAST_CONNECTION]);

    TogglePlayerSpectatingEx(playerid, false);
	TogglePlayerControllableEx(playerid, false);
}

UpdatePlayerWorldInfo(playerid)
{
	if(pTemp(playerid)[pt_GAME_STATE] == GAME_STATE_DEAD || pTemp(playerid)[pt_GAME_STATE] == GAME_STATE_NORMAL)
	{
		//health armour
		GetPlayerHealth(playerid, PI[playerid][pi_HEALTH]);
		GetPlayerArmour(playerid, PI[playerid][pi_ARMOUR]);
		if(PI[playerid][pi_HEALTH] <= 0.0) PI[playerid][pi_HEALTH] = 1.0;
		if(PI[playerid][pi_HEALTH] > 100.0) PI[playerid][pi_HEALTH] = 100.0;
		if(PI[playerid][pi_ARMOUR] > 100.0) PI[playerid][pi_ARMOUR] = 100.0;

		//world
		switch(PI[playerid][pi_STATE])
		{
			case ROLEPLAY_STATE_INTERIOR:
			{
				new index = GetEnterExitIndexById(PI[playerid][pi_LOCAL_INTERIOR]);
				if(index == -1)
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = New_User_Pos[0];
					PI[playerid][pi_POS_Y] = New_User_Pos[1];
					PI[playerid][pi_POS_Z] = New_User_Pos[2];
					PI[playerid][pi_ANGLE] = New_User_Pos[3];
					PI[playerid][pi_INTERIOR] = 0;
				}
				else
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = ENTER_EXIT[index][ee_EXT_X];
					PI[playerid][pi_POS_Y] = ENTER_EXIT[index][ee_EXT_Y];
					PI[playerid][pi_POS_Z] = ENTER_EXIT[index][ee_EXT_Z];
					PI[playerid][pi_ANGLE] = ENTER_EXIT[index][ee_EXT_ANGLE];
					PI[playerid][pi_INTERIOR] = ENTER_EXIT[index][ee_EXT_INTERIOR];
				}
			}
			case ROLEPLAY_STATE_OWN_PROPERTY:
			{
				new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
				if(index == -1)
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = New_User_Pos[0];
					PI[playerid][pi_POS_Y] = New_User_Pos[1];
					PI[playerid][pi_POS_Z] = New_User_Pos[2];
					PI[playerid][pi_ANGLE] = New_User_Pos[3];
					PI[playerid][pi_INTERIOR] = 0;
				}
				else
				{
					if(PROPERTY_INFO[index][property_OWNER_ID] == PI[playerid][pi_ID])
					{
						PI[playerid][pi_POS_X] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_X];
						PI[playerid][pi_POS_Y] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Y];
						PI[playerid][pi_POS_Z] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Z];

						PI[playerid][pi_ANGLE] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_ANGLE];
						PI[playerid][pi_INTERIOR] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_INTERIOR];
					}
					else
					{
						PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
						PI[playerid][pi_LOCAL_INTERIOR] = 0;
						PI[playerid][pi_POS_X] = PROPERTY_INFO[index][property_EXT_X];
						PI[playerid][pi_POS_Y] = PROPERTY_INFO[index][property_EXT_Y];
						PI[playerid][pi_POS_Z] = PROPERTY_INFO[index][property_EXT_Z];
						PI[playerid][pi_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
						PI[playerid][pi_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
					}
				}
			}
			case ROLEPLAY_STATE_GUEST_PROPERTY:
			{
				new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
				if(index == -1)
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = New_User_Pos[0];
					PI[playerid][pi_POS_Y] = New_User_Pos[1];
					PI[playerid][pi_POS_Z] = New_User_Pos[2];
					PI[playerid][pi_ANGLE] = New_User_Pos[3];
					PI[playerid][pi_INTERIOR] = 0;
				}
				else
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = PROPERTY_INFO[index][property_EXT_X];
					PI[playerid][pi_POS_Y] = PROPERTY_INFO[index][property_EXT_Y];
					PI[playerid][pi_POS_Z] = PROPERTY_INFO[index][property_EXT_Z];
					PI[playerid][pi_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
					PI[playerid][pi_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
				}
			}
			case ROLEPLAY_STATE_OWN_GARAGE:
			{
				new index = GetGarageIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
				if(index == -1)
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = New_User_Pos[0];
					PI[playerid][pi_POS_Y] = New_User_Pos[1];
					PI[playerid][pi_POS_Z] = New_User_Pos[2];
					PI[playerid][pi_ANGLE] = New_User_Pos[3];
					PI[playerid][pi_INTERIOR] = 0;
				}
				else
				{
					if(IsPropertyGarageOwner(playerid, index))
					{
						SetPlayerGarageIntPos(playerid, index);
					}
					else
					{
						SetPlayerGarageExtPos(playerid, index);
					}
				}
			}
			case ROLEPLAY_STATE_GUEST_GARAGE:
			{
				new index = GetGarageIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
				if(index == -1)
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = New_User_Pos[0];
					PI[playerid][pi_POS_Y] = New_User_Pos[1];
					PI[playerid][pi_POS_Z] = New_User_Pos[2];
					PI[playerid][pi_ANGLE] = New_User_Pos[3];
					PI[playerid][pi_INTERIOR] = 0;
				}
				else
				{
					SetPlayerGarageExtPos(playerid, index);
				}
			}
			case ROLEPLAY_STATE_JAIL:
			{
				PI[playerid][pi_POS_X] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X];
				PI[playerid][pi_POS_Y] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_Y];
				PI[playerid][pi_POS_Z] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_Z];
				PI[playerid][pi_ANGLE] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_ANGLE];
				PI[playerid][pi_INTERIOR] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR];
			}
			default:
			{
				GetPlayerPos(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z]);
				GetPlayerFacingAngle(playerid, PI[playerid][pi_ANGLE]);
				PI[playerid][pi_INTERIOR] = GetPlayerInterior(playerid);
			}
		}
		return 1;
	}
	return 0;
}

SavePlayerData(playerid)
{
	if(PI[playerid][pi_ID])
	{
		new tmp_crew[24], tmp_vip_expire_date[24];
		
		tmp_crew = "NULL";
		if(PI[playerid][pi_CREW]) format(tmp_crew, sizeof tmp_crew, "%d", PI[playerid][pi_CREW]);

		tmp_vip_expire_date = "'0000-00-00 00:00:00'";
		if(strlen(PI[playerid][pi_VIP_EXPIRE_DATE]) > 3) format(tmp_vip_expire_date, sizeof tmp_vip_expire_date, "'%s'", PI[playerid][pi_VIP_EXPIRE_DATE]);

		mysql_format
		(
			handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, 
			"\
				UPDATE player SET \
					name = '%e',\
					ip = '%e',\
					email = '%e',\
					salt = '%e',\
					pass = '%e',\
					reg_date = '%e',\
					last_connection = '%e',\
					last_connection_timestamp = %d,\
					time_playing = %d,\
					level = %d,\
					rep = %d,\
					connected = %d,\
					playerid = %d,\
					doubt_channel = %d,\
					time_for_rep = %d,\
					admin_level = %d,\
					payday_rep = %d,\
					vip = %d,\
					vip_expire_date = %s,\
					skin = %d,\
					cash = %d,\
					pos_x = %f,\
					pos_y = %f,\
					pos_z = %f,\
					angle = %f,\
					state = %d,\
					interior = %d,\
					local_interior = %d,\
					fight_style = %d,\
					health = %f,\
					armour = %f,\
					gender = %d,\
					hungry = %f,\
					thirst = %f,\
					wanted_level = %d,\
					police_jail_time = %d,\
					police_duty = %d,\
					police_jail_id = %d,\
					bank_account = %d,\
					bank_money = %d,\
					phone_number = %d,\
					phone_state = %d,\
					phone_visible_number = %d,\
					gps = %d,\
					mp3 = %d,\
					phone_resolver = %d,\
					speakers = %d,\
					mechanic_pieces = %d,\
					fuel_drum = %d,\
					seed_medicine = %d,\
					seed_cannabis = %d,\
					seed_crack = %d,\
					medicine = %d,\
					cannabis = %d,\
					crack = %d,\
					config_sounds = %d,\
					config_audio = %d,\
					config_time = %d,\
					config_hud = %d,\
					config_admin = %d,\
					mute = %d,\
					placa_pd = %d,\
					crew = %s,\
					crew_rank = %d,\
					mechanic_kits = %d,\
					medical_kits = %d,\
					truck_bonus = %d \
				WHERE id = %d;\
			",
				PI[playerid][pi_NAME], PI[playerid][pi_IP], PI[playerid][pi_EMAIL], PI[playerid][pi_SALT], PI[playerid][pi_PASS], PI[playerid][pi_REG_DATE], PI[playerid][pi_LAST_CONNECTION],
				PI[playerid][pi_LAST_CONNECTION_TIMESTAMP], PI[playerid][pi_TIME_PLAYING], PI[playerid][pi_LEVEL], PI[playerid][pi_REP], PI[playerid][pi_CONNECTED], PI[playerid][pi_PLAYERID],
				PI[playerid][pi_DOUBT_CHANNEL], PI[playerid][pi_TIME_FOR_REP], PI[playerid][pi_ADMIN_LEVEL], PI[playerid][pi_PAYDAY_REP], PI[playerid][pi_VIP], tmp_vip_expire_date,
				PI[playerid][pi_SKIN], PI[playerid][pi_CASH], PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE],
				PI[playerid][pi_STATE], PI[playerid][pi_INTERIOR], PI[playerid][pi_LOCAL_INTERIOR], PI[playerid][pi_FIGHT_STYLE], PI[playerid][pi_HEALTH], PI[playerid][pi_ARMOUR], PI[playerid][pi_GENDER],
				PI[playerid][pi_HUNGRY], PI[playerid][pi_THIRST], PI[playerid][pi_WANTED_LEVEL], PI[playerid][pi_POLICE_JAIL_TIME], PI[playerid][pi_POLICE_DUTY],
				PI[playerid][pi_POLICE_JAIL_ID], PI[playerid][pi_BANK_ACCOUNT], PI[playerid][pi_BANK_MONEY], PI[playerid][pi_PHONE_NUMBER],
				PI[playerid][pi_PHONE_STATE], PI[playerid][pi_PHONE_VISIBLE_NUMBER], PI[playerid][pi_GPS], PI[playerid][pi_MP3], PI[playerid][pi_PHONE_RESOLVER], PI[playerid][pi_SPEAKERS],
				PI[playerid][pi_MECHANIC_PIECES], PI[playerid][pi_FUEL_DRUM], PI[playerid][pi_SEED_MEDICINE], PI[playerid][pi_SEED_CANNABIS], PI[playerid][pi_SEED_CRACK], PI[playerid][pi_MEDICINE],
				PI[playerid][pi_CANNABIS], PI[playerid][pi_CRACK], PI[playerid][pi_CONFIG_SOUNDS], PI[playerid][pi_CONFIG_AUDIO], PI[playerid][pi_CONFIG_TIME], PI[playerid][pi_CONFIG_HUD],
				PI[playerid][pi_CONFIG_ADMIN], PI[playerid][pi_MUTE], PI[playerid][pi_PLACA_PD], tmp_crew, PI[playerid][pi_CREW_RANK],
				PI[playerid][pi_MECHANIC_KITS], PI[playerid][pi_MEDICAL_KITS], PI[playerid][pi_TRUCK_BONUS],
				PI[playerid][pi_ID]
		);
		mysql_tquery(handle_db, QUERY_BUFFER);
		return 1;
	}
	return 0;
}

CountPlayerVehicles(playerid)
{
	new count;
	if(PI[playerid][pi_ID])
	{
		for(new i = 0; i < MAX_VEHICLES; i ++)
		{
			if(PLAYER_VEHICLES[i][player_vehicle_VALID])
			{
				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					count ++;
					if(count >= MAX_SU_VEHICLES)
					{
						break;
					}
				}
			}
		}
	}
	return count;
}

CountPlayerProperties(playerid)
{
	new count;
	if(PI[playerid][pi_ID])
	{
		for(new i = 0; i < MAX_PROPERTIES; i ++)
		{
			if(PROPERTY_INFO[i][property_VALID])
			{
				if(PROPERTY_INFO[i][property_SOLD] && PROPERTY_INFO[i][property_OWNER_ID] == PI[playerid][pi_ID])
				{
					count ++;
					if(count >= MAX_SU_PROPERTIES)
					{
						break;
					}
				}
			}
		}
	}
	return count;
}

SavePlayerWorkLevels(playerid)
{
	if(!PI[playerid][pi_ID]) return 0;
	
	for(new i = 0; i != sizeof work_info; i ++)
	{
		if(!PLAYER_WORKS[playerid][i][pwork_SET] || !i) continue;
		mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET level = %d WHERE id_player = %d AND id_work = %d;", PLAYER_WORKS[playerid][i][pwork_LEVEL], PI[playerid][pi_ID], i);
		mysql_tquery(handle_db, QUERY_BUFFER);
	}
	return 1;
}

#define PlayerTask_Interval_Seconds 10
ptask PlayerTask[PlayerTask_Interval_Seconds * 1000](playerid)
{
	PI[playerid][pi_TIME_PLAYING] += PlayerTask_Interval_Seconds;
}

GetBootTypeName(type) {
	new name[24];
	switch(type) {
		case BOOT_TYPE_WEAPON: name = "Arma";
		case BOOT_TYPE_MEDICINES: name = "Medicamentos";
		case BOOT_TYPE_CANNABIS: name = "Marihuana";
		case BOOT_TYPE_CRACK: name = "Crack";
	}
	return name;
}

GetClosetTypeName(type) {
	new name[24];
	switch(type) {
		case CLOSET_TYPE_WEAPON: name = "Arma";
		case CLOSET_TYPE_MEDICINES: name = "Medicamentos";
		case CLOSET_TYPE_CANNABIS: name = "Marihuana";
		case CLOSET_TYPE_CRACK: name = "Crack";
	}
	return name;
}

forward ResetCombat(damagedid);
public ResetCombat(damagedid)
{
	PlayerTemp[damagedid][pt_COMBAT] = false;

	KillTimer(PlayerTemp[damagedid][pt_COMBAT_TIMER]);
	PlayerTemp[damagedid][pt_COMBAT_TIMER] = -1;

	TextDrawHideForPlayer(damagedid, Textdraws[textdraw_COMBAT_MODE]);
	
	SendClientMessagef(damagedid, -1, "Ya no estás en combate.");
	return 1;
}

stock HexToInt(const string[])
{
	if(string[0] == 0) return 0;
	new i, cur = 1, res = 0;
	for(i = strlen(string); i > 0; i --) 
	{
		if(string[i-1]<58) res = res + cur * (string[i - 1] - 48); 
		else res = res + cur *(string[i - 1] - 65 + 10);

		cur = cur * 16;
	}
	return res;
}

GetCrewTerritories(id)
{
	new
		count;

	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(TERRITORIES[i][territory_CREW_ID] == id) count++;
	}
	return count;
}

stock CountPolicesOnDuty() 
{
	new count = 0;
	LoopEx(i, MAX_PLAYERS, 0)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerTemp[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][WORK_POLICE][pwork_SET] && PlayerTemp[i][pt_WORKING_IN] == WORK_POLICE) 
				{
					count ++;
				}
			}
		}
	}
	return count;
}

hook OnPlayerKeyPressFinish(playerid) 
{
	if(pTemp(playerid)[pt_PLANTING]) 
	{
		pTemp(playerid)[pt_WORKING_IN] = WORK_NONE;
		pTemp(playerid)[pt_PLANTING] = false;
		pTemp(playerid)[pt_LAST_PLANT_TIME] = gettime();

		TogglePlayerControllableEx(playerid, true);
		ClearAnimations(playerid);

		//objeto planta: 2244
		new index = GetAvaiblePlantIndex();
		if(index == -1)
		{
			switch(seed_info[ pTemp(playerid)[pt_PLANTING_PLANT_SELECTED] ][seed_info_PLANT_TYPE])
			{
				case PLANT_TYPE_MEDICINE: PI[playerid][pi_SEED_MEDICINE] += plant_info[ pTemp(playerid)[pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
				case PLANT_TYPE_CANNABIS: PI[playerid][pi_SEED_CANNABIS] += plant_info[ pTemp(playerid)[pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
				case PLANT_TYPE_CRACK: PI[playerid][pi_SEED_CRACK] += plant_info[ pTemp(playerid)[pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
			}

			SendClientMessagef(playerid, -1, "No queda espacio para más plantas, te hemos devuelto las semillas. Prueba ms tarde.");
			return 1;
		}

		GetPlayerPos(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z]);
		GetPlayerFacingAngle(playerid, PI[playerid][pi_ANGLE]);
		PI[playerid][pi_POS_X] += (1.0 * floatsin(-PI[playerid][pi_ANGLE], degrees));
		PI[playerid][pi_POS_Y] += (1.0 * floatcos(-PI[playerid][pi_ANGLE], degrees));
		PI[playerid][pi_POS_Z] -= 0.75;

		PLANTS[index][plant_VALID] = true;
		PLANTS[index][plant_GROWING] = true;
		PLANTS[index][plant_INVISIBLE] = true;
		PLANTS[index][plant_GROWING_PROGRESS] = frandom(10.0, 8.0, 2);
		PLANTS[index][plant_TYPE] = pTemp(playerid)[pt_PLANTING_PLANT_SELECTED];
		PLANTS[index][plant_PLANTED_BY_ACCOUNT_ID] = PI[playerid][pi_ID];
		PLANTS[index][plant_IMMUNITY] = -1;

		format(PLANTS[index][plant_PLANTED_BY_NAME], 24, "%s", pTemp(playerid)[pt_NAME]);
		PLANTS[index][plant_OBJECT_ID] = CreateDynamicObject(2244, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], 0.0, 0.0, PI[playerid][pi_ANGLE], 0, 0);
		SetDynamicObjectMaterial(PLANTS[index][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0x00FFFFFF);

		new info[3];
		info[0] = OBJECT_TYPE_PLANT;
		info[1] = index;
		Streamer_SetArrayData(STREAMER_TYPE_OBJECT, PLANTS[index][plant_OBJECT_ID], E_STREAMER_EXTRA_ID, info);

		new label_str[256];
		if(seed_info[ PLANTS[index][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n{CCCCCC}Agricultor: %s\n\n{"#PRIMARY_COLOR"}(%.1f%%)", plant_info[ PLANTS[index][plant_TYPE] ][plant_info_NAME], PLANTS[index][plant_PLANTED_BY_NAME], PLANTS[index][plant_GROWING_PROGRESS]);
		else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n{CCCCCC}Agricultor: %s\n\n{"#PRIMARY_COLOR"}(%.1f%%)", plant_info[ PLANTS[index][plant_TYPE] ][plant_info_NAME], PLANTS[index][plant_PLANTED_BY_NAME], PLANTS[index][plant_GROWING_PROGRESS]);
		PLANTS[index][plant_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z] + 0.25, 10.0, .testlos = false, .interiorid = 0, .worldid = 0);

		KillTimer(PLANTS[index][plant_TIMER]);
		PLANTS[index][plant_TIMER] = SetTimerEx("GrowPlantUp", 5000, false, "d", index);

		PLAYER_WORKS[playerid][WORK_FARMER][pwork_LEVEL] ++;
		SendClientMessagef(playerid, -1, "Ahora espera a que la planta crezca, si pasan más de 5 minutos después de que la planta haya crecido se destruirá.");
		Streamer_Update(playerid);
		return Y_HOOKS_BREAK_RETURN_1;
	}
	else if(pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] != -1) {
		new tree = pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE];
		GetPlayerFacingAngle(playerid, PI[playerid][pi_ANGLE]);
		SetDynamicObjectRot(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID], LUMBER_TREES[ tree ][lumber_tree_RX], LUMBER_TREES[ tree ][lumber_tree_RY], PI[playerid][pi_ANGLE]);	
		MoveDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID], LUMBER_TREES[ tree ][lumber_tree_X], LUMBER_TREES[ tree ][lumber_tree_Y], LUMBER_TREES[ tree ][lumber_tree_Z] + 0.01, 0.0065, -85.0, 0.0, PI[playerid][pi_ANGLE]);
		RemovePlayerAttachedObject(playerid, 9);
		SetPlayerAttachedObject(playerid, 9, 341, 1, -0.172999, -0.165, -0.053999, 0.0, -7.599999, -9.6);
		
		KillTimer(pTemp(playerid)[pt_TIMERS][11]);
		pTemp(playerid)[pt_TIMERS][11] = SetTimerEx("ContinueTreeAnimation", 1400, false, "iif", playerid, tree, PI[playerid][pi_ANGLE]);
		
		ClearAnimations(playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		TogglePlayerControllableEx(playerid, true);
		return Y_HOOKS_BREAK_RETURN_1;
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerKeyPress(playerid, Float:percentage) {
	if(pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE] != -1) {
		new tree = pTemp(playerid)[pt_PLAYER_LUMBERJACK_TREE];
		SetPlayerArmedWeapon(playerid, 9);
		
		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Talando... {"#SILVER_COLOR"}(%.1f%%)", tree, percentage);
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
		
		KillTimer(pTemp(playerid)[pt_TIMERS][11]);
		pTemp(playerid)[pt_TIMERS][11] = SetTimerEx("LumberjackUp", 2000, false, "ii", playerid, tree);
		return Y_HOOKS_BREAK_RETURN_1;
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}

stock GetPlayerCameraRotation(playerid,&Float:rx,&Float:rz){
	new Float:mx,Float:my,Float:mz;
	GetPlayerCameraFrontVector(playerid,mx,my,mz);
	rx = CompressRotation(-(acos(mz)-90.0));
	rz = CompressRotation((atan2(my,mx)-90.0));
}

stock Float:CompressRotation(Float:rotation)
{
	return (rotation - floatround(rotation/360.0,floatround_floor)*360.0);
}

CountCrewPlayers(id_crew) 
{
    mysql_format(handle_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d;", id_crew);
    new count, Cache:result = mysql_query(handle_db, QUERY_BUFFER);
    cache_get_value_int(0, 0, count);
    cache_delete(result);
    return count;
}

const RPC_VehicleDestroy = 136;
IRPC:RPC_VehicleDestroy(playerid, BitStream:bs)
{
	if(ac_Info[CHEAT_DESTROY_VEHICLE][ac_Enabled]) 
	{
		new vehicleid;
		BS_ReadUint16(bs, vehicleid);

		if(vehicleid <= 0 || vehicleid >= MAX_VEHICLES)
		{
			return 0;
		}

		if(PI[playerid][pi_LEVEL] < 3)
		{
			if( (vehicleid == GetPlayerVehicleID(playerid) && GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == playerid) || (PLAYER_VEHICLES[vehicleid][player_vehicle_VALID] && PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) )
			{
				return 1;
			}
			return 0;
		}

		if(!IsVehicleStreamedIn(vehicleid, playerid))
		{
			return 0;
		}

		new interval = GetTickDiff(GetTickCount(), pTemp(playerid)[pt_LAST_VEHICLE_DESTROY]);
		if(interval < 500)
		{
			new current_gettime = gettime();
			if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_DESTROY_VEHICLE][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DESTROY_VEHICLE);
				else
				{
					if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DESTROY_VEHICLE][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_LAST_DETECTION] = current_gettime;
					if(PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DESTROY_VEHICLE][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DESTROY_VEHICLE);
				}
			}
			return 0;
		}
		pTemp(playerid)[pt_LAST_VEHICLE_DESTROY] = GetTickCount();
	}
    return 1;
}

GetVehicleComponentIndexFromId(vehicleid, id) 
{
	for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
	{
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i] == id) {
			return i;
		}
	}
	return -1;
}

GetTerritoryIndexById(id) 
{
	for(new i = 0; i != MAX_TERRITORIES; i ++) {
		if(TERRITORIES[i][territory_VALID] && TERRITORIES[i][territory_ID] == id) return i;
	}
	return -1;
}

stock GetNearVehicle(playerid, Float:fDis = 5.0)
{
	if(!IsPlayerConnected(playerid)) return INVALID_VEHICLE_ID;

	new vehicle = INVALID_VEHICLE_ID, Float:PosPlayer[3];
	GetPlayerPos(playerid, PosPlayer[0], PosPlayer[1], PosPlayer[2]);

	for(new i; i < MAX_VEHICLES; i++)
	{
		if(IsValidVehicle(i))
		{
			new Float:PosVehicle[3], Float:PosRelative[3], Float:tempDis;
			GetVehiclePos(i, PosVehicle[0], PosVehicle[1], PosVehicle[2]);

			for(new z; z < sizeof(PosVehicle); z++)
				PosRelative[z] = PosVehicle[z] - PosPlayer[z];
				
			tempDis = floatsqroot((floatpower(PosRelative[0], 2)) + (floatpower(PosRelative[1], 2)) + (floatpower(PosRelative[2], 2)));

			if(tempDis <= fDis)
			{
				fDis = tempDis;
				vehicle = i;
			}
		}
	}
	return vehicle;
}

#include "src/player_data.pwn"
#include "src/property_garage.pwn"
#include "src/admin_functions.pwn"
#include "src/world_time.pwn"
#include "src/body_weapons.pwn"
#include "src/speedo.pwn"
#include "src/taximeter.pwn"
#include "src/robbery.pwn"
#include "src/air_speedo.pwn"
#include "src/attachobjecttoobjectex.pwn"
#include "src/key_press.pwn"
#include "src/login.pwn"
#include "src/message.pwn"
#include "src/payday.pwn"
#include "src/drop_weapons.pwn"
#include "src/visible_items.pwn"
#include "src/boat_repair_points.pwn"
#include "src/ac_anticbug.pwn"
#include "src/ac_afkpos.pwn"
#include "src/police_pdoor_kick.pwn"
#include "src/graffiti.pwn"
#include "src/work_trafficker.pwn"
#include "src/sell_vehicles.pwn"
#include "src/info_message.pwn"
#include "src/work_trailer.pwn"
#include "src/mechanic_pieces.pwn"
#include "src/black_market.pwn"